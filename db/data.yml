
---
active_storage_attachments:
  columns:
  - id
  - name
  - record_type
  - record_id
  - blob_id
  - created_at
  records: 
  - - 4
    - image
    - Article
    - 21
    - 4
    - '2018-11-19 09:08:13.34892'
  - - 13
    - image
    - Article
    - 84
    - 13
    - '2018-12-08 15:33:59.726349'
  - - 14
    - image
    - Article
    - 85
    - 14
    - '2018-12-08 15:56:28.165118'
  - - 15
    - image
    - Article
    - 86
    - 15
    - '2018-12-08 16:51:33.030346'
  - - 16
    - image
    - Article
    - 87
    - 16
    - '2018-12-09 13:39:12.37256'
  - - 17
    - image
    - Article
    - 88
    - 17
    - '2018-12-10 07:09:04.559264'
  - - 18
    - image
    - Article
    - 89
    - 18
    - '2018-12-10 08:11:09.951922'
  - - 19
    - image
    - Article
    - 90
    - 19
    - '2018-12-10 09:21:55.306621'
  - - 20
    - image
    - Article
    - 91
    - 20
    - '2018-12-10 09:43:05.658789'
  - - 21
    - image
    - Article
    - 92
    - 21
    - '2018-12-16 00:55:53.543776'
  - - 23
    - image
    - Article
    - 94
    - 23
    - '2018-12-19 06:48:55.146533'
  - - 24
    - image
    - Article
    - 95
    - 24
    - '2018-12-24 12:48:18.683708'
  - - 25
    - image
    - Article
    - 97
    - 25
    - '2019-01-13 12:29:07.25193'
  - - 26
    - image
    - Article
    - 98
    - 26
    - '2019-01-13 13:41:28.699046'
  - - 27
    - image
    - Article
    - 99
    - 27
    - '2019-01-14 06:12:12.053736'
  - - 28
    - image
    - Article
    - 103
    - 28
    - '2019-01-21 08:08:26.638382'
  - - 30
    - image
    - Article
    - 104
    - 30
    - '2019-01-21 10:28:35.34994'
  - - 32
    - image
    - Article
    - 106
    - 32
    - '2019-02-03 08:56:12.795112'
  - - 33
    - image
    - Article
    - 108
    - 33
    - '2019-02-04 10:55:24.112926'
  - - 34
    - image
    - Article
    - 107
    - 34
    - '2019-02-04 10:56:55.759829'
  - - 35
    - image
    - Article
    - 111
    - 35
    - '2019-03-04 07:12:52.483581'
  - - 36
    - image
    - Article
    - 116
    - 36
    - '2019-03-08 04:14:28.115557'
  - - 37
    - image
    - Article
    - 115
    - 37
    - '2019-03-08 04:15:11.413596'
  - - 38
    - image
    - Article
    - 118
    - 38
    - '2019-03-08 07:56:22.623438'
  - - 40
    - image
    - Article
    - 123
    - 40
    - '2019-03-19 03:38:59.068355'
  - - 41
    - image
    - Article
    - 124
    - 41
    - '2019-03-21 13:45:27.250542'
  - - 42
    - image
    - Article
    - 129
    - 42
    - '2019-04-03 10:10:52.495'
  - - 43
    - image
    - Article
    - 130
    - 43
    - '2019-04-04 08:57:26.481541'
  - - 44
    - image
    - Article
    - 131
    - 44
    - '2019-04-04 08:59:06.297398'
  - - 45
    - image
    - Article
    - 132
    - 45
    - '2019-04-05 06:41:32.167993'
  - - 46
    - image
    - Article
    - 133
    - 46
    - '2019-04-05 09:48:24.395224'
  - - 47
    - image
    - Article
    - 134
    - 47
    - '2019-04-07 12:11:32.538646'
  - - 48
    - image
    - Article
    - 135
    - 48
    - '2019-04-07 15:15:35.758472'
  - - 49
    - image
    - Article
    - 140
    - 49
    - '2019-04-17 09:50:12.591248'
  - - 51
    - image
    - Article
    - 142
    - 51
    - '2019-04-20 13:51:23.627937'
  - - 52
    - image
    - Article
    - 144
    - 52
    - '2019-04-26 06:39:36.481066'
  - - 53
    - image
    - Article
    - 145
    - 53
    - '2019-05-07 06:22:14.886209'
  - - 54
    - image
    - Article
    - 146
    - 54
    - '2019-05-07 07:59:20.215279'
  - - 55
    - image
    - Article
    - 147
    - 55
    - '2019-05-07 09:04:53.549433'
  - - 56
    - image
    - Article
    - 151
    - 56
    - '2019-05-13 09:59:35.219956'
  - - 57
    - image
    - Article
    - 155
    - 57
    - '2019-05-16 08:38:50.589596'
  - - 58
    - image
    - Article
    - 161
    - 58
    - '2019-06-03 08:25:35.743828'
  - - 59
    - image
    - Article
    - 148
    - 59
    - '2019-06-08 08:44:22.05736'
  - - 60
    - image
    - Article
    - 149
    - 60
    - '2019-06-08 08:44:43.001913'
  - - 61
    - image
    - Article
    - 150
    - 61
    - '2019-06-08 08:44:59.483484'
  - - 62
    - image
    - Article
    - 156
    - 62
    - '2019-06-08 08:45:16.254665'
  - - 63
    - image
    - Article
    - 162
    - 63
    - '2019-06-08 08:45:32.375332'
  - - 64
    - image
    - Article
    - 169
    - 64
    - '2019-06-17 02:09:16.22708'
  - - 65
    - image
    - Article
    - 170
    - 65
    - '2019-06-25 10:29:07.846561'
  - - 66
    - image
    - Article
    - 171
    - 66
    - '2019-07-01 01:59:46.289833'
  - - 67
    - image
    - Article
    - 173
    - 67
    - '2019-07-09 06:38:35.577353'
  - - 68
    - image
    - Article
    - 174
    - 68
    - '2019-07-09 07:13:54.455472'
  - - 69
    - image
    - Article
    - 176
    - 69
    - '2019-07-14 10:00:58.918631'

---
active_storage_blobs:
  columns:
  - id
  - key
  - filename
  - content_type
  - metadata
  - byte_size
  - checksum
  - created_at
  records: 
  - - 4
    - TapyRDfz3Co9bo9R45tMdKFj
    - CCC9V9A9997_TP_V.jpg
    - image/jpeg
    - '{"identified":true,"analyzed":true}'
    - 227312
    - IqSt3hW6+mYWxd9FocGSUQ==
    - '2018-11-19 09:08:13.333818'
  - - 13
    - kQeLTznXwBs1NmdxDhupjgsj
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-08 15:33:59.720368'
  - - 14
    - H54bGnG6nSsVzonkysZfM6E8
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-08 15:56:28.162019'
  - - 15
    - VuYhCmHVFSfgRDHUrf9YnGY7
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-08 16:51:33.025516'
  - - 16
    - ckUV4nEWfnXvaL9JyHgfEgfD
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-09 13:39:12.341112'
  - - 17
    - 8eaN1c4UbyMZz5x5r3WJuvMw
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-10 07:09:04.53332'
  - - 18
    - CKzZZJHNLvtHjEwmSwkBFAVM
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-10 08:11:09.900255'
  - - 19
    - Txg1f3T7M7Q3oyDk8zjtNHd3
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-10 09:21:55.283572'
  - - 20
    - wwRc7tXpaQyM1bbpGiMffxqa
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-10 09:43:05.632922'
  - - 21
    - RLntuge8F8DnCXUnpPxfi9L7
    - mysql_Fotor.png
    - image/png
    - '{"identified":true,"width":394,"height":315,"analyzed":true}'
    - 129601
    - W25NCPKs85gtnmflbd5xvA==
    - '2018-12-16 00:55:53.523744'
  - - 23
    - GD3iZwsguvvuAjj3WdqNE4Mf
    - is_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":300,"height":200,"analyzed":true}'
    - 36992
    - oXlXcUkjusFrnCAGa5bbfA==
    - '2018-12-19 06:48:55.117847'
  - - 24
    - 697CD2S2Gqc5Y6vUZxY24j2N
    - spreadsheet.png
    - image/png
    - '{"identified":true,"width":1490,"height":848,"analyzed":true}'
    - 120187
    - I8ikInjefnPc8NZrLP+1Ow==
    - '2018-12-24 12:48:18.67815'
  - - 25
    - 8iU1vWQK21hpzNEBVtNb55YF
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2019-01-13 12:29:06.457391'
  - - 26
    - meyaBHsmmt79ST3QobgPQfVH
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2019-01-13 13:41:28.488422'
  - - 27
    - AD8B7AwhNXjqJ1aPZCM9WC67
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2019-01-14 06:12:11.255232'
  - - 28
    - XfgE4ZARYhPKntfK1k1i7T5d
    - スクリーンショット 2019-01-21 17.04.33.png
    - image/png
    - '{"identified":true,"width":1144,"height":730,"analyzed":true}'
    - 78135
    - "+Y6yTmxuC397nQbmMdZQfg=="
    - '2019-01-21 08:08:26.628031'
  - - 30
    - r9Bd9dm65w6KmimUD3xYr6Np
    - スクリーンショット 2019-01-21 19.27.59.png
    - image/png
    - '{"identified":true,"width":1140,"height":688,"analyzed":true}'
    - 48988
    - 6KZx16NrqIr/hRG12NVGdw==
    - '2019-01-21 10:28:35.340075'
  - - 32
    - 35Kfaqhtow9dXdxbuUfv9EpV
    - スクリーンショット 2019-02-03 17.55.41.png
    - image/png
    - '{"identified":true,"width":1140,"height":476,"analyzed":true}'
    - 115178
    - 3J4/A2HHyOQqODbl2xyATg==
    - '2019-02-03 08:56:12.752475'
  - - 33
    - DqBXqDD6KWF9kjXRiyW5M695
    - スクリーンショット 2019-02-04 19.50.50.png
    - image/png
    - '{"identified":true,"width":1140,"height":674,"analyzed":true}'
    - 75806
    - cfu6pxHPRGGFREjG8tBovA==
    - '2019-02-04 10:55:24.034099'
  - - 34
    - jn6pG1XbRPuXEvJhg6K4rTyy
    - スクリーンショット 2019-02-04 19.02.20.png
    - image/png
    - '{"identified":true,"width":1142,"height":478,"analyzed":true}'
    - 61724
    - mMoXsyq05kc5sK3+3Mh3PQ==
    - '2019-02-04 10:56:55.752125'
  - - 35
    - 6t6Xgj62TdwYM6qhRyBQEnLy
    - is_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":300,"height":200,"analyzed":true}'
    - 36992
    - oXlXcUkjusFrnCAGa5bbfA==
    - '2019-03-04 07:12:48.677165'
  - - 36
    - AWoi1cWPBWTwdEzQeWrEJURZ
    - pg.png
    - image/png
    - '{"identified":true,"width":335,"height":283,"analyzed":true}'
    - 5374
    - 6ZBCKPidiEUY1XIZPqJXQQ==
    - '2019-03-08 04:14:28.108038'
  - - 37
    - LXs2sdY7mYmayxnqt2YyZU9G
    - pg.png
    - image/png
    - '{"identified":true,"width":335,"height":283,"analyzed":true}'
    - 5374
    - 6ZBCKPidiEUY1XIZPqJXQQ==
    - '2019-03-08 04:15:11.410184'
  - - 38
    - MpgHLniVwdLbmQ66gqBGz8vx
    - is_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":300,"height":200,"analyzed":true}'
    - 36992
    - oXlXcUkjusFrnCAGa5bbfA==
    - '2019-03-08 07:56:22.57014'
  - - 40
    - U3F5ojBS7mNJ5dLw6QDc3g3Q
    - pwa.png
    - image/png
    - '{"identified":true,"width":1558,"height":1030,"analyzed":true}'
    - 110483
    - tKe4dn9qshAnVlFcvlXOlw==
    - '2019-03-19 03:38:59.033678'
  - - 41
    - ivbWDR9Gdv2NwzZJ3ezCf5T1
    - pg.png
    - image/png
    - '{"identified":true,"width":335,"height":283,"analyzed":true}'
    - 5374
    - 6ZBCKPidiEUY1XIZPqJXQQ==
    - '2019-03-21 13:45:27.222214'
  - - 42
    - MjqJ952BLtXZWhcn42nkqQYY
    - スクリーンショット 2019-04-03 19.04.55.png
    - image/png
    - '{"identified":true,"width":2556,"height":1236,"analyzed":true}'
    - 482084
    - WVy9HOnFijZKinMPxNVoDg==
    - '2019-04-03 10:10:52.487264'
  - - 43
    - ZVegeFSNaTgYAYinrNTqBYC2
    - スクリーンショット 2019-04-04 17.55.56.png
    - image/png
    - '{"identified":true,"width":2560,"height":1228,"analyzed":true}'
    - 254722
    - ReUvF9fLPm175z0vsVyYRA==
    - '2019-04-04 08:57:26.459849'
  - - 44
    - D3HFp6VfA6pF5sQHoG16fZPW
    - スクリーンショット 2019-04-04 17.57.58.png
    - image/png
    - '{"identified":true,"width":2560,"height":1278,"analyzed":true}'
    - 286264
    - N2BXWEH8bc7Tt9arbRHbeQ==
    - '2019-04-04 08:59:06.291847'
  - - 45
    - ZuwRVzFxwVi5c6XHfRMxDszZ
    - スクリーンショット 2019-04-05 15.39.49.png
    - image/png
    - '{"identified":true,"width":2560,"height":1232,"analyzed":true}'
    - 253139
    - L13MAOlC2lj36/FJTz0szA==
    - '2019-04-05 06:41:32.120805'
  - - 46
    - X9BG7dhwRXy4waPecYSLeqdF
    - スクリーンショット 2019-04-05 18.47.46.png
    - image/png
    - '{"identified":true,"width":2554,"height":1292,"analyzed":true}'
    - 485808
    - DMHeLBfU3NINzFx7WY/91w==
    - '2019-04-05 09:48:24.384339'
  - - 47
    - HzBr96h8cS5uT8o8wY4u5BTr
    - スクリーンショット 2019-04-07 21.06.38.png
    - image/png
    - '{"identified":true,"width":2560,"height":1224,"analyzed":true}'
    - 286051
    - tuZFIYTR1ixWMDoHg91SjQ==
    - '2019-04-07 12:11:32.467781'
  - - 48
    - Jb3DNJvyhJVSbWJhH4zNu4ST
    - スクリーンショット 2019-04-08 0.15.07.png
    - image/png
    - '{"identified":true,"width":2560,"height":1216,"analyzed":true}'
    - 565179
    - RhGI1/DefR6AI0w9282k/Q==
    - '2019-04-07 15:15:35.752539'
  - - 49
    - okFh36d1JAEvoLEJFTJtwfR7
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2019-04-17 09:50:12.58416'
  - - 50
    - u4udcQyXs2UMEEgmnM7Dvz3r
    - mysql_image.jpg
    - image/jpeg
    - '{"identified":true,"width":1920,"height":1080,"analyzed":true}'
    - 53937
    - jfL911UL5eB+ZljTuviMIg==
    - '2019-04-20 13:43:49.464073'
  - - 51
    - zc65ATKmpghtYfKqr38q8dP1
    - mysql.png
    - image/png
    - '{"identified":true,"width":394,"height":315,"analyzed":true}'
    - 129601
    - W25NCPKs85gtnmflbd5xvA==
    - '2019-04-20 13:51:23.613763'
  - - 52
    - SfwkE3KFszi183FnCvghEsjM
    - con-VPC-sec-grp.png
    - image/png
    - '{"identified":true,"width":448,"height":394,"analyzed":true}'
    - 31664
    - 5Y32eAvVo/CUtzS/KyPd8A==
    - '2019-04-26 06:39:36.471388'
  - - 53
    - Cw9Cuor5DM5yaHKGYAUb61H8
    - python.png
    - image/png
    - '{"identified":true,"width":900,"height":506,"analyzed":true}'
    - 61881
    - W5Tm6quiHlm0po50wi1ULQ==
    - '2019-05-07 06:22:14.879098'
  - - 54
    - FKMiAuTGWdW5bMBApHTuMWH3
    - python.png
    - image/png
    - '{"identified":true,"width":900,"height":506,"analyzed":true}'
    - 61881
    - W5Tm6quiHlm0po50wi1ULQ==
    - '2019-05-07 07:59:20.19928'
  - - 55
    - wR6dafQvUVix3TUGiLXz7enw
    - python.png
    - image/png
    - '{"identified":true,"width":900,"height":506,"analyzed":true}'
    - 61881
    - W5Tm6quiHlm0po50wi1ULQ==
    - '2019-05-07 09:04:53.534643'
  - - 56
    - AYh8JSfhXG465zYXvYMrWbr2
    - rds.png
    - image/png
    - '{"identified":true,"width":1420,"height":1152,"analyzed":true}'
    - 96007
    - 2tC5xC+cO1jqXkViXbxzSQ==
    - '2019-05-13 09:59:35.212103'
  - - 57
    - nqmYTQdcRcXN3mz3VCgMKV6b
    - スクリーンショット 2019-05-16 17.30.02.png
    - image/png
    - '{"identified":true,"width":2560,"height":1218,"analyzed":true}'
    - 334767
    - Qd6IbJoR1C5ut+kiIMtUvA==
    - '2019-05-16 08:38:50.57529'
  - - 58
    - gW5GXTLK5oTQEpigoDEbe796
    - server.png
    - image/png
    - '{"identified":true,"width":671,"height":321,"analyzed":true}'
    - 39587
    - WiY9qhluqW0e6yZa8IgOmA==
    - '2019-06-03 08:25:35.736718'
  - - 59
    - bMmSvS1LMW5SgaYiD4iFMyQe
    - スクリーンショット 2019-06-08 17.43.43.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-06-08 08:44:22.04963'
  - - 60
    - t652M8Fh8PDprJyW9akdczEy
    - スクリーンショット 2019-06-08 17.43.43.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-06-08 08:44:42.998933'
  - - 61
    - SHUW5BpR7VKsPudF91rhnrYN
    - スクリーンショット 2019-06-08 17.43.43.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-06-08 08:44:59.480707'
  - - 62
    - kXmxQhRTg8ZeT2HiP51STBGT
    - スクリーンショット 2019-06-08 17.43.43.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-06-08 08:45:16.251574'
  - - 63
    - t6Cb4bjEr9UjKmRnrJWWbbyP
    - スクリーンショット 2019-06-08 17.43.43.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-06-08 08:45:32.37088'
  - - 64
    - unSmYX5zuoQRMtPevTtG7r2Z
    - python.png
    - image/png
    - '{"identified":true,"width":900,"height":506,"analyzed":true}'
    - 61881
    - W5Tm6quiHlm0po50wi1ULQ==
    - '2019-06-17 02:09:16.221039'
  - - 65
    - LTbMkmLYoWcp5ReUw5zhvniK
    - スクリーンショット 2019-06-08 17.43.43.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-06-25 10:29:07.837637'
  - - 66
    - DCiXiGSiUJhU8AFpNtzVWVcb
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2019-07-01 01:59:46.283548'
  - - 67
    - 2VWJz3YTP6NJgCDfGXghfjua
    - certbot_ec2.jpg
    - image/jpeg
    - '{"identified":true,"width":540,"height":411,"analyzed":true}'
    - 23381
    - T8wNIVMisld1LYGb4Sa3Lg==
    - '2019-07-09 06:38:35.5303'
  - - 68
    - WiUGn1DcgpnrjwwYGp8oAp6t
    - sampleinfra.png
    - image/png
    - '{"identified":true,"width":2560,"height":1292,"analyzed":true}'
    - 351619
    - bNlaXv16LuGyxBWiKeQq2g==
    - '2019-07-09 07:13:54.446461'
  - - 69
    - x1NLSLiRZPkQ73ds4Mc9zQo6
    - ML.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-07-14 10:00:58.884072'

---
ar_internal_metadata:
  columns:
  - key
  - value
  - created_at
  - updated_at
  records: 
  - - environment
    - production
    - '2018-11-12 10:16:28.781674'
    - '2019-03-21 07:29:42.146279'

---
articles:
  columns:
  - id
  - title
  - body
  - created_at
  - updated_at
  records: 
  - - 5
    - devise認証
    - "<h1>はじめに</h1><p>Rails5で再検証版です。<br>以下のRails4のときのやつを現状（2016/11/12, 13）のバージョンで確認して、一部バージョン上がってうまく動かないところを修正したりした感じです。<br><a
      href=\"http://qiita.com/cigalecigales/items/73d7bd7ec59a001ccd74\">[<em>Rails</em>]
      deviseの使い方</a></p><div data-lang=\"text\"><pre>【前回】\r\nrails : 4.2.0\r\nruby
      \ : 2.2.0\r\ndevise: 3.4.1\r\n\r\n&darr;\r\n\r\n【今回】\r\nrails : 5.0.0.1\r\nruby
      \ : 2.3.1\r\ndevise: 4.2.0</pre></div><p>あと、上の記事で最後に「全部まとめきれてないので、忘れないうちにちょっとずつ追加していこうと思います。」とか書いていながら全く追加することはなかったので、追加しようと思ってたものをちょっとだけ思い出して追加したバージョンです。</p><h1><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#devise%E3%81%A8%E3%81%AF\"></a>deviseとは</h1><p>ユーザー登録して、送られてきたメールのリンクをクリックして本登録して、ログインして、パスワード忘れたら再設定して、何回もログインミスったらアカウントロックして&hellip;などといった認証系アプリに必要な機能を簡単に追加できる便利なgemです。</p><h1><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#devise%E3%81%AE%E5%B0%8E%E5%85%A5\"></a>deviseの導入</h1><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-gem%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"></a>1.
      gemのインストール</h2><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"></a>1.
      プロジェクトの作成</h3><p>新しいプロジェクトを作ります。</p><div data-lang=\"bash\"><pre>$ rails new
      devise_rails5\r\n$ cd devise_rails5</pre></div><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-gemfile%E3%81%AE%E7%B7%A8%E9%9B%86%E3%81%A8%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"></a>2.
      Gemfileの編集とインストール</h3><p>以下ファイルに<code>devise</code>と<code>omniauth-twitter</code>を追加します。</p><div
      data-lang=\"rb\">Gemfile<pre>source &#39;https://rubygems.org&#39;\r\n\r\n(省略)...\r\n\r\n#
      Devise\r\ngem &#39;devise&#39;\r\ngem &#39;omniauth-twitter&#39;\r\n\r\n</pre></div><p>gemをインストール。</p><div
      data-lang=\"bash\"><pre>$ bundle install</pre></div><h2><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-devise%E3%81%AE%E8%A8%AD%E5%AE%9A\"></a>2.
      deviseの設定</h2><p>devise関連ファイルを追加。<br>すると以下のような英文が表示されます。1から4まで順番に見ていきます。</p><div
      data-lang=\"bash\"><pre>$ rails g devise:install\r\n      create  config/initializers/devise.rb\r\n
      \     create  config/locales/devise.en.yml\r\n===============================================================================\r\n\r\nSome
      setup you must do manually if you haven&#39;t yet:\r\n\r\n  1. Ensure you have
      defined default url options in your environments files. Here\r\n     is an example
      of default_url_options appropriate for a development environment\r\n     in
      config/environments/development.rb:\r\n\r\n       config.action_mailer.default_url_options
      = { host: &#39;localhost&#39;, port: 3000 }\r\n\r\n     In production, :host
      should be set to the actual host of your application.\r\n\r\n  2. Ensure you
      have defined root_url to *something* in your config/routes.rb.\r\n     For example:\r\n\r\n
      \      root to: &quot;home#index&quot;\r\n\r\n  3. Ensure you have flash messages
      in app/views/layouts/application.html.erb.\r\n     For example:\r\n\r\n       &lt;p
      class=&quot;notice&quot;&gt;&lt;%= notice %&gt;&lt;/p&gt;\r\n       &lt;p class=&quot;alert&quot;&gt;&lt;%=
      alert %&gt;&lt;/p&gt;\r\n\r\n  4. You can copy Devise views (for customization)
      to your app by running:\r\n\r\n       rails g devise:views\r\n\r\n===============================================================================</pre></div><p><strong>1.
      デフォルトURLの指定</strong><br>英文の例に書いてあった<code>config.action_mailer.default_url_options
      = { host: &#39;localhost&#39;, port: 3000 }</code>を以下のファイルに追加しました。<br><code>config.action_mailer.default_url_options
      = { host: &#39;localhost:3000&#39; }</code>でもOKです。</p><div data-lang=\"rb\">config/environments/development.rb<pre>Rails.application.configure
      do\r\n  # Settings specified here will take precedence over those in config/application.rb.\r\n\r\n
      \ (省略)...\r\n\r\n  # mailer setting\r\n  config.action_mailer.default_url_options
      = { host: &#39;localhost&#39;, port: 3000 }\r\nend</pre></div><p><strong>2.
      root_urlの指定</strong><br>1番で指定した<em><a href=\"http://localhost:3000/\" rel=\"nofollow
      noopener\" target=\"_blank\">http://localhost:3000/</a></em>にアクセスした際に表示されるページを指定します。<br>現状ページは1つも作っていないため、先に追加します。</p><p>Pagesコントローラーと、indexページとshowページを追加してみます。</p><div
      data-lang=\"bash\"><pre>$ rails g controller Pages index show</pre></div><p>routes.rbに以下を指定します。</p><div
      data-lang=\"rb\">config/routes.rb<pre>Rails.application.routes.draw do\r\n  root
      &#39;pages#index&#39;\r\n  get &#39;pages/show&#39;\r\n  (省略)...\r\nend</pre></div><p><strong>3.
      flashメッセージの設定</strong><br>ログインした時などに上の方に「ログインしました」みたいなメッセージが出るようにします。<br>以下のファイルの<code>&lt;body&gt;</code>タグのすぐ下に指定されたタグを挿入します。</p><div
      data-lang=\"erb\">app/views/layouts/application.html.erb<pre>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;
      \r\n &lt;head&gt;\r\n  &lt;title&gt;DeviseRails5&lt;/title&gt;\r\n  &lt;%= csrf_meta_tags
      %&gt;\r\n\r\n  &lt;%= stylesheet_link_tag    &#39;application&#39;, media: &#39;all&#39;,
      &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&gt;\r\n  &lt;%= javascript_include_tag
      &#39;application&#39;, &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&gt;\r\n
      &lt;/head&gt;\r\n &lt;body&gt;\r\n  &lt;p class=&quot;notice&quot;&gt;&lt;%=
      notice %&gt;&lt;/p&gt;\r\n  &lt;p class=&quot;alert&quot;&gt;&lt;%= alert %&gt;&lt;/p&gt;\r\n\r\n
      \ &lt;%= yield %&gt;\r\n\r\n &lt;/body&gt; \r\n&lt;/html&gt;</pre></div><p><strong>4.
      DeviseのViewを生成</strong><br>Deviseの導入で追加されるViewは、以下のコマンドを実行しなければデザインを変更できないので、デザインをカスタマイズするためにも実行します。</p><div
      data-lang=\"bash\"><pre>$ rails g devise:views</pre></div><p>すると以下の様なファイルが生成されます。</p><div
      data-lang=\"bash\"><pre>app/views/devise/shared/_links.html.erb (リンク用パーシャル)\r\napp/views/devise/confirmations/new.html.erb
      (認証メールの再送信画面)\r\napp/views/devise/passwords/edit.html.erb (パスワード変更画面)\r\napp/views/devise/passwords/new.html.erb
      (パスワードを忘れた際、メールを送る画面)\r\napp/views/devise/registrations/edit.html.erb (ユーザー情報変更画面)\r\napp/views/devise/registrations/new.html.erb
      (ユーザー登録画面)\r\napp/views/devise/sessions/new.html.erb (ログイン画面)\r\napp/views/devise/unlocks/new.html.erb
      (ロック解除メール再送信画面)\r\napp/views/devise/mailer/confirmation_instructions.html.erb
      (メール用アカウント認証文)\r\napp/views/devise/mailer/password_change.html.erb （メール用パスワード変更完了文）\r\napp/views/devise/mailer/reset_password_instructions.html.erb
      (メール用パスワードリセット文)\r\napp/views/devise/mailer/unlock_instructions.html.erb (メール用ロック解除文)</pre></div><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#3-user%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E8%A8%AD%E5%AE%9A\"></a>3.
      Userモデルの設定</h2><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-user%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90\"></a>1.
      Userモデルの作成</h3><p>以下を実行。</p><div data-lang=\"bash\"><pre>$ rails g devise User</pre></div><p>マイグレーションファイルができます。<br>デフォルトではこんな感じになってます。</p><div
      data-lang=\"rb\">db/migrate/20161112121754_devise_create_users.rb<pre>class
      DeviseCreateUsers &lt; ActiveRecord::Migration[5.0]\r\n  def change\r\n    create_table
      :users do |t|\r\n      ## Database authenticatable\r\n      t.string :email,
      \             null: false, default: &quot;&quot;\r\n      t.string :encrypted_password,
      null: false, default: &quot;&quot;\r\n\r\n      ## Recoverable\r\n      t.string
      \  :reset_password_token\r\n      t.datetime :reset_password_sent_at\r\n\r\n
      \     ## Rememberable\r\n      t.datetime :remember_created_at\r\n\r\n      ##
      Trackable\r\n      t.integer  :sign_in_count, default: 0, null: false\r\n      t.datetime
      :current_sign_in_at\r\n      t.datetime :last_sign_in_at\r\n      t.string   :current_sign_in_ip\r\n
      \     t.string   :last_sign_in_ip\r\n\r\n      ## Confirmable\r\n      # t.string
      \  :confirmation_token\r\n      # t.datetime :confirmed_at\r\n      # t.datetime
      :confirmation_sent_at\r\n      # t.string   :unconfirmed_email # Only if using
      reconfirmable\r\n\r\n      ## Lockable\r\n      # t.integer  :failed_attempts,
      default: 0, null: false # Only if lock strategy is :failed_attempts\r\n      #
      t.string   :unlock_token # Only if unlock strategy is :email or :both\r\n      #
      t.datetime :locked_at\r\n\r\n\r\n      t.timestamps null: false\r\n    end\r\n\r\n
      \   add_index :users, :email,                unique: true\r\n    add_index :users,
      :reset_password_token, unique: true\r\n    # add_index :users, :confirmation_token,
      \  unique: true\r\n    # add_index :users, :unlock_token,         unique: true\r\n
      \ end\r\nend</pre></div><p>Userモデルはこんな感じになっています。<br>デフォルトでは<code>database_authenticatable</code>、<code>registerable</code>、<code>recoverable</code>、<code>rememberable</code>、<code>trackable</code>、<code>validatable</code>が使えるようになっています。</p><div
      data-lang=\"rb\">app/models/user.rb<pre>class User &lt; ApplicationRecord\r\n
      \ # Include default devise modules. Others available are:\r\n  # :confirmable,
      :lockable, :timeoutable and :omniauthable\r\n  devise :database_authenticatable,
      :registerable,\r\n         :recoverable, :rememberable, :trackable, :validatable\r\nend</pre></div><h3><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-devise%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E6%A6%82%E8%A6%81\"></a>2.
      deviseモジュール概要</h3><p>各モジュールについて以下に紹介します。</p><table><thead><tr><th>機能</th><th>概要</th></tr></thead><tbody><tr><td>database_authenticatable</td><td>サインイン時にユーザーの正当性を検証するためにパスワードを暗号化してDBに登録します。認証方法としてはPOSTリクエストかHTTP
      Basic認証が使えます。</td></tr><tr><td>registerable</td><td>登録処理を通してユーザーをサインアップします。また、ユーザーに自身のアカウントを編集したり削除することを許可します。</td></tr><tr><td>recoverable</td><td>パスワードをリセットし、それを通知します。</td></tr><tr><td>rememberable</td><td>保存されたcookieから、ユーザーを記憶するためのトークンを生成・削除します。</td></tr><tr><td>trackable</td><td>サインイン回数や、サインイン時間、IPアドレスを記録します。</td></tr><tr><td>validatable</td><td>Emailやパスワードのバリデーションを提供します。独自に定義したバリデーションを追加することもできます。</td></tr><tr><td>confirmable</td><td>メールに記載されているURLをクリックして本登録を完了する、といったよくある登録方式を提供します。また、サインイン中にアカウントが認証済みかどうかを検証します。</td></tr><tr><td>lockable</td><td>一定回数サインインを失敗するとアカウントをロックします。ロック解除にはメールによる解除か、一定時間経つと解除するといった方法があります。</td></tr><tr><td>timeoutable</td><td>一定時間活動していないアカウントのセッションを破棄します。</td></tr><tr><td>omniauthable</td><td><a
      href=\"https://github.com/intridea/omniauth\" rel=\"nofollow noopener\" target=\"_blank\"><em>intridea/omniauth</em></a>をサポートします。TwitterやFacebookなどの認証を追加したい場合はこれを使用します。</td></tr></tbody></table><h3><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#3-user%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E7%B7%A8%E9%9B%86\"></a>3.
      Userモデルの編集</h3><p>今回はデフォルトではないものも触ってみたいと思うので全部入れてみます。<br>Twitter認証を使うのでTwitterを指定しています。</p><div
      data-lang=\"rb\">app/models/user.rb<pre>class User &lt; ApplicationRecord\r\n
      \ # Include default devise modules. Others available are:\r\n  # :confirmable,
      :lockable, :timeoutable and :omniauthable\r\n  devise :database_authenticatable,
      :registerable,\r\n         :recoverable, :rememberable, :trackable, :validatable,\r\n
      \        :confirmable, :lockable, :timeoutable, :omniauthable, omniauth_providers:
      [:twitter]\r\nend</pre></div><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#4-%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%B7%A8%E9%9B%86\"></a>4.
      マイグレーションファイルの編集</h3><p>上に合わせて使用モジュールに対応する部分のコメントアウトを外します。今回は全部使うので全部外します。</p><div
      data-lang=\"rb\">db/migrate/20161112121754_devise_create_users.rb<pre>class
      DeviseCreateUsers &lt; ActiveRecord::Migration[5.0]\r\n  def change\r\n    create_table
      :users do |t|\r\n      ## Database authenticatable\r\n      t.string :email,
      \             null: false, default: &quot;&quot;\r\n      t.string :encrypted_password,
      null: false, default: &quot;&quot;\r\n\r\n      ## Recoverable\r\n      t.string
      \  :reset_password_token\r\n      t.datetime :reset_password_sent_at\r\n\r\n
      \     ## Rememberable\r\n      t.datetime :remember_created_at\r\n\r\n      ##
      Trackable\r\n      t.integer  :sign_in_count, default: 0, null: false\r\n      t.datetime
      :current_sign_in_at\r\n      t.datetime :last_sign_in_at\r\n      t.string   :current_sign_in_ip\r\n
      \     t.string   :last_sign_in_ip\r\n\r\n      ## Confirmable\r\n      t.string
      \  :confirmation_token\r\n      t.datetime :confirmed_at\r\n      t.datetime
      :confirmation_sent_at\r\n      t.string   :unconfirmed_email # Only if using
      reconfirmable\r\n\r\n      ## Lockable\r\n      t.integer  :failed_attempts,
      default: 0, null: false # Only if lock strategy is :failed_attempts\r\n      t.string
      \  :unlock_token # Only if unlock strategy is :email or :both\r\n      t.datetime
      :locked_at\r\n\r\n\r\n      t.timestamps null: false\r\n    end\r\n\r\n    add_index
      :users, :email,                unique: true\r\n    add_index :users, :reset_password_token,
      unique: true\r\n    add_index :users, :confirmation_token,   unique: true\r\n
      \   add_index :users, :unlock_token,         unique: true\r\n  end\r\nend</pre></div><h3><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#5-omniauth-twitter%E7%94%A8%E3%82%AB%E3%83%A9%E3%83%A0%E3%81%AE%E8%BF%BD%E5%8A%A0\"></a>5.
      omniauth-twitter用カラムの追加</h3><p>ついでにomniauth-twitterで使う<code>provider</code>と<code>uid</code>、それとTwitter認証の場合はアカウント名を保存しておきたいので<code>username</code>もUserテーブルに追加します。</p><div
      data-lang=\"bash\"><pre>$ rails g migration add_columns_to_users provider uid
      username</pre></div><p>以下のようなマイグレーションファイルができます。</p><div data-lang=\"rb\">db/migrate/20161112122634_add_columns_to_users.rb<pre>class
      AddColumnsToUsers &lt; ActiveRecord::Migration[5.0]\r\n  def change\r\n    add_column
      :users, :provider, :string\r\n    add_column :users, :uid, :string\r\n    add_column
      :users, :username, :string\r\n  end\r\nend</pre></div><p>ここまで出来たら以下を実行します。</p><div
      data-lang=\"bash\"><pre>$ rake db:migrate</pre></div><h2><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#4-view%E3%81%AE%E7%B7%A8%E9%9B%86\"></a>4.
      viewの編集</h2><p>以下のファイルを編集して、ページ上部にメニューが出るようにします。<br><code>user_signed_in?</code>はdeviseのHelperメソッドです。<br>ログインしているかしてないかで上部のメニューの表示が変わるようになります。<br><code>current_user</code>で現在サインインしているユーザーの情報を取得できます。</p><div
      data-lang=\"erb\">app/views/layouts/application.html.erb<pre>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n
      \   &lt;head&gt;\r\n        &lt;title&gt;DeviseRails5&lt;/title&gt;\r\n        &lt;%=
      csrf_meta_tags %&gt;\r\n\r\n        &lt;%= stylesheet_link_tag    &#39;application&#39;,
      media: &#39;all&#39;, &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&gt;\r\n
      \       &lt;%= javascript_include_tag &#39;application&#39;, &#39;data-turbolinks-track&#39;:
      &#39;reload&#39; %&gt;\r\n    &lt;/head&gt;\r\n\r\n    &lt;body&gt;\r\n        &lt;header&gt;\r\n
      \           &lt;nav&gt;\r\n                &lt;% if user_signed_in? %&gt;\r\n
      \               &lt;strong&gt;&lt;%= link_to current_user.username, pages_show_path
      %&gt;&lt;/strong&gt;\r\n                &lt;%= link_to &#39;プロフィール変更&#39;, edit_user_registration_path
      %&gt;\r\n                &lt;%= link_to &#39;ログアウト&#39;, destroy_user_session_path,
      method: :delete %&gt;\r\n            &lt;% else %&gt;\r\n                &lt;%=
      link_to &#39;サインアップ&#39;, new_user_registration_path %&gt;\r\n                &lt;%=
      link_to &#39;ログイン&#39;, new_user_session_path %&gt;\r\n                &lt;%
      end %&gt;\r\n            &lt;/nav&gt;\r\n        &lt;/header&gt;\r\n\r\n        &lt;p
      class=&quot;notice&quot;&gt;&lt;%= notice %&gt;&lt;/p&gt;\r\n        &lt;p class=&quot;alert&quot;&gt;&lt;%=
      alert %&gt;&lt;/p&gt;\r\n\r\n        &lt;%= yield %&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;</pre></div><p>以下の2ページも修正。<br>indexの方がトップページ、showの方がログインしているユーザー用のページになる予定です。</p><div
      data-lang=\"erb\">app/views/pages/index.html.erb<pre>&lt;h1&gt;ようこそ&lt;/h1&gt;\r\n&lt;p&gt;トップページです。&lt;/p&gt;</pre></div><div
      data-lang=\"erb\">app/views/pages/show.html.erb<pre>&lt;h1&gt;こんにちは、&lt;%= current_user.username
      %&gt;さん&lt;/h1&gt;\r\n&lt;p&gt;ユーザー用ページです。&lt;/p&gt;</pre></div><p>サーバーを立ち上げて、「サインアップ」を押下すると、<code>app/models/user.rb</code>で<code>omniauthable</code>を設定しているのに何の設定もしていないので現状ではエラーになります。<br><a
      href=\"https://camo.qiitausercontent.com/f0a05b1c5d323a8c6c63055b81e4588a5e97a189/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f33373132376666352d386433362d323766622d373139382d3530336463636239643761652e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/ec125982-6b52-41d7-ae7c-517ba5f3b5e3\"
      alt=\"エラー.png\" class=\"fr-fic fr-dii\"></a></p><p><code>omniauthable</code>を設定していない場合はサインアップページが表示されます。</p><h1><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#twitter%E3%81%A7%E8%AA%8D%E8%A8%BC%E3%81%99%E3%82%8B\"></a>Twitterで認証する</h1><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-%E8%A8%AD%E5%AE%9A\"></a>1.
      設定</h2><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-twitter-developer%E3%81%AE%E7%99%BB%E9%8C%B2\"></a>1.
      Twitter Developerの登録</h3><p><a href=\"https://apps.twitter.com/\" rel=\"nofollow
      noopener\" target=\"_blank\"><em>Twitter Developer</em></a>にアクセスし、<strong>Create
      New App</strong>をクリックし（ツイッターにログインしてないとボタンが出ません）、情報を適当の入力にします。<br><a href=\"https://camo.qiitausercontent.com/e04815f122b2434eccfb51030ccb4a823705258e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f30353163656138372d313665302d616465322d353962652d3063653063366464613636372e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/64012f67-2b10-4efd-ba83-882d161b7495\"
      alt=\"Twitterアプリ登録.png\" class=\"fr-fic fr-dii\"></a></p><p>作成したプロジェクトを開き、<strong>Settings</strong>タブの下の方の<strong>Allow
      this application to be used to Sign in with Twitter</strong>にチェックが入っていることを確認します。</p><h3><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%B7%A8%E9%9B%86\"></a>2.
      設定ファイルの編集</h3><p><strong>Keys and Access Tokens</strong>タブを開き、<strong>Consumer
      Key (API Key)</strong>と<strong>Consumer Secret (API Secret)</strong>を以下の該当箇所にコピーして貼り付けます。</p><div
      data-lang=\"rb\">config/initializers/devise.rb<pre>Devise.setup do |config|\r\n
      \ # The secret key used by Devise. Devise uses this key to generate\r\n  (省略)...\r\n
      \ config.omniauth :twitter, &quot;API Key&quot;, &quot;API Secret&quot;\r\nend</pre></div><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D\"></a>2.
      動作確認</h2><p>サーバーを立ち上げてサインアップページの下の方にある<strong>Sign in with Twitter</strong>というリンクをクリックします。</p><p>すると以下の様な画面が開くので<strong>連携アプリを認証</strong>をクリックします。<br><a
      href=\"https://camo.qiitausercontent.com/992418565fae30160cdb4cfc713262fc564e6f61/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f61626638336536362d373230302d303832332d616630662d3466626339643233623536662e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/2bd69dee-38e2-451f-a6fe-6cf8e28ce64a\"
      alt=\"連携アプリの認証.png\" class=\"fr-fic fr-dii\"></a></p><p>こんな画面が出るはずです。<br><a
      href=\"https://camo.qiitausercontent.com/9ba32b3144588efd5ef50131c42dc9221a7cc097/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f38393662643532362d333537382d366234352d653837342d3565393363623631376465382e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/18fecc82-e580-42d6-ab01-a6939ab571db\"
      alt=\"スクリーンショット 2015-02-18 23.52.20.png\" class=\"fr-fic fr-dii\"></a></p><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#3-%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF%E7%94%A8%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\"></a>3.
      コールバック用コントローラーの作成</h2><p>Twitter認証後適切に画面が遷移するように以下を実行してコントローラーを作ります。</p><div
      data-lang=\"bash\"><pre>$ rails g controller omniauth_callbacks</pre></div><p>作成したコントローラーの中身を以下のように修正します。<br>継承するのが<strong>Devise::OmniauthCallbacksController</strong>になっていることに注意です。<br><strong>omniauth.
      auth</strong>という環境変数に認証に関する情報が入っています。<br>その情報を使ってユーザーが登録されているかを検証し、登録してる場合はログイン、登録されてない場合は登録用ページに遷移します。</p><div
      data-lang=\"rb\">app/controllers/omniauth_callbacks_controller.rb<pre>class
      OmniauthCallbacksController &lt; Devise::OmniauthCallbacksController\r\n    def
      twitter\r\n        @user = User.from_omniauth(request.env[&quot;omniauth.auth&quot;].except(&quot;extra&quot;))\r\n\r\n
      \       if @user.persisted?\r\n            sign_in_and_redirect @user\r\n        else\r\n
      \           session[&quot;devise.user_attributes&quot;] = @user.attributes\r\n
      \           redirect_to new_user_registration_url\r\n        end\r\n    end\r\nend</pre></div><p>ちなみにomniauth.authの中にはこんなものが入ってます。（一部の値は適当に変えてあります。）</p><div
      data-lang=\"bash\"><pre>{&quot;provider&quot;=&gt;&quot;twitter&quot;, &quot;uid&quot;=&gt;&quot;0123456789&quot;,
      &quot;info&quot;=&gt;{&quot;nickname&quot;=&gt;&quot;manycicadas&quot;, &quot;name&quot;=&gt;&quot;芭蕉&quot;,
      &quot;location&quot;=&gt;&quot;関東&quot;, &quot;image&quot;=&gt;&quot;http://pbs.twimg.com/profile_images/483964583371997185/2ZqzhzKV_normal.png&quot;,
      &quot;description&quot;=&gt;&quot;JavaEE/Ruby(Rails)/HTML/CSS/JavaScript/Raspberry
      Pi などなどが好き。&quot;, &quot;urls&quot;=&gt;{&quot;Website&quot;=&gt;nil, &quot;Twitter&quot;=&gt;&quot;https://twitter.com/manycicadas&quot;}},
      &quot;credentials&quot;=&gt;{&quot;token&quot;=&gt;&quot;0123456789-hQywfs78sQ9NnwpSkwiejf2Ij74sut7hKjEsF9&quot;,
      &quot;secret&quot;=&gt;&quot;sijIYUsiJslOhiwkYukshKKJG6skWbhbXCYji3sabla3O1&quot;}}</pre></div><p>Userモデルに<strong>self.from_omniauth</strong>と<strong>self.new_with_session</strong>を作ります。<br>self.from_omniauthではuidとproviderで検索してあったらそれを、無かったらレコードを作ります。<br>self.new_with_sessionについては、もしこのメソッドを追加しておかなければ、Twitter認証後サインアップページで登録を行っても、認証情報として取ってきたuidやproviderなどが登録されません。それらが登録されないのでTwitterで認証しても登録されてないユーザーとして毎回サインアップページに飛ばされます。</p><div
      data-lang=\"rb\">app/models/user.rb<pre>class User &lt; ApplicationRecord\r\n
      \ # Include default devise modules. Others available are:\r\n  # :confirmable,
      :lockable, :timeoutable and :omniauthable\r\n  devise :database_authenticatable,
      :registerable,\r\n         :recoverable, :rememberable, :trackable, :validatable,\r\n
      \        :confirmable, :lockable, :timeoutable, :omniauthable, omniauth_providers:
      [:twitter]\r\n\r\n  def self.from_omniauth(auth)\r\n    find_or_create_by(provider:
      auth[&quot;provider&quot;], uid: auth[&quot;uid&quot;]) do |user|\r\n      user.provider
      = auth[&quot;provider&quot;]\r\n      user.uid = auth[&quot;uid&quot;]\r\n      user.username
      = auth[&quot;info&quot;][&quot;nickname&quot;]\r\n    end\r\n  end\r\n\r\n  def
      self.new_with_session(params, session)\r\n    if session[&quot;devise.user_attributes&quot;]\r\n
      \     new(session[&quot;devise.user_attributes&quot;]) do |user|\r\n        user.attributes
      = params\r\n      end\r\n    else\r\n      super\r\n    end\r\n  end\r\nend</pre></div><p>以下ファイルを編集して、コールバック用のコントローラーとしてさっき作ったコントローラーが呼ばれるようにします。これを書かないとdevise側のコントローラーが呼ばれます。</p><div
      data-lang=\"rb\">config/routes.rb<pre>Rails.application.routes.draw do\r\n  devise_for
      :users, controllers: { :omniauth_callbacks =&gt; &quot;omniauth_callbacks&quot;
      }\r\n  root &#39;pages#index&#39;\r\n  get &#39;pages/show&#39;\r\n  (省略)...\r\nend</pre></div><p>これでTwitter認証ができるようになりました。<br>初回、Twitter認証を行うと、サインアップページに飛ばされ、そこでメールアドレスやパスワードを入力して登録するとユーザー情報が登録されます。<br>今回はcomfirmable機能を入れているので、登録したら確認メッセージを送ったとのメッセージが出て、そのままログインすることはできません。<br>この機能を入れてなかった場合、登録すると即ログインします。</p><h1><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E7%99%BB%E9%8C%B2%E7%A2%BA%E8%AA%8D%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%92%E9%80%81%E3%82%8B\"></a>アカウント登録確認メールを送る</h1><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-comfirmable%E6%A6%82%E8%A6%81\"></a>1.
      comfirmable概要</h2><p>多くの登録系サイトで採用されている、登録すると仮登録状態になり、届いたメールのリンクをクリックするとログイン可能になるという仕組みを追加できるのがcomfirmableです。<br>今回はGmailのアカウントを使って実際にメールが届くように設定します。</p><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E3%83%AD%E3%82%B0%E3%82%92%E8%A6%8B%E3%82%8B\"></a>2.
      ログを見る</h2><p>サインアップ画面からEmailやパスワードを入力して登録すると、ログに以下のような内容が出力されます。<br>現状何も設定してないので、送信元アドレスなどがデフォルトであることが分かります。</p><div
      data-lang=\"bash\">log/deployments.log<pre>Devise::Mailer#confirmation_instructions:
      processed outbound mail in 715.7ms\r\nSent mail to test@example.com (51.1ms)\r\nDate:
      Sat, 12 Nov 2016 22:26:18 +0900\r\nFrom: please-change-me-at-config-initializers-devise@example.com\r\nReply-To:
      please-change-me-at-config-initializers-devise@example.com\r\nTo: test@example.com\r\nMessage-ID:
      &lt;5827187aa0893_104ff3fcd39297f34991c@YukihonoiMac-8.local.mail&gt;\r\nSubject:
      Confirmation instructions\r\nMime-Version: 1.0\r\nContent-Type: text/html;\r\n
      charset=UTF-8\r\nContent-Transfer-Encoding: 7bit\r\n\r\n&lt;p&gt;Welcome test@example.com!&lt;/p&gt;\r\n\r\n&lt;p&gt;You
      can confirm your account email through the link below:&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;a
      href=&quot;http://localhost:3000/users/confirmation?confirmation_token=ZaPGWtxbTzo_3eJxvzm9&quot;&gt;Confirm
      my account&lt;/a&gt;&lt;/p&gt;</pre></div><h2><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#3-%E3%83%A1%E3%83%BC%E3%83%AB%E3%81%8C%E5%AE%9F%E9%9A%9B%E3%81%AB%E5%B1%8A%E3%81%8F%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\"></a>3.
      メールが実際に届くようにする</h2><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%B7%A8%E9%9B%86\"></a>1.
      設定ファイルの編集</h3><p>今回はgmailを使うのでメールアドレスにはgmailを設定します。</p><div data-lang=\"rb\">config/initializers/devise.rb<pre>Devise.setup
      do |config|\r\n  (省略)...\r\n  # mail setting\r\n  config.mailer_sender = &quot;メールアドレス&quot;\r\nend</pre></div><p>gmailの場合はGメールアドレスとGメールパスワードの部分を自分のアカウントのものに変更します。</p><div
      data-lang=\"rb\">config/environments/development.rb<pre>Rails.application.configure
      do\r\n  # default url\r\n  config.action_mailer.default_url_options = {  host:
      &#39;localhost&#39;, port: 3000 }\r\n  # mail setting\r\n  config.action_mailer.raise_delivery_errors
      = true\r\n  config.action_mailer.delivery_method = :smtp\r\n  config.action_mailer.smtp_settings
      = {\r\n    :address =&gt; &quot;smtp.gmail.com&quot;,\r\n    :port =&gt; 587,\r\n
      \   :user_name =&gt; &quot;Gメールアドレス&quot;,\r\n    :password =&gt; &quot;Gメールパスワード&quot;,\r\n
      \   :authentication =&gt; :plain,\r\n    :enable_starttls_auto =&gt; true\r\n
      \ }\r\nend</pre></div><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-gmail%E3%81%AE%E8%A8%AD%E5%AE%9A\"></a>2.
      Gmailの設定</h3><h4><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E8%A9%A6%E3%81%97%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88\"></a>1.
      とりあえず試したい場合</h4><p>デフォルトでは安全性の低いアプリケーションからGmailへのアクセスが制限されています。<br>よってその制限を解除することで動くようにできます。<br>ただ、安全性の低いアプリからのアクセスを許可するということはセキュリティ的にはいまいちなのであくまで動作確認ように利用することをおすすめします。<br><a
      href=\"https://support.google.com/accounts/answer/6010255\" rel=\"nofollow noopener\"
      target=\"_blank\"><em>安全性の低いアプリがアカウントにアクセスするのを許可する</em></a>の<strong>安全性の低いアプリを許可</strong>というリンクをクリックして、以下のように設定します。<br><a
      href=\"https://camo.qiitausercontent.com/89f52e61941b2903e877209c0408657557a939bc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f31376237316137392d613265392d373730302d336436302d3065353463373762333463632e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/ce39660d-9b00-4c62-962c-b1b5a40486db\"
      alt=\"スクリーンショット 2015-02-21 11.49.19.png\" class=\"fr-fic fr-dii\"></a></p><h4><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-2%E6%AE%B5%E9%9A%8E%E8%AA%8D%E8%A8%BC%E3%81%8C%E3%82%AA%E3%83%B3%E3%81%AE%E5%A0%B4%E5%90%88\"></a>2.
      2段階認証がオンの場合</h4><p>2段階認証をオンにしている場合、1の設定はできないはずなのでこちらをやってください。<br>また、1のセキュリティ的にイマイチな方をやりたくない方もこの際2段階認証をオンにしてこの設定をやってください。</p><p><a
      href=\"https://myaccount.google.com/u/1/security?pli=1\" rel=\"nofollow noopener\"
      target=\"_blank\">アカウントへのアクセスとセキュリティ設定の管理</a>を開きます。<br>2段階認証がオフの場合は<strong>2段階認証プロセス</strong>から2段階認証の設定をしてください。（<a
      href=\"https://support.google.com/accounts/answer/185839\" rel=\"nofollow noopener\"
      target=\"_blank\">2 段階認証プロセスを有効にする</a>)<br>2段階認証設定を行っている場合は<strong>アプリパスワード</strong>を開きます。<br><a
      href=\"https://camo.qiitausercontent.com/66add065b0a91656930d93cb1bf3bd69e5e30a87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f36653462323134662d663436312d646132352d393931362d3066666563386538613931342e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/af030e5c-d97e-4ff1-ace1-3f22318c46d2\"
      alt=\"パスワードとログイン方法.png\" class=\"fr-fic fr-dii\"></a></p><p><strong>端末を選択</strong>と<strong>アプリを選択</strong>で適切なものを選びます。<br>私は端末を選択では<code>Mac</code>を、アプリを選択で<code>その他（名前を入力）</code>を選択して登録しました。<br><a
      href=\"https://camo.qiitausercontent.com/f8dbefb3e604cf37c08d2681c01dc6342c1d6a4a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f36663861353164352d353663632d386132332d313562332d3137303433353133396335652e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/de42f3c8-0d20-4643-a43d-d82c57be6e86\"
      alt=\"アプリパスワード.png\" class=\"fr-fic fr-dii\"></a></p><p>パスワードが生成されます。<br><a
      href=\"https://camo.qiitausercontent.com/43a088df35c49aa9e8c5b16d3e31ed85ac37d641/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f35383033336261322d326338352d396131332d316261652d3163313935393236306232632e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/1d6cd69f-9bb3-4f2e-86a8-b761facb5d8a\"
      alt=\"2段階認証パスワード.png\" class=\"fr-fic fr-dii\"></a></p><p>生成されたパスワードを、1の設定の<code>:password
      =&gt; &quot;Gメールパスワード&quot;,</code>のGメールのパスワードの部分に設定します。</p><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#3-%E5%B1%8A%E3%81%84%E3%81%9F%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%92%E7%A2%BA%E8%AA%8D\"></a>3.
      届いたメールを確認</h3><p>これでアプリ側からサインアップすると、以下の様なメールが届くようになります。<strong>Confirm my account</strong>をクリックするログイン画面からログインが可能になります。<br><a
      href=\"https://camo.qiitausercontent.com/428cefea8293fb194841610c31aacfabfa7807fb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f63636539366665302d636433392d393665372d326335342d6131353638343838346666322e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/004a87fa-0b97-4ae6-96da-cf7beaf8bd0b\"
      alt=\"承認メール.png\" class=\"fr-fic fr-dii\"></a></p><p>メールで送られる文章は以下のファイルを編集することで可能です。<br><code>app/views/devise/confirmation_instructions.html.erb</code></p><h1><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%92%E3%83%AD%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\"></a>アカウントをロックする</h1><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-lockable%E6%A6%82%E8%A6%81\"></a>1.
      lockable概要</h2><p>アカウントの認証を一定回数間違うと、アカウントをロックするようにする機能です。</p><h2><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E8%A8%AD%E5%AE%9A\"></a>2.
      設定</h2><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%B7%A8%E9%9B%86-1\"></a>1.
      設定ファイルの編集</h3><p>以下ファイルを修正して、アカウントの認証を5回失敗します。</p><div data-lang=\"rb\">config/initializers/devise.rb<pre>Devise.setup
      do |config|\r\n    (省略)...\r\n    # lock sessings\r\n    config.unlock_strategy
      = :email\r\n    config.maximum_attempts = 4\r\nend</pre></div><p>するとアカウントがロックされてメールが届きます</p><p>メールの中身は<code>app/views/devise/mailer/unlock_instructions.rb</code>ファイルを修正すれば変わります。</p><h3><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E8%A8%AD%E5%AE%9A%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"></a>2.
      設定値について</h3><ul><li><strong>lock_strategy</strong>（ロック方法）</li></ul><table><thead><tr><th>属性</th><th>説明</th></tr></thead><tbody><tr><td>:failed_attempts</td><td>失敗回数によってロック。</td></tr><tr><td>:none</td><td>ロックしない。</td></tr></tbody></table><ul><li><strong>unlock_strategy</strong>（ロック解除方法）</li></ul><table><thead><tr><th>属性</th><th>説明</th></tr></thead><tbody><tr><td>:time</td><td>指定時間でロックを解除する。</td></tr><tr><td>:email</td><td>メールでロックを解除する。</td></tr><tr><td>:both</td><td>:timeと:emailの両方。</td></tr><tr><td>:none</td><td>解除させない。</td></tr></tbody></table><p>:noneを指定した場合、ユーザーのレコードの<code>locked_at</code>カラムを<code>nil</code>にアップデートしたらロックが解除できます。</p><ul><li><strong>unlock_in</strong>（ロック解除時間）</li></ul><p>2時間で解除するなら<code>config.unlock_in
      = 2.hours</code>といった具合に指定。</p><ul><li><strong>unlock_keys</strong></li></ul><p>アカウントをロックまたは解除するときに使用するキーを定義するらしいです。<br><code>config.unlock_keys
      = [:username]</code>という感じで指定できます。</p><ul><li><strong>maximum_attempts</strong>（失敗可能回数）</li></ul><p>アカウントの認証を失敗して良い回数を指定します。<br><code>config.maximum_attempts
      = 4</code>と指定した場合、4回目までは失敗しても大丈夫ですが、5回目を失敗した時点でアカウントがロックされます。</p><h1><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%99%E3%82%8B\"></a>セッションをタイムアウトする</h1><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-timeoutable%E6%A6%82%E8%A6%81\"></a>1.
      timeoutable概要</h2><p>一定時間活動がない場合にセッションをタイムアウトさせるのがtimeoutableです。</p><h2><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E8%A8%AD%E5%AE%9A-1\"></a>2.
      設定</h2><p>以下ファイルを修正するとタイムアウトまでの時間を指定できます。<br>以下の場合だと3分後にセッションがタイムアウトします。<br>デフォルトは30分だそうです。</p><div
      data-lang=\"rb\">config/initializers/devise.rb<pre>Devise.setup do |config|\r\n
      \   (省略)...\r\n    # timeout setting\r\n    config.timeout_in = 3.minutes\r\nend</pre></div><h1><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E8%A8%AD%E5%AE%9A\"></a>その他の設定</h1><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E5%BE%8C%E3%81%AE%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\"></a>1.
      ログイン後のページを変更する</h2><p>ログインすると、デフォルトではroot_urlに飛ばされます。<br>これを<code>app/views/pages/show.html.erb</code>になるように修正します。<br><strong>after_sign_in_path_for</strong>メソッドを追加します。ここにログイン後に遷移したいページを指定します。<br>あと<strong>sign_in_required</strong>も追加します。showページはログインしているユーザーだけにアクセスさせ、ログインしてない場合はログインページに遷移させます。</p><div
      data-lang=\"rb\">app/controllers/application_controller.rb<pre>class ApplicationController
      &lt; ActionController::Base\r\n  (省略)...\r\n    def after_sign_in_path_for(resource)\r\n
      \       pages_show_path\r\n    end\r\n\r\n    private\r\n        def sign_in_required\r\n
      \           redirect_to new_user_session_url unless user_signed_in?\r\n        end\r\nend</pre></div><p>Pagesコントローラーに<code>before_action</code>を追加します。</p><div
      data-lang=\"rb\">app/controllers/pages_controller.rb<pre>class PagesController
      &lt; ApplicationController\r\n  before_action :sign_in_required, only: [:show]\r\n
      \ (省略)...\r\nend</pre></div><p>これでログイン後showページに遷移するようになります。</p><h2><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E3%82%B5%E3%82%A4%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%83%BC%E3%82%92%E5%A2%97%E3%82%84%E3%81%99\"></a>2.
      サインアップする際に登録するパラメーターを増やす</h2><p>ユーザーを登録するときにデフォルトではEmailとパスワードだけですが、<br>ユーザー名も登録させたい、などの場合があると思います。</p><p>まずはサインアップページにユーザー名を入力するエリアを追加します。<br>ユーザーのプロフィール変更ページ（<code>views/devise/registrations/edit.html.erb</code>）にも同様に追加しときます。</p><div
      data-lang=\"erb\">views/devise/registrations/new.html.erb<pre>&lt;h2&gt;Sign
      up&lt;/h2&gt;\r\n\r\n&lt;%= form_for(resource, as: resource_name, url: registration_path(resource_name))
      do |f| %&gt;\r\n  &lt;!-- 省略 --&gt;\r\n\r\n  &lt;div class=&quot;field&quot;&gt;\r\n
      \   &lt;%= f.label :username %&gt;&lt;br /&gt;\r\n    &lt;%= f.text_field :username
      %&gt;\r\n  &lt;/div&gt;\r\n\r\n  &lt;!-- 省略 --&gt;\r\n&lt;% end %&gt;\r\n\r\n&lt;%=
      render &quot;devise/shared/links&quot; %&gt;</pre></div><p>次にApplicationControllerに以下を追加します。<br>テンプレートを変えて、ユーザー名を入力するようにしただけでは実際に登録されないからです。<br>詳しくは<code>strong_parameters</code>について調べてください。<br>簡単に言えばよく分からんパラメーターは渡せないようになってるので渡せるようにします。</p><div
      data-lang=\"ruby\">app/controllers/application_controller.rb<pre>class ApplicationController
      &lt; ActionController::Base\r\n  protect_from_forgery with: :exception\r\n  before_action
      :configure_permitted_parameters, if: :devise_controller?\r\n\r\n  # 省略\r\n\r\n
      \ protected\r\n    def configure_permitted_parameters\r\n      devise_parameter_sanitizer.permit(:sign_up,
      keys: [:username])\r\n      devise_parameter_sanitizer.permit(:account_update,
      keys: [:username])\r\n    end\r\nend</pre></div><h1><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#%E6%9C%80%E5%BE%8C%E3%81%AB\"></a></h1>"
    - '2018-11-13 04:12:33.943486'
    - '2019-07-20 04:41:19.676678'
  - - 20
    - rails[Active Storage]
    - "<p itemprop=\"headline\"><a href=\"https://qiita.com/yatmsu/items/08b95e837ac7f24fb443\">参照先</a></p><h1
      itemprop=\"headline\">【Rails 5.2】 Active Storageの使い方</h1><p><a href=\"https://qiita.com/tags/Rails\">Rails</a><a
      href=\"https://qiita.com/tags/RubyOnRails\">RubyOnRails</a><a href=\"https://qiita.com/tags/%E7%94%BB%E5%83%8F\">画像</a><a
      href=\"https://qiita.com/tags/ActiveStorage\">ActiveStorage</a></p><div data-mount-target=\"mobileArticleActions\"><br></div><section
      itemprop=\"articleBody\"><p>Active Storageについて調べると、「軽く触ってみた」ノリの記事ばかりで、特に複数のファイルを扱う方法などがなかなか見つからなかったので、使い方のまとめ記事を作りました。<img
      alt=\":muscle:\" height=\"20\" src=\"blob:http://localhost:3000/3996f36a-c8f2-44de-bfab-c545bcc8668f\"
      title=\":muscle:\" width=\"20\" class=\"fr-fic fr-dii\"></p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#active-storage-%E3%81%A8%E3%81%AF\"></a>Active
      Storage とは</h1><p>Active Storageは、Rails5.2で追加された、<strong>ファイルアップロード</strong>を行うための機能です。これを使えば、フォームで画像の投稿機能などが簡単に作れます。また、Amazon
      S3, Google Cloud Storage, Microsoft Azure Storageなどの<strong>クラウドストレージサービス</strong>に対するファイルのアップロードを簡単に行うことができます。クラウドストレージの他に、ローカルディスクにファイルを保存することもできます。<br><strong>Paperclip,
      Carrierwave, Dragonflyなどのgemの代わりになる</strong>とされていますが、現時点ではバリデーションとキャッシュ関連の機能は残念ながら備えていません。使うには<strong>Rails
      5.2以上</strong>にアップグレードする必要があります。</p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#active-storage-%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\"></a>Active
      Storage を使えるようにする</h1><div data-lang=\"sh\"><pre>$ rails active_storage:install\r\n$
      rails db:migrate</pre></div><p>ここは気になる方だけ読んでいただければ大丈夫なのですが、このマイグレーションによって<code>active_storage_blobs</code>と<code>active_storage_attachments</code>という名前のテーブルが2つ生成されます。これらのテーブルは<code>Blob</code>と<code>Attachment</code>の2つのモデルが使います。<code>Blob</code>はファイル名、ファイルの種類、バイト数、誤り検出符号などのメタデータを保持するモデルで、<code>Attachment</code>モデルは、BlobオブジェクトとActive
      Recordオブジェクトを紐付けるための中間テーブルです。なお、Active Storageを使う際、直接<code>Blob</code>と<code>Attachment</code>モデルに触れる必要はありません。(時間返せ)</p><h1><a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#active-record-%E3%83%A2%E3%83%87%E3%83%AB%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\"></a>Active
      Record モデルを用意する</h1><p>コメントに1枚、もしくは、複数枚の画像を添付できるようにしたいとしましょう。まずは<code>Comment</code>モデルを用意する必要があります。<code>generate
      resource</code>コマンドで基本的なルートと、モデル、空のコントローラを生成しましょう。</p><div data-lang=\"sh\"><pre>$
      rails g resource comment content:text\r\n$ rails db:migrate</pre></div><p>ここで、画像用のカラムを用意する必要がない点もActive
      Storageの特徴の一つです。</p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#1%E3%81%A4%E3%81%AE%E6%B7%BB%E4%BB%98%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88\"></a>1つの添付ファイルの場合</h1><p><code>Comment</code>モデルに1つの画像を添付するには、<code>has_one_attached</code>を使います。</p><div
      data-lang=\"ruby\"><pre>class Comment &lt; ApplicationRecord\r\n  has_one_attached
      :image\r\nend</pre></div><p><code>:image</code>はファイルの呼び名で、<code>:photo</code>、<code>:avatar</code>、<code>:hoge</code>など、ファイルの用途に合わせて好きなものを指定してください。ここで、Imageモデルなどを作る必要はないです。Active
      Storageは裏側で<code>Blob</code>と<code>Attachment</code>モデルを使って、こそこそと<code>comment.image</code>を使えるようにしてくれます。(有能すぎ)</p><p>では、コントローラとビューの中身を書きましょう。</p><div
      data-lang=\"ruby\">comments_controller.rb<pre>class CommentsController &lt;
      ApplicationController\r\n  def new\r\n    @comment = Comment.new\r\n  end\r\n\r\n
      \ def create\r\n    @comment = Comment.create params.require(:comment).permit(:content,
      :image) # POINT\r\n    redirect_to @comment\r\n  end\r\n\r\n  def show\r\n    @comment
      = Comment.find(params[:id])\r\n  end\r\n\r\n  def edit\r\n    @comment = Comment.find(params[:id])
      \r\n  end\r\n\r\n  def update\r\n    @comment = Comment.find(params[:id])\r\n
      \   @comment.update params.require(:comment).permit(:content, :image) # POINT\r\n
      \   redirect_to @comment\r\n  end\r\nend</pre></div><div data-lang=\"erb\">new.html.erb<pre>&lt;%=
      form_with model: @comment, local: true  do |form| %&gt;\r\n  &lt;%= form.text_area
      :content %&gt;&lt;br&gt;\r\n  &lt;%= form.file_field :image %&gt;&lt;br&gt;\r\n
      \ &lt;%= form.submit %&gt;\r\n&lt;% end %&gt;</pre></div><div data-lang=\"erb\">show.html.erb<pre>&lt;%
      if @comment.image.attached? %&gt;\r\n  &lt;%= image_tag @comment.image %&gt;\r\n&lt;%
      end %&gt;</pre></div><p>ほとんど典型的なコードですね。ポイントは<code>create</code>と<code>update</code>アクションのところで、このようにして、<code>image</code>があたかも<code>Comment</code>のカラムであるかのように扱うことで、フォームの<code>file_field</code>で選択された画像を<code>Comment</code>オブジェクトと紐付けます。これも、Active
      Storageの特徴の一つです。</p><p><code>create</code>と<code>update</code>アクションを使えない場合は、<code>@comment.image.attach(params[:comment][:image])</code>で画像を後から<code>Comment</code>オブジェクトと紐付けることもできます。</p><p>例えば、画像の選択を任意にしたい場合は以下のようなコードになります。</p><div
      data-lang=\"ruby\"><pre>@comment = Comment.create params.require(:comment).permit(:content)\r\nif
      image = params[:comment][:image]\r\n  @comment.image.attach(image)\r\nend</pre></div><p>画像を表示するには<code>image_tag</code>に<code>@comment.image</code>を渡すだけです。</p><p>結果はこのような感じになります。<br><a
      href=\"https://camo.qiitausercontent.com/56fce64cc16c92ffb2f68472fdd61897b590f408/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3232353939372f63373230346465352d663935342d643063662d646637642d3131613932633138356330322e676966\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/b9150983-e512-4fe6-8356-170912749444\"
      alt=\"ezgif-2-b17e951b9f.gif\" class=\"fr-fic fr-dii\"></a></p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#%E8%A4%87%E6%95%B0%E3%81%AE%E6%B7%BB%E4%BB%98%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88\"></a>複数の添付ファイルの場合</h1><p>複数の添付ファイルを使いたい場合は、上記のコードを少しだけ変更します。</p><ul><li><code>has_one_attached</code>の代わりに<code>has_many_attached</code>を使う</li><li><code>comment.image</code>の代わりに<code>comment.images</code>を使う</li><li><code>file_field</code>に<code>multiple:
      true</code>を追記して、複数ファイルの選択を許可</li></ul><div data-lang=\"ruby\">comment.rb<pre>class
      Comment &lt; ApplicationRecord\r\n  has_many_attached :images\r\nend</pre></div><div
      data-lang=\"ruby\">comments_controller.rb<pre>class CommentsController &lt;
      ApplicationController\r\n  def new\r\n    @comment = Comment.new\r\n  end\r\n\r\n
      \ def create\r\n    @comment = Comment.create params.require(:comment).permit(:content,
      :images)\r\n    redirect_to @comment    \r\n  end\r\n\r\n  def show\r\n    @comment
      = Comment.find(paramd[:id])\r\n  end\r\n\r\n  def edit\r\n    @comment = Comment.find(params[:id])
      \r\n  end\r\n\r\n  def update\r\n    @comment = Comment.find(params[:id])\r\n
      \   @comment.update params.require(:comment).permit(:content, :images)\r\n    redirect_to
      @comment\r\n  end\r\nend</pre></div><div data-lang=\"erb\">new.html.erb<pre>&lt;%=
      form_with model: @comment, local: true  do |form| %&gt;\r\n  &lt;%= form.text_area
      :content %&gt;&lt;br&gt;&lt;br&gt;\r\n  &lt;%= form.file_field :images, multiple:
      true %&gt;&lt;br&gt;\r\n  &lt;%= form.submit %&gt;\r\n&lt;% end %&gt;</pre></div><div
      data-lang=\"erb\">show.html.erb<pre>&lt;% if @comment.images.attached? %&gt;\r\n
      \ &lt;% @comment.images.each do |image| %&gt;\r\n    &lt;%= image_tag image
      %&gt; &lt;br&gt;\r\n  &lt;% end %&gt;\r\n&lt;% end %&gt;</pre></div><p>一枚の時同様、<code>@comment.images.attach(params[:comment][:images])</code>も使えます。</p><p>結果はこちら</p><h1><a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BF%9D%E5%AD%98%E5%85%88%E3%81%AE%E5%A4%89%E6%9B%B4\"></a>ファイルの保存先の変更</h1><p>ファイルの保存先は、各環境の設定ファイルに記載します。<br>まずは、
      <code>config/environments/development.rb</code> と <code>production.rb</code>
      の中身を覗いてみましょう。</p><div data-lang=\"ruby\">config/environments/development.rb<pre>
      \ # ...\r\n\r\n  # Store uploaded files on the local file system (see config/storage.yml
      for options)\r\n  config.active_storage.service = :local\r\n\r\n  # ...</pre></div><div
      data-lang=\"ruby\">config/environments/production.rb<pre>  # ...\r\n\r\n  #
      Store uploaded files on the local file system (see config/storage.yml for options)\r\n
      \ config.active_storage.service = :local\r\n\r\n  # ...</pre></div><p>初期状態では、開発環境(development)、本番環境(production)ともに保存先は
      <code>:local</code> に設定されています。<br>この <code>local</code> とは、 <code>config/storage.yml</code>
      で定義された保存先の名前です。<br>これを変更するには、<code>:local</code> のところを <code>:amazon</code>,
      <code>:google</code>, <code>:microsoft</code> のいづれかと置き換え、<code>config/storage.yml</code>の方に、必要な認証情報などの値を入力します。</p><p>今度は、<code>config/storage.yml</code>の中身を覗いてみましょう。</p><div
      data-lang=\"yaml\">config/storage.yml<pre>test:\r\n  service: Disk\r\n  root:
      &lt;%= Rails.root.join(&quot;tmp/storage&quot;) %&gt;\r\n\r\nlocal:\r\n  service:
      Disk\r\n  root: &lt;%= Rails.root.join(&quot;storage&quot;) %&gt;\r\n\r\n# Use
      rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)\r\n#
      amazon:\r\n#   service: S3\r\n#   access_key_id: &lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;\r\n#   secret_access_key: &lt;%= Rails.application.credentials.dig(:aws,
      :secret_access_key) %&gt;\r\n#   region: us-east-1\r\n#   bucket: your_own_bucket\r\n\r\n#
      Remember not to checkin your GCS keyfile to a repository\r\n# google:\r\n#   service:
      GCS\r\n#   project: your_project\r\n#   credentials: &lt;%= Rails.root.join(&quot;path/to/gcs.keyfile&quot;)
      %&gt;\r\n#   bucket: your_own_bucket\r\n\r\n# Use rails credentials:edit to
      set the Azure Storage secret (as azure_storage:storage_access_key)\r\n# microsoft:\r\n#
      \  service: AzureStorage\r\n#   storage_account_name: your_account_name\r\n#
      \  storage_access_key: &lt;%= Rails.application.credentials.dig(:azure_storage,
      :storage_access_key) %&gt;\r\n#   container: your_container_name</pre></div><p>先ほど見た保存先の
      <code>local</code> は、使用するサービスが <code>Disk</code> (ローカルディスク)に設定れていて、railsアプリ直下の<code>/storage</code>ディレクトリがファイルの保存先に指定されています。</p><p>あと、親切に、コメントがたくさんついてますね。この中から適切なところのコメントを解除することで、好きなストレージサービスを使うことができます。</p><p>また、お使いのサービスのgemをGemfileに追記する必要があります。これは、<code>aws-sdk-s3</code>,
      <code>google-cloud-storage</code>, <code>azure-storage</code>のいづれかになります。</p><hr><p>なお、アクセスキーは、セキュリティ上、<strong>Rails
      Credentials</strong>を使って入力するのが好ましいです。<br>これは、<strong>APIキーなどの機密情報を暗号化して保存するための機能</strong>で、実はこれもRails
      5.2で追加された新機能です。これまでの<code>secrets.yml</code>の代わりになります。<br><code>&lt;%= Rails.application.credentials.dig(...)
      %&gt;</code>の部分は、まさにCredentialsに入力されたデータを読み込んでいますのでコメントをそのまま使いましょう。</p><ul><li>Credentialsにデータを入力・編集するには
      <code>$ rails credentials:edit</code> と叩きます。<br>エラーが出た場合は、<code>$ EDITOR=vim
      rails credentials:edit</code>で、お使いのエディターを指定してください。例: <code>vim</code>, <code>emacs</code>,
      <code>atom</code>, <code>code</code>, <code>subl</code></li><li>入力した内容は<code>config/master.key</code>を用いて暗号化され、<code>config/credentials.yml.enc</code>が生成されます。</li><li>復号された中身は
      <code>$ rails credentials:show</code> で確認できます。</li></ul><h2><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#amazon-s3-%E3%82%92%E4%BD%BF%E3%81%86%E5%A0%B4%E5%90%88\"></a>Amazon
      S3 を使う場合</h2><p>S3は基本的に、ファイルをアップロードし、そのURLを取得できる、AWSのストレージサービスです。</p><h3><a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#-amazon-s3%E3%81%A7%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\"></a>\U0001F530
      Amazon S3でバケットを用意する方法</h3><p>バケットは画像などのファイルをアップロードできる入れ物です。<br>AWSコンソール &rarr;
      サービス &rarr; ストレージ &rarr; S3　&rarr; 「バケットを作成する」</p><table><thead><tr><th>項目</th><th>入力・選択</th></tr></thead><tbody><tr><td>パケット名</td><td>例:
      my-rails-app-bucket</td></tr><tr><td>リージョン</td><td>例: ap-northeast-1 (東京)</td></tr><tr><td>パブリックアクセス許可を管理する</td><td>このバケットに読み取りアクセス権限をする</td></tr><tr><td>上記以外</td><td>全部デフォルトのまま</td></tr></tbody></table><h3><a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#-amazon-s3%E3%81%A7%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B%E6%96%B9%E6%B3%95\"></a>\U0001F530
      Amazon S3でアクセスキーを作る方法</h3><p>AWSコンソール &rarr; サービス &rarr; セキュリティ &rarr; IAM &rarr;
      「ユーザー」 &rarr; 「ユーザーを追加」</p><table><thead><tr><th>項目</th><th>入力・選択</th></tr></thead><tbody><tr><td>ユーザー名</td><td>例:
      s3user</td></tr><tr><td>アクセスの種類</td><td>プログラムによるアクセス</td></tr></tbody></table><p>「既存のポリシーを直接アタッチ」
      &rarr; 「S3」で検索 &rarr; 「AmazonS3FullAccess」を選択 &rarr; 「次へ」 &rarr; 「ユーザーの作成」<br>表示された「アクセスキー
      ID」と「シークレットアクセスキー」 をメモ帳などにコピペして保管する。（一度しか表示されません）</p><h3><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#%E4%BF%9D%E5%AD%98%E5%85%88%E3%82%92amazon-s3%E3%81%AB%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B\"></a>保存先をAmazon
      S3に指定する</h3><p>まず最初に必要なAWS S3のGemをインストールします。</p><div data-lang=\"ruby\">Gemfile<pre>gem
      &quot;aws-sdk-s3&quot;, require: false</pre></div><p>Gemfile変更後、<code>$ bundle
      install</code>と叩きます。</p><p>次に、保存先をAmazon S3に指定します。</p><div data-lang=\"ruby\">config/environments/production.rb<pre>#
      本番環境(production)の保存先を:localから:amazonに変更\r\n\r\nconfig.active_storage.service
      = :amazon</pre></div><div data-lang=\"ruby\">config/environments/development.rb<pre>#
      開発環境(development)でAmazon S3の動作を確認したい場合はこちらの方も変更しましょう\r\n\r\nconfig.active_storage.service
      = :amazon</pre></div><div data-lang=\"yaml\">config/storage.yml<pre># 以下の部分をコメント解除する\r\namazon:\r\n
      \ service: S3\r\n  access_key_id: &lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;\r\n  secret_access_key: &lt;%= Rails.application.credentials.dig(:aws,
      :secret_access_key) %&gt;\r\n  # 以下の２行を変更\r\n  region: ap-northeast-1 #東京の場合\r\n
      \ bucket: my-rails-app-bucket #自分で作成したS3のバケットの名前</pre></div><p>前にも述べましたが、<code>&lt;%=
      Rails.application.credentials.dig(...) %&gt;</code>の部分は、<strong>Credentials</strong>の情報を読み込んでいます。早速、CredentialsにAmazon
      S3へのアクセスキーを入力しましょう。</p><div data-lang=\"sh\"><pre>$ EDITOR=vim rails credentials:edit</pre></div><p>上の例ではVimが開きます。Atomをお使いの場合、<code>EDITOR=atom</code>としてください。<br>VSCodeなら、<code>EDITOR=code</code>、SublimeTextなら<code>EDITOR=subl</code>。</p><div
      data-lang=\"yml\"><pre>aws:\r\n access_key_id: 123 #ここに自分のアクセスキーIDをコピペ\r\n secret_access_key:
      456 #ここに自分のシークレットアクセスキーをコピペ</pre></div><p>&nbsp;Vim: <code>i</code>で入力開始、<code>esc</code>
      &rarr; <code>ZZ</code>で終了</p><p>入力した内容は<code>$ rails credentials:show</code>で確認できます。</p><p>以上で保存先をAmazon
      S3に変更できました。<img alt=\":tada:\" height=\"20\" src=\"blob:http://localhost:3000/669a9058-3e6e-42d7-84bf-bfb98735139f\"
      title=\":tada:\" width=\"20\" class=\"fr-fic fr-dii\"></p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#warning-%E9%87%8D%E8%A6%81\"></a>&nbsp;重要</h1><p><strong>Credentials</strong>をお使いの場合は、<code>config/credentials.yml.enc</code>の中身を復号化するために必要な<code>config/master.key</code>ファイルを本番環境にも配置する必要があります。しかし、<code>master.key</code>はセキュリティ上、Gitで管理してはいけないため、標準で
      .gitignore されてあり、PaaSなどのGitリポジトリをそのままデプロイする本番環境(Herokuなど)の場合は、<code>master.key</code>　の中身をコピーして、環境変数
      <code>RAILS_MASTER_KEY</code> として用意する必要があります。</p><p>ちなみに、Herokuをお使いの場合は <code>$
      heroku config:set RAILS_MASTER_KEY=123</code>で環境変数を用意できます。</p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#%E5%8F%82%E8%80%83\"></a>参考</h1><p><a
      href=\"https://www.engineyard.com/blog/active-storage\" rel=\"nofollow noopener\"
      target=\"_blank\">https://www.engineyard.com/blog/active-storage</a><br><a href=\"https://qiita.com/yatmsu/items/08b95e837ac7f24fb443\">https://qiita.com/yatmsu/items/08b95e837ac7f24fb443</a><br><a
      href=\"https://afreshcup.com/home/2017/07/06/introduction-to-active-storage-part-3-google-cloud-storage\"
      rel=\"nofollow noopener\" target=\"_blank\">https://afreshcup.com/home/2017/07/06/introduction-to-active-storage-part-3-google-cloud-storage</a></p><p><br></p><p><a
      href=\"https://qiita.com/yatmsu/items/08b95e837ac7f24fb443\">https://qiita.com/yatmsu/items/08b95e837ac7f24fb443</a>
      で問題点を述べてある</p></section>"
    - '2018-11-19 07:22:28.027506'
    - '2019-04-16 07:42:45.329381'
  - - 24
    - twitter api fetch
    - "<h1 itemprop=\"name\" style=\"text-align: center;\">Cypressで非同期</h1><p><span
      style=\"color: rgb(184, 49, 47);\">Cypressはクロスドメインでの非同期処理のテストが行えないため、fetchで補うのが一般的</span></p><h2>Javascript
      FetchでTwitterにログインするのを例にする</h2><pre>describe(&#39;Login&#39;, function () {\r\nit(&#39;サインイン&#39;,
      function () {\r\nvar twitter_token;\r\nvar userid=&quot;id&quot;;//自分のTwitterIDを入力しています。\r\nvar
      userpass=&quot;pass&quot;;//自分のTwitterPASSを入力しています。\r\n\r\n// GETにアクセスして,responseのうちのtokenをもらい、次にPOSTにアクセスしてtokenとともにusernameやpasswordをresponseに送る\r\nfetch(&quot;https://twitter.com/&quot;,
      {\r\n    mode: &#39;cors&#39;,\r\n    credentials: &#39;include&#39;\r\n}).then(function(response)
      {\r\n    return response.text();\r\n}).then(function(text) {\r\n//   &lt;input
      type=&quot;hidden&quot; name=&quot;(ここから)redirect_after_login&quot; value=&quot;/&quot;&gt;\r\n//
      &lt;input type=&quot;hidden&quot; value=&quot;3f569fb396b8b03a229c3f569fb396b8b03a229c&quot;
      name=&quot;authenticity_token&quot;&gt;\r\n// \\w 英数文字([A-Za-z0-9_]と同じ） \\w+
      1文字以上の英数字 \\s 1文字の区切り文字([ \\f\\n\\r\\t\\v]）. 任意の1文字 .+ 1文字以上\r\n    var getstring
      = text.match(/redirect_after_login&quot; value=.+\\s.+value=&quot;(\\w+)&quot;/);\r\n 
        twitter_token = getstring[1];\r\nconsole.log(text);//ここでTwitter_Tokenは取得できています。\r\n\r\n//ここからログイン処理\r\n 
      fetch(&quot;https://twitter.com/sessions&quot;, {\r\n  mode: &#39;cors&#39;,\r\n 
      credentials: &#39;include&#39;,\r\n  method: &#39;POST&#39;,\r\n  headers: {
      &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,&#39;Referer&#39;:
      &#39;https://twitter.com/&#39; },\r\n  body: &#39;session[username_or_email]=&#39;+
      userid + &#39;&amp;session[password]=&#39; + userpass +\r\n  &#39;&amp;remember_me=1&amp;return_to_ssl=true&amp;scribe_log=&#39;+\r\n 
      &#39;&amp;redirect_after_login=/&amp;authenticity_token=&#39;+twitter_token\r\n 
        }).then(function(response) {\r\n    return response.text();\r\n    }).then(function(text)
      {\r\n    console.log(text);//出力されたhtmlを画面に表示\r\n    cy.visit(&#39;https://twitter.com/?lang=ja&#39;)\r\n 
        });\r\n  });\r\n  // Cypress.Cookies.debug(true)\r\n})\r\n})</pre><section><section
      data-id=\"49224\" itemprop=\"acceptedAnswer\"><p><br></p></section></section>"
    - '2018-11-22 09:03:50.950825'
    - '2019-03-19 05:18:23.847894'
  - - 70
    - rails5 herokuでs3をしようする時
    - "<h1 itemprop=\"headline\">【Rails】AWS S3を使ってHerokuで画像を投稿できるようにする方法</h1><p><a
      href=\"https://qiita.com/tags/Rails\">Rails</a><a href=\"https://qiita.com/tags/Heroku\">Heroku</a><a
      href=\"https://qiita.com/tags/AWS\">AWS</a><a href=\"https://qiita.com/tags/S3\">S3</a><a
      href=\"https://qiita.com/tags/ActiveStorage\">ActiveStorage</a></p><div data-mount-target=\"mobileArticleActions\"><br></div><section
      itemprop=\"articleBody\"><p>今回は、Rails 5.2で追加されたActiveStorageを使ってHerokuで画像をアップロードできるようにしたいと思います。</p><p>内容</p><ul><li>ActiveStorageって何?</li><li>最初に、Amazon
      S3でやること</li><li>次に、Railsでやること</li><li>最後に、Herokuでやること</li></ul><h1><a href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#activestorage%E3%81%A3%E3%81%A6%E4%BD%95\"></a>ActiveStorageって何?</h1><p>Amazon
      S3, GCS, AzureStorageなどのクラウドストレージに画像などのファイルをアップロードできるRailsの機能。<br>以前使われていた、CarrierWaveやPaperclipなどgemの代わりになる。</p><p><a
      href=\"https://railsguides.jp/active_storage_overview.html\" rel=\"nofollow
      noopener\" target=\"_blank\">Active Storage の概要 | Railsガイド</a>を参照</p><h2><a
      href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#rails-%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AE%E7%A2%BA%E8%AA%8D\"></a>Rails
      バージョンの確認</h2><div data-lang=\"shell\"><pre>$ rails -v\r\nRails 5.2.0</pre></div><p>Active
      Storageを使うにはRails 5.2が必要です。<br>Rails 5.2 未満の場合は<a href=\"https://railsguides.jp/upgrading_ruby_on_rails.html\"
      rel=\"nofollow noopener\" target=\"_blank\">アップグレード</a>してください。</p><h2><a href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#beginner-activestorage%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\"></a><img
      data-fr-image-pasted=\"true\" alt=\":beginner:\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f530.png\"
      title=\":beginner:\" width=\"20\" class=\"fr-fic fr-dii\">&nbsp;ActiveStorageの使い方</h2><p>わからない人のために載せておきます。<br>ここでは手短に、Userのアバター画像を管理する例を載せる。</p><div
      data-lang=\"shell\"><pre>$ rails active_storage:install\r\n$ rails db:migrate</pre></div><div
      data-lang=\"ruby\">user.rb<pre>class User &lt; ApplicationRecord\r\n  has_one_attached
      :avatar\r\nend</pre></div><div data-lang=\"erb\">edit.html.erb<pre>&lt;%= form.file_field
      :avatar %&gt;</pre></div><div data-lang=\"ruby\">users_controller.rb<pre>def
      create\r\n  @user.create(...., avatar: params[:avatar])\r\nend</pre></div><div
      data-lang=\"erb\">show.html.erb<pre>&lt;% if @user.avatar.attached? %&gt;\r\n
      \ &lt;%= image_tag @user.avatar %&gt;\r\n&lt;% end %&gt;</pre></div><p>詳しくは<a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a\">ActiveStorageの使い方まとめ</a>をどうぞ。</p><h1><a
      href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E6%89%8B%E9%A0%86\"></a>手順</h1><h2><a
      href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E6%9C%80%E5%88%9D%E3%81%ABamazon-s3%E3%81%A7%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"></a>最初に、Amazon
      S3でやること</h2><h3><a href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E7%94%BB%E5%83%8F%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E5%A0%B4%E6%89%80%E3%82%92%E7%94%A8%E6%84%8F\"></a>画像をアップロードする場所を用意</h3><ol><li>AWSコンソール
      &rarr; サービス &rarr; ストレージ &rarr; S3</li><li>「<strong>バケットを作成する</strong>」<br>バケット
      = 画像などのファイルをアップロードできるところ</li></ol><table><thead><tr><th>項目</th><th>入力・選択</th></tr></thead><tbody><tr><td>パケット名</td><td>適当
      ex: my-rails-app-first-bucket</td></tr><tr><td>リージョン</td><td><img data-fr-image-pasted=\"true\"
      alt=\":flag_jp:\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f1ef-1f1f5.png\"
      title=\":flag_jp:\" width=\"20\" class=\"fr-fic fr-dii\">　東京</td></tr><tr><td>パブリックアクセス許可を管理する</td><td><strong>このバケットに読み取りアクセス権限をする</strong></td></tr><tr><td>上記以外</td><td>全部デフォルトのままでok</td></tr></tbody></table><h3><a
      href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B\"></a>アクセスキーを作る</h3><ul><li>AWSコンソール
      &rarr; サービス &rarr; セキュリティ &rarr; IAM</li><li>「<strong>個々の IAM ユーザーの作成</strong>」
      &rarr; 「ユーザーの管理」 &rarr; 「ユーザーを追加」</li></ul><table><thead><tr><th>項目</th><th>入力・選択</th></tr></thead><tbody><tr><td>ユーザー名</td><td>適当
      ex: TaroTanaka</td></tr><tr><td>アクセスの種類</td><td>プログラムによるアクセス</td></tr></tbody></table><ul><li>「既存のポリシーを直接アタッチ」
      &rarr; 「S3」で検索 &rarr; 「<strong>AmazonS3FullAccess</strong>」を選択 &rarr; 「次へ」 &rarr;
      「ユーザーの作成」</li><li>表示された「<strong>アクセスキー ID</strong>」と「<strong>シークレットアクセスキー</strong>」
      をメモ帳などにコピペして保管する。</li></ul><h2><a href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E6%AC%A1%E3%81%ABrails%E3%81%A7%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"></a>次に、Railsでやること</h2><h3><a
      href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E5%BF%85%E8%A6%81%E3%81%AAgem%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"></a>必要なGemのインストール</h3><div
      data-lang=\"ruby\">Gemfile<pre>gem &quot;aws-sdk-s3&quot;, require: false #追記</pre></div><div
      data-lang=\"shell\"><pre>$ bundle install</pre></div><h3><a href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#s3%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%92%E5%85%A5%E5%8A%9B\"></a>S3へのアクセスキーを入力</h3><div
      data-lang=\"shell\"><pre>$ EDITOR=vim rails credentials:edit</pre></div><div
      data-lang=\"yml\"><pre>aws:\r\n access_key_id: #ここに自分のアクセスキーIDをコピペ\r\n secret_access_key:
      #ここに自分のシークレットアクセスキーをコピペ</pre></div><p><img data-fr-image-pasted=\"true\" alt=\":bulb:\"
      height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f4a1.png\"
      title=\":bulb:\" width=\"20\" class=\"fr-fic fr-dii\">&nbsp;<code>i</code>キーで編集開始、<code>esc</code>で編集終了
      、&nbsp;<code>ZZ</code>で保存して終了</p><p>後から入力を確認したいときは</p><div data-lang=\"shell\"><pre>$
      rails credentials:show</pre></div><p><img data-fr-image-pasted=\"true\" alt=\":information_source:\"
      height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/2139-fe0f.png\"
      title=\":information_source:\" width=\"20\" class=\"fr-fic fr-dii\">&nbsp;入力内容は
      config/master.key を使って暗号化され、 config/credentials.yml.enc が生成されます。これは中身が暗号化されているのでGitで管理しても大丈夫です。</p><h3><a
      href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#heroku%E3%81%A7%E3%81%AE%E7%94%BB%E5%83%8F%E3%81%AE%E4%BF%9D%E5%AD%98%E5%85%88%E3%82%92amazon-s3%E3%81%AB%E5%A4%89%E6%9B%B4\"></a>Herokuでの画像の保存先をAmazon
      S3に変更</h3><div data-lang=\"yml\">config/storage.yml<pre>amazon:\r\n  # 以下3行はそのまま\r\n
      \ service: S3\r\n  access_key_id: &lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;\r\n  secret_access_key: &lt;%= Rails.application.credentials.dig(:aws,
      :secret_access_key) %&gt;\r\n  # 以下２行は変える\r\n  region: ap-northeast-1 #東京\r\n
      \ bucket: my-rails-app-first-bucket #自分で作成したS3のバケットの名前\r\n\r\n</pre></div><div
      data-lang=\"ruby\">config/environments/production.rb<pre>config.active_storage.service
      = :amazon #amazonに変更</pre></div><h2><a href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E6%9C%80%E5%BE%8C%E3%81%ABheroku%E3%81%A7%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"></a>最後に、Herokuでやること</h2><div
      data-lang=\"shell\"><pre>$ heroku buildpacks:add -i 1 https://github.com/heroku/heroku-buildpack-activestorage-preview\r\n$
      git add .\r\n$ git commit -m &quot;added s3 to production&quot;\r\n$ git push
      heroku master</pre></div><p>Railsプロジェックトのマスターキー(config/master.keyの中身)をコピーします</p><div
      data-lang=\"shell\"><pre>$ heroku config:set RAILS_MASTER_KEY=マスターキーをここに貼り付け\r\n$
      heroku run rails db:migrate\r\n$ heroku open</pre></div><p>これで以上です。<img data-fr-image-pasted=\"true\"
      alt=\":tada:\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f389.png\"
      title=\":tada:\" width=\"20\" class=\"fr-fic fr-dii\">&nbsp;<br>お疲れ様です〜<img
      data-fr-image-pasted=\"true\" alt=\":coffee:\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/2615-fe0f.png\"
      title=\":coffee:\" width=\"20\" class=\"fr-fic fr-dii\"></p></section>"
    - '2018-12-01 08:35:25.349434'
    - '2018-12-01 08:35:25.349434'
  - - 84
    - rails5.2 Bootstrapとclearance 導入
    - "<h1 style=\"text-align: center;\"><span style=\"color: rgb(184, 49, 47);\">認証(クリアランス)
      と bootstrap</span></h1><p><span style=\"font-size: 30px;\">前提 jqueryを入れている(bootstrapはjqueryが必要)</span></p><p><br></p><p><strong>1.gemのインストール</strong></p><pre>Gemfile\r\n...\r\ngem
      &#39;clearance&#39;\r\ngem &#39;bootstrap-sass&#39;\r\ngem &#39;sass-rails&#39;</pre><p><code>bundle
      install</code></p><p><strong><br></strong></p><p><strong>2. bootstrapのcssを読み込む</strong></p><pre><code>#assets/stylesheets/application.scss\r\n...\r\n@import
      &#39;bootstrap-sprockets&#39;;\r\n@import &#39;bootstrap&#39;;</code></pre><p><strong>bootstrapのjsを読み込む</strong></p><pre>#assetes/javascripts/application.js\r\n...\r\n//=
      require bootstrap-sprockets</pre><p><span style=\"font-family: Impact,Charcoal,sans-serif;\"><span
      style=\"font-size: 30px;\">以上でbootstrapは終了</span><span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style='background: url(\"https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg\");
      font-size: 30px;'>&nbsp;</span></span></p><p><span style=\"font-family: Impact,Charcoal,sans-serif;\">&nbsp;</span></p><p><br></p><p><strong>3.クリアランスの設定ファイルをインストールする(deviseの導入と同じ要領)</strong></p><pre><code>rails
      generate clearance:install</code></pre><p><br></p><p>端末に以下のログが確認できるはず</p><pre><code>create
      \ config/initializers/clearance.rb\r\n      insert  app/controllers/application_controller.rb\r\n
      \     create  app/models/user.rb\r\n      create  db/migrate/20161231132513_create_users.rb\r\n\r\n*******************************************************************************\r\n\r\nNext
      steps:\r\n\r\n1. Configure the mailer to create full URLs in emails:\r\n\r\n
      \   # config/environments/{development,test}.rb\r\n    config.action_mailer.default_url_options
      = { host: &#39;localhost:3000&#39; }\r\n\r\n    In production it should be your
      app&#39;s domain name.\r\n\r\n2. Display user session and flashes. For example,
      in your application layout:\r\n\r\n    &lt;% if signed_in? %&gt;\r\n      Signed
      in as: &lt;%= current_user.email %&gt;\r\n      &lt;%= button_to &#39;Sign out&#39;,
      sign_out_path, method: :delete %&gt;\r\n    &lt;% else %&gt;\r\n      &lt;%=
      link_to &#39;Sign in&#39;, sign_in_path %&gt;\r\n    &lt;% end %&gt;\r\n\r\n
      \   &lt;div id=&quot;flash&quot;&gt;\r\n      &lt;% flash.each do |key, value|
      %&gt;\r\n        &lt;div class=&quot;flash &lt;%= key %&gt;&quot;&gt;&lt;%=
      value %&gt;&lt;/div&gt;\r\n      &lt;% end %&gt;\r\n    &lt;/div&gt;\r\n\r\n3.
      Migrate:\r\n\r\n    rake db:migrate\r\n\r\n*******************************************************************************\r\n</code></pre><p><br></p><p><strong>4.
      step1. environmentの　development.rb / test.rb にて email中にURLを生成するために必要なメイラーの設定を行う(production.rbでは自分のドメインの記載が必要になる)</strong></p><pre><code>#config/environments/development.rb\r\n...\r\n
      \ config.action_mailer.default_url_options = { host: &#39;localhost:3000&#39;
      }</code>\r\n<code>  # config.action_mailer.default_url_options = { host: &#39;localhost&#39;,
      port: 3000 } でも良い\r\n...\r\n</code></pre><p><br></p><p><strong>step2. アプリケーションのレイアウトに,
      セッションとフラッシュの表示機能を実装する</strong></p><p><code>&lt;% if signed_in? %&gt;<br>&nbsp;
      &nbsp; &nbsp; Signed in as: &lt;%= current_user.email %&gt;<br>&nbsp; &nbsp;
      &nbsp; &lt;%= button_to &#39;Sign out&#39;, sign_out_path, method: :delete %&gt;<br>&nbsp;
      &nbsp; &lt;% else %&gt;<br>&nbsp; &nbsp; &nbsp; &lt;%= link_to &#39;Sign in&#39;,
      sign_in_path %&gt;<br>&nbsp; &nbsp; &lt;% end %&gt;<br><br>&nbsp; &nbsp; &lt;div
      id=&quot;flash&quot;&gt;<br>&nbsp; &nbsp; &nbsp; &lt;% flash.each do |key, value|
      %&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &lt;div class=&quot;flash &lt;%= key %&gt;&quot;&gt;&lt;%=
      value %&gt;&lt;/div&gt;<br>&nbsp; &nbsp; &nbsp; &lt;% end %&gt;<br>&nbsp; &nbsp;
      &lt;/div&gt;</code></p><p><br></p><p>セッション表示の例 (bootstrapを使って好きに作ってよし!!)</p><pre><code>#views/layouts/_navigation.html.erb\r\n\r\n&lt;nav
      class=&quot;navbar navbar-default&quot;&gt;\r\n  &lt;div class=&quot;container-fluid&quot;&gt;\r\n
      \   &lt;!-- Brand and toggle get grouped for better mobile display --&gt;\r\n
      \   &lt;div class=&quot;navbar-header&quot;&gt;\r\n      &lt;button type=&quot;button&quot;
      class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbar-collapse&quot;
      aria-expanded=&quot;false&quot;&gt;\r\n        &lt;span class=&quot;sr-only&quot;&gt;Toggle
      navigation&lt;/span&gt;\r\n        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;\r\n
      \       &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;\r\n        &lt;span
      class=&quot;icon-bar&quot;&gt;&lt;/span&gt;\r\n      &lt;/button&gt;\r\n   
        &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;ようこそブログへ!!</code><code>&lt;/a&gt;\r\n
      \   &lt;/div&gt;\r\n    &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbar-collapse&quot;&gt;\r\n
      \   &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;\r\n          &lt;li&gt;&lt;%=
      link_to &#39;Home&#39;, root_path %&gt;&lt;/li&gt;\r\n                <span
      style=\"color: rgb(184, 49, 47);\">&lt;% if signed_in? %&gt;\r\n           
          &lt;li&gt;&lt;%= link_to &#39;新規投稿&#39;, new_article_path %&gt;&lt;/li&gt;\r\n
      \               &lt;li&gt;Signed in as: &lt;%= current_user.email %&gt;&lt;/li&gt;\r\n 
                    &lt;li&gt;&lt;%= link_to &#39;ログアウト&#39;, sign_out_path, method:
      :delete %&gt;&lt;/li&gt;\r\n              &lt;% else %&gt;\r\n             
        &lt;li&gt;&lt;%= link_to &#39;ログイン&#39;, sign_in_path %&gt;&lt;/li&gt;\r\n 
                  &lt;% end %&gt;</span>\r\n    &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n
      \ &lt;/div&gt;\r\n&lt;/nav&gt;\r\n</code></pre><p><br></p><p>フラッシュの例</p><pre><code>#views/layouts/application.html.erb\r\n\r\n&lt;!DOCTYPE
      html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;マイブログ&lt;/title&gt;\r\n
      \   &lt;%= csrf_meta_tags %&gt;\r\n\r\n    &lt;%= stylesheet_link_tag    &#39;application&#39;,
      media: &#39;all&#39;, &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&gt;\r\n
      \   &lt;%= javascript_include_tag &#39;application&#39;, &#39;data-turbolinks-track&#39;:
      &#39;reload&#39; %&gt;\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n    <span
      style=\"color: rgb(44, 130, 201);\">&lt;%= render &quot;layouts/navigation&quot;
      %&gt;</span>\r\n    <span style=\"color: rgb(184, 49, 47);\">&lt;div id=&quot;flash&quot;&gt;\r\n
      \     &lt;% flash.each do |key, value| %&gt;\r\n        &lt;div class=&quot;flash
      &lt;%= key %&gt;&quot;&gt;&lt;%= value %&gt;&lt;/div&gt;\r\n      &lt;% end
      %&gt;\r\n    &lt;/div&gt;</span>\r\n    &lt;div class=&quot;container-fluid&quot;&gt;\r\n
      \     &lt;%= yield %&gt;\r\n    &lt;/div&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre><p><br></p><p><strong>step3
      <code>rails generate clearance:install</code> を行ってuserモデルが生成されたので、マイグレーションファイルを生成する</strong></p><pre>rake
      db:migrate</pre><p><br></p><p>以上でクリアランスの設定終了</p><p>認証のviewをいじったり、認証のルートを変えたり、ボットを入れたりしたい場合は<a
      href=\"https://github.com/thoughtbot/clearance\">こちら</a>で詳しい内容をご確認ください</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-08 15:29:09.337574'
    - '2019-03-04 07:22:33.578063'
  - - 85
    - rails5.2 jqueryとfontawesomeの導入
    - "<h1 style=\"text-align: center;\">Railsにfontawesomeとjqueryを導入</h1><p><strong><span
      style=\"font-size: 24px;\">fontawesome 4.4.0の導入</span></strong></p><pre>#application.html.erb\r\n&lt;head&gt;\r\n&lt;title&gt;my_project&lt;/title&gt;\r\n&lt;%=
      csrf_meta_tags %&gt;\r\n&lt;%= csp_meta_tag %&gt;\r\n...\r\n<span style=\"color:
      rgb(226, 80, 65);\">&lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.4.0/css/font-awesome.min.css&quot;
      rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;</span>\r\n...\r\n&lt;%=
      stylesheet_link_tag    &#39;application&#39;, media: &#39;all&#39;, &#39;data-turbolinks-track&#39;:
      &#39;reload&#39; %&gt;\r\n&lt;%= javascript_include_tag &#39;application&#39;,
      &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&gt;\r\n&lt;/head&gt;\r\n...</pre><p
      style=\"text-align: center;\"><span style=\"font-family: Impact, Charcoal, sans-serif;
      font-size: 30px;\">CDNを一行記述すればfontawesome導入終了！！</span></p><p data-empty=\"true\"><br></p><p
      data-empty=\"true\"><strong><span style=\"font-size: 24px;\">次にjquery導入!!</span></strong></p><p
      data-empty=\"true\"><strong>step1</strong></p><pre>#Gemfile\r\n...\r\n<strong>gem
      &#39;jquery-rails&#39;</strong></pre><pre>$ bundle install</pre><p><br></p><p>step2</p><p><strong>jqueryのjs読み込み</strong></p><pre>#assets/javascripts/application.js\r\n...\r\n//=
      require jquery\r\n//= require jquery_ujs</pre><p><br></p><p>なんと</p><p style=\"text-align:
      center;\"><span style=\"font-family: Impact, Charcoal, sans-serif; font-size:
      30px;\">これだけでjquery読み込み終了！！</span></p><p><span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>&nbsp;</p><p
      style=\"text-align: center;\"><br></p><p><br></p><p><br></p><p><br></p><p>ちなみに...</p><p><br></p><p>gemでfontawesomeを使う人は...</p><p><br></p><pre>#Gemfile\r\n<code>gem
      &#39;font-awesome-rails&#39;</code></pre><p><code>$ bundle install</code></p><p><br></p><p>app/assets/stylesheet/application.scss</p><pre><code>@import
      &#39;font-awesome&#39;;</code></pre><p>これで終了!</p><p><br></p><pre><code>&lt;%=
      fa_icon &#39;star&#39; %&gt;</code></pre><p><i class=\"fa fa-star\"></i></p><p>的な感じで使える</p><p><br></p><p><br></p>"
    - '2018-12-08 15:55:53.848985'
    - '2019-07-20 04:42:28.062261'
  - - 86
    - Rails simple_formの導入
    - "<h1 style=\"text-align: center;\">simple_formを導入して簡単にフォームを作れる様にする</h1><p>1.</p><pre><code>#Gemfile\r\n...\r\ngem
      &#39;simple_form&#39;\r\n</code></pre><pre>$ bundle install</pre><p><br></p><p>step2
      simple_formの設定ファイルをインストール</p><pre>$ rails generate simple_form:install</pre><p><strong>Simple
      Formにbootstrapも適用したいいとはこちら！！</strong></p><pre>$ rails generate simple_form:install
      --bootstrap</pre><p><br></p><p>使い方は<a href=\"https://remonote.jp/rails-simple_form-bootstrap\">こちらの方</a>や<a
      href=\"https://qiita.com/Inp/items/4f72918c2fba0d3a8809\">こちらの方</a>が見やすいです</p><p><br></p><p><strong>formを作る</strong></p><pre><code>#
      _form.html.erb\r\n\r\n&lt;%= simple_form_for (@article) do |f| %&gt;\r\n  &lt;%
      if @article.errors.any? %&gt;\r\n    &lt;div id=&quot;error_explanation&quot;&gt;\r\n
      \     &lt;h2&gt;\r\n        &lt;%= &quot;#{pluralize(@article.errors.count,
      &quot;error&quot;)}個のエラーで保存ができません&quot; %&gt;\r\n      &lt;/h2&gt;\r\n      &lt;ul&gt;\r\n
      \       &lt;% @article.errors.full_messages.each do |msg| %&gt;\r\n          &lt;li&gt;\r\n
      \           &lt;%= msg %&gt;\r\n          &lt;/li&gt;\r\n          &lt;% end
      %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;% end %&gt;\r\n\r\n
      \ &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input :title, label:
      &quot;タイトル&quot; %&gt;\r\n  &lt;/div&gt;</code>\r\n\r\n<code><code>  &lt;div
      class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input :body, label: &quot;内容&quot;
      %&gt;\r\n  &lt;/div&gt;</code>\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n
      \   &lt;%= f.input :image, as: :file, class: &quot;form-control&quot; %&gt;\r\n
      \ &lt;/div&gt;\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.button
      :submit %&gt;\r\n  &lt;/div&gt;\r\n</code></pre><p>&nbsp;</p><p>formのcssを作る(自分の好きなレイアウトに)</p><pre>#stylesheets/form.scss\r\n.simple_form
      {\r\nlabel {\r\nmargin: 2px 10px;\r\n&amp;.radio, &amp;.checkbox {\r\nfloat:
      none;\r\nmargin: 0;\r\nwidth: auto;\r\ntext-align: left;\r\n}\r\n&amp;.checkbox
      {\r\ndisplay: block;\r\n}\r\n&amp;.radio { margin-right: 10px; }\r\n}\r\ndiv.input
      { margin-bottom: 10px;}\r\ninput.radio_buttons, input.check_boxes {\r\nmargin-right:
      5px;\r\n}\r\n.alert-error {\r\ncolor: #D00;\r\nmargin-bottom: 10px;\r\nfont-weight:
      bold;\r\n}\r\n.hint, .error {\r\nclear: left;\r\nfont-size: 12px;\r\ncolor:
      #D00;\r\ndisplay: block;\r\n}\r\n.hint {\r\ncolor: #555;\r\nfont-style: italic;\r\n}\r\n}</pre><p><br></p><p>simple_formを使えば記述は多少少なくなるけど、正直、あまり導入しなくてもいいかなって感じではある...</p><p><br></p><p>こっちの方が個人的には好き</p><p><br></p><pre>#_form.html.erb\r\n\r\n&lt;%=
      form_with(model: post, local: true) do |form| %&gt;\r\n&lt;% if post.errors.any?
      %&gt;\r\n&lt;div id=&quot;error_explanation&quot;&gt;\r\n&lt;h2&gt;&lt;%= pluralize(post.errors.count,
      &quot;error&quot;) %&gt; 保存できません&lt;/h2&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;% post.errors.full_messages.each
      do |message| %&gt;\r\n&lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;\r\n&lt;% end
      %&gt;\r\n&lt;/ul&gt;\r\n&lt;/div&gt;\r\n&lt;% end %&gt;\r\n\r\n&lt;div class=&quot;field&quot;&gt;\r\n&lt;%=
      form.label :title %&gt;\r\n&lt;%= form.text_field :title, class: &#39;form-control&#39;
      %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class=&quot;field&quot;&gt;\r\n&lt;%= form.label
      :body %&gt;\r\n&lt;%= form.text_field :body, class: &#39;form-control&#39; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;field&quot;&gt;\r\n&lt;%= form.label :image %&gt;\r\n&lt;%= form.file_field
      :image, class: &#39;form-control&#39; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class=&quot;actions&quot;&gt;\r\n&lt;%=
      form.submit &#39;更新する&#39;, class: &#39;btn btn-block btn-success&#39; %&gt;\r\n&lt;/div&gt;\r\n&lt;%
      end %&gt;</pre><pre>articles_controller\r\n\r\ndef new\r\n@article = Article.new\r\nend\r\n\r\ndef
      edit\r\n@article = Article.find(params[:id])\r\nend\r\n\r\ndef create\r\n  @article
      = Article.new(article_params)\r\n  if @article.save\r\n  flash[:notice] = &quot;作成に成功しました&quot;\r\n
      \ redirect_to article_path(@article)\r\n  else\r\n  flash[:alert] = &quot;エラーのより保存できませんでした&quot;\r\n
      \ render :new\r\n  end\r\nend\r\n\r\nprivate \r\n\r\ndef article_params\r\n
      \ params.require(:article).permit(:title, :body, :image)\r\nend\r\n\r\n</pre><pre>new.html.erb
      edit.html.erb\r\n&lt;%= render &#39;form&#39;, post: @article %&gt;</pre>"
    - '2018-12-08 16:03:39.791986'
    - '2018-12-08 16:51:33.03194'
  - - 87
    - wysiwyg-rails
    - "<h1 style=\"text-align: center;\">wysiwyg-railsの導入</h1><p><br></p><p><span
      style='font-family: \"Times New Roman\", Times, serif, -webkit-standard; font-size:
      30px;'>前提: bootstrap, &nbsp;fontawesome が入っている</span></p><p><br></p><p>1. gemのインストール</p><pre><code>#Gemfile\r\n...\r\ngem
      &#39;wysiwyg-rails&#39;\r\n</code></pre><p><code>bundle install</code></p><p><br></p><p>2.
      wysiwyg-railsのjsを読み込む</p><p>(最低限)</p><pre><code>#app/assets/javascripts/application.js\r\n...\r\n//=
      require froala_editor.min.js\r\n...\r\n</code></pre><p><br></p><p>他にも自分が使いたい機能に合わせてjsを読み込もう!!
      (それぞれがなのを表すかは<a class=\"fr-strong\" href=\"https://www.froala.com/wysiwyg-editor/docs/framework-plugins/rails\">公式ドキュメント</a>をチェック!!)</p><p><br></p><p>下は私の例</p><pre><code>#app/assets/stylesheets/application.scss\r\n\r\n...\r\n//=
      require froala_editor.min.js\r\n//= require plugins/align.min.js\r\n//= require
      plugins/char_counter.min.js\r\n//= require plugins/code_beautifier.min.js\r\n//=
      require plugins/code_view.min.js\r\n//= require plugins/colors.min.js\r\n//=
      require plugins/emoticons.min.js\r\n//= require plugins/entities.min.js\r\n//=
      require plugins/file.min.js\r\n//= require plugins/font_family.min.js\r\n//=
      require plugins/font_size.min.js\r\n//= require plugins/fullscreen.min.js\r\n//=
      require plugins/help.min.js\r\n//= require plugins/image.min.js\r\n//= require
      plugins/image_manager.min.js\r\n//= require plugins/inline_style.min.js\r\n//=
      require plugins/line_breaker.min.js\r\n//= require plugins/link.min.js\r\n//=
      require plugins/lists.min.js\r\n//= require plugins/paragraph_format.min.js\r\n//=
      require plugins/paragraph_style.min.js\r\n//= require plugins/print.min.js\r\n//=
      require plugins/quick_insert.min.js\r\n//= require plugins/quote.min.js\r\n//=
      require plugins/save.min.js\r\n//= require plugins/table.min.js\r\n//= require
      plugins/special_characters.min.js\r\n//= require plugins/url.min.js\r\n//= require
      plugins/video.min.js\r\n//= require activestorage\r\n//= require third_party/image_aviary.min.js\r\n//=
      require third_party/spell_checker.min.js\r\n//= require languages/ja.js\r\n
      ...\r\n</code></pre><p><br></p><p>3. wysiwyg-railsのcssを読み込む</p><p>(最低限)</p><pre><code>#app/assets/stylesheets/application.scss\r\n\r\n...\r\n
      @import &#39;froala_editor.min.css&#39;;\r\n @import &#39;froala_style.min.css&#39;;\r\n
      ...\r\n</code></pre><p><br></p><p>下は私の例</p><pre>@import &#39;form&#39;;\r\n@import
      &#39;froala_editor.min.css&#39;;\r\n@import &#39;froala_style.min.css&#39;;\r\n@import
      &#39;plugins/char_counter.min.css&#39;;\r\n@import &#39;plugins/code_view.min.css&#39;;\r\n@import
      &#39;plugins/colors.min.css&#39;;\r\n@import &#39;plugins/emoticons.min.css&#39;;\r\n@import
      &#39;plugins/file.min.css&#39;;\r\n@import &#39;plugins/fullscreen.min.css&#39;;\r\n@import
      &#39;plugins/help.min.css&#39;;\r\n@import &#39;plugins/image_manager.min.css&#39;;\r\n@import
      &#39;plugins/image.min.css&#39;;\r\n@import &#39;plugins/line_breaker.min.css&#39;;\r\n@import
      &#39;plugins/quick_insert.min.css&#39;;\r\n@import &#39;plugins/special_characters.min.css&#39;;\r\n@import
      &#39;plugins/table.min.css&#39;;\r\n@import &#39;plugins/video.min.css&#39;;\r\n@import
      &#39;bootstrap-sprockets&#39;;\r\n@import &#39;bootstrap&#39;;\r\n@import &#39;third_party/spell_checker.min.css&#39;;\r\n//
      @import &#39;languages/ja.css&#39;; これを入れるとerrorになったのでコメントしました\r\n// @import
      &#39;third_party/embedly.min.css&#39;; embedlyは最近になってapikeyを有料で取得しなければならなくなったみたい...
      <a href=\"http://embed.ly/pricing\">http://embed.ly/pricing</a>\r\n\r\n</pre><p><br></p><p>4.
      コントローラ作成</p><pre><code>#app/controllers/articles_controller.rb\r\n\r\nclass
      ArticlesController &lt; ApplicationController\r\n  before_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\n  before_action :require_login, except:
      [:index, :show]</code>\r\n\r\n<code>  # 一覧 \r\n  def index\r\n    @articles
      = Article.all\r\n  end\r\n  </code>\r\n<code>  # 新規\r\n  def new\r\n    @article
      = Article.new\r\n  end\r\n\r\n  # 作成\r\n  def create\r\n    @article = Article.new(article_params)\r\n
      \   if @article.save\r\n      flash[:notice] = &quot;作成されました&quot;\r\n      redirect_to
      article_path(@article)\r\n    else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n
      \     render :new\r\n    end\r\n  end\r\n\r\n  # 編集\r\n  def edit\r\n  end\r\n\r\n 
      # 更新\r\n  def update\r\n    if @article.update_attributes(article_params)\r\n 
          flash[:notice] = &quot;更新されました&quot;\r\n      redirect_to article_path(@article)\r\n
      \   else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :edit\r\n
      \   end\r\n  end\r\n\r\n  # 詳細\r\n  def show\r\n  end\r\n\r\n  # 削除\r\n  def
      destroy\r\n    if @article.destroy\r\n      flash[:notice] = &quot;削除されました&quot;\r\n
      \     redirect_to articles_path\r\n    else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n
      \   end\r\n  end\r\n\r\n  private\r\n\r\n  def article_params\r\n    params.require(:article).permit(:title,
      :body)\r\n  end\r\n\r\n  def find_article\r\n    @article = Article.find(params[:id])\r\n
      \ end\r\nend\r\n</code></pre><p>ここで</p><p><code>before_action :require_login</code>
      は, clearanceという認証システムのメソッドです。</p><p>deviseでいう</p><p><code>before_action :authenticate_user!</code>
      と同じです</p><p>認証システムを導入してない方はシカトして結構です</p><p><br></p><p>4. view( <span style=\"color:
      rgb(226, 80, 65);\">index.html.erb, new.html.erb, show.html.erb, _form.html.erb,
      edit.html.erb&nbsp;</span>)を作る</p><p><br></p><p><span style=\"font-size: 24px;\">_form.html.erb</span></p><pre><code>#app/views/articles/_form.html.erb\r\n</code>\r\n<code>#
      simple_formを導入してない方は普通に form_with とか form_for で好きな様に作ってもらってOK!</code>\r\n<code>\r\n&lt;%=
      simple_form_for (@article) do |f| %&gt;\r\n  &lt;% if @article.errors.any? %&gt;\r\n
      \   &lt;div id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;\r\n   
          &lt;%= &quot;#{pluralize(@article.errors.count, &quot;error&quot;)} によりこの投稿は保存されませんでした&quot;
      %&gt;\r\n      &lt;/h2&gt;\r\n      &lt;ul&gt;\r\n        &lt;% @article.errors.full_messages.each
      do |msg| %&gt;\r\n          &lt;li&gt;\r\n            &lt;%= msg %&gt;\r\n          &lt;/li&gt;\r\n
      \         &lt;% end %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;%
      end %&gt;\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input
      :title, class: &quot;form-control&quot; %&gt;\r\n  &lt;/div&gt;\r\n\r\n  &lt;div
      class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.label :body %&gt;\r\n    &lt;%=
      f.text_area :body, <span style=\"color: rgb(250, 197, 28);\">id: &quot;wysiwyg&quot;</span>
      %&gt;\r\n  &lt;/div&gt;\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n
      \   &lt;%= f.button :submit %&gt;\r\n  &lt;/div&gt;\r\n&lt;% end %&gt;\r\n&lt;!--
      script for FROALA-WYSIWYG --&gt;\r\n<span style=\"color: rgb(209, 72, 65);\">&lt;script&gt;\r\n
      \ $(&#39;</span><span style=\"color: rgb(250, 197, 28);\">#wysiwyg</span><span
      style=\"color: rgb(209, 72, 65);\">&#39;).froalaEditor({\r\n    inlineMode:
      false,\r\n    heightMin: &#39;200px&#39;,\r\n    toolbarButtons: [&#39;bold&#39;,
      &#39;italic&#39;, &#39;underline&#39;],</span></code><span style=\"color: rgb(209,
      72, 65);\">\r\n<code>    </code>language: &#39;ja&#39;,</span><code><span style=\"color:
      rgb(209, 72, 65);\">\r\n  })\r\n&lt;/script&gt;</span>\r\n</code></pre><p>ここで,
      私のjs,cssを真似た人は</p><p><code>&lt;script&gt;<br>&nbsp; $(&#39;#wysiwyg&#39;).froalaEditor({<br>&nbsp;
      &nbsp; inlineMode: false,<br>&nbsp; &nbsp; heightMin: &#39;200px&#39;,<br>&nbsp;
      &nbsp; toolbarButtons: [&#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;],<br>&nbsp;
      })<br>&lt;/script&gt;</code> の部分は</p><p><span style=\"color: rgb(84, 172, 210);\">&lt;script&gt;<br>$(function()
      {<br>$(&#39;#wysiwyg&#39;).froalaEditor({<br>language: &#39;ja&#39;,<br>heightMin:
      500,<br>heightMax: 1000,<br>})<br>});<br>&lt;/script&gt;</span></p><p>に置き換えてください(jsとcssで読み込んだボタンと機能が勝手に適用されます!!)</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1544360831786-editor.png\"
      style=\"width: 900px; height: 100px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>ちなみに、</p><p><span
      style=\"color: rgb(235, 107, 86);\">&lt;!-- &lt;script&gt;<br>$(function() {<br>$(&#39;#wysiwyg&#39;).froalaEditor({<br>toolbarButtons:
      [&#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;strikeThrough&#39;,
      &#39;color&#39;, &#39;|&#39;, &#39;paragraphFormat&#39;, &#39;align&#39;, &#39;undo&#39;,
      &#39;redo&#39;, &#39;html&#39;],<br>colorsBackground: [<br>&#39;#15E67F&#39;,
      &#39;#E3DE8C&#39;, &#39;#D8A076&#39;, &#39;#D83762&#39;, &#39;#76B6D8&#39;,
      &#39;REMOVE&#39;,<br>&#39;#1C7A90&#39;, &#39;#249CB8&#39;, &#39;#4ABED9&#39;,
      &#39;#FBD75B&#39;, &#39;#FBE571&#39;, &#39;#FFFFFF&#39;<br>],<br>colorsDefaultTab:
      &#39;background&#39;,<br>colorsStep: 6,<br>colorsText: [<br>&#39;#15E67F&#39;,
      &#39;#E3DE8C&#39;, &#39;#D8A076&#39;, &#39;#D83762&#39;, &#39;#76B6D8&#39;,
      &#39;REMOVE&#39;,<br>&#39;#1C7A90&#39;, &#39;#249CB8&#39;, &#39;#4ABED9&#39;,
      &#39;#FBD75B&#39;, &#39;#FBE571&#39;, &#39;#FFFFFF&#39;<br>]<br>})<br>});<br>&lt;/script&gt;
      --&gt;</span></p><p>みたいに一個一個指定して使いたい方はjsやcssで読み込まなくて良いです</p><p><br></p><p><span
      style=\"font-size: 24px;\">new.html.erb</span></p><pre><code>#app/views/articles/new.html.erb\r\n\r\n&lt;h2&gt;新規投稿&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot; %&gt;\r\n</code></pre><h4><br></h4><p><span
      style=\"font-size: 24px;\">edit.html.erb</span></p><pre><code>#app/views/articles/edit.html.erb\r\n\r\n&lt;h2&gt;編集ページ&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot; %&gt;</code></pre><p><br></p><p><span style=\"font-size:
      24px;\">index.html.erb</span></p><pre><code>#app/views/articles/index.html.erb\r\n\r\n&lt;div
      class=&quot;container&quot;&gt;\r\n  &lt;div class=&quot;col-sm-10 col-sm-offset-2
      col-xs-12&quot;&gt;\r\n    &lt;% @articles.each do |article| %&gt;\r\n    &lt;div
      class=&quot;col-xs-12 text-center&quot;&gt;\r\n      &lt;div class=&quot;text-center&quot;&gt;\r\n
      \       &lt;h2&gt;&lt;%= article.title %&gt;&lt;/h2&gt;\r\n        &lt;h6&gt;&lt;%=
      article.created_at.strftime(&#39;%b %d, %Y&#39;) %&gt;&lt;/h6&gt;\r\n      &lt;/div&gt;\r\n
      \     &lt;div&gt;\r\n        &lt;%= raw(article.body).truncate(300) %&gt;\r\n
      \     &lt;/div&gt;\r\n      &lt;div class=&quot;text-center&quot;&gt;\r\n   
          &lt;%= link_to &quot;詳細へ&quot;, article_path(article) %&gt;\r\n      &lt;/div&gt;\r\n
      \     &lt;!-- This block is available to only signed in users --&gt;\r\n      &lt;%
      if signed_in? %&gt;\r\n        &lt;%= link_to &quot;一覧&quot;, article_path(article),
      class: &quot;btn btn-primary&quot; %&gt;\r\n        &lt;%= link_to &quot;編集&quot;,
      edit_article_path(article), class: &quot;btn btn-default&quot; %&gt;\r\n   
          &lt;%= link_to &quot;削除&quot;, article_path(article), class: &quot;btn btn-danger&quot;,
      data: {:confirm =&gt; &quot;削除してもいいですか?&quot;}, method: :delete %&gt;\r\n      &lt;%
      end %&gt;\r\n      &lt;hr /&gt;\r\n    &lt;/div&gt;\r\n    &lt;% end %&gt;\r\n
      \ &lt;/div&gt;\r\n&lt;/div&gt;\r\n</code></pre><h4><br></h4><p><span style=\"font-size:
      24px;\">show.html.erb</span></p><pre><code>#app/views/articles/show.html.erb\r\n\r\n&lt;div
      class=&quot;col-sm-11 <code>col-sm-offset-1</code> col-xs-12&quot;&gt;\r\n  &lt;h2
      class=&quot;text-center&quot;&gt;&lt;%= @article.title %&gt;&lt;/h2&gt;\r\n
      \ &lt;h5 class=&quot;text-center&quot;&gt;&lt;%= @article.created_at.strftime(&#39;%b
      %d, %Y&#39;) %&gt;&lt;/h5&gt;\r\n  &lt;div class=&quot;<span style=\"color:
      rgb(250, 197, 28);\">fr-view</span>&quot;&gt;&lt;%= raw @article.body %&gt;&lt;/div&gt;\r\n&lt;/div&gt;\r\n</code></pre><p>ここで,
      Froala-WYSIWYG &nbsp;はクラス名に <span style=\"color: rgb(184, 49, 47);\">fr-view</span>
      を付与しないと エディターのビューのUIとして出力されません。</p><p>5. ルートを作る</p><pre><code>#config/routes.rb\r\n\r\nRails.application.routes.draw
      do\r\n  root to: &quot;articles#index&quot;\r\n  resources :articles\r\nend\r\n</code></pre><p><br></p><p>6.
      modelを作る</p><pre>$ rails generate model Article title:string body:text\r\n$
      rake db:migrate</pre><p><br></p><p>導入はこれで終わり！！</p><p>参考url <a href=\"https://www.codementor.io/kingsleysilas/how-to-build-a-blog-using-froala-wysiwyg-v86wyapnb#comments-v86wyapnb\">素晴らしい参考文献</a><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f601.svg);\">&nbsp;</span>&nbsp;</p><p>最高のエディターライフを!!<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60e.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60f.svg);\">&nbsp;</span></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-09 13:39:12.364198'
    - '2018-12-09 13:43:37.11485'
  - - 88
    - rails5.2 Active Storage
    - "<h1 style=\"text-align: center;\">Active Storageの導入</h1><p>今までは画像やファイルを保存したいときは、paperclipを使っていましたが、rails5.2からはactive
      storageが推奨されている様です。</p><p>そして腰抜かすくらい簡単に</p><p>導入できてしまいます<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60f.svg);\">&nbsp;</span>&nbsp;</p><p><br></p><p>早速やっていきます!!</p><p><br></p><p><span
      style=\"font-size: 30px;\">1. active_storageのインストール</span></p><pre>$ rails active_storage:install\r\n$
      rails db:migrate</pre><p>active_storageの設定ファイルをインストールした後、マイグレーションを実行することで<code>active_storage_blobs</code>と<code>active_storage_attachments</code>という名前のテーブルが2つ生成されます。</p><p><code>Blob</code>はファイル名、ファイルの種類、バイト数、誤り検出符号などのメタデータを保持するモデルで、<code>Attachment</code>モデルは、BlobオブジェクトとActive
      Recordオブジェクトを紐付けるための中</p><p>テーブルですが、全くいじる必要のないモデルなので、特に覚えなくても結構です。</p><p><br></p><p><span
      style=\"font-size: 30px;\">2. model生成</span></p><pre>$ rails g model Article
      title:string body: text\r\n$ rails db:migrate</pre><p><br></p><p><span style=\"font-size:
      30px;\">3. 実装</span></p><h2><br>1つの添付ファイルの場合</h2><p><br></p><p><span style=\"font-size:
      18px;\">article.rb</span></p><pre># article.rb\r\nclass Article &lt; ApplicationRecord\r\n
      \ has_one_attached :image \r\nend</pre><p><code>:image</code>はファイルの呼び名で、<code>:photo</code>、<code>:avatar</code>、<code>:profile</code>など、好きなものを指定してください。</p><p>ここで指定した
      image は、<span style=\"font-size: 24px; background-color: rgb(247, 218, 100);\">articlesテーブルのカラムの様な扱いになります</span>が、imageテーブルなどを作る必要はないです。Active
      Storageは裏側で<code>Blob</code>と<code>Attachment</code>モデルを使って、勝手に</p><p><code>article.image</code>を使えるようにしてくれます。</p><p><br></p><p><span
      style=\"font-size: 18px;\">articles_controller.rb</span></p><pre>class CommentsController
      &lt; ApplicationController\r\n  before_action :find_article, only: [:edit, :update,
      :show, :destroy]\r\n\r\n  def new\r\n    @article = Article.new\r\n  end\r\n\r\n
      \ def create\r\n    @article = Article.new(<span style=\"color: rgb(235, 107,
      86);\">article_params</span>)\r\n    if @article.save\r\n      flash[:notice]
      = &quot;保存しました&quot;\r\n      redirect_to article_path(@article)\r\n    else\r\n
      \     flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :new\r\n    end\r\n
      \ end\r\n\r\n  def show\r\n  end\r\n\r\n  def edit\r\n  end\r\n\r\n  def update\r\n
      \   if @article.update(<span style=\"color: rgb(235, 107, 86);\">article_params</span>)\r\n
      \     flash[:notice] = &quot;更新しました&quot;\r\n      redirect_to article_path(@article)\r\n
      \   else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :edit\r\n
      \   end\r\n  end\r\n\r\n  def destroy\r\n    if @article.destroy\r\n      flash[:notice]
      = &quot;削除しました&quot;\r\n      redirect_to articles_path\r\n    else\r\n      flash[:alert]
      = &quot;エラーが発生しました&quot;\r\n    end\r\n  end\r\n\r\n  # imageは、titleフィールドやbodyフィールドと同じ様に、articlesテーブルのカラムの様な扱いをする\r\n
      \ <span style=\"color: rgb(235, 107, 86);\">private\r\n  def article_params\r\n
      \   params.require(:article).permit(:title, :body, </span><span style=\"color:
      rgb(184, 49, 47);\"><span style=\"background-color: rgb(247, 218, 100);\">:image</span></span><span
      style=\"color: rgb(235, 107, 86);\">)\r\n  end</span>\r\n\r\n  def find_article\r\n
      \   @article = Article.find(params[:id])\r\n  end\r\n\r\nend</pre><p><br></p><p><span
      style=\"font-size: 18px;\">articles/_form.html.erb</span></p><pre>&lt;%= form_with
      model: article, local: true  do |f| %&gt;\r\n  &lt;% if @article.errors.any?
      %&gt;\r\n    &lt;div id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;&lt;%=
      &quot;#{pluralize(@article.errors.count, &quot;error&quot;)} により保存できませんでした&quot;
      %&gt;&lt;/h2&gt;\r\n      &lt;ul&gt;\r\n        &lt;% @article.errors.full_messages.each
      do |msg| %&gt;\r\n          &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;\r\n       
      &lt;% end %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;% end %&gt;\r\n\r\n
      \ &lt;%= f.text_area :title %&gt;&lt;br&gt;\r\n  &lt;%= <span style=\"color:
      rgb(243, 121, 52);\">f.file_field</span> <span style=\"color: rgb(243, 121,
      52);\">:image</span> %&gt;&lt;br&gt;\r\n  &lt;%= f.text_area :body %&gt;&lt;br&gt;\r\n
      \ &lt;%= f.submit %&gt;\r\n&lt;% end %&gt;</pre><p><br></p><p><span style=\"font-size:
      18px;\">new.html.erb</span></p><pre>&lt;h2&gt;新規投稿&lt;/h2&gt;\r\n&lt;%= render
      &quot;articles/form&quot;, artilce:@article %&gt;</pre><p><br></p><p><span style=\"font-size:
      18px;\">edit.html.erb</span></p><pre>&lt;h2&gt;編集&lt;/h2&gt;\r\n&lt;%= render
      &quot;articles/form&quot;, artilce:@article %&gt;</pre><p><br></p><p><span style=\"font-size:
      18px;\">show.html.erb</span></p><pre>&lt;div class=&quot;col-sm-11 col-sm-offset-1
      col-xs-12&quot;&gt;\r\n&lt;h2 class=&quot;text-center&quot;&gt;&lt;%= @article.title
      %&gt;&lt;/h2&gt;\r\n&lt;div class=&quot;text-center&quot;&gt;\r\n<span style=\"color:
      rgb(243, 121, 52);\">&lt;% if @article.image.attached? %&gt;\r\n&lt;%= image_tag
      @article.image</span><span style=\"color: rgb(0, 0, 0);\">, :alt =&gt; &quot;イメージ&quot;,
      width: &#39;30%&#39;, height: &#39;30%&#39;</span><span style=\"color: rgb(243,
      121, 52);\"> %&gt;\r\n&lt;% end %&gt;</span>\r\n&lt;/div&gt;\r\n&lt;h5 class=&quot;text-center&quot;&gt;&lt;%=
      @article.created_at.strftime(&#39;%b %d, %Y&#39;) %&gt;&lt;/h5&gt;\r\n&lt;div
      class=&quot;fr-view&quot;&gt;\r\n  &lt;%= raw @article.body %&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;</pre><p><span
      style=\"color: rgb(243, 121, 52);\">&lt;% if @article.image.attached? %&gt;<br>&lt;%=
      image_tag @article.image</span><span style=\"color: rgb(0, 0, 0);\">, :alt =&gt;
      &quot;イメージ&quot;, width: &#39;30%&#39;, height: &#39;30%&#39;</span><span style=\"color:
      rgb(243, 121, 52);\">&nbsp;%&gt;<br>&lt;% end %&gt;</span></p><p>の部分の <span
      style=\"color: rgb(0, 0, 0);\">:alt =&gt; &quot;イメージ&quot;, width: &#39;30%&#39;,
      height: &#39;30%&#39;は好きに変えてください。</span></p><p><span style=\"color: rgb(0, 0,
      0);\">これでactive_storageへの投稿、更新、削除が完成しました<span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><span
      style=\"color: rgb(0, 0, 0);\">しかし...active_storageは複数のファイルを保存することもできますので、そちらも紹介します。</span></p><h2><br>複数の添付ファイルの場合</h2><p><span
      style=\"font-size: 18px;\">article.rb</span></p><pre># article.rb\r\nclass Article
      &lt; ApplicationRecord\r\n  <span style=\"color: rgb(65, 168, 95);\"># has_one_attached
      :image</span>\r\n  <span style=\"color: rgb(41, 105, 176);\">has_many_attached
      :images</span>\r\nend</pre><p><br></p><p><span style=\"font-size: 18px;\">articles_controller.rb</span></p><pre>class
      CommentsController &lt; ApplicationController\r\n  before_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\n\r\n  def new\r\n    @article = Article.new\r\n
      \ end\r\n\r\n  def create\r\n    @article = Article.new(<span style=\"color:
      rgb(235, 107, 86);\">article_params</span>)\r\n    if @article.save\r\n      flash[:notice]
      = &quot;保存しました&quot;\r\n      redirect_to article_path(@article)\r\n    else\r\n
      \     flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :new\r\n    end\r\n
      \ end\r\n\r\n  def show\r\n  end\r\n\r\n  def edit\r\n  end\r\n\r\n  def update\r\n
      \   if @article.update(<span style=\"color: rgb(235, 107, 86);\">article_params</span>)\r\n
      \     flash[:notice] = &quot;更新しました&quot;\r\n      redirect_to article_path(@article)\r\n
      \   else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :edit\r\n
      \   end\r\n  end\r\n\r\n  def destroy\r\n    if @article.destroy\r\n      flash[:notice]
      = &quot;削除しました&quot;\r\n      redirect_to articles_path\r\n    else\r\n      flash[:alert]
      = &quot;エラーが発生しました&quot;\r\n    end\r\n  end\r\n\r\n  # imageは、titleフィールドやbodyフィールドと同じ様に、articlesテーブルのカラムの様な扱いをする\r\n
      \ <span style=\"color: rgb(235, 107, 86);\">private\r\n  def article_params\r\n 
        </span><span style=\"color: rgb(65, 168, 95);\"># params.require(:article).permit(:title,
      :body, :image)</span>\r\n<span style=\"color: rgb(235, 107, 86);\">    </span><span
      style=\"color: rgb(44, 130, 201);\">params.require(:article).permit(:title,
      :body, <span style=\"background-color: rgb(247, 218, 100);\">:images</span>)</span><span
      style=\"color: rgb(235, 107, 86);\">\r\n  end</span>\r\n\r\n  def find_article\r\n
      \   @article = Article.find(params[:id])\r\n  end\r\n\r\nend</pre><p><br></p><p><span
      style=\"font-size: 18px;\">articles/_form.html.erb</span></p><pre>&lt;%= form_with
      model: article, local: true  do |f| %&gt;\r\n  &lt;% if @article.errors.any?
      %&gt;\r\n    &lt;div id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;&lt;%=
      &quot;#{pluralize(@article.errors.count, &quot;error&quot;)} により保存できませんでした&quot;
      %&gt;&lt;/h2&gt;\r\n      &lt;ul&gt;\r\n        &lt;% @article.errors.full_messages.each
      do |msg| %&gt;\r\n          &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;\r\n        &lt;%
      end %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;% end %&gt;\r\n\r\n
      \ &lt;%= f.text_area :title %&gt;&lt;br&gt;\r\n<span style=\"color: rgb(65,
      168, 95);\">  &lt;!-- &lt;%= f.file_field :image %&gt;&lt;br&gt; --&gt;</span>\r\n
      \ <span style=\"color: rgb(44, 130, 201);\">&lt;%= f.file_field :images, multiple:
      true %&gt;&lt;br&gt;</span>\r\n  &lt;%= f.text_area :body %&gt;&lt;br&gt;\r\n
      \ &lt;%= f.submit %&gt;\r\n&lt;% end %&gt;</pre><p><br></p><p><span style=\"font-size:
      18px;\">show.html.erb</span></p><pre>&lt;div class=&quot;col-sm-11 col-sm-offset-1
      col-xs-12&quot;&gt;\r\n&lt;h2 class=&quot;text-center&quot;&gt;&lt;%= @article.title
      %&gt;&lt;/h2&gt;\r\n&lt;div class=&quot;text-center&quot;&gt;\r\n<span style=\"color:
      rgb(65, 168, 95);\">&lt;!-- &lt;% if @article.image.attached? %&gt;\r\n&lt;%=
      image_tag @article.image, :alt =&gt; &quot;イメージ&quot;, width: &#39;30%&#39;,
      height: &#39;30%&#39; %&gt;\r\n&lt;% end %&gt; --&gt;</span>\r\n<span style=\"color:
      rgb(44, 130, 201);\">&lt;% if @article.images.attached? %&gt;\r\n  &lt;% @article.images.each
      do |image| %&gt;\r\n    &lt;%= image_tag image %&gt; &lt;br&gt;\r\n  &lt;% end
      %&gt;\r\n&lt;% end %&gt;</span>\r\n\r\n&lt;/div&gt;\r\n&lt;h5 class=&quot;text-center&quot;&gt;&lt;%=
      @article.created_at.strftime(&#39;%b %d, %Y&#39;) %&gt;&lt;/h5&gt;\r\n&lt;div
      class=&quot;fr-view&quot;&gt;\r\n  &lt;%= raw @article.body %&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;</pre><p><br></p><p><span
      style=\"font-size: 18px;\">new.html.erb(変更なし)</span></p><pre>&lt;h2&gt;新規投稿&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot;, artilce:@article %&gt;</pre><p><br></p><p><span
      style=\"font-size: 18px;\">edit.html.erb<span style=\"font-size: 18px;\">(変更なし)</span></span></p><pre>&lt;h2&gt;編集&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot;, artilce:@article %&gt;</pre><p><br></p><p><span
      style=\"font-size: 18px;\">THAT&#39;S ALL RIGHT!!</span></p><p><span style=\"color:
      rgb(226, 80, 65);\"><br></span></p><p><br></p><p><span style=\"color: rgb(226,
      80, 65);\"><span style=\"font-size: 18px;\">ちなみに、今回は使わなかったものの、urlを生成したりプレビュー、ダウンロードリンクをするときは以下を使用</span></span></p><ul><li><pre><span
      style=\"font-size: 18px;\"><code>&lt;%= link_to &#39;プレビュー&#39;, rails_blob_path(article.image,
      disposition: &#39;preview&#39;) %&gt;</code></span></pre></li><li><pre><span
      style=\"font-size: 18px;\">&lt;%= link_to &#39;ダウンロード&#39;, rails_blob_path(article.image,
      disposition: &quot;preview&quot;) %&gt;</span></pre></li><li><span style=\"color:
      rgb(226, 80, 65);\"><span style=\"font-size: 18px;\">view以外でコンソールとかでrails_blob_pathを使うときは</span></span></li><li><span
      style=\"color: rgb(226, 80, 65);\"><span style=\"font-size: 18px;\">Rails.application.routes.url_helpers.rails_blob_path
      で使う</span></span></li><li><pre><span style=\"font-size: 18px;\">例) Rails.application.routes.url_helpers.url_for(Article.find(145).image)
      ＊　url_for も rails_blob_path と同じ!</span></pre></li></ul><p><br></p><h1><span
      style=\"font-size: 30px;\">4.ファイルの保存先の変更</span></h1><p><br></p><p><code>config/environments/development.rb</code></p><pre>
      \ # ...\r\n\r\n  # Store uploaded files on the local file system (see config/storage.yml
      for options)\r\n  <span style=\"color: rgb(184, 49, 47);\">config.active_storage.service
      = :local</span>\r\n\r\n  # ...</pre><p><code>config/environments/production.rb</code></p><pre>
      \ # ...\r\n\r\n  # Store uploaded files on the local file system (see config/storage.yml
      for options)\r\n  <span style=\"color: rgb(184, 49, 47);\">config.active_storage.service
      = :local</span>\r\n\r\n  # ...</pre><p>defaultの <code>local</code> とは、 <code>config/storage.yml</code>
      で定義された保存先の名前</p><p>config.active_storage.service = <code>:local</code>を <code><span
      style=\"color: rgb(41, 105, 176);\">:amazon</span></code><code><span style=\"color:
      rgb(41, 105, 176);\">, :google,&nbsp;:microsoft</span></code> のいづれかと置き換えて、<code>config/storage.yml</code>の方に、必要な認証情報などの値を入力します。</p><p><br></p><p>config/storage.yml</p><pre>test:\r\n
      \ service: Disk\r\n  root: &lt;%= Rails.root.join(&quot;tmp/storage&quot;) %&gt;\r\n\r\nlocal:\r\n
      \ service: Disk\r\n  root: &lt;%= Rails.root.join(&quot;storage&quot;) %&gt;\r\n\r\n#
      Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)\r\n<span
      style=\"color: rgb(41, 105, 176);\"># amazon:\r\n#   service: S3\r\n#   access_key_id:
      &lt;%= Rails.application.credentials.dig(:aws, :access_key_id) %&gt;\r\n#   secret_access_key:
      &lt;%= Rails.application.credentials.dig(:aws, :secret_access_key) %&gt;\r\n#
      \  region: us-east-1\r\n#   bucket: your_own_bucket</span>\r\n\r\n# Remember
      not to checkin your GCS keyfile to a repository\r\n<span style=\"color: rgb(65,
      168, 95);\"># google:\r\n#   service: GCS\r\n#   project: your_project\r\n#
      \  credentials: &lt;%= Rails.root.join(&quot;path/to/gcs.keyfile&quot;) %&gt;\r\n#
        bucket: your_own_bucket</span>\r\n\r\n# Use rails credentials:edit to set
      the Azure Storage secret (as azure_storage:storage_access_key)\r\n<span style=\"color:
      rgb(250, 197, 28);\"># microsoft:\r\n#   service: AzureStorage\r\n#   storage_account_name:
      your_account_name\r\n#   storage_access_key: &lt;%= Rails.application.credentials.dig(:azure_storage,
      :storage_access_key) %&gt;\r\n#   container: your_container_name</span></pre><p><br></p><p>defaultの保存先の
      <code>local</code> は、使用するサービスが <code>Disk</code> (ローカルディスク)に設定れていて、保存先がrailsアプリ直下の<code>/storage</code>ディレクトリに指定されています。</p><p>保存先に応じてコメントを解除してください。</p><p><br></p><p>amazon:
      を使用するあなたは gem <code>aws-sdk-s3</code></p><p>goolge: を使用するあなたは gem <code>google-cloud-storage</code></p><p>microsoft:
      を使用するあなたは gem <code>azure-storage</code> をGemfileに追記</p><p><br></p><p>なお、アクセスキーなどの機密情報は、<strong>Rails
      Credentials(<strong>暗号化して保存するためのRails新機能</strong>)</strong>を使って入力!!</p><pre>$
      EDITOR=vim rails credentials:edit</pre><p>i を押す</p><p>実際の値を入れていく</p><p>escを押す</p><p>ZZ
      を押す</p><p><span style=\"color: rgb(226, 80, 65);\">保存完了</span></p><p>(入力した内容は<code>config/master.key</code>を用いて暗号化され、<code>config/credentials.yml.enc</code>が生成されます)</p><pre><code>$
      rails credentials:show</code> で確認できる</pre><h2><br>Amazon S3 を使う場合</h2><pre>gem
      &quot;aws-sdk-s3&quot;, require: false</pre><p><code>$ bundle install</code>と叩きます。</p><p><br></p><p><span
      style=\"color: rgb(124, 112, 107);\">config/environments/production.rb</span></p><pre>#
      ファイル保存先を:localから:amazonに変更\r\n\r\nconfig.active_storage.service = :amazon</pre><p><span
      style=\"color: rgb(124, 112, 107);\">config/environments/development.rb</span></p><pre>#
      開発環境(development)でAmazon S3の動作を確認したい場合はこちらの方も変更しましょう\r\n\r\nconfig.active_storage.service
      = :amazon</pre><p><span style=\"color: rgb(124, 112, 107);\">config/storage.yml</span></p><pre>#
      以下の部分をコメント解除する\r\namazon:\r\n  service: S3\r\n  access_key_id: &lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;\r\n  secret_access_key: &lt;%= Rails.application.credentials.dig(:aws,
      :secret_access_key) %&gt;\r\n  region: ap-northeast-1 # これは日本の地域コード\r\n  bucket:
      my_bucket_name # 自分で作成したS3のバケットの名前</pre><pre>$ EDITOR=vim rails credentials:edit
      \r\n<span style=\"color: rgb(250, 197, 28);\">(エディタはVim(vim)かAtom(atom)かVSCode(code)かSublimeText(subl))</span></pre><pre>aws:\r\n
      access_key_id: 123 #ここに自分のアクセスキーIDをコピペ\r\n secret_access_key: 456 #ここに自分のシークレットアクセスキーをコピペ</pre><p>&nbsp;Vim:
      <code>i</code>で入力開始、<code>esc</code> &rarr; <code>ZZ</code>で終了</p><p><br></p><pre>$
      rails credentials:show\r\n<span style=\"color: rgb(250, 197, 28);\">で内容を確認できる</span></pre><p><br></p><p>以上でs3にアップロードされるようになりました。s3がこんなに簡単に使えてしまうことが驚き栗の木超ラッキーです！</p><p><br></p><p><strong><span
      style=\"font-size: 48px; font-family: Impact, Charcoal, sans-serif;\">Credentials</span></strong><span
      style=\"font-size: 48px; font-family: Impact, Charcoal, sans-serif;\">を使用する場合</span></p><p><code>config/credentials.yml.enc</code>の中身を復号化するために必要な<code>config/master.key</code>ファイルを本番環境にも配置する必要があります。しかし、<code>master.key</code>はセキュリティ上,
      &nbsp;.gitignore されてあり、<span style=\"color: rgb(41, 105, 176); font-family:
      Impact, Charcoal, sans-serif; font-size: 24px;\">Gitリポジトリをそのままデプロイする本番環境(Herokuなど)の場合</span>は、<code>master.key</code>　の中身をコピーして、環境変数
      <code>RAILS_MASTER_KEY</code> としてセットしなければいけません。ちなみに、Herokuをお使いの場合は <code>$ heroku
      config:set RAILS_MASTER_KEY=123</code>で環境変数を用意できます。</p><p><br></p><p>参考文献 <a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a\">こちらの方</a></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-10 07:09:04.553155'
    - '2019-07-11 05:33:01.395561'
  - - 89
    - wysiwyg-rails imageUploadToS3 / wysiwygエディタからS3にアップロード
    - "<h1 style=\"text-align: center;\">wysiwyg-rails imageUploadToS3</h1><p><br></p><p><span
      style=\"color: rgb(124, 112, 107);\">これは、Rails4の時代までは</span><a href=\"https://rubythursday.com/system/episodes/pdfs/000/000/052/original/Ruby_Snack_23_Froala_WYSIWYG_Saving_Images_on_S3.pdf?1452115365\">こちらの方</a><span
      style=\"color: rgb(124, 112, 107);\">&nbsp;のやり方で良かったみたいですけど、amazonの署名の方法に変更が加わったからなのか、今では正常に動作しないため、何十時間(50~100h)も使ってたどり着いた筆者の苦悩の物語です。</span></p><p><br></p><p>前提:
      すでにwysiwyg-railsを使ってエディターの実装ができている(できないのはファイルのサーバーへのアップロードのみ)</p><pre>$(function()
      {\r\n  $(&#39;#wysiwyg&#39;).froalaEditor({\r\n  language: &#39;ja&#39;,\r\n 
      heightMin: 500,\r\n  heightMax: 1000,\r\n  })\r\n});</pre><p><br></p><p>結論から言って、自作モジュールを作らずに,
      froala-editor-sdkを使って解決することができました。</p><p><br></p><p><span style=\"font-size:
      30px;\">はじめにクライアント側の設定</span></p><p>Gemfile</p><pre>gem &#39;wysiwyg-rails&#39;,
      &#39;~&gt; 2.6.0&#39; (2.6.6をインストール)\r\ngem &quot;froala-editor-sdk&quot; (1.2.0をインストール)</pre><p><br></p><p>articles_controller</p><pre>class
      ArticlesController &lt; ApplicationController\r\nbefore_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\nbefore_action :require_login, except:
      [:index, :show]\r\n<span style=\"color: rgb(243, 121, 52);\">before_action :hash_init,
      only: [:index, :new, :create, :edit]</span>\r\n\r\n\r\ndef index\r\n@articles
      = Article.all\r\nend\r\n\r\ndef new\r\n@article = Article.new\r\nend\r\n\r\ndef
      create\r\n@article = Article.new(article_params)\r\nif @article.save\r\nflash[:notice]
      = &quot;保存されました&quot;\r\nredirect_to article_path(@article)\r\nelse\r\nflash[:alert]
      = &quot;エラーが発生しました&quot;\r\nrender :new\r\nend\r\nend\r\n\r\ndef edit\r\nend\r\n\r\ndef
      update\r\n  if @article.update_attributes(article_params)\r\n    flash[:notice]
      = &quot;更新されました&quot;\r\n    redirect_to article_path(@article)\r\n  else\r\n
      \   flash[:alert] = &quot;エラーが発生しました&quot;\r\n    render :edit\r\n  end\r\nend\r\n\r\ndef
      show\r\nend\r\n\r\ndef destroy\r\n  if @article.destroy\r\n    flash[:notice]
      = &quot;削除されました&quot;\r\n    redirect_to articles_path\r\n  else\r\n    flash[:alert]
      = &quot;エラーが発生しました&quot;\r\n  end\r\nend\r\n\r\nprivate\r\n\r\ndef find_article\r\n@article
      = Article.find(params[:id])\r\nend\r\n\r\n<span style=\"color: rgb(243, 121,
      52);\">def hash_init\r\n  options = {\r\n    bucket: &#39;mybucket&#39;,\r\n
      \   region: &#39;ap-northeast-1&#39;, # japan[Tokyo]\r\n    keyStart: &#39;uploads/&#39;,
      # uploads/filename.png\r\n    acl: &#39;public-read&#39;,\r\n    accessKey:
      ENV[&quot;aws_access_key_id&quot;],\r\n    secretKey: ENV[&quot;aws_secret_access_key&quot;],\r\n
      \ }\r\n    @aws_data = FroalaEditorSDK::S3.data_hash(options)\r\nend</span>\r\n\r\n\r\nend</pre><p><span
      style=\"font-size: 18px;\">自作ライブラリでハッシュするのではなく、FroalaEditorSDKを使って、ハッシュ化を行いました。</span></p><p><span
      style=\"font-size: 18px;\">そして<a href=\"https://www.froala.com/wysiwyg-editor/docs/sdks/ruby/file-s3-upload\">公式ドキュメント</a>を見ればわかるのですが、なんと公式ドキュメントが間違っているという事態が発覚。</span></p><p><span
      style=\"background-color: rgb(247, 218, 100);\">options : {</span></p><p><span
      style=\"background-color: rgb(247, 218, 100);\">&nbsp; bucket: &#39;bucket-name&#39;,</span></p><p><span
      style=\"background-color: rgb(247, 218, 100);\">...</span></p><p><span style=\"background-color:
      rgb(247, 218, 100);\">}</span></p><p>となっていますが、 options : ではなく options = ですので間違いのないようにイコールで書いてください.</p><p><br></p><p>_form.html.erb</p><pre>&lt;%=
      simple_form_for (@article) do |f| %&gt;\r\n&lt;% if @article.errors.any? %&gt;\r\n&lt;div
      id=&quot;error_explanation&quot;&gt;\r\n&lt;h2&gt;\r\n&lt;%= &quot;#{pluralize(@article.errors.count,
      &quot;error&quot;)} このエラーにより保存できませんでした&quot; %&gt;\r\n&lt;/h2&gt;\r\n&lt;ul&gt;\r\n&lt;%
      @article.errors.full_messages.each do |msg| %&gt;\r\n&lt;li&gt;\r\n&lt;%= msg
      %&gt;\r\n&lt;/li&gt;\r\n&lt;% end %&gt;\r\n&lt;/ul&gt;\r\n&lt;/div&gt;\r\n&lt;%
      end %&gt;\r\n\r\n&lt;div class=&quot;form-group&quot;&gt;\r\n&lt;%= f.input
      :title, class: &quot;form-control&quot; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;%= f.input :image, as: :file, class:
      &quot;form-control&quot; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class=&quot;form-group&quot;&gt;\r\n&lt;%=
      f.label :body %&gt;\r\n&lt;%= f.text_area :body, id: &quot;wysiwyg&quot; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;%= f.button :submit, &quot;投稿&quot;,
      :class =&gt; &#39;btn btn-primary&#39; %&gt;\r\n&lt;/div&gt;\r\n&lt;% end %&gt;\r\n\r\n<span
      style=\"background-color: rgb(247, 218, 100);\">&lt;script&gt;\r\n$(function()
      {\r\n$(&#39;#wysiwyg&#39;).froalaEditor({\r\nlanguage: &#39;ja&#39;,\r\nheightMin:
      500,\r\nheightMax: 1000,\r\nimageUploadToS3: &lt;%= @aws_data.to_json.html_safe
      %&gt;,\r\n})\r\n});\r\n&lt;/script&gt;</span></pre><p><br></p><p>new.html.erb</p><pre>&lt;h2&gt;New
      Article&lt;/h2&gt;\r\n&lt;%= render &quot;articles/form&quot;, collection: @aws_data
      %&gt;</pre><p><br></p><p>edit.html.erb</p><pre>&lt;h2&gt;Edit Article&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot;, collection: @aws_data %&gt;</pre><p><br></p><p><span
      style=\"color: rgb(235, 107, 86); font-family: Impact, Charcoal, sans-serif;
      font-size: 30px;\">これでクライアント側は完璧です</span></p><p><br></p><p><span style=\"font-size:
      30px;\">次にサーバー側の設定</span></p><pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\r\n&lt;CORSConfiguration
      xmlns=&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;&gt;\r\n    &lt;CORSRule&gt;\r\n 
            &lt;AllowedOrigin&gt;http://localhost:3000&lt;/AllowedOrigin&gt;\r\n 
            &lt;AllowedMethod&gt;GET&lt;/AllowedMethod&gt;\r\n        &lt;AllowedMethod&gt;POST&lt;/AllowedMethod&gt;\r\n 
            &lt;AllowedMethod&gt;PUT&lt;/AllowedMethod&gt;\r\n        &lt;MaxAgeSeconds&gt;3000&lt;/MaxAgeSeconds&gt;\r\n 
            &lt;AllowedHeader&gt;*&lt;/AllowedHeader&gt;\r\n    &lt;/CORSRule&gt;\r\n&lt;/CORSConfiguration&gt;</pre><p><br></p><p><span
      style=\"color: rgb(235, 107, 86); font-family: Impact, Charcoal, sans-serif;
      font-size: 30px;\">これでサーバ側も完璧です</span></p><p><br></p><p><span style=\"font-family:
      Impact, Charcoal, sans-serif; font-size: 30px;\">以上で無事に投稿できました！！本当にしんどかった...<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f616.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-10 08:11:09.948566'
    - '2018-12-10 08:11:09.953742'
  - - 90
    - Rails ArticleモデルTagモデルで多対多 のテーブルを作る
    - "<h1 style=\"text-align: center;\"><span style=\"font-family: Impact,Charcoal,sans-serif;\">Rails5.2
      多対多</span></h1><p><br></p><p><span style=\"font-size: 18px;\">実現したいこと... articleモデルとtagモデルで多対多を実現したい</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">1. modelの作成</span></p><pre>$ rails g model Article
      title:string body: text\r\n$ rails g model Tag name: string</pre><p>Articleのビュー、コントローラは作成しているものとする</p><pre>$
      rails g migration create_articles_tags</pre><p>以下にmigrationファイルを成形確認</p><pre>#
      db/migrate/xxx_create_articles.rb\r\nclass CreateArticles &lt; ActiveRecord::Migration[5.2]\r\n
      \ def change\r\n    create_table :articles do |t|\r\n      t.string :title\r\n
      \     t.text :body\r\n      t.timestamps\r\n    end\r\n  end\r\nend\r\n\r\n#
      db/migrate/xxx_create_tags.rb\r\nclass CreateTags &lt; ActiveRecord::Migration\r\n
      def change\r\n  create_table :tags do |t|\r\n   t.string :name, null: false\r\n
      \  t.timestamps null: false\r\n  end\r\n end\r\nend\r\n\r\n# db/migrate/xxx_create_articles_tags.rb\r\n#
      主キーは不要なので、:id =&gt; falseとしています。\r\nclass CreateArticlesTagsTable &lt; ActiveRecord::Migration[5.2]\r\n
      \ def change\r\n    create_table :articles_tags<span style=\"color: rgb(243,
      121, 52);\">, :id =&gt; false</span> do |t|\r\n      t.integer <span style=\"color:
      rgb(251, 160, 38);\">:article_id, null: false</span>\r\n      t.integer <span
      style=\"color: rgb(251, 160, 38);\">:tag_id, null: false</span>\r\n    end\r\n
      \ end\r\nend</pre><pre>$ rake db:migrate</pre><p><br></p><p><span style=\"font-size:
      24px;\">2.リレーションの定義</span></p><pre># app/models/article.rb\r\nclass Article
      &lt; ActiveRecord::Base\r\n <span style=\"color: rgb(44, 130, 201);\">has_and_belongs_to_many
      :tags</span>\r\nend</pre><pre># app/models/tag.rb\r\nclass Tag &lt; ActiveRecord::Base\r\n
      <span style=\"color: rgb(44, 130, 201);\">has_and_belongs_to_many :articles</span>\r\nend</pre><p><br></p><p><span
      style=\"font-size: 24px;\">多対多はこれで完成!!</span></p><p><br></p><pre>$ rails console\r\n\r\n&gt;
      article1 = article.find(1)\r\n&gt; tag1 = Tag.create(name: &quot;タグ１&quot;)\r\n&gt;
      tag2 = Tag.create(name: &quot;タグ2&quot;)\r\n&gt; article1.tags &lt;&lt; tag1
      // 挿入される\r\n&gt; article1.tags &lt;&lt; tag2 // 挿入される\r\n&gt; article1.tags.delete
      tag1 // article1からtag1をdelete\r\n&gt; article1.tags.clear // // article1から全タグをdelete</pre><p><br></p><p><span
      style=\"font-size: 30px;\">3.viewに実装</span></p><p>articles_controller.rb</p><pre>class
      ArticlesController &lt; ApplicationController\r\n  before_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\n\r\n\r\n  def index\r\n    @articles
      = Article.all\r\n  end\r\n\r\n  def new\r\n    @article = Article.new\r\n  end\r\n\r\n
      \ def create\r\n    @article = Article.new(<span style=\"color: rgb(184, 49,
      47);\">article_params</span>)\r\n    if @article.save\r\n      flash[:notice]
      = &quot;Successfully created article!&quot;\r\n      redirect_to article_path(@article)\r\n
      \   else\r\n      flash[:alert] = &quot;Error creating new article!&quot;\r\n
      \     render :new\r\n    end\r\n  end\r\n\r\n  def edit\r\n  end\r\n\r\n  def
      update\r\n    if @article.update_attributes(<span style=\"color: rgb(184, 49,
      47);\">article_params</span>)\r\n      flash[:notice] = &quot;Successfully updated
      article!&quot;\r\n      redirect_to article_path(@article)\r\n    else\r\n      flash[:alert]
      = &quot;Error updating article!&quot;\r\n      render :edit\r\n    end\r\n  end\r\n\r\n
      \ def show\r\n  end\r\n\r\n  def destroy\r\n    if @article.destroy\r\n      flash[:notice]
      = &quot;Successfully deleted article!&quot;\r\n      redirect_to articles_path\r\n
      \   else\r\n      flash[:alert] = &quot;Error updating article!&quot;\r\n    end\r\n
      \ end\r\n\r\n<span style=\"color: rgb(184, 49, 47);\">private</span>\r\n\r\ndef
      <span style=\"color: rgb(184, 49, 47);\">article_params</span>\r\nparams.require(:article).permit(:title,
      :body, :image, <span style=\"color: rgb(41, 105, 176);\">tag_ids: []</span>)\r\nend\r\n\r\ndef
      find_article\r\n@article = Article.find(params[:id])\r\nend\r\n\r\nend</pre><p><span
      style=\"color: rgb(41, 105, 176);\"><span style=\"font-size: 24px;\">&nbsp;
      &nbsp;tag_ids: []</span></span>とした理由は&nbsp;tag_idsというパラメータを複数受け取ることのできるように設定するため(checkboxで複数選べる)</p><p><br></p><p>articles/_form.html.erb</p><pre>&lt;%=
      simple_form_for (@article) do |f| %&gt;\r\n  &lt;% if @article.errors.any? %&gt;\r\n
      \   &lt;div id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;\r\n        &lt;%=
      &quot;#{pluralize(@article.errors.count, &quot;error&quot;)} により保存ができませんでした&quot;
      %&gt;\r\n      &lt;/h2&gt;\r\n      &lt;ul&gt;\r\n        &lt;% @article.errors.full_messages.each
      do |msg| %&gt;\r\n          &lt;li&gt;\r\n            &lt;%= msg %&gt;\r\n          &lt;/li&gt;\r\n
      \       &lt;% end %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;%
      end %&gt;\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input
      :title, class: &quot;form-control&quot; %&gt;\r\n  &lt;/div&gt;\r\n\r\n<span
      style=\"color: rgb(243, 121, 52);\">  &lt;div class=&quot;form-group&quot;&gt;\r\n
      \   &lt;%= f.collection_check_boxes(</span><span style=\"color: rgb(41, 105,
      176);\">:tag_ids</span><span style=\"color: rgb(243, 121, 52);\">, </span><span
      style=\"color: rgb(65, 168, 95);\">Tag.all</span><span style=\"color: rgb(243,
      121, 52);\">, </span><span style=\"color: rgb(184, 49, 47);\">:id</span><span
      style=\"color: rgb(243, 121, 52);\">, </span><span style=\"color: rgb(85, 57,
      130);\">:name</span><span style=\"color: rgb(243, 121, 52);\">) do |b| %&gt;\r\n
      \     &lt;%= b.check_box %&gt;\r\n      &lt;%= b.label { b.text } %&gt;\r\n
      \     &lt;/br&gt;\r\n    &lt;% end %&gt;\r\n  &lt;/div&gt;</span>\r\n\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;%= f.input :image, as: :file, class:
      &quot;form-control&quot; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class=&quot;form-group&quot;&gt;\r\n&lt;%=
      f.label :body %&gt;\r\n&lt;%= f.text_area :body %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;%= f.button :submit, &quot;投稿&quot;,
      :class =&gt; &#39;btn btn-primary&#39; %&gt;\r\n&lt;/div&gt;\r\n&lt;% end %&gt;</pre><p><span
      style=\"font-size: 24px;\">ここで、<span style=\"color: rgb(243, 121, 52);\">collection_check_boxes</span>
      において</span></p><ul><li><span style=\"font-size: 24px;\">第一引数 <span style=\"color:
      rgb(41, 105, 176);\">tag_ids</span> は, 送信するパラメータの名前</span></li><li><span style=\"font-size:
      24px;\">第二引数 <span style=\"color: rgb(65, 168, 95);\">Tag.all</span><span style=\"color:
      rgb(243, 121, 52);\">&nbsp;</span>はcheckboxのコレクションデータ</span></li><li><span style=\"font-size:
      24px;\">第三引数 <span style=\"color: rgb(184, 49, 47);\">:id&nbsp;</span>は, <span
      style=\"font-size: 24px;\">checkboxのvalue</span></span></li><li><span style=\"font-size:
      24px;\">第四引数 <span style=\"color: rgb(85, 57, 130);\">:name&nbsp;</span>はcheckboxのラベル名</span></li></ul><p><br></p><p><span
      style=\"font-size: 30px;\">以上で多対多が完璧に実装できました。<span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f601.svg);\">&nbsp;
      &nbsp;</span>&nbsp;</span></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1544432949173-checkbox.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><span
      style=\"font-size: 30px;\">＊＊＊豆知識＊＊＊</span></p><p>以下のやり方でも実装できますが、tagが毎回新しく増えて同じデータがたくさんできてしまいます。</p><p><br></p><p>articles_controller.rb</p><pre>class
      ArticlesController &lt; ApplicationController\r\n  before_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\n\r\n\r\n  def index\r\n    @articles
      = Article.all\r\n  end\r\n\r\n  def new\r\n    @article = Article.new\r\n    <span
      style=\"color: rgb(243, 121, 52);\">@article.tags.build</span>\r\n  end\r\n\r\n
      \ def create\r\n    @article = Article.new(article_params)\r\n    <span style=\"color:
      rgb(243, 121, 52);\">@article.tags.build(tag_params)</span>\r\n    if @article.save\r\n
      \     flash[:notice] = &quot;Successfully created article!&quot;\r\n      redirect_to
      article_path(@article)\r\n    else\r\n      flash[:alert] = &quot;Error creating
      new article!&quot;\r\n      render :new\r\n    end\r\n  end\r\n\r\n  def edit\r\n
      \ end\r\n\r\n  def update\r\n    if @article.update_attributes(article_params)\r\n
      \     flash[:notice] = &quot;Successfully updated article!&quot;\r\n      redirect_to
      article_path(@article)\r\n    else\r\n      flash[:alert] = &quot;Error updating
      article!&quot;\r\n      render :edit\r\n    end\r\n  end\r\n\r\n  def show\r\n
      \ end\r\n\r\n  def destroy\r\n    if @article.destroy\r\n      flash[:notice]
      = &quot;Successfully deleted article!&quot;\r\n      redirect_to articles_path\r\n
      \   else\r\n      flash[:alert] = &quot;Error updating article!&quot;\r\n    end\r\n
      \ end\r\n\r\n<span style=\"color: rgb(184, 49, 47);\">private</span>\r\n<span
      style=\"color: rgb(243, 121, 52);\">  def tag_params\r\n    params.require(:tag).permit(:name)\r\n 
      end</span>\r\n\r\n  def article_params\r\n    params.require(:article).permit(:title,
      :body, :image)\r\n  end\r\n\r\n  def find_article\r\n    @article = Article.find(params[:id])\r\n
      \ end\r\nend</pre><p><br></p><p>articles/_form.html.erb</p><pre>&lt;%= simple_form_for
      (@article) do |f| %&gt;\r\n  &lt;% if @article.errors.any? %&gt;\r\n    &lt;div
      id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;\r\n        &lt;%= &quot;#{pluralize(@article.errors.count,
      &quot;error&quot;)} により保存ができませんでした&quot; %&gt;\r\n      &lt;/h2&gt;\r\n      &lt;ul&gt;\r\n
      \       &lt;% @article.errors.full_messages.each do |msg| %&gt;\r\n          &lt;li&gt;\r\n
      \           &lt;%= msg %&gt;\r\n          &lt;/li&gt;\r\n        &lt;% end %&gt;\r\n
      \     &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;% end %&gt;\r\n\r\n  &lt;div
      class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input :title, class: &quot;form-control&quot;
      %&gt;\r\n  &lt;/div&gt;\r\n\r\n<span style=\"color: rgb(243, 121, 52);\">  &lt;div
      class=&quot;form-group&quot;&gt;\r\n    &lt;%= fields_for :tag do |field| %&gt;\r\n 
          &lt;%= field.label :name %&gt;\r\n      &lt;%= field.text_field :name %&gt;\r\n
      \   &lt;% end %&gt;\r\n  &lt;/div&gt;</span>\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n
      \   &lt;%= f.input :image, as: :file, class: &quot;form-control&quot; %&gt;\r\n
      \ &lt;/div&gt;\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%=
      f.label :body %&gt;\r\n    &lt;%= f.text_area :body %&gt;\r\n  &lt;/div&gt;\r\n\r\n
      \ &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.button :submit, &quot;投稿&quot;,
      :class =&gt; &#39;btn btn-primary&#39; %&gt;\r\n  &lt;/div&gt;\r\n&lt;% end
      %&gt;</pre><h2><br></h2><h2>多対多でクエリ</h2><p>articleモデルとtagモデルで多対多だが、クエリを作るときのやり方</p><pre>routes.rb\r\n...\r\nget
      &#39;articles/<span style=\"color: rgb(243, 121, 52);\">:id</span>/tag&#39;
      =&gt; &#39;articles#tag&#39;, as: &#39;manage_tag&#39; # タグのidが入る形</pre><pre>articles_controller.rb\r\n...\r\ndef
      tag\r\n# INNER JOINするために joinsメソッド\r\n# 以下のように<span style=\"color: rgb(243,
      121, 52);\">joinsテーブルから特定のものを引っこ抜くやり方</span>でも<span style=\"color: rgb(41, 105,
      176);\">クエリーを二つ作ってmergeメソッドで合体させるやり方でも良い</span>\r\n# @articles = <span style=\"color:
      rgb(243, 121, 52);\">Article.joins(:tags).where(tags: {id: </span><span style=\"color:
      rgb(65, 168, 95);\">params[:id]</span><span style=\"color: rgb(243, 121, 52);\">})</span>\r\n@articles
      = <span style=\"color: rgb(44, 130, 201);\">Article.joins(:tags).merge(Tag.where(id:
      params[:id]))</span>\r\nend</pre><pre>viewファイル(今回は_navigation.html.erb)\r\n...\r\n&lt;!--
      タグのリンク付きセレクトボックス, dropdownはBootstrapを使用 --&gt;\r\n&lt;% Tag.all.each do |tag|
      %&gt;\r\n  &lt;a class=&quot;dropdown-item&quot; href=<span style=\"color: rgb(65,
      168, 95);\">&lt;%= manage_tag_path(id: tag.id) %&gt;</span>&gt;\r\n  &lt;%=
      tag.name %&gt;\r\n  &lt;div class=&quot;dropdown-divider&quot;&gt;&lt;/div&gt;\r\n&lt;/a&gt;\r\n&lt;%
      end %&gt;\r\n...</pre><pre>tag.html.erb\r\n...\r\n&lt;% @articles.each do |article|
      %&gt;\r\n  &lt;%= article.title %&gt;\r\n  &lt;%= article.body %&gt;\r\n&lt;%
      end %&gt;\r\n...</pre><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-10 09:21:55.300522'
    - '2019-01-01 07:10:58.289144'
  - - 91
    - rails5.2 'rack-attack' で セキュリティ対策
    - "<h1 style=\"text-align: center;\">gem rack-attack[セキュリティ対策]を実装</h1><p><br></p><p>Gemfileに下記を追加する</p><pre>#
      for security\r\ngem &#39;rack-attack&#39;\r\n\r\n# production環境だけで良い人はこれ\r\n#
      group :production do\r\n#  gem &#39;rack-attack&#39;\r\n# end</pre><p>bundle
      install実施</p><pre>bundle install</pre><p><br></p><p>config/application.rb</p><pre>module
      YourApp\r\n  class Application &lt; Rails::Application\r\n    省略\r\n    # security\r\n
      \   <span style=\"color: rgb(184, 49, 47);\">config.middleware.use Rack::Attack</span>\r\n
      \ end\r\nend</pre><p><br></p><p>productionだけ読み込む場合は config/environments/production.rb</p><pre>Rails.application.configure
      do\r\n  config.middleware.use Rack::Attack\r\nend</pre><p><br></p><h3>rack-attackの設定ファイル</h3><p><code>config/initializers/rack-attack.rb</code>
      を設定ファイルとして作成する</p><pre>class Rack::Attack\r\n# 1.2.3.4からのアクセスを拒否する\r\n# Rack::Attack.blocklist(&#39;block
      1.2.3.4&#39;) do |req|\r\n# &#39;1.2.3.4&#39; == req.ip\r\n# end\r\n# BadUAが含まれたUserAgentからのログイン画面アクセスを拒否する\r\n#
      Rack::Attack.blocklist(&#39;block bad UA logins&#39;) do |req|\r\n# req.path
      == &#39;/login&#39; &amp;&amp; req.post? &amp;&amp; req.user_agent == &#39;BadUA&#39;\r\n#
      end\r\n\r\nRack::Attack.blocklist(&#39;自分以外は認証画面拒否&#39;) do |req|\r\nreq.path
      == &#39;/login_path&#39;\r\nend\r\n# ホワイトリスト設定\r\nRack::Attack.safelist(&#39;ローカルホストと自分を許可&#39;)
      do |req|\r\n&#39;127.0.0.1&#39; == req.ip || &#39;::1&#39; == req.ip || ENV[&quot;ip_address&quot;]
      == req.ip\r\nend\r\n\r\n# 同一IPアドレスからのリクエストを300回/分に制限\r\nRack::Attack.throttle(&#39;req/ip&#39;,
      limit: 300, period: 5.minutes) do |req|\r\n  req.ip\r\nend\r\n\r\n# アタックや過度なクローリングの対策になる
      <a href=\"https://blog.nakamu.life/posts/rails-dos-rack-attack/\">https://blog.nakamu.life/posts/rails-dos-rack-attack/</a>\r\n\r\nend</pre><p><br></p><p>ちなみにgemなしでも実装してみます。</p><p><br></p><p>articles_controller</p><pre><span
      style=\"color: rgb(184, 49, 47);\">class</span> <span style=\"color: rgb(97,
      189, 109);\">ArticlesController</span> &lt; <span style=\"color: rgb(97, 189,
      109);\">ApplicationController</span>\r\nbefore_action <span style=\"color: rgb(147,
      101, 184);\">:restrict_remote_ip</span>, <span style=\"color: rgb(147, 101,
      184);\">only</span>: [:<span style=\"color: rgb(147, 101, 184);\">edit</span>,
      :<span style=\"color: rgb(147, 101, 184);\">create</span>]\r\n...\r\n  <span
      style=\"color: rgb(97, 189, 109);\">PERMIT_ADDRESSES</span> = [&#39;<span style=\"color:
      rgb(250, 197, 28);\">127.0.0.1</span>&#39;, &#39;<span style=\"color: rgb(250,
      197, 28);\">::1</span>&#39;, ENV[&quot;<span style=\"color: rgb(250, 197, 28);\">ip_address</span>&quot;]].freeze\r\n
      \ <span style=\"color: rgb(184, 49, 47);\">def</span> <span style=\"color: rgb(97,
      189, 109);\">restrict_remote_ip</span>\r\n  <span style=\"color: rgb(124, 112,
      107);\"># ローカルか自分のipアドレス</span>\r\n  <span style=\"color: rgb(184, 49, 47);\">unless</span>
      <span style=\"color: rgb(84, 172, 210);\">PERMIT_ADDRESSES</span>.<span style=\"color:
      rgb(84, 172, 210);\">include?</span>(request.remote_ip)\r\n    render <span
      style=\"color: rgb(147, 101, 184);\">text</span>: &#39;<span style=\"color:
      rgb(250, 197, 28);\">サービスが見つかりません</span>&#39;, <span style=\"color: rgb(147,
      101, 184);\">status</span>: <span style=\"color: rgb(147, 101, 184);\">503</span>\r\n
      \ <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n<span style=\"color:
      rgb(184, 49, 47);\">end</span></pre><p>:edit, :createアクションを自分以外ブロックする機能が実装できました。めでたしめでたし。</p><p><br></p><p>ちなみに...</p><p><a
      href=\"https://www.cman.jp/network/support/go_access.cgi\">アクセス情報【使用中のIPアドレス確認】</a></p><p>や&nbsp;</p><p><a
      href=\"http://www.cman.jp/network/support/go_access.cgi\" rel=\"nofollow\">CMAN：【使用中のIPアドレス確認】</a></p><p>でグローバルIPを調べて、そのネットワークでアクセス制限をかけることができます(プライベートIPとグローバル
      IPは違うので注意！！)</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-10 09:43:05.656626'
    - '2019-03-21 13:38:35.365434'
  - - 92
    - 'ソケット地獄のmysqlエラー　ERROR 2002 (HY000): Can''t connect to local MySQL server through
      socket ''/tmp/mysql.sock'' (38)'
    - "<h1>エラー内容&nbsp;</h1><pre>$ mysql -u root -p\r\nCan&#39;t connect to local MySQL
      server through socket &#39;/tmp/mysql.sock&#39;</pre><p>となり、サーバーを止めることもできずstartもできず全ての動作がいきなりできなくなりました。</p><p><br></p><p>ググると　</p><p>/usr/local/etc/my.cnfを</p><p>[mysqld]<br>socket=/tmp/mysql.sock<br>[client]<br>socket=/tmp/mysql.sock</p><p>として</p><p>/usr/local/etc/php/php.iniを</p><p>pdo_mysql.default_socket
      = /tmp/mysql.sock</p><p>mysqli.default_socket = /tmp/mysql.sock</p><p>mysql.default_socket
      = /tmp/mysql.sock</p><p><br></p><p>ソケットは　/tmp/mysql.sock &nbsp;か /var/mysql/mysql.sock
      で統一しろと書かれているけど結局ダメ。</p><p><br></p><pre>$ sudo touch /var/lib/mysql/mysql.sock\r\n$
      sudo chown mysql:mysql /var/lib/mysql</pre><p>でファイルと権限を復活させろとか書かれてたけどそれもだめ。</p><p><br></p><p>以下の方法で</p><p>やっと地獄から抜けました。これはメモっとかないと地獄再来はごめん\U0001F4A6</p><p><br></p><pre>$
      cd /usr/local/var\r\n$ ls -ll</pre><pre>drwxr-xr-x    4 nakajitatsuya  admin
         128  9 20 17:03 homebrew\r\ndrwxrwxr-x    3 nakajitatsuya  admin     96  8
      21 11:16 log\r\ndrwxr-xr-x   204 <span style=\"color: rgb(184, 49, 47); background-color:
      rgb(247, 218, 100);\">_mysql</span><span style=\"background-color: rgb(247,
      218, 100);\">         </span><span style=\"color: rgb(184, 49, 47); background-color:
      rgb(247, 218, 100);\">_mysql</span>  6528 12 16 09:21 mysql\r\ndrwx------  
      15 nakajitatsuya  admin    480  9 20 16:52 postgres\r\ndrwxr-xr-x    3 nakajitatsuya
       admin     96  6 15  2018 run</pre><pre>$ sudo chown nakajitatsuya:admin /tmp/mysql.sock</pre><pre>$
      ls -ll</pre><pre>drwxr-xr-x    4 nakajitatsuya  admin   128  9 20 17:03 homebrew\r\ndrwxrwxr-x
         3 nakajitatsuya  admin    96  8 21 11:16 log\r\ndrwxr-xr-x  209 <span style=\"color:
      rgb(44, 130, 201); background-color: rgb(247, 218, 100);\">nakajitatsuya  admin</span>
       6688 12 16 09:22 mysql\r\ndrwx------   15 nakajitatsuya  admin   480  9 20
      16:52 postgres\r\ndrwxr-xr-x    3 nakajitatsuya  admin    96  6 15  2018 run</pre><p><br></p><p>よし</p><pre>$
      sudo mysql.server start\r\nStarting MySQL\r\nSUCCESS! </pre><p>成功!!</p><pre>mysql
      -u root -p\r\nEnter password: \r\nWelcome to the MySQL monitor.  Commands end
      with ; or \\g.\r\nYour MySQL connection id is 8\r\nServer version: 8.0.12 Homebrew\r\n\r\n\r\nCopyright
      (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\r\n\r\n\r\nOracle
      is a registered trademark of Oracle Corporation and/or its\r\naffiliates. Other
      names may be trademarks of their respective\r\nowners.\r\n\r\n\r\nType &#39;help;&#39;
      or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.\r\n\r\n\r\nmysql&gt; </pre><h2>成功！！治ったーーーーーーー！！！<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f602.svg);\">&nbsp;</span></h2><p><br></p><p><br></p>"
    - '2018-12-16 00:55:53.541092'
    - '2018-12-16 01:57:44.433948'
  - - 94
    - ".gitignoreの作り方[node_modulesを取り除きたい]"
    - "<p><span style=\"font-size: 24px;\">目的: node_modulesをgitから取り除き、.ignoreに記載して無視するようにする(package.jsonがあるのでバージョン管理は必要ないからnode_modulesは普通gitにあげない)</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">原因: git作成後 .gitignoreを作成する前に<code>$ npm install</code>をしてしまい、<code>git
      add .</code>でnode_modules以下を全てインデックスに登録してしまった。</span></p><p><br></p><p>1. 作業ディレクトリに移動</p><pre>$
      cd my_dir</pre><p>2. .gitignoreをファイル作成</p><pre>$ touch .gitignore</pre><p>3.
      gitignoreにvimで無視するもの(node_modules/)を書き込む 編集後ZZで保存できる</p><p>拡張子のない隠しファイルは<code>&nbsp;$
      vim(sublとかでもok) ファイル名</code> で編集できる</p><pre>$ vim .gitignore</pre><pre>node_modules/\r\n~\r\n~\r\n~\r\n~</pre><p>4.
      ファイル(node_modules)を残したまま管理対象(git)から外す (<span style=\"color: rgb(184, 49, 47);\">外すだけ</span>)</p><p>(--cached
      オプションつけないと、ファイルごと<span style=\"color: rgb(184, 49, 47);\">削除</span>しちゃう)</p><pre>$
      git rm -r --cached node_modules</pre><pre>$  git status\r\n$ git add .\r\n$
      git commit -m &#39;create .ignore and add node_modules to .ignore, and Remove
      node_modules from git&#39;\r\n$ git push origin master</pre><p><br></p><p><br></p><h4><span
      style=\"font-size: 48px;\">豆知識</span></h4><h3>rmコマンドの使い方</h3><p><span style=\"color:
      rgb(41, 105, 176);\">ファイル削除は rm</span>, <span style=\"color: rgb(184, 49, 47);\">ディレクトリ丸ごと削除は
      rm-r</span></p><pre>$ rm <span style=\"color: rgb(184, 49, 47);\">-r</span>
      test (testディレクトリと配下のファイル、サブディレクトリ全てを削除できる)</pre><pre>$ rm test (testファイルを削除する)</pre><p>削除確認がいらないときは</p><pre>$
      rm -rf test (-fで確認無し)</pre><p><br></p><h3>rmdirコマンドの使い方</h3><p><span style=\"color:
      rgb(184, 49, 47);\">空の</span>ディレクトリを削除できる</p><pre>$ rmdir test (サブディレクトリやファイルを含んでいれば、エラーが出る)</pre><p><br></p><p>削除できません:
      許可がありません とエラーが出るときは<strong>「su」</strong>コマンドで<strong>スーパーユーザー（管理者権限）でログイン</strong>して削除コマンドを実行</p><p><a
      href=\"https://www.sejuku.net/blog/52175\">スーパーユーザーへの切り替え</a></p><p><br></p><p><br></p>"
    - '2018-12-19 06:48:55.143279'
    - '2018-12-19 06:48:55.149109'
  - - 95
    - Node.jsでスプレッドシートのデータ取得
    - "<h1>環境 Node.js v10.11.0&nbsp;</h1><p><br></p><p><br></p><p><span style=\"font-size:
      24px;\">手順 1. 開発者コンソールでapiの設定をおこなう</span></p><p><br></p><p>GoogleDevelopersを使用するので
      <a href=\"https://console.developers.google.com/\">https://console.developers.google.com/</a>
      に新しいプロジェクトを登録する(既存のものに追加しても良い)</p><p>以下はautoTestという新しいプロジェクトを作った</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545377277610-start.png\"
      style=\"width: 900px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p>次にgoogleDriveApiを有効化する(下のやつ)</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545377456537-goofledrive.png\"
      style=\"width: 300px;\" class=\"fr-fic fr-dib\"></p><p>次にキーを作成</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545377736608-api_key.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545378316529-credentials.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p>作成</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545378672461-complete.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p><span style=\"font-size:
      24px; color: rgb(184, 49, 47);\">これでコンソール側の設定はOK</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順 2. スプレッドシートで共有を行う</span></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545379372102-spreadsheet.png\"
      style=\"width: 900px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>手順
      3. 実装</p><p><br></p><p>●ディレクトリを作成して必要なパッケージをインストールします。</p><p><br></p><p>以下を実行</p><pre
      data-lang=\"sh\" data-unlink=\"\">$ mkdir node_spreadsheet\r\n$ cd node_spreadsheet\r\n$
      npm init\r\n$ npm install google-spreadsheet async</pre><p>または</p><pre><span
      style=\"color: rgb(250, 197, 28);\">node_spreadsheet/package.json</span>\r\n{\r\n&quot;scripts&quot;:
      {\r\n&quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp;
      exit 1&quot;\r\n},\r\n<span style=\"color: rgb(184, 49, 47);\">&quot;dependencies&quot;:
      {\r\n&quot;async&quot;: &quot;^2.6.1&quot;,\r\n&quot;google-spreadsheet&quot;:
      &quot;^2.0.6&quot;\r\n}</span>\r\n}\r\n\r\n$ npm install</pre><p><br></p><p>●node_spreadsheet/index.jsを作成してコードを貼る</p><pre>var
      GoogleSpreadsheet = require(&quot;google-spreadsheet&quot;);\r\nvar async =
      require(&quot;async&quot;);\r\n\r\n// https://docs.google.com/spreadsheets/d/XXXXXXXXXXXXXXXXXXXXX/edit#gid=0\r\nvar
      doc = new GoogleSpreadsheet(&quot;XXXXXXXXXXXXXXXXXXXXX&quot;); // スプレッドシートのurlから確認して入れる\r\nvar
      sheet;\r\n\r\nasync.series(\r\n[\r\nfunction setAuth(step) {\r\nvar creds =
      require(&quot;./YYYYYYYYY.json&quot;); // コンソールで設定して自動作成されたファイルを読み込む\r\ndoc.useServiceAccountAuth(creds,
      step);\r\n},\r\nfunction getInfoAndWorksheets(step) {\r\ndoc.getInfo(function(err,
      info) {\r\nsheet = info.worksheets[0];\r\nstep();\r\n});\r\n},\r\nfunction workingWithCells(step)
      {\r\nconst COLUMNS = {\r\n<span style=\"color: rgb(251, 160, 38);\">firstColumn</span>:
      1,\r\n<span style=\"color: rgb(226, 80, 65);\">secondColumn</span>: 2,\r\n};\r\nsheet.getCells(\r\n{\r\n&quot;min-row&quot;:
      2,\r\n&quot;max-row&quot;: 5,\r\n&quot;return-empty&quot;: true\r\n},\r\nfunction(err,
      cells) {\r\n// <span style=\"color: rgb(124, 112, 107);\">cells.length/sheet.colCount=(2~5行の全セル)/(1行あたりのセル)=</span><span
      style=\"color: rgb(243, 121, 52);\">説取得を行う範囲の行数 </span><span style=\"color:
      rgb(124, 112, 107);\">を表す </span><span style=\"color: rgb(41, 105, 176);\">数列的にいうと,An=(sheet.colCount)n+A0
      [n=0,1,2,...sheet.colCount]</span>\r\nfor (let i = 0; i &lt; cells.length /
      sheet.colCount; i += 1) {\r\nconst name = cells[i * sheet.colCount + COLUMNS.<span
      style=\"color: rgb(251, 160, 38);\">firstColumn</span>].value;\r\nconst gender
      = cells[i * sheet.colCount + COLUMNS.<span style=\"color: rgb(226, 80, 65);\">secondColumn</span>].value;\r\nconsole.log(name
      + &quot; &quot; + price);\r\n}\r\n}\r\n);\r\n}\r\n],\r\nfunction(err) {\r\nif
      (err) {\r\nconsole.log(&quot;Error: &quot; + err);\r\n}\r\n}\r\n);</pre><p>出力結果</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545379719122-output.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h1>good!!<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f600.svg);\">&nbsp;</span>&nbsp;</h1><p><br></p><p>参考URL
      <a href=\"https://techblog.lclco.com/entry/2018/11/30/120000\">https://techblog.lclco.com/entry/2018/11/30/120000</a></p><p>参考にさせていただいた、この方のやり方以外にも</p><p><a
      href=\"https://dotstud.io/blog/google-spreadsheets-from-nodejs/​​​​\">https://dotstud.io/blog/google-spreadsheets-from-nodejs/</a>\r\n<a
      href=\"https://dotstud.io/blog/google-spreadsheets-from-nodejs/　のように\"></a></p><p>Google
      Drive Apiではなく Google Sheets Api を有効化してクライアントキーからアクセスする方法もあるみたいです</p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-21 08:19:35.917091'
    - '2018-12-24 12:48:18.685196'
  - - 96
    - gem geocoder で 地名と座標を自由に変換
    - "<h1>rails で住所から緯度経度を取得</h1><p><br></p><p><span style=\"background-color: rgb(247,
      218, 100); font-family: Impact, Charcoal, sans-serif; font-size: 18px; color:
      rgb(65, 168, 95);\">＊＊＊クライアント側は2018年の夏頃までは設定しなくても動いてたんですが、現在はgoogleのgeocodingAPIを有効化しないと使えないので、急に使えなくなっていてびっくりした方も多いと思います！！自分もその1人です！！</span></p><h2><span
      style=\"color: rgb(41, 105, 176);\">クライアント側</span></h2><p>1. GeocodingAPI を有効化してAPIキーを作成</p><p>GoogleDevelopersから<span
      style=\"color: rgb(184, 49, 47); font-size: 18px; background-color: rgb(247,
      218, 100);\">Geocoding API</span>を有効化し、認証情報を作成してAPIキー作成(すでにAPIを持っている場合は新たに作る必要はない)</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545720666699-geocoding.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib\"></p><h2><span style=\"color:
      rgb(41, 105, 176);\">サーバー側</span></h2><h2><span style=\"font-size: 18px;\">1.
      gemのインストール</span></h2><pre>Gemfile\r\n...\r\ngem &#39;geocoder&#39;</pre><pre>$
      bundle install</pre><p><br></p><p><br></p><p><span style=\"font-size: 18px;\">2.
      geocoder設定ファイルを作成、編集</span></p><pre><code>$ rails generate geocoder</code><code>:config
      <span style=\"color: rgb(41, 105, 176);\">(設定ファイルがconfig/initializers/geocoder.rbとしてできる)</span></code></pre><pre><code><span
      style=\"color: rgb(41, 105, 176);\">config/initializers/geocoder.rb</span></code>\r\nGeocoder.configure(\r\n#
      Geocoding options\r\n# timeout: 3,                 # geocoding service timeout
      (secs)\r\n# lookup: :google,            # name of geocoding service (symbol)\r\n#
      ip_lookup: :ipinfo_io,      # name of IP address geocoding service (symbol)\r\n<span
      style=\"color: rgb(250, 197, 28);\">language: :ja,</span>                <span
      style=\"color: rgb(247, 218, 100);\"># :enから:jaに変えた</span>\r\n# use_https: false,
                # use HTTPS for lookup requests? (if supported)\r\n# http_proxy: nil,
                 # HTTP proxy server (user:pass@host:port)\r\n# https_proxy: nil,
                # HTTPS proxy server (user:pass@host:port)\r\n<span style=\"color:
      rgb(250, 197, 28);\">api_key: &quot;あなたのAPI_KEY&quot;,</span>              
      <span style=\"color: rgb(247, 218, 100);\"># APIキーを設定しないと動きません</span>\r\n# cache:
      nil,                 # cache object (must respond to #[], #[]=, and #del)\r\n#
      cache_prefix: &#39;geocoder:&#39;,  # prefix (string) to use for all cache keys\r\n#
      Exceptions that should not be rescued by default\r\n# (if you want to implement
      custom error handling);\r\n# supports SocketError and Timeout::Error\r\n# always_raise:
      [],\r\n# Calculation options\r\n# units: :mi,                 # :km for kilometers
      or :mi for miles 1mi=1.6km\r\n# distances: :linear          # :spherical or
      :linear\r\n)</pre><p><br></p><p><span style=\"font-size: 18px;\">2. Modelにフィールドを作成</span></p><pre>$
      rails generate migration AddLatitudeAndLongitudeToModel latitude:float longitude:float
      address:string\r\n$ rake db:migrate</pre><pre>moder.rb\r\ngeocoded_by :address
      # addressカラムにジオコーディングを実装\r\nafter_validation :geocode, :if =&gt; :address_changed?
      # addressカラムが変更(保存や更新)されたらジオコーディングが行われる</pre><p><br></p><p><span style=\"font-size:
      18px;\">3. Viewを作成</span></p><pre>&lt;%= form_for @listing do |f| %&gt;\r\n\r\n&lt;div
      class=&quot;row&quot;&gt;\r\n&lt;div class=&quot;col-md-12&quot;&gt;\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;label&gt;住所&lt;/label&gt;\r\n&lt;%=
      f.text_field :address, placeholder: &quot;例: 東京都港区六本木６丁目１１&minus;１&quot;, class:
      &quot;form-control&quot;,\r\nrequired: &quot;true&quot; %&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;actions&quot;&gt;\r\n&lt;%= f.submit &quot;更新&quot;, class: &quot;btn
      btn-danger&quot; %&gt;\r\n&lt;/div&gt;\r\n&lt;% end %&gt;</pre><p><br></p>"
    - '2018-12-25 04:57:14.991951'
    - '2018-12-25 07:10:13.698932'
  - - 97
    - Rails5.2 Herokuにデプロイ
    - "<p style=\"text-align: center;\"><span style=\"font-size: 30px;\">Rails5.2
      Herokuにデプロイ</span></p><pre>Gemfileを編集\r\ngroup :production do\r\n　gem &#39;pg&#39;\r\nend\r\ngroup
      :development, :test do\r\n　gem &#39;sqlite3&#39;\r\nend</pre><pre>$ bundle install</pre><p>database.ymlは変更なし(Herokuが勝手にPostgreSQLで読み替えてくれる)</p><pre>default:
      &amp;default\r\nadapter: sqlite3\r\npool: &lt;%= ENV.fetch(&quot;RAILS_MAX_THREADS&quot;)
      { 5 } %&gt;\r\ntimeout: 5000\r\n\r\ndevelopment:\r\n&lt;&lt;: *default\r\ndatabase:
      db/development.sqlite3\r\n\r\n# Warning: The database defined as &quot;test&quot;
      will be erased and\r\n# re-generated from your development database when you
      run &quot;rake&quot;.\r\n# Do not set this db to the same as development or
      production.\r\ntest:\r\n&lt;&lt;: *default\r\ndatabase: db/test.sqlite3\r\n\r\nproduction:\r\n&lt;&lt;:
      *default\r\ndatabase: db/production.sqlite3</pre><p><br></p><p><span style=\"color:
      rgb(226, 80, 65);\">herokuの環境変数にmaster_keyを設定(rails5.2以降ならconfig/master.keyに生成されている。これをコピペして設定)<br>heroku
      config:set RAILS_MASTER_KEY=xxxxxxxxxxxxxxxxxxxxxxx</span></p><p><br></p><p>あとはHerokuのコンソールの指示に従ってコマンドを実行</p><pre>$
      git push heroku master</pre><p>までやったら</p><pre>$ heroku run rake db:schema:load\r\n$
      heroku run rake db:migrate</pre><h2><span style=\"color: rgb(243, 121, 52);\">&nbsp;完了</span></h2><p><br></p><p><span
      style=\"font-size: 24px;\"><span style=\"color: rgb(226, 80, 65);\">本番環境のみ画像が表示されないとき</span></span><br>(error
      not found 404)</p><pre># config/environments/roduction.rb\r\nconfig.assets.compile
      = true</pre><p>に設定し</p><pre>$ bundle exec rake assets:precompile RAILS_ENV=production</pre><p>を実行</p><p><br></p><p><br></p>"
    - '2019-01-13 12:29:06.871181'
    - '2019-01-13 13:17:42.725892'
  - - 98
    - Rails5.2 ローカルのDBデータをHerokuに渡す
    - "<p><span style=\"font-size: 30px; color: rgb(184, 49, 47);\">トラブル</span><br>herokuにデプロイしたあと、テーブルにデータがなく空状態である<br>(After
      deploy to heroku, there are no data in tables)<br><br><span style=\"font-size:
      30px; color: rgb(184, 49, 47);\">実現したいこと</span><br>localのデータを本番環境(heroku)に移したい<br>(I
      would like to dump local data to heroku)</p><h3><br>手順1 yaml_dbを導入</h3><pre>#
      Gemfile\r\ngem &#39;yaml_db&#39;\r\n$ bundle install</pre><h3><br>手順2 コピーしたいデータをダンプ</h3><pre>$
      rake db:dump RAILS_ENV=&quot;development&quot;\r\n(config/db/data.yml will be
      created!)\r\n\r\n$ rake db:data:load RAILS_ENV=&quot;production&quot;\r\n(production.sqlite3
      will be created!)</pre><p><br></p><h3>手順3 HerokuのPostgreSQLでダンプデータを読み込む</h3><pre>$
      heroku run pg:reset\r\n$ heroku run rake db:create RAILS_ENV=&quot;production&quot;\r\n$
      heroku run rake db:schema:load RAILS_ENV=&quot;production&quot;\r\n$ heroku
      run rake db:migrate RAILS_ENV=&quot;production&quot;\r\n$ heorku run rake db:data:load
      RAILS_ENV=&quot;production&quot;\r\n(content of data.yml has been dumped to
      Heroku now!)</pre>"
    - '2019-01-13 13:41:28.65589'
    - '2019-06-14 06:46:45.89785'
  - - 99
    - Rails5.2 管理者権限の作成
    - "<header><h1 style=\"text-align: center;\">railsで管理者権限を持たせる</h1></header><h2>実現したいこと</h2><p><br>管理者しか入れたくないページがあるので、権限を管理者だけにする</p><p>(make
      access impossible except admin.)</p><h2><br>行ったこと</h2><p><br>usersテーブルに権限カラムを追加して、特定のユーザーにのみtrueを与える</p><p>(add
      admin column in users table.)<br><br>手順1. usersテーブルにadminカラムの追加</p><pre>$ rails
      generate migration add_admin_to_users admin:boolean\r\n(db/migrate/[timestamp]_add_admin_to_users.rb
      will be created!)</pre><p><br></p><p>手順2. 生成されたマイグレーションファイルを編集<br>(Edit [timestamp]_add_admin_to_users.rb)</p><pre>#[timestamp]_add_admin_to_users.rb\r\nclass
      AddAdminToUsers &lt;ActiveRecord::Migration\r\ndef change\r\nadd_column :users,
      :admin, :boolean, default: false\r\nend\r\nend</pre><p><br></p><p>手順3. マイグレーションファイルを読み込む<br>(run
      migrate command)</p><pre>$ rake db:migrate</pre><p>これでusersテーブルにadminカラムが追加されました。<br><br>手順4.
      開発者ユーザーにadmin:trueを入れる<br>(add admin:true in column)</p><p><br></p><pre>方法A)
      seedデータを作成\r\n# db/seeds.rb\r\nUser.create!(name: &quot;ADmin User&quot;,\r\nemail:
      &quot;admin@example.com&quot;,\r\npassword: &quot;foobar&quot;,\r\npassword_confirmation:
      &quot;foobar&quot;,\r\nadmin: true)\r\n\r\n$ rake db:seed</pre><p><br>または</p><p><br></p><pre>方法B)コンソールから作成\r\n$
      rails console\r\n&gt;&gt; user = User.find(name: &quot;adminUserName&quot;)\r\n&gt;&gt;
      user.admin?\r\n=&gt; false\r\n&gt;&gt; user.toggle!(:admin)\r\n=&gt; true\r\n&gt;&gt;
      user.admin?\r\n=&gt; true</pre><h3><br>viewに実装例</h3><pre>&lt;% if current_user.admin?
      %&gt;\r\n&lt;%= link_to &quot;Delete&quot;, article_path(article), class: &quot;btn
      btn-danger&quot;, data: {:confirm =&gt; &quot;削除してもよろしいですか?&quot;}, method:
      :delete %&gt;\r\n&lt;% end %&gt;</pre><h3>コントローラに実装例</h3><pre>before_action
      :admin_user,　only: :destroy\r\nprivate\r\ndef admin_user\r\nredirect_to(root_url)
      unless current_user.admin?\r\nend</pre><p><br></p><p><span style=\"font-family:
      Impact, Charcoal, sans-serif; font-size: 30px;\">完了!!<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f601.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p>"
    - '2019-01-14 06:12:11.77056'
    - '2019-01-14 06:56:19.22122'
  - - 103
    - コマンドライン引数
    - "<pre>&lt;?php\r\n  // $argcにはコマンドライン引数の数\r\nif( $argc != 3 ){\r\n  echo &quot;数を２つ指定して下さい&quot;.PHP_EOL;\r\n//
      正常終了\r\n  exit(0);\r\n}\r\n\r\n$num1 = $argv[1];\r\n$num2 = $argv[2];\r\necho
      $num1+$num2.PHP_EOL;\r\n?&gt;</pre><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1548057904612-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-01-21+17.04.33.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p>"
    - '2019-01-21 08:03:23.491288'
    - '2019-01-21 08:08:26.645044'
  - - 104
    - パリティチェック
    - "<p>あなたはデータ入力の作業を行っています。<br>この入力するデータは &quot;0000&quot; から &quot;1111&quot;
      までの 2 進数です。</p><p>このデータ入力の作業は単調でミスを起こしやすく困っています。<br>このため、入力するデータに対してある計算をし検証をすることにしました。</p><p>ここでは排他的論理和(xor)
      と呼ばれる計算を使って入力データのミスを検出しようとしました。<br>排他的論理和(xor) は各桁において、1 が奇数個あれば 1、そうでないならば
      0 を出力します。</p><p>入力する N 個のデータに対して、排他的論理和(xor) を取って出力をしてください。<br>入力例 1 の場合は、各桁に対して以下のように計算されます。</p><p><img
      alt=\"img\" src=\"http://paiza.s3.amazonaws.com/problem/img/287/xor3.png\" class=\"fr-fic
      fr-dii\"></p><p>入力例2</p><pre><code>4\r\n0001\r\n0010\r\n0100\r\n1000</code></pre><p><br></p><p>解答</p><pre>&lt;?php\r\n$input_lines
      = trim(fgets(STDIN));\r\nif (strlen($input_lines)!=4) {\r\n  for ($i = 0; $i
      &lt; $input_lines; $i++) {\r\n    $num = trim(fgets(STDIN));\r\n    $num = str_replace(array(&quot;\\r\\n&quot;,&quot;\\r&quot;,&quot;\\n&quot;),
      &#39;&#39;, $num); // 改行文字の除去\r\n    $num1[] = substr($num, -1, 1);\r\n    $num2[]
      = substr($num, -2, 1);\r\n    $num3[] = substr($num, -3, 1);\r\n    $num4[]
      = substr($num, -4, 1);\r\n  }\r\n  $num1Sum=$num2Sum=$num3Sum=$num4Sum=0;\r\n
      \ foreach($num4 as $num4) {\r\n    $num4Sum += $num4; // 4桁目の合計\r\n  }\r\n$sum[]
      = $num4Sum;\r\nforeach($num3 as $num3) {\r\n    $num3Sum += $num3; // 3桁目の合計\r\n
      \ }\r\n  $sum[] = $num3Sum;\r\n  foreach($num2 as $num2) {\r\n    $num2Sum +=
      $num2; // 2桁目の合計\r\n  }\r\n  $sum[] = $num2Sum;\r\n  foreach($num1 as $num1)
      {\r\n    $num1Sum += $num1; // 1桁目の合計\r\n  }\r\n  $sum[] = $num1Sum;\r\n  foreach
      ($sum as $key =&gt; $value) {\r\n    if($value%2==0) {\r\n      echo 0;\r\n
      \   }else{\r\n      echo 1;\r\n    }\r\n  }\r\n} else if (strlen($input_lines)==4){\r\necho
      $input_lines;\r\n}\r\n\r\n</pre>"
    - '2019-01-21 10:21:16.596649'
    - '2019-02-04 10:07:51.154638'
  - - 106
    - ログファイル出力
    - "<p><br></p><p><br></p><pre>&lt;?php\r\n\r\n$ip = explode(&quot;.&quot;, trim(fgets(STDIN)));
      // 入力IPの配列\r\n$ip_ary = array();\r\nfor($i=2; $i&lt;4; $i++){\r\n<span style=\"color:
      rgb(204, 204, 204);\">// 第3と第4オクテットの[]を外してIPアドレス配列に入れる</span>\r\n$ip_ary[$i]
      = trim($ip[$i], &quot;[]&quot;);\r\n<span style=\"color: rgb(204, 204, 204);\">//
      第3と第4オクテットの*を0-255に読み替える</span>\r\n$ip_ary[$i] = str_replace(&quot;*&quot;,
      &quot;0-255&quot;, $ip_ary[$i]);\r\n}\r\n\r\n$ip_3 = array();\r\n$ip_3 = explode(&quot;-&quot;,
      $ip_ary[2]);<span style=\"color: rgb(204, 204, 204);\">//第３オクテット配列</span>\r\n$ip_4
      = array();\r\n$ip_4 = explode(&quot;-&quot;, $ip_ary[3]);<span style=\"color:
      rgb(204, 204, 204);\">//第４オクテット配列</span>\r\n$N = trim(fgets(STDIN)); // ログの行\r\n$info
      = array();\r\nfor($j=0; $j&lt;$N; $j++){\r\n  <span style=\"color: rgb(204,
      204, 204);\">// ログの行と情報別の多次元配列</span>\r\n  $info[$j] = explode(&quot; &quot;,
      fgets(STDIN));\r\n}\r\n$info_ip = array();\r\nfor($k=0; $k&lt;$N; $k++){\r\n
      \ <span style=\"color: rgb(204, 204, 204);\">// 多次元配列の二層目のインデックス0がIPアドレスであり,それをオクテットごとに区切って$info_ip配列に渡す</span>\r\n
      \ $info_ip[$k] = explode(&quot;.&quot;, $info[$k][0]);\r\n}\r\n\r\n<span style=\"color:
      rgb(204, 204, 204);\">// ログのIPアドレス配列のマッピング</span>\r\nforeach($info_ip as $key
      =&gt; $info_ip_v){\r\n<span style=\"color: rgb(204, 204, 204);\">// ログの第一オクテットと検索するIPアドレスの第一オクテットが一致したら</span>\r\n
      \ if($info_ip_v[0] == $ip[0]){\r\n<span style=\"color: rgb(204, 204, 204);\">//
      第二オクテットが一致したら</span>\r\n    if($info_ip_v[1] == $ip[1]){\r\n<span style=\"color:
      rgb(204, 204, 204);\">// 第三オクテットが一致したら</span>\r\n      if($info_ip_v[2] == $ip[2]){\r\n<span
      style=\"color: rgb(204, 204, 204);\">// 第四オクテットが一致もしくは第四オクテット配列の範囲内であったら</span>\r\n
      \       if($info_ip_v[3] == $ip[3]){\r\n<span style=\"color: rgb(204, 204, 204);\">//
      IPアドレス アクセス日 ファイル名</span>\r\n          echo $info[$key][0]. &quot; &quot;. trim($info[$key][3],
      &#39;[&#39;). &quot; &quot;. $info[$key][6]. &quot;\\n&quot;;\r\n        }elseif($ip_4[0]
      &lt;= $info_ip_v[3] &amp;&amp; $info_ip_v[3] &lt;= $ip_4[1]){\r\n          echo
      $info[$key][0]. &quot; &quot;. trim($info[$key][3], &#39;[&#39;). &quot; &quot;.
      $info[$key][6]. &quot;\\n&quot;;\r\n        }\r\n<span style=\"color: rgb(204,
      204, 204);\">// 第三オクテット配列の範囲内であったら</span>\r\n      }elseif($ip_3[0] &lt;= $info_ip_v[2]
      &amp;&amp; $info_ip_v[2] &lt;= $ip_3[1]){\r\n        if($ip_4[0] &lt;= $info_ip_v[3]
      &amp;&amp; $info_ip_v[3] &lt;= $ip_4[1]){\r\n          echo $info[$key][0].
      &quot; &quot;. trim($info[$key][3], &#39;[&#39;). &quot; &quot;. $info[$key][6].
      &quot;\\n&quot;;\r\n        }elseif($info_ip_v[3] == $ip[3]){\r\n          echo
      $info[$key][0]. &quot; &quot;. trim($info[$key][3], &#39;[&#39;). &quot; &quot;.
      $info[$key][6]. &quot;\\n&quot;;\r\n        }\r\n      \r\n}\r\n    }\r\n  }\r\n}\r\n?&gt;</pre>"
    - '2019-02-03 08:46:43.991494'
    - '2019-02-03 08:56:12.803924'
  - - 107
    - ダーツゲーム
    - "<pre>&lt;?php\r\n$first_line=explode(&quot; &quot;,fgets(STDIN));\r\n$first_line=filter_var_array($first_line,FILTER_SANITIZE_NUMBER_INT);\r\n$o_y=$first_line[0];\r\n$s=$first_line[1];\r\n$&theta;=$first_line[2];\r\n$&theta;=deg2rad($&theta;);
      <span style=\"color: rgb(204, 204, 204);\">// 角度をrad変換</span>\r\n\r\n$second_line=explode(&quot;
      &quot;,fgets(STDIN));\r\n$second_line=filter_var_array($second_line,FILTER_SANITIZE_NUMBER_INT);\r\n$x=$second_line[0];\r\n$y=$second_line[1];\r\n$a=$second_line[2];\r\n\r\n//
      矢の軌道\r\n$f1 = $o_y+$x*tan($&theta;);\r\n$f2 = (9.8*pow($x, 2))/(2*pow($s, 2)*pow(cos($&theta;),
      2));\r\n<span style=\"color: rgb(226, 80, 65);\">$x_y</span> = $f1 - $f2;\r\n\r\nif
      ($y-$a/2+0.05&lt;=<span style=\"color: rgb(226, 80, 65);\">$x_y</span> &amp;&amp;
      $y+$a/2-0.05&gt;=<span style=\"color: rgb(226, 80, 65);\">$x_y</span>) {\r\necho
      &quot;Hit &quot;.abs(round(<span style=\"color: rgb(226, 80, 65);\">$x_y</span>-$y,
      1)).&quot;\\n&quot;;\r\n}else{\r\necho &quot;Miss\\n&quot;;\r\n}\r\n?&gt;</pre>"
    - '2019-02-04 10:05:40.707885'
    - '2019-02-04 10:56:55.763026'
  - - 108
    - 地下アイドルの夢
    - "<pre>&lt;?php\r\n<span style=\"color: rgb(204, 204, 204);\">// ファンクラブの会員数N、ライブイベントの数M,ライブごとの利益情報\r\n//
      利益の最大値</span>\r\n$arr = explode(&quot; &quot;, trim(fgets(STDIN)));\r\n$arr
      = filter_var_array($arr,FILTER_SANITIZE_NUMBER_INT);\r\n$N = $arr[0];\r\n$M
      = $arr[1];\r\n<span style=\"color: rgb(204, 204, 204);\">// ライブごとの各メンバーのお金使う量を保存</span>\r\n$members
      = [];\r\nfor($i=0; $i&lt;$M; $i++){\r\n  $member = explode(&quot; &quot;, trim(fgets(STDIN)));\r\n
      \ $member = filter_var_array($member,FILTER_SANITIZE_NUMBER_INT);\r\n  $members[]
      = $member;\r\n}\r\n<span style=\"color: rgb(204, 204, 204);\">// ライブごとの会員たちが落としていくお金</span>\r\n<span
      style=\"color: rgb(226, 80, 65);\">$sum</span> = 0;\r\nforeach ($members as
      $key =&gt; $member) {\r\n  $count=0;\r\n  foreach ($member as $key =&gt; $money)
      {\r\n<span style=\"color: rgb(204, 204, 204);\">    // 会員が落としていくお金を足す</span>\r\n
      \   $count+=$money;\r\n  }\r\n  if ($count&gt;0){\r\n    <span style=\"color:
      rgb(226, 80, 65);\">$sum</span>+=$count;\r\n  }\r\n}\r\necho <span style=\"color:
      rgb(226, 80, 65);\">$sum</span>.PHP_EOL;\r\n?&gt;</pre>"
    - '2019-02-04 10:52:30.832563'
    - '2019-02-04 10:55:24.179776'
  - - 109
    - ビームの反射
    - "<h1>ビームの反射</h1><pre>&lt;?php \r\n$array=explode(&quot; &quot;,fgets(STDIN));\r\n$array=filter_var_array($array,FILTER_SANITIZE_NUMBER_INT);\r\n$height=$array[0];\r\n$width=$array[1];\r\nfor
      ($i=0; $i &lt; $height; $i++) { \r\n  $line[$i]=str_split(fgets(STDIN));\r\n}\r\n\r\n$x
      = 0;\r\n$y = 0;\r\n$count = 0;\r\n<span style=\"color: rgb(226, 80, 65);\">$beam</span>
      = &#39;x_go&#39;;\r\n\r\nwhile( 0&lt;= $x &amp;&amp; $x &lt; $width &amp;&amp;
      0 &lt;= $y &amp;&amp; $y &lt; $height){\r\n<span style=\"color: rgb(209, 213,
      216);\">// マスが\\の時 \\の時　_の時で場合分け</span>\r\nif($line[$y][$x] === &quot;\\\\&quot;){\r\n
      \ if(<span style=\"color: rgb(226, 80, 65);\">$beam</span> === &#39;x_go&#39;){\r\n
      \   <span style=\"color: rgb(226, 80, 65);\">$beam</span> = &#39;y_back&#39;;\r\n
      \ } elseif(<span style=\"color: rgb(226, 80, 65);\">$beam</span> === &#39;x_back&#39;){\r\n
      \   <span style=\"color: rgb(226, 80, 65);\">$beam</span> = &#39;y_go&#39;;\r\n
      \ } elseif(<span style=\"color: rgb(226, 80, 65);\">$beam</span> === &#39;y_go&#39;){\r\n
      \   <span style=\"color: rgb(226, 80, 65);\">$beam</span> = &#39;x_back&#39;;\r\n
      \ } elseif(<span style=\"color: rgb(226, 80, 65);\">$beam</span> === &#39;y_back&#39;){\r\n
      \   <span style=\"color: rgb(226, 80, 65);\">$beam</span> = &#39;x_go&#39;;\r\n
      \ }\r\n} elseif($line[$y][$x] === &#39;/&#39;){\r\n  if(<span style=\"color:
      rgb(226, 80, 65);\">$beam</span> === &#39;x_go&#39;){\r\n    <span style=\"color:
      rgb(226, 80, 65);\">$beam</span> = &#39;y_go&#39;;\r\n  } elseif(<span style=\"color:
      rgb(226, 80, 65);\">$beam</span> === &#39;x_back&#39;){ \r\n    <span style=\"color:
      rgb(226, 80, 65);\">$beam</span> = &#39;y_back&#39;;\r\n  } elseif(<span style=\"color:
      rgb(226, 80, 65);\">$beam</span> === &#39;y_go&#39;){\r\n    <span style=\"color:
      rgb(226, 80, 65);\">$beam</span> = &#39;x_go&#39;;\r\n  } elseif(<span style=\"color:
      rgb(226, 80, 65);\">$beam</span> === &#39;y_back&#39;){\r\n    <span style=\"color:
      rgb(226, 80, 65);\">$beam</span> = &#39;x_back&#39;;\r\n  }\r\n}\r\n\r\nswitch
      (<span style=\"color: rgb(226, 80, 65);\">$beam</span>) {\r\n  case &#39;x_go&#39;:\r\n
      \   $x++;\r\n    break;\r\n  case &#39;x_back&#39;:\r\n    $x--;\r\n    break;\r\n
      \ case &#39;y_go&#39;:\r\n    $y--;\r\n    break;\r\n  case &#39;y_back&#39;:\r\n
      \   $y++;\r\n    break;\r\n  default:\r\n    echo &quot;no test case!&quot;;\r\n
      \   break;\r\n}\r\n$count++;\r\n}\r\n\r\necho $count.PHP_EOL;\r\n\r\n</pre>"
    - '2019-02-07 12:12:08.528044'
    - '2019-03-07 05:07:10.201356'
  - - 110
    - Rails5.2 postgresqlを使う
    - "<p style=\"text-align: center;\"><span style=\"font-size: 30px;\">Rails5.2
      postgresqlを使う</span></p><p><span style=\"font-size: 24px;\">1.DB作成</span></p><pre><code>$
      pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
      </code></pre><pre>$ createdb AppName_production\r\n$ createdb AppName_development\r\n$
      createdb AppName_test\r\n$ createuser user</pre><p><br></p><p><span style=\"font-size:
      24px;\">2.アプリ作成</span></p><pre>$ rails new AppName --database=postgresql</pre><p><br></p><h1><span
      style=\"color: rgb(226, 80, 65); font-size: 30px; font-family: Impact, Charcoal,
      sans-serif;\">Finished!!</span></h1><p><br></p><pre>$ rails db\r\n  or\r\n$
      psql -d hoge_development</pre><p>で確認!</p>"
    - '2019-03-04 06:20:58.518483'
    - '2019-03-04 06:53:29.499209'
  - - 111
    - branchでの作業(1人)
    - "<pre>$ git checkout -b &quot;styles&quot; (masterからテェックアウト)</pre><p>作業終了したら</p><pre>$
      git branch (ブランチ一覧を確認)</pre><p>ブランチ一覧を確認</p><pre>$ git checkout master</pre><p>masterにチェックアウト</p><pre>$
      git merge styles</pre><p>stylesブランチの修正内容をマージする</p><pre>$ git branch -D styles</pre><p><code>style</code>ブランチが不要になったので、以下を実行して削除します。</p>"
    - '2019-03-04 07:11:43.78395'
    - '2019-03-04 07:20:12.561296'
  - - 112
    - デバイスごとのレスポンシブWebデザインの作成
    - "<h1>Railsにてスマホ、パソコン用でスタイルを使い分ける方法!!</h1><p><br></p><p>479px以下 =&gt; スマホのみ</p><p>480~767px
      =&gt; スマホもタブレットもある</p><p>768~979px =&gt; タブレットのみ</p><p>980px以上 =&gt; PCのみ</p><p><br></p><p>よって...</p><pre>@media
      screen and (min-width: 980px) {\r\n<span style=\"color: rgb(235, 107, 86);\">/*
      980px以上用（PC用）の記述 */</span>\r\n@media screen and (min-width: 768px) and (max-width:
      979px) {\r\n<span style=\"color: rgb(235, 107, 86);\">/* 768px - 979px用（タブレット用）の記述
      */</span>\r\n}\r\n@media screen and (min-width: 480px) and (max-width: 767px)
       {\r\n<span style=\"color: rgb(235, 107, 86);\">/* 480px - 767px用（タブレット／スマートフォン用）の記述
      */</span>\r\n}\r\n@media screen and (max-width: 479px) {\r\n<span style=\"color:
      rgb(235, 107, 86);\">/* 479px以下用（スマートフォン用）の記述 */</span>\r\n}</pre><p><br></p><p><br></p>"
    - '2019-03-04 10:02:01.111313'
    - '2019-03-04 10:21:15.581725'
  - - 113
    - Railsでメール送信
    - "<h1>WEBアプリにメールメール送信機能を実装する時に必要なSMTPの設定</h1><h2><br></h2><h2><span style=\"color:
      rgb(184, 49, 47);\">SMTPを設定(例</span><span style=\"color: rgb(184, 49, 47);\">)</span></h2><pre>config.action_mailer.smtp_settings
      = {\r\n  :enable_starttls_auto =&gt; true,\r\n  :address =&gt; &quot;smtp.gmail.com&quot;,\r\n
      \ :port =&gt; 587,\r\n  :domain =&gt; &#39;smtp.gmail.com&#39;,\r\n  :user_name
      =&gt; &quot;xxxxxxx@gmail.com&quot;, #gmailアドレス 環境変数\r\n  :password =&gt; &quot;xxxxxxxxxxx&quot;,
      #gmailパスワード 環境変数\r\n  :authentication =&gt; &#39;login&#39;,\r\n}</pre><p><br></p><ul><li>こちらの方のやり方で</li><li>https://qiita.com/cigalecigales/items/f4274088f20832252374</li></ul><h4><br></h4><h4>フリーメールアドレスがないとき</h4><h4>下のサービスを利用して動作確認できる</h4><h4><a
      href=\"https://mailtrap.io/\" rel=\"nofollow noopener\" target=\"_blank\">Mailtrap.io
      - Fake smtp testing server.Dummy smtp email testing</a></h4><h4>こちらの方のやり方で</h4><h4><a
      href=\"https://qiita.com/aiyu427/items/241e2feed06c15e1dcec\">https://qiita.com/aiyu427/items/241e2feed06c15e1dcec</a></h4><h4><br></h4><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-03-05 10:49:12.711405'
    - '2019-03-05 11:30:43.564661'
  - - 114
    - SublimeText3 cliを使用
    - <p>CLIインストール&nbsp;</p><pre>$ ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl
      /usr/local/bin/subl</pre><p><br></p><p>使用方法</p><p><a class="fr-strong" href="https://www.sublimetext.com/docs/3/osx_command_line.html">Document</a></p><p><br></p><p>よく使う</p><pre>$
      subl -n Path (パスをサブライムで新規ウィンドウで開く)</pre>
    - '2019-03-06 02:44:31.375515'
    - '2019-03-06 03:03:12.239212'
  - - 115
    - postgreSQL コマンド
    - '<h1 itemprop="headline">PostgreSQLコマンドチートシート</h1><p><br></p><section itemprop="articleBody"><p>よく使うPostgreSQLで利用可能なコマンドのチートシートです。<br>環境：psql
      (PostgreSQL) 9.5.0</p><h2>端末上で使うコマンド</h2><h4>サーバの起動</h4><p><code>$ pg_ctl start
      -D /usr/local/var/postgres</code></p><h4>サーバの終了</h4><p><code>$ pg_ctl stop -D
      /usr/local/var/postgres</code></p><h4>サーバが起動しているかの確認</h4><p><code>$ ps aux |
      grep postgres</code></p><h4>データベース接続</h4><p><code>$ psql -d database -U user
      -h host</code></p><ul><li>-d: データベース名(未指定だと、ログインユーザー名のデータベースに接続する)</li><li>-U:
      ユーザ名(未指定だと、ログインユーザー名になる)</li><li>-h: ホスト名(未指定だと、localhostになる)</li></ul><h4>データベース一覧表示</h4><p><code>$
      psql -l</code></p><h4>PostgreSqlバージョン表示</h4><p><code>$ psql -V</code></p><h4>PostgreSqlに関するヘルプ</h4><p><code>$
      psql -help</code></p><h2>psql上で使うコマンド</h2><p>postgresの部分には接続中のDB名が入る。</p><h4>psqlの終了</h4><p><code>postgres=#
      &yen;q</code></p><h4>ユーザ一覧を表示</h4><p><code>postgres=# \du</code></p><h4>データベース一覧を表示</h4><p><code>postgres=#
      \l</code></p><h4>他のデータベースに接続</h4><p><code>postgres=# \c dbname</code></p><h4>データベース作成</h4><p><code>postgres=#
      create database dbname;</code></p><h4>接続中のデータベースの情報を表示</h4><p><code>postgres=#
      \conninfo</code></p><h4>テーブル一覧を表示</h4><p><code>postgres=# \z</code></p><h4>テーブル定義を確認</h4><p><code>postgres=#
      \d tablename</code><br><em>tablename</em>には任意のテーブル名を入れる。</p><h4>カレントディレクトリ変更</h4><p><code>postgres=#
      \cd directory</code><br>カレントディレクトリをdirectoryに変更する。</p><h4>CSV形式のファイルをテーブルに挿入</h4><p><code>postgres=#
      \copy tablename from filename DELIMITER AS &#39;,&#39;</code></p><h4>ファイルからコマンドを実行</h4><p><code>postgres=#
      \i filename.sql</code><br>ファイルから入力を読み取り、実行する。</p><h4>コマンドラインの履歴の表示</h4><p><code>postgres=#
      \s</code><br>\sの後にファイル名を入力すると、そのファイル名に結果を出力する。</p><h4>&#39;\&#39;に関するヘルプの表示</h4><p><code>postgres=#
      \?</code></p><h4>シェル上のコマンドを使いたい場合</h4><p><code>postgres=# \! command</code><br><em>command</em>の部分にlsやpwdを入れるとpsql上でもシェル上のコマンドが実行できる。</p></section>'
    - '2019-03-07 05:06:44.065442'
    - '2019-03-08 04:15:11.415337'
  - - 116
    - Heroku PostgresのDBをローカルにコピーする方法
    - "<h1>Heroku PostgresのDBをローカルにコピーする方法</h1><p><br></p><p><br></p><p><code>heroku
      pg:backups</code>コマンドでバックアップを取ってダウンロードし、<code>pg_restore</code>コマンドでローカルにレストアすればよいです。</p><h3>1.
      バックアップ取得</h3><p><br></p><pre>$ heroku pg:backups capture --app sushi(アプリ名)</pre><p>ログが出る</p><pre>Use
      Ctrl-C at any time to stop monitoring progress; the backup\r\nwill continue
      running. Use heroku pg:backups info to check progress.\r\nStop a running backup
      with heroku pg:backups cancel.\r\n\r\nDATABASE ---backup---&gt; <span style=\"color:
      rgb(184, 49, 47);\">b001</span>\r\n\r\nRunning... 7.30MB</pre><ul><li><code>DATABASE
      ---backup---&gt; b001</code> この場合バックアップのIDは b001</li><li>Hobby Dev(無料プラン)は2個しか取れない(古い方から消える)ので、チームメイトに一言断ってからにしましょう</li><li>Hobby
      Devの場合,バックアップのIDは b001かb002</li><li>Standard 0以上のプランならスケジュールバックアップがあるのでそれを使ってもいいです。チームメイトがキャプチャしたバックアップがあるならそれを使ってもいいです<ul><li>その場合、<code>heroku
      pg:backups</code>でバックアップの一覧を出せるので、最新のバックアップのIDを覚えておきます</li></ul></li></ul><h3>2.
      バックアップのダウンロード</h3><p>アプリ名がsushiでバックアップIDがb001の場合</p><pre>curl -o latest.dump
      $(heroku pg:backups public-url b001 --app sushi)</pre><p>ダンプファイル名は任意のファイル名(production.dumpとかlatest.dumpとかmydb.dumpとかなんでも良い)</p><ul><li><code>heroku
      pg:backups public-url b001 --app sushi</code>でURLを表示できます。10分間有効です</li><li>上のコマンドはcurlに渡してすぐにダウンロードするようにしています。production.dumpというファイル名で保存されます</li></ul><h3>3-A.
      ローカルのDBにレストア(全てのテーブルをコピーするパターン)</h3><p>データベース名が<code>hoge_development</code>で、認証なしの場合(Railsならそうなってるはず)</p><pre>$
      pg_restore --verbose --clean --no-acl --no-owner -h localhost -d hoge_development
      latest.dump</pre><p>option内容詳細　<a href=\"https://www.postgresql.org/docs/9.4/app-pgrestore.html\">pg_restoreドキュメント</a></p><ul><li>DBのスキーマとレコードがまるごとレストアされます。<code>rake
      db:migrate</code>などは必要ないです</li><li><code>--verbose</code>オプションでログ表示</li><li><code>--clean</code>オプションで、元々あったデータを全部消してからレストアする</li><li><code>--no-acl</code>と<code>--no-owner</code>は権限設定をスキップする。ローカルなのでこれでいいと思う</li><li><code>-h
      localhost</code>はレストア先のホストの指定</li><li><code>-d hoge_development</code>はレストア先のデータベース名の指定</li></ul><h4>注意点</h4><p>Heroku
      Connectを使っている場合、Heroku Connectが使うトリガーや管理テーブル(<code>_trigger_log</code>など)、管理カラム(<code>_hc_lastop</code>など)も全部レストアされます。Heroku
      Connectのテーブルを<code>ridgepole</code>でローカルに再現している場合、管理テーブル、管理カラムも再現するようにしないと、次に<code>ridgepole
      --apply</code>した時にその辺が消えてトリガーが落ちるようになります。</p><p>よーするに<code>ridgepole --export</code>する時に<code>--ignore-tables
      &#39;\\\\A_&#39;</code>を付けたり、エクスポートされたSchemafileをいじったりするなということです。</p><p><br></p><h3>3-B.
      ローカルのDBにレストア(特定のテーブルをコピーするパターン)</h3><p><br></p><h4>リストアされる内容の一覧を出力 content_listは単なるファイル名なので任意</h4><pre>$
      pg_restore -l dump_file_name &gt; content_list</pre><p><br></p><h4>リストアされる内容の一覧の確認と修正</h4><pre>$
      vim content_list</pre><p><br></p><h4>リストアされる予定のテーブル定義やレコードが確認できるので、除外したい部分をコメントアウトする</h4><pre>;いらんテーブル\r\n;208;
      1259 15400752 TABLE public users ...\r\n...\r\n;いらんデータ\r\n;207; 1259 15400750
      SEQUENCE public users_id_seq ...</pre><p><span style=\"color: rgb(124, 112,
      107);\">僕の場合はusersテーブル以外をダンプしたかったのでusersが含まれる全ての行をコメントにしました</span></p><p><br></p><h4>いざリストアする</h4><pre>$
      pg_restore -L content_list dump_file_name</pre><pre>$ pg_restore --verbose --clean
      --no-acl --no-owner -h localhost -d hoge_development dump_file_name</pre><p><br></p><h1>完璧！！<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span></h1><p><br></p><p><br></p><h1>こちらも参照！！</h1><h1><a
      href=\"https://dragonarrow.herokuapp.com/articles/124\">ローカルDBをHerokuに移行</a></h1><h1><br></h1>"
    - '2019-03-08 03:33:36.69422'
    - '2019-05-13 10:13:40.905442'
  - - 117
    - Rails5.2 PosrgreSQL テーブルのダブり
    - "<h1><span style=\"color: rgb(184, 49, 47);\">エラー内容: テーブルダブり</span></h1><p><br></p><pre>PG::DuplicateTable:
      ERROR:  relation &quot;users&quot; already exists\r\nActiveRecord::StatementInvalid:
      PG::DuplicateTable: ERROR:  relation &quot;users&quot; already exists</pre><p><br></p><h2><span
      style=\"color: rgb(209, 72, 65);\">解決策</span></h2><p>DB接続</p><pre>$ psql -d
      mymemo_development</pre><p>ダブりテーブルを削除する</p><pre>mymemo_development=&gt; drop
      table users;\r\n\\q</pre><p>マイグレート</p><pre>$ rake db:migrate</pre><p><br></p><p><br></p><h1>完!<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f624.svg);\">&nbsp;</span>
      <span class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background:
      url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f624.svg);\">&nbsp;</span>&nbsp;</h1><p><br></p>"
    - '2019-03-08 05:46:16.643583'
    - '2019-03-08 05:53:18.016236'
  - - 118
    - github 間違って大事なファイルを削除した時
    - "<h1>リセットコマンド</h1><p><br></p><p>ステージングと作業ディレクトリをリセットして直前のコミット状態と一致させる。ローカルの作業も破棄されるので注意して使用する。</p><pre><code>$
      git reset --hard</code></pre><p><br></p><p>ステージング(のみ)をリセットして直前のコミット状態と一致させる</p><pre><code>$
      git reset</code></pre><p><br></p><p>特定ファイルをステージングから削除する</p><pre><code>$ git
      reset &lt;file&gt;</code></pre><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-03-08 07:56:22.616074'
    - '2019-03-08 07:59:51.992411'
  - - 119
    - SMTP
    - <p itemprop="headline">Rails5でdeviseをAmazon SES SMTPサーバーを使って動かす</p><p><a href="http://blog.naoshihoshi.com/entry/2018/07/17/113000">http://blog.naoshihoshi.com/entry/2018/07/17/113000</a></p><p><br></p><p>aws_sesから配信</p><p><a
      href="http://blog.naoshihoshi.com/entry/2018/07/17/113000">http://blog.naoshihoshi.com/entry/2018/07/17/113000</a></p>
    - '2019-03-08 08:01:52.645631'
    - '2019-03-08 08:01:52.645631'
  - - 121
    - "【パズル２】ほとんどのエンジニアには解けるが、下位20％のダメなエンジニアにだけ解けないパズル？"
    - "<p>こちらの問題 <a href=\"https://www.jabba.cloud/20151228212010/\">https://www.jabba.cloud/20151228212010/</a></p><p><br></p><pre>$
      curl <a href=\"http://challenge-your-limits2.herokuapp.com/call/my/APIs\">http://challenge-your-limits2.herokuapp.com/call/my/APIs</a>\r\n{&quot;error&quot;:&quot;Ok.
      Let&#39;s get started! End Point is correct. But HTTP Method should be...&quot;}</pre><p>エンドポイントはOK
      httpメソッドが違う(GETじゃない)</p><p><br></p><pre>$ curl -x POST <a href=\"https://challenge-your-limits2.herokuapp.com/call/my/APIs\">https://challenge-your-limits2.herokuapp.com/call/my/APIs</a>\r\n0curl:
      (5) Could not resolve proxy: POST</pre><p>POSTでは解決できないと。</p><p><br></p><pre
      data-lang=\"\" data-unlink=\"\">$ curl -X DELETE <a href=\"http://challenge-your-limits2.herokuapp.com/call/my/APIs\">http://challenge-your-limits2.herokuapp.com/call/my/APIs</a>\r\n{&quot;message&quot;:&quot;Well
      done! haha! Surprised? Yeah, the answer was DELETE. Ok. Next === /c2_users/:id/hacker_apply&quot;}</pre><p>DELETEでした。次は&quot;/c2_users/:id/hacker_apply&quot;とさ</p><p><br></p><pre>$
      curl <a href=\"http://challenge-your-limits2.herokuapp.com/c2_users/:id/hacker_apply\">http://challenge-your-limits2.herokuapp.com/c2_users/:id/hacker_apply</a>\r\n{&quot;error&quot;:&quot;Please
      authenticate using Basic Auth with your username and password. You want a clue?
      Shout out &#39;help/me/out&#39;&quot;}</pre><p><br></p><p>ユーザ名とパスワードを認証してきて。ヒントが欲しいなら<code>help/me/out</code>
      を呼べとさ</p><p><br></p><pre data-lang=\"\" data-unlink=\"\">$ curl <a href=\"http://challenge-your-limits2.herokuapp.com/help/me/out\">http://challenge-your-limits2.herokuapp.com/help/me/out</a>\r\n{&quot;message&quot;:&quot;By
      the way, Have you already registered? This is the clue only for REGISTERED user.
      You should have your id before you check the clue. If you don&#39;t, go to /c2_users/
      and register. Hey, Registered users! Here you go. === bit.ly/1T8gVdG === You
      don&#39;t know about &#39;bit.ly&#39;? Google it!&quot;}</pre><p>ところで登録済みのユーザーなの？違うなら
      &quot;/c2_users/&quot; にいけ。登録済みのユーザーよ、bit.ly/1T8gVdG に行け、&#39;bit.ly&#39;を知らない？
      バァたれ!</p><p><br></p><pre data-lang=\"\" data-unlink=\"\">$ curl <a href=\"http://challenge-your-limits2.herokuapp.com/c2_users\">http://challenge-your-limits2.herokuapp.com/c2_users</a>\r\n{&quot;error&quot;:&quot;GET?
      No. No.&quot;}</pre><p>GET？違う違う。</p><p><br></p><pre data-lang=\"\" data-unlink=\"\">$
      curl -X POST <a href=\"http://challenge-your-limits2.herokuapp.com/c2_users\">http://challenge-your-limits2.herokuapp.com/c2_users</a>\r\n{&quot;error&quot;:&quot;Validation
      Error - [:username, \\&quot;can&#39;t be blank\\&quot;]&quot;}</pre><p>ユーザーネームが空だぞ</p><p><br></p><pre
      data-lang=\"\" data-unlink=\"\">$ curl -X POST -d &quot;username=twinko&quot;
      <a href=\"http://challenge-your-limits2.herokuapp.com/c2_users\">http://challenge-your-limits2.herokuapp.com/c2_users</a>\r\n{&quot;error&quot;:&quot;Validation
      Error - [:email, \\&quot;can&#39;t be blank\\&quot;]&quot;}</pre><p>emailが空だぞ</p><p><br></p><pre>$
      curl -X POST -d &quot;username=twinko&amp;email=twinko@bn.com&amp;password=twinko&quot;
      <a href=\"http://challenge-your-limits2.herokuapp.com/c2_users\">http://challenge-your-limits2.herokuapp.com/c2_users</a>\r\n{&quot;id&quot;:3370,&quot;username&quot;:&quot;twinko&quot;,&quot;email&quot;:&quot;twinko@bn.com&quot;,&quot;password&quot;:&quot;RN2y6JQikEhEheEA&quot;,&quot;comment&quot;:null,&quot;created_at&quot;:&quot;2019-03-15T07:39:26.861Z&quot;,&quot;updated_at&quot;:&quot;2019-03-15T07:39:26.861Z&quot;}</pre><p>アカウントできた</p><p><br></p><pre>$
      curl --user twinko:RN2y6JQikEhEheEA <a href=\"http://challenge-your-limits2.herokuapp.com/c2_users/:id/hacker_apply\">http://challenge-your-limits2.herokuapp.com/c2_users/:id/hacker_apply</a>\r\n{&quot;error&quot;:&quot;Your
      id is a bit weird. Can you check it?&quot;}</pre><p>奇妙な IDだな、確認したか？</p><p><br></p><pre>$
      curl --user twinko:RN2y6JQikEhEheEA http://challenge-your-limits2.herokuapp.com/c2_users/3370/hacker_apply\r\n{&quot;message&quot;:&quot;Awesome!
      Can you come over here? === R29vZCBqb2IhISBQbGVhc2UgYWNjZXNzIHRvIHRoZSB1cmwgZnJvbSB5b3VyIHdlYiBicm93c2VyLiA9PT0gXApodHRwOi8vY2hhbGxlbmdlLXlvdXItbGltaXRzMi5oZXJva3VhcHAuY29tL3dpbm5lcl9jb21tZW50cy9xUWVwYWQtZDBXMHp0cVpY
           You want a clue? Shout out &#39;give me a clue&#39;&quot;}</pre><p>素晴らしい
      &quot;base64<strong>変換</strong>後の文字列&quot; まで来てくれるかい？</p><p><br></p><pre>$ echo
      -n &quot;R29vZCBqb2IhISBQbGVhc2UgYWNjZXNzIHRvIHRoZSB1cmwgZnJvbSB5b3VyIHdlYiBicm93c2VyLiA9PT0gXApodHRwOi8vY2hhbGxlbmdlLXlvdXItbGltaXRzMi5oZXJva3VhcHAuY29tL3dpbm5lcl9jb21tZW50cy9xUWVwYWQtZDBXMHp0cVpY&quot;
      | base64 -D(--decodeでも可)\r\nGood job!! Please access to the url from your web
      browser. === \\<a href=\"http://challenge-your-limits2.herokuapp.com/winner_comments/qQepad-d0W0ztqZX\"></a>\r\n<a
      href=\"http://challenge-your-limits2.herokuapp.com/winner_comments/qQepad-d0W0ztqZX\">http://challenge-your-limits2.herokuapp.com/winner_comments/qQepad-d0W0ztqZX</a></pre><p>Basic認証では、ユーザ名とパスワードの組みをコロン
      &quot;:&quot; でつなぎ、<span style=\"color: rgb(184, 49, 47);\">Base64でエンコードして送信する</span>。<a
      href=\"http://d.hatena.ne.jp/keyword/Basic%C7%A7%BE%DA\">Basic認証</a>と<a href=\"http://d.hatena.ne.jp/keyword/base64\">base64</a>変換はもうセット</p><h1>完！！！</h1><p><br></p><p>＊＊＊豆知識<br>エンコード</p><pre>$
      echo -n &quot;デコード後&quot; | base64\r\nエンコード</pre><p>デコード</p><pre>$ echo -n &quot;エンコード後&quot;
      | base64 -D\r\nデコード後</pre><p><br></p><p><br></p>"
    - '2019-03-15 08:11:13.867158'
    - '2019-03-15 09:16:20.419319'
  - - 122
    - "【下位10％のダメなエンジニアにだけ解けないパズル】"
    - "<h1>【下位10％のダメなエンジニアにだけ解けないパズル】</h1><p><br></p><p><br></p><pre>$ curl <a href=\"http://challenge-your-limits.herokuapp.com/call/me\">http://challenge-your-limits.herokuapp.com/call/me</a>\r\n{&quot;message&quot;:&quot;Almost!
      It&#39;s not GET. Keep trying.&quot;}</pre><p>近い！GETじゃないよ、続けて！</p><p><br></p><pre>$
      curl -X PUT <a href=\"http://challenge-your-limits.herokuapp.com/call/me\">http://challenge-your-limits.herokuapp.com/call/me</a>\r\n{&quot;message&quot;:&quot;No
      No. Not this way&quot;}</pre><p>違う違う、その方法じゃないよ。</p><p><br></p><pre>$ curl -X
      DELETE <a href=\"http://challenge-your-limits.herokuapp.com\">http://challenge-your-limits.herokuapp.com</a>\r\n{&quot;message&quot;:&quot;No
      No. Not this way&quot;}</pre><p>違う違う、その方法じゃないよ。</p><p><br></p><pre>$ curl -X
      POST <a href=\"http://challenge-your-limits.herokuapp.com/call/me\"></a><a href=\"http://challenge-your-limits.herokuapp.com/call/me\">http://challenge-your-limits.herokuapp.com/call/me</a>\r\n{&quot;message&quot;:&quot;Great!
      Please register as /challenge_users&quot;}</pre><p>素晴らしい、&rdquo;/challenge_users&rdquo;として登録してね。</p><p><br></p><pre>$
      curl <a href=\"http://challenge-your-limits.herokuapp.com/challenge_users\">http://challenge-your-limits.herokuapp.com/challenge_users</a>\r\n{&quot;message&quot;:&quot;GET?
      No. No.&quot;}</pre><p>GET?違う違う。</p><p><br></p><pre>$ curl -X POST <a href=\"http://challenge-your-limits.herokuapp.com/challenge_users\">http://challenge-your-limits.herokuapp.com/challenge_users</a>\r\n{&quot;message&quot;:&quot;Validation
      Error, [:name, \\&quot;can&#39;t be blank\\&quot;]&quot;}</pre><p>バリデーションエラー。nameパラメータは空にはできません</p><p><br></p><pre>$
      curl -X PUT -d &quot;name=twinko&quot; <a href=\"http://challenge-your-limits.herokuapp.com/challenge_users\">http://challenge-your-limits.herokuapp.com/challenge_users</a>\r\n{&quot;message&quot;:&quot;No
      No. Not this way&quot;</pre><p>違う違う、その方法じゃないよ。</p><p><br></p><pre>$ curl -X
      POST -d &quot;name=twinko&amp;email=twinko@email.com&quot; <a href=\"http://challenge-your-limits.herokuapp.com/challenge_users\">http://challenge-your-limits.herokuapp.com/challenge_users</a>\r\n{&quot;message&quot;:&quot;Thanks!
      Please access to http://challenge-your-limits.herokuapp.com/challenge_users/token/hBu3uvLtGio</pre><p>ありがとう、http://challenge-your-limits.herokuapp.com/challenge_users/token/hBu3uvLtGioにブラウザでアクセスしてください。</p><p><br></p><p>あれ、もうできた...<span
      style=\"font-size: 48px;\">完<span class=\"fr-emoticon fr-deletable fr-emoticon-img\"
      style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f604.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-03-18 03:43:29.890167'
    - '2019-03-18 03:57:19.888'
  - - 123
    - 初めてのPWA実装
    - "<h1 style=\"text-align: center;\">PWA実装のメモ</h1><p><span style=\"font-size:
      24px;\">環境 Ruby On Rails(5.2)</span></p><p><br></p><h3>PWAに必要なもの</h3><p>PWAを導入するには以下が必要になります。</p><ul><li>レスポンシブ対応</li><li>HTTPS対応していること</li><li>Serviceworkerの導入</li><li>Manifestの設定</li></ul><h3>レスポンシブ対応</h3><p>色々な方法がありますが、CSSで</p><p>hogehoge.scss</p><pre>@media
      all and (min-width: 769px){\r\n  // 769px 以上の画面用の CSS\r\n}\r\n@media all and
      (max-width: 768px){\r\n  // 768px 以下の画面用の CSS\r\n}\r\n@media all and (max-width:
      640px){\r\n  // 640px 以下の画面用の CSS\r\n}</pre><p>のようにしてサイズを指定して切り分けることができます。</p><h3>HTTPS対応</h3><p><br></p><p>config/environments/production.rb</p><pre>Rails.application.configure
      do\r\n  # ...\r\n\r\n  # Force all access to the app over SSL, use Strict-Transport-Security,
      and use secure cookies.\r\n  <span style=\"color: rgb(235, 107, 86);\">config.force_ssl
      = true</span>\r\n\r\n  # ...\r\nend</pre><p><br></p><h3>Serviceworkerの導入</h3><p>そもそもServiceworkerってなんぞやというと「クライアント側でユーザーが見ている画面とは別にバックグラウンドで動かせるスクリプト」です。<br>ややこしい説明はここではしませんが、こいつのおかげでPWAの機能である、PUSH通知やオフラインでも画面を見せたりすることができます。</p><p>今回は
      <a href=\"https://github.com/rossta/serviceworker-rails\"><span style=\"font-size:
      24px;\">gem serviceworker-rails</span></a> という gem を使って実装しました。</p><p>まずはgemをインストールします。</p><pre>gem
      &#39;serviceworker-rails&#39;</pre><pre>$ bundle install</pre><p>そして初期ファイルを作成します。<br>手で作ることもできますが、面倒くさいので今回はコマンドを叩いて作成します。</p><pre>$
      rails g serviceworker:install\r\n      create  app/assets/javascripts/manifest.json.erb\r\n
      \     create  app/assets/javascripts/serviceworker.js.erb\r\n      create  app/assets/javascripts/serviceworker-companion.js\r\n
      \     create  config/initializers/serviceworker.rb\r\n      append  app/assets/javascripts/application.js\r\n
      \     append  config/initializers/assets.rb\r\n      insert  app/views/layouts/application.html.haml\r\n
      \     create  public/offline.html</pre><p>上記が初期ファイルになります。この初期ファイルの中でさまざまな設定が書かれています。</p><h4>設定</h4><p>config/initializers/assets.rb</p><pre>Rails.configuration.assets.precompile
      += %w[serviceworker.js manifest.json]</pre><p>config/initializers/serviceworker.rb</p><pre>Rails.application.configure
      do\r\n  config.serviceworker.routes.draw do\r\n    # map to assets implicitly\r\n
      \   match &quot;/serviceworker.js&quot;\r\n    match &quot;/manifest.json&quot;\r\n\r\n
      \   # Examples\r\n    #\r\n    # map to a named asset explicitly\r\n    # match
      &quot;/proxied-serviceworker.js&quot; =&gt; &quot;nested/asset/serviceworker.js&quot;\r\n
      \   # match &quot;/nested/serviceworker.js&quot; =&gt; &quot;another/serviceworker.js&quot;\r\n
      \   #\r\n    # capture named path segments and interpolate to asset name\r\n
      \   # match &quot;/captures/*segments/serviceworker.js&quot; =&gt; &quot;%{segments}/serviceworker.js&quot;\r\n
      \   #\r\n    # capture named parameter and interpolate to asset name\r\n    #
      match &quot;/parameter/:id/serviceworker.js&quot; =&gt; &quot;project/%{id}/serviceworker.js&quot;\r\n
      \   #\r\n    # insert custom headers\r\n    # match &quot;/header-serviceworker.js&quot;
      =&gt; &quot;another/serviceworker.js&quot;,\r\n    #   headers: { &quot;X-Resource-Header&quot;
      =&gt; &quot;A resource&quot; }\r\n    #\r\n    # anonymous glob exposes `paths`
      variable for interpolation\r\n    # match &quot;/*/serviceworker.js&quot; =&gt;
      &quot;%{paths}/serviceworker.js&quot;\r\n  end\r\nend</pre><p>ここで serviceworker.js
      と manifest.json の2ファイルを読み込み、パスを指定しています。<br><br></p><p>app/assets/javascripts/serviceworker-companion.js</p><pre>if
      (navigator.serviceWorker) {\r\n  navigator.serviceWorker.register(&#39;/serviceworker.js&#39;,
      { scope: &#39;./&#39; })\r\n    .then(function(reg) {\r\n      console.log(&#39;[Companion]&#39;,
      &#39;Service worker registered!&#39;);\r\n    });\r\n}</pre><p>app/assets/javascripts/serviceworker.js.erb</p><pre>var
      CACHE_VERSION = &#39;v1&#39;;\r\nvar CACHE_NAME = CACHE_VERSION + &#39;:sw-cache-&#39;;\r\n\r\nfunction
      onInstall(event) {\r\n  console.log(&#39;[Serviceworker]&#39;, &quot;Installing!&quot;,
      event);\r\n  event.waitUntil(\r\n    caches.open(CACHE_NAME).then(function prefill(cache)
      {\r\n      return cache.addAll([\r\n\r\n        // make sure serviceworker.js
      is not required by application.js\r\n        // if you want to reference application.js
      from here\r\n        &#39;&lt;%#= asset_path &quot;www_domain/application.js&quot;
      %&gt;&#39;,\r\n\r\n        &#39;&lt;%= asset_path &quot;www_domain/application.css&quot;
      %&gt;&#39;,\r\n\r\n        &#39;/offline.html&#39;,\r\n\r\n      ]);\r\n    })\r\n
      \ );\r\n}\r\n\r\nfunction onActivate(event) {\r\n  console.log(&#39;[Serviceworker]&#39;,
      &quot;Activating!&quot;, event);\r\n  event.waitUntil(\r\n    caches.keys().then(function(cacheNames)
      {\r\n      return Promise.all(\r\n        cacheNames.filter(function(cacheName)
      {\r\n          // Return true if you want to remove this cache,\r\n          //
      but remember that caches are shared across\r\n          // the whole origin\r\n
      \         return cacheName.indexOf(CACHE_VERSION) !== 0;\r\n        }).map(function(cacheName)
      {\r\n          return caches.delete(cacheName);\r\n        })\r\n      );\r\n
      \   })\r\n  );\r\n}\r\n\r\n// Borrowed from <a href=\"https://github.com/TalAter/UpUp\">https://github.com/TalAter/UpUp</a>\r\nfunction
      onFetch(event) {\r\n  event.respondWith(\r\n    // try to return untouched request
      from network first\r\n    fetch(event.request).catch(function() {\r\n      //
      if it fails, try to return request from the cache\r\n      return caches.match(event.request).then(function(response)
      {\r\n        if (response) {\r\n          return response;\r\n        }\r\n
      \       // if not found in cache, return default offline content for navigate
      requests\r\n        if (event.request.mode === &#39;navigate&#39; ||\r\n          (event.request.method
      === &#39;GET&#39; &amp;&amp; event.request.headers.get(&#39;accept&#39;).includes(&#39;text/html&#39;)))
      {\r\n          console.log(&#39;[Serviceworker]&#39;, &quot;Fetching offline
      content&quot;, event);\r\n          return caches.match(&#39;/offline.html&#39;);\r\n
      \       }\r\n      })\r\n    })\r\n  );\r\n}\r\n\r\nself.addEventListener(&#39;install&#39;,
      onInstall);\r\nself.addEventListener(&#39;activate&#39;, onActivate);\r\nself.addEventListener(&#39;fetch&#39;,
      onFetch);</pre><p><code>app/assets/javascripts/serviceworker-companion.js</code>
      と <code>app/assets/javascripts/serviceworker.js.erb</code> では</p><ul><li>register</li><li>install</li><li>activate</li><li>fetch</li></ul><p>のそれぞれの
      Serviceworker のイベントごとの挙動を設定しています。<br><br><br>続いて application.js に serviceworker-companion.js
      を読み込ませます。</p><p>app/assets/javascripts/application.js</p><pre>//= require serviceworker-companion</pre><p>最後に
      Serviceworker の目玉機能の1つでもある、オフラインページです。<br>ユーザーがオフライン時に表示される画面の設定です。Rails のデフォルトの
      404ページや 500ページと同様、public 配下にデフォルトのファイルができているので、文言やデザインを変えたい方はこちらをいじると変えることができます。<br>また、404等と同様、public
      配下ではなく、<a href=\"https://mattbrictson.com/dynamic-rails-error-pages\" rel=\"nofollow
      noopener\" target=\"_blank\">動的に作り直すこともできるようです</a>。<br>ちなみにオフライン用のファイルとして <code>public/offline.html</code>
      が使われるのは、<code>app/assets/javascripts/serviceworker.js.erb</code> 内の <code>onInstall</code>
      関数で設定されているからなので、設定すれば、offline.html 以外のファイルもオフラインファイルとして設定できると思います。<br>デフォルトの
      offline.html は以下。</p><p>public/offline.html</p><pre>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n
      \ &lt;title&gt;You are not connected to the Internet&lt;/title&gt;\r\n  &lt;meta
      name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;\r\n
      \ &lt;style&gt;\r\n  body {\r\n    background-color: #EFEFEF;\r\n    color:
      #2E2F30;\r\n    text-align: center;\r\n    font-family: arial, sans-serif;\r\n
      \   margin: 0;\r\n  }\r\n\r\n  div.dialog {\r\n    width: 95%;\r\n    max-width:
      33em;\r\n    margin: 4em auto 0;\r\n  }\r\n\r\n  div.dialog &gt; div {\r\n    border:
      1px solid #CCC;\r\n    border-right-color: #999;\r\n    border-left-color: #999;\r\n
      \   border-bottom-color: #BBB;\r\n    border-top: #B00100 solid 4px;\r\n    border-top-left-radius:
      9px;\r\n    border-top-right-radius: 9px;\r\n    background-color: white;\r\n
      \   padding: 7px 12% 0;\r\n    box-shadow: 0 3px 8px rgba(50, 50, 50, 0.17);\r\n
      \ }\r\n\r\n  h1 {\r\n    font-size: 100%;\r\n    color: #730E15;\r\n    line-height:
      1.5em;\r\n  }\r\n\r\n  div.dialog &gt; p {\r\n    margin: 0 0 1em;\r\n    padding:
      1em;\r\n    background-color: #F7F7F7;\r\n    border: 1px solid #CCC;\r\n    border-right-color:
      #999;\r\n    border-left-color: #999;\r\n    border-bottom-color: #999;\r\n
      \   border-bottom-left-radius: 4px;\r\n    border-bottom-right-radius: 4px;\r\n
      \   border-top-color: #DADADA;\r\n    color: #666;\r\n    box-shadow: 0 3px
      8px rgba(50, 50, 50, 0.17);\r\n  }\r\n  &lt;/style&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n
      \ &lt;!-- This file lives in public/offline.html --&gt;\r\n  &lt;div class=&quot;dialog&quot;&gt;\r\n
      \   &lt;div&gt;\r\n      &lt;h1&gt;It looks like you&#39;ve lost your Internet
      connection&lt;/h1&gt;\r\n      &lt;p&gt;You may need to reconnect to Wi-Fi.&lt;/p&gt;\r\n
      \   &lt;/div&gt;\r\n  &lt;/div&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</pre><p>Serviceworker
      の導入は以上です。</p><p><br></p><p><code>rails s</code> で確認</p><p><br></p><h3>Manifest
      の導入</h3><p>最後に Manifest の導入をします。<br>Manifest は簡単にいうとホーム画面に追加したときの設定です。</p><h4>設定</h4><p>設定は上で作られた
      <code>app/assets/javascripts/manifest.json.erb</code> 内で行います。</p><p>以下がデフォルトでできたファイルです。</p><p>app/assets/javascripts/manifest.json.erb</p><pre>&lt;%
      icon_sizes = Rails.configuration.serviceworker.icon_sizes %&gt;\r\n{\r\n  &quot;name&quot;:
      &quot;app name&quot;,\r\n  &quot;short_name&quot;: &quot;app short name&quot;,\r\n
      \ &quot;start_url&quot;: &quot;/&quot;,\r\n  &quot;icons&quot;: [\r\n  &lt;%
      icon_sizes.map { |s| &quot;#{s}x#{s}&quot; }.each.with_index do |dim, i| %&gt;\r\n
      \   {\r\n      &quot;src&quot;: &quot;&lt;%= image_path &quot;serviceworker-rails/heart-#{dim}.png&quot;
      %&gt;&quot;,\r\n      &quot;sizes&quot;: &quot;&lt;%= dim %&gt;&quot;,\r\n      &quot;type&quot;:
      &quot;image/png&quot;\r\n    }&lt;%= i == (icon_sizes.length - 1) ? &#39;&#39;
      : &#39;,&#39; %&gt;\r\n  &lt;% end %&gt;\r\n  ],\r\n  &quot;theme_color&quot;:
      &quot;#000000&quot;,\r\n  &quot;background_color&quot;: &quot;#FFFFFF&quot;,\r\n
      \ &quot;display&quot;: &quot;fullscreen&quot;,\r\n  &quot;orientation&quot;:
      &quot;portrait&quot;\r\n}</pre><p>JSONでさまざまな設定がされているようですが、それぞれの意味と値はこんな感じです。</p><table><thead><tr><th>キー<br></th><th>内容<br></th></tr></thead><tbody><tr><td>name<br></td><td>アイコンのラベルとして使われる名前<br></td></tr><tr><td>short_name<br></td><td><code>name</code>
      が入り切らないときなどに表示される名前<br></td></tr><tr><td>start_url<br></td><td>ユーザーがアプリケーションを起動したときに最初にロードされるURL<br></td></tr><tr><td>icons<br></td><td>Serviceworkerでさまざまな場所で使われるアイコン。<br>それぞれの用途の推奨サイズに一番近い画像が使われます。<br>ただし、iOSの場合、<code>app_touch_icon</code>
      がアイコンに使われてしまうのでそちらをちゃんと設定しないといけない模様。<br>・src(画像のパス)<br>・sizes(画像のサイズ。例：&quot;128x128&quot;)<br>・type(例：&quot;image/png&quot;)<br>の3つを指定します。<br>デフォルトでは
      <code>Rails.configuration.serviceworker.icon_sizes</code> のサイズでループ処理で設定していますが、サイズの中身は
      <code>36 48 60 72 76 96 120 152 180 192 512</code> です。<br></td></tr><tr><td>theme_color<br></td><td>テーマカラー。アンドロイドのタスクスイッチャーではこの色で囲まれるらしい。<br></td></tr><tr><td>background_color<br></td><td>アプリの背景色。そもそもCSSで各々のサイトは背景色をつけていることも多いと思いますが、アプリの起動からコンテンツをロードするまでの間などにこの色が使われます。<br></td></tr><tr><td>display<br></td><td>アプリの表示の仕方を設定。<br>・fullscreen(デバイスのメニューバー含めて非表示)<br>・standalone(ブラウザのUIを非表示。ネイティブアプリと同じ感じ。)<br>・browser(通常のブラウザ表示)<br></td></tr><tr><td>orientation<br></td><td>ページの最初の向きを設定。<br>・landscape
      にするとデフォルトで横向きになるので、横表示のみで表示するゲームなどには便利。他にも以下の値を指定できます。<br>any・natural・landscape-primary・landscape-secondary・portrait・portrait-primary・portrait-secondary<br></td></tr></tbody></table><h4>確認</h4><p>先程と同様、検証ツール内の
      Application の中の <code>Manifest</code> というところを開くと、<br>Manifest の設定が反映されているか確認することができます。</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1552968456488-demo.png\"
      style=\"width: 900px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>rails sをしたまま Xcode
      の Simulator を使ってすることもできます。</p><p><br></p><h1>アイコン設定</h1><p><br>さて、アイコンはデフォルトだとハートアイコンになってると思います。後、IOSアイコンは個別に作成しなければならないので、手順メモを載せます</p><p><br></p><h2>iconフォルダ作成</h2><p>favicon.icoはブラウザで開くと上部でページタイトルの左に小さく表示されているアイコンのことです。</p><p>はじめに以下のiconフォルダ作成</p><pre
      data-lang=\"\" data-unlink=\"\">/app/assets/images/favicons(このフォルダの中にiosアイコンを入れる)</pre><p>＊faviconsでなくても好きな名前でいい</p><p><br></p><pre>/app/assets/images/serviceworker-rails(このフォルダの中にアンドロイドアイコンを入れる)</pre><p>＊serviceworker-railsでなくても好きな名前でいい</p><p><br></p><h2>iconリサイズ<br><iframe
      src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Frealfavicongenerator.net%2F\"
      title=\"Favicon Generator for all platforms: iOS, Android, PC/Mac...\" class=\"embed-card
      embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"max-width: 500px;
      color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Arial, Helvetica,
      &quot;ヒラギノ角ゴ Pro W3&quot;, &quot;Hiragino Kaku Gothic Pro&quot;, メイリオ, Meiryo,
      &quot;ＭＳ Ｐゴシック&quot;, &quot;MS PGothic&quot;, sans-serif; font-size: 15.04px;
      font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal;
      font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent:
      0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;
      -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style:
      initial; text-decoration-color: initial; display: block; width: 500px; height:
      155px; margin: 10px 0px;\"></iframe></h2><p><span style=\"font-size: 24px;\">&lt;Android用&gt;</span></p><p>/app/assets/images/serviceworker-rails配下に</p><ul><li>icon-36x36.png</li><li>icon-48x48.png</li><li>icon-60x60.png</li><li>icon-72x72.png</li><li>icon-76x76.png</li><li>icon-96x96.png</li><li>icon-120x120.png</li><li>icon-152x152.png</li><li>icon-180x180.png</li><li>icon-192x192.png</li><li>icon-512x512.png
      を作成</li></ul><p><br></p><p><span style=\"font-size: 24px;\">&lt;ios用&gt;</span></p><p>/app/assets/images/favicons配下に</p><ul><li>apple-touch-icon57.png</li><li>apple-touch-icon60.png</li><li>apple-touch-icon72.png</li><li>apple-touch-icon76.png</li><li>apple-touch-icon114.png</li><li>apple-touch-icon144.png</li><li>apple-touch-icon152.png</li><li>apple-touch-icon180.png
      を作成</li></ul><p><span style=\"font-size: 24px;\">&lt;favicon.ico&gt;</span></p><p>/app/assets/images配下に</p><p>favicon.ico
      を作成</p><p><br></p><p><span style=\"font-size: 24px;\">読み込み</span></p><pre>app/views/layouts/application.html.erb
      の&lt;head&gt;タグ内に以下を追記\r\n\r\n&lt;%= favicon_link_tag(&#39;favicon.ico&#39;)
      %&gt;\r\n&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;57x57&quot; href=&quot;/assets/favicons/apple-touch-icon57.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;60x60&quot; href=&quot;/assets/favicons/apple-touch-icon60.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;72x72&quot; href=&quot;/assets/favicons/apple-touch-icon72.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;76x76&quot; href=&quot;/assets/favicons/apple-touch-icon76.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;114x114&quot; href=&quot;/assets/favicons/apple-touch-icon114.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;120x120&quot; href=&quot;/assets/favicons/apple-touch-icon120.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;144x144&quot; href=&quot;/assets/favicons/apple-touch-icon144.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;152x152&quot; href=&quot;/assets/favicons/apple-touch-icon152.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;/assets/favicons/apple-touch-icon180.png&quot;&gt;\r\n\r\nこれでfaviconおよびiosのアイコン設定完了</pre><p><br></p><pre>app/assets/javascripts/manifest.json.erbのパスをデフォルトから変更\r\n&lt;%
      icon_sizes = Rails.configuration.serviceworker.icon_sizes %&gt;\r\n{\r\n&quot;name&quot;:
      &quot;My App Name&quot;,\r\n&quot;short_name&quot;: &quot;Short Name&quot;,\r\n&quot;start_url&quot;:
      &quot;/&quot;,\r\n&quot;icons&quot;: [\r\n&lt;% icon_sizes.map { |s| &quot;#{s}x#{s}&quot;
      }.each.with_index do |dim, i| %&gt;\r\n{\r\n&quot;src&quot;: &quot;&lt;%= <span
      style=\"color: rgb(44, 130, 201);\">asset_path</span> &quot;serviceworker-rails/icon-#{dim}.png&quot;
      %&gt;&quot;, <span style=\"color: rgb(124, 112, 107);\"># image_pathからasset_pathに変更</span>\r\n&quot;sizes&quot;:
      &quot;&lt;%= dim %&gt;&quot;,\r\n&quot;type&quot;: &quot;image/png&quot;\r\n}&lt;%=
      i == (icon_sizes.length - 1) ? &#39;&#39; : &#39;,&#39; %&gt;\r\n&lt;% end %&gt;\r\n],\r\n&quot;theme_color&quot;:
      &quot;#F83E26&quot;,\r\n&quot;background_color&quot;: &quot;#000000&quot;,\r\n&quot;display&quot;:
      &quot;standalone&quot;,\r\n&quot;orientation&quot;: &quot;portrait&quot;\r\n}\r\nこれでAndroidアイコン設定も完了</pre><p><br></p><p>次回起動アイコンやプッシュ通知も書きたい</p><p><br></p><h1>完！<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span></h1><p><br></p><p><a
      href=\"https://qiita.com/shiinoaya/items/e8cf25244419b317beae\">起動アイコン</a></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-03-19 03:38:59.061773'
    - '2019-03-19 05:24:22.156955'
  - - 124
    - PostgreSQL ローカルデータをHerokuに移行
    - '<p>まず、Heroku上のDBを空っぽにしなきゃいけないので、</p><pre>$ heroku pg:reset</pre><p>でDBを消す。<br>次にローカルのDBをpushする。引数を２つ取る。</p><pre>heroku
      pg:push ローカルのDB名 heorokuのDB名</pre><p>パスワードを聞かれるので、ローカルのDBのパスワードを入力する。</p><p><br></p><p><br></p><h1>例</h1><pre>$
      heroku pg:reset</pre><pre>$ heroku pg:push localdb_development postgresql-sbdfb-86542
      --app sushi</pre><h1>migrateと化しなくてOK楽チン<span class="fr-emoticon fr-deletable
      fr-emoticon-img" style="background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f601.svg);">&nbsp;</span></h1><p><br></p><p><br></p><h1>こちらも参照!!!</h1><h1><a
      href="https://dragonarrow.herokuapp.com/articles/116">HerokuからLocalに移行</a></h1>'
    - '2019-03-21 13:45:27.246746'
    - '2019-03-21 13:49:23.482545'
  - - 125
    - curl コマンド使い方
    - '<h1 style="text-align: center;">curlコマンドでURLにアクセスするとき</h1><h2>GETにアクセス(ビュー)</h2><pre>$
      curl get_url</pre><p><br></p><h2>POSTにアクセス(投稿)</h2><pre>$ curl -X POST -H &#39;<span
      style="color: rgb(226, 80, 65);">Content-Type:application/json</span>&#39; -d
      &#39;{ &quot;name&quot;: &quot;username&quot;, &quot;pwd&quot;: &quot;password&quot;
      }&#39; post_url</pre><p><br></p><h2>DELETEにアクセス(削除)</h2><pre>$ curl -X DELETE
      delete_url</pre><p><br></p><h2>PUTにアクセス(新規作成or更新)</h2><pre>$ curl -X PUT -H
      &quot;<span style="color: rgb(226, 80, 65);">Content-Type: application/json</span>&quot;
      -d &#39;{&quot;user&quot;: {&quot;name&quot;:&quot;update_name&quot;, &quot;age&quot;:
      &quot;12345&quot;}}&#39; put_url</pre><p><br></p><h2>PATCHにアクセス(部分更新)</h2><pre>$
      curl -X PATCH -H &quot;<span style="color: rgb(226, 80, 65);">Content-Type:
      application/json</span>&quot; -d &#39;{&quot;user&quot;: {&quot;name&quot;:&quot;update_name&quot;,
      &quot;age&quot;: &quot;12345&quot;}}&#39; patch_url</pre><p><br></p><p><br></p><p><br></p><p><br></p>'
    - '2019-03-22 01:42:42.176643'
    - '2019-03-22 02:05:32.335877'
  - - 126
    - Rails5.2でAPIを作る
    - "<h1 itemprop=\"headline\">Rails5.2 APIで認証付きのWebAPIを作ってみる</h1><section itemprop=\"articleBody\"><h1>はじめに</h1><p>Rails5.2</p><h1>使用ソフトウェアのバージョン情報</h1><p>Rails5.2</p><p><br></p><p>こちらの記事がかなり助かりました。</p><p><a
      href=\"https://qiita.com/ochiochi/items/966b884eb17045dfb929\">https://qiita.com/ochiochi/items/966b884eb17045dfb929</a></p><p><br></p><h2>APIの応答はrenderをいじれば良い</h2><pre>class
      LoginController &lt; ApplicationController\r\ndef login\r\n  login_user = User.find_by(user_id:params[:user_id],
      password:params[:password])\r\n  if login_user != nil\r\n    <span style=\"color:
      rgb(226, 80, 65);\">render json: {&quot;message&quot;: &quot;User details by
      user_id&quot;, &quot;user&quot;: {\r\n      <span style=\"color: rgb(226, 80,
      65);\">&quot;id&quot;: login_user.id, </span>&quot;user_id&quot;: login_user.user_id,
      &quot;nickname&quot;: login_user.nickname, &quot;comment&quot;: login_user.comment}\r\n 
        }</span>\r\n  else\r\n    <span style=\"color: rgb(226, 80, 65);\">render
      plain: &#39;no auth&#39;</span>\r\n  end\r\nend\r\nend</pre><pre>class UsersController
      &lt; ApplicationController\r\nbefore_action :set_user, only: [:show, :update,
      :destroy]\r\n\r\n# GET /users\r\ndef index\r\n@users = User.all\r\n\r\nrender
      json: @users\r\nend\r\n\r\n# GET /users/1\r\ndef show\r\nrender json: @user\r\nend\r\n\r\n#
      POST /users\r\ndef create\r\n@user = User.new(user_params)\r\n\r\nif @user.save\r\nrender
      json: {&quot;message&quot;: &quot;Account successfully created&quot;, &quot;user&quot;:
      {\r\n&quot;user_id&quot;: @user.user_id}\r\n}, status: :created, location: @user\r\nelse\r\nrender
      json: @user.errors, status: :unprocessable_entity\r\nend\r\nend\r\n\r\n# PATCH/PUT
      /users/1\r\ndef update\r\nif @user.update(user_params)\r\nrender json: @user\r\nelse\r\nrender
      json: @user.errors, status: :unprocessable_entity\r\nend\r\nend\r\n\r\n# DELETE
      /users/1\r\ndef destroy\r\n@user.destroy\r\nend\r\n\r\nprivate\r\n# Use callbacks
      to share common setup or constraints between actions.\r\ndef set_user\r\n@user
      = User.find(params[:id])\r\nend\r\n\r\n# Only allow a trusted parameter &quot;white
      list&quot; through.\r\n<span style=\"color: rgb(226, 80, 65);\">def user_params\r\nparams.require(:user).permit(:user_id,
      :password, :token, :comment, :nickname)\r\nend</span>\r\nend</pre><p><br></p><h2>ROUTEは好きに変更</h2><pre>Rails.application.routes.draw
      do\r\npost &#39;/login&#39; =&gt; &#39;login#login&#39;\r\npost &#39;/signup&#39;
      =&gt; &#39;users#create&#39;\r\ndelete &#39;/users/:id&#39; =&gt; &#39;users#destroy&#39;\r\npost
      &#39;/users/:id/closed&#39; =&gt; &#39;users#destroy&#39;\r\nresources :users\r\n#
      For details on the DSL available within this file, see <a href=\"http://guides.rubyonrails.org/routing.html\">http://guides.rubyonrails.org/routing.html</a>\r\nend</pre><p><br></p><h2>モデルのバリデーション</h2><pre>class
      User &lt; ApplicationRecord\r\nhas_secure_token\r\n\r\nvalidates :user_id, length:
      { in: 6..20 } # 「8文字以上20文字以下」\r\nvalidates :password, length: { in: 8..20 }
      # 「8文字以上20文字以下」\r\n\r\nend</pre><p><br></p><p><span style=\"font-size: 30px;\">that&#39;s
      all.<span class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background:
      url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f618.svg);\">&nbsp;</span></span></p><p><br></p><p><br></p><p><br></p><p><br></p></section>"
    - '2019-03-22 03:49:44.606947'
    - '2019-03-22 04:11:47.213616'
  - - 127
    - googleAnalyticsの勉強
    - <p>初級テスト1</p><p><a href="https://analytics.google.com/analytics/academy/course/6/unit/1/assessment/Assessment_1">https://analytics.google.com/analytics/academy/course/6/unit/1/assessment/Assessment_1</a></p><p>初級テスト２</p><p><a
      href="https://analytics.google.com/analytics/academy/course/6/unit/2/assessment/Assessment_2">https://analytics.google.com/analytics/academy/course/6/unit/2/assessment/Assessment_2</a></p>
    - '2019-03-22 09:55:35.066147'
    - '2019-03-22 09:56:51.607387'
  - - 128
    - google search console
    - <p><a href="https://support.google.com/webmasters/answer/9128669">https://support.google.com/webmasters/answer/9128669</a></p>
    - '2019-03-23 06:18:37.081379'
    - '2019-03-23 06:18:37.081379'
  - - 129
    - AWS IAM ユーザーを作成
    - '<h2 style="text-align: center;">AWSでIAM(Identity and Access Management) ユーザーを作成する例</h2><p><br></p><h2>目的:
      AWS のサービスとリソースに対するアクセスと許可をユーザーで管理できる</h2><p><br></p><h2><span style="font-size:
      24px;">手順1 <a href="https://console.aws.amazon.com/iam/" target="_blank"></a><a
      href="https://console.aws.amazon.com/iam/">https://console.aws.amazon.com/iam/</a>
      にルートユーザーでサインイン</span></h2><p><br></p><p><span style="font-size: 24px;">手順2 <a
      href="https://console.aws.amazon.com/iam/" target="_blank"></a><a href="https://console.aws.amazon.com/iam/"></a>コンソールのナビゲーションペインで、[<strong>Users</strong>]
      を選択後、[<strong>Add user</strong>]</span></p><p><br></p><p><span style="font-size:
      24px;">手順3 [<strong>User name</strong>] に、<strong><code>Administrator(例)</code></strong>
      と入力します。</span></p><p><br></p><p><span style="font-size: 24px;">手順4&nbsp;[<strong>AWS
      マネジメントコンソール によるアクセス</strong>] の横のチェックボックスをオンにし、[<strong>Custom password (カスタムパスワード)</strong>]
      を選択して、新しいユーザーのパスワードをテキストボックスに入力します。任意でオプションとして [<strong>Require password reset</strong>]
      (パスワードのリセットの強制) を選択し、ユーザーが次回サインインしたときに新しいパスワードを作成することを強制できます。(自由)</span></p><p><br></p><p><span
      style="font-size: 24px;">手順5 [<strong>Next: Permissions (次へ: アクセス許可)</strong>]
      を選択します。</span></p><p><br></p><p><span style="font-size: 24px;">手順6 [<strong>アクセス許可の設定</strong>]
      ページで、[<strong>ユーザーをグループに追加</strong>] を選択します。</span></p><p><br></p><p><span style="font-size:
      24px;">手順7 [<strong>Create group</strong>] を選択します。</span></p><p><br></p><p><span
      style="font-size: 24px;">手順8&nbsp;[<strong>グループの作成</strong>] ダイアログボックスで、[<strong>グループ名</strong>]
      に「<strong><code>Administrators(例)</code></strong>」と入力します。</span></p><p><br></p><p><span
      style="font-size: 24px;">手順9 [<strong>ポリシーのフィルタ</strong>] で、[<strong>AWS 管理のジョブ機能</strong>]
      チェックボックスをオンにします。</span></p><p><br></p><p><span style="font-size: 24px;">手順10&nbsp;ポリシーリストで、[<strong>AdministratorAccess</strong>]
      のチェックボックスをオンにします。次に、[<strong>Create group</strong>] を選択します。</span></p><p><br></p><p><span
      style="font-size: 24px;">手順11&nbsp;グループのリストに戻り、新しいグループのチェックボックスをオンにします。必要に応じて
      [<strong>Refresh</strong>] を選択し、リスト内のグループを表示します。</span></p><p><br></p><p><span
      style="font-size: 24px;">手順12 [<strong>Next: Tags</strong>] を選択し、タグをキーと値のペアとしてアタッチして、メタデータをユーザーに追加します。</span></p><p><br></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;">手順13&nbsp;[<strong>Next:
      Review</strong>] を選択して、新しいユーザーに追加するグループメンバーシップのリストを表示します。続行する準備ができたら、[<strong>Create
      user</strong>] を選択します。</span></span></p><p><br></p><p><span style="font-size:
      24px;"><strong><a href="https://094384258734.signin.aws.amazon.com/console">https://<em><code>your_aws_account_id</code></em>.signin.aws.amazon.com/console</a>にアクセスし、
      IAM ユーザー名（E メールアドレスではない）とパスワードでログインできる</strong><br></span></p><p><br><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554286225120-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-03+19.09.59.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554286364812-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-03+19.04.26.png"
      style="width: 900px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><br></p><p><a
      href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#sign-up-for-aws">ドキュメント</a></p>'
    - '2019-04-03 09:31:30.25511'
    - '2019-04-05 06:42:01.175991'
  - - 130
    - AWSのVPCの作成
    - '<h2 style="text-align: center;">Virtual Private Cloud (VPC) の作成</h2><p><br></p><p><span
      style="font-size: 24px;">目的: 新しいEC2インスタンスタイプでは、VPC でインスタンスを起動が必要だから</span></p><p><br></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;">概要:&nbsp;</span>VPCの役割は
      ファイヤーウォール(不正侵入ブロック)+L3スイッチ(ネットワークへのデータ転送)+VPNルータ(LANとLANを接続してひとつのネットワークを形成)</span></p><p><br></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;">手順: 1 <a href="https://console.aws.amazon.com/vpc/"
      target="_blank"></a><a href="https://console.aws.amazon.com/vpc/">https://console.aws.amazon.com/vpc/</a>にある
      Amazon VPC コンソールを開く</span></span></p><p><br></p><p><span style="font-size: 24px;"><span
      style="font-size: 24px;">手順: 2 ナビゲーションバーで、VPC のリージョンを選択する。(例: 東京)</span></span></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554364529469-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-04+16.53.59.png"
      style="width: 1012px;" class="fr-fic fr-dib"></span></span></p><p><br></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;">手順: 3&nbsp;VPC ダッシュボードで、[<strong>Launch
      VPC Wizard (VPC ウィザードの起動)</strong>] を選択する</span></span></p><p><br></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;">手順: 4&nbsp;[<strong>Step
      1: Select a VPC Configuration</strong>] ページで、[<strong>VPC with a Single Public
      Subnet</strong>] が選択されていることを確認したら、[<strong>Select</strong>] を選択する。</span></span></p><p><br></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;"><span style="font-size:
      24px;"><span style="font-size: 24px;">手順: 5&nbsp;</span></span>[<strong>Step
      2: VPC with a Single Public Subnet</strong>] ページで、[<strong>VPC name</strong>]
      フィールドに、わかりやすい VPC 名を入力する。他のデフォルトの設定はそのままにしておき、[<strong>Create VPC</strong>]
      を選択し、確認ページで、[OK] を選択する。</span></span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><a
      href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#sign-up-for-aws">ドキュメント</a></p>'
    - '2019-04-04 07:30:28.003616'
    - '2019-04-04 08:57:26.485031'
  - - 131
    - AWS セキュリティグループの作成
    - '<h2 style="text-align: center;"><span style="font-size: 30px;">セキュリティグループの作成</span></h2><p><br></p><h2>目的:
      関連付けられたインスタンスのファイアウォールとして機能させる</h2><p><br></p><h2><span style="font-size: 24px;">手順1
      <a href="https://console.aws.amazon.com/iam/"></a><a href="https://console.aws.amazon.com/ec2/"
      target="_blank"></a><a href="https://console.aws.amazon.com/ec2/">https://console.aws.amazon.com/ec2/</a>)
      にある Amazon EC2 コンソールを開く。(Amazon VPC コンソールからでもセキュリティグループを作成できるが今回は違うやり方)</span></h2><p><br></p><p><span
      style="font-size: 24px;">手順2 ナビゲーションバーで、セキュリティグループのリージョンを選択します。(例　東京)</span></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554366782013-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-04+16.53.59.png"
      style="width: 1028px;" class="fr-fic fr-dib"></p><p><br></p><p><span style="font-size:
      24px;">手順3&nbsp;ナビゲーションペインで、[<strong>Security Groups</strong>] を選択する。</span></p><p><br></p><p><span
      style="font-size: 24px;">手順4&nbsp;[<strong>Create Security Group</strong>] を選択します</span></p><p><br></p><p><span
      style="font-size: 24px;">手順5 新しいセキュリティグループの名前と説明を入力する。覚えやすい名前 (IAM ユーザー名など)
      を使用し、その後に _SG_ を続け、さらにリージョン名を続ける。たとえば、administrator_SG_apnortheast1 など。</span></p><table
      class="fr-alternate-rows" style="margin-right: calc(0%); width: 100%;"><thead><tr><th
      style="width: 51.0569%;">地域コード</th><th style="width: 48.8618%;">名前</th></tr></thead><tbody><tr><td
      style="width: 51.0569%;">us-east-1</td><td style="width: 48.8618%;">米国東部（バージニア北部）</td></tr><tr><td
      style="width: 51.0569%;">us-east-2</td><td style="width: 48.8618%;">米国東部 (オハイオ)</td></tr><tr><td
      style="width: 51.0569%;">us-west-1</td><td style="width: 48.8618%;">米国西部 (北カリフォルニア)</td></tr><tr><td
      style="width: 51.0569%;">us-west-2</td><td style="width: 48.8618%;">米国西部 (オレゴン)</td></tr><tr><td
      style="width: 51.0569%;">ca-central-1</td><td style="width: 48.8618%;">カナダ (中部)</td></tr><tr><td
      style="width: 51.0569%;">eu-central-1</td><td style="width: 48.8618%;">欧州 (フランクフルト)</td></tr><tr><td
      style="width: 51.0569%;">eu-west-1</td><td style="width: 48.8618%;">欧州 (アイルランド)</td></tr><tr><td
      style="width: 51.0569%;">eu-west-2</td><td style="width: 48.8618%;">欧州 (ロンドン)</td></tr><tr><td
      style="width: 51.0569%;">eu-west-3</td><td style="width: 48.8618%;">EU (パリ)</td></tr><tr><td
      style="width: 51.0569%;">ap-northeast-1</td><td style="width: 48.8618%;">アジアパシフィック
      (東京)</td></tr><tr><td style="width: 51.0569%;">ap-northeast-2</td><td style="width:
      48.8618%;">アジアパシフィック (ソウル)</td></tr><tr><td style="width: 51.0569%;">ap-northeast-3</td><td
      style="width: 48.8618%;">アジアパシフィック (大阪: ローカル)</td></tr><tr><td style="width:
      51.0569%;">ap-southeast-1</td><td style="width: 48.8618%;">アジアパシフィック (シンガポール)</td></tr><tr><td
      style="width: 51.0569%;">ap-southeast-2</td><td style="width: 48.8618%;">アジアパシフィック
      (シドニー)</td></tr><tr><td style="width: 51.0569%;">ap-south-1</td><td style="width:
      48.8618%;">アジアパシフィック (ムンバイ)</td></tr><tr><td style="width: 51.0569%;">sa-east-1</td><td
      style="width: 48.8618%;">南米 (サンパウロ)</td></tr></tbody></table><p><br></p><p><span
      style="font-size: 24px;">手順6 [<strong>VPC</strong>] リストで、使用している VPC を選択します。</span></p><p><br></p><p><span
      style="font-size: 24px;">手順7&nbsp;[<strong>Inbound</strong>] タブで、次のルールを作成し (新しいルールごとに
      [<strong>Add Rule</strong>] を選択)、最後に [<strong>Create</strong>] を選択します。</span></p><ul
      type="disc"><li><p>[<strong>Type</strong>] リストから [<strong>HTTP</strong>] を選択し、[<strong>Source</strong>]
      が [<strong>Anywhere</strong>] (<code>0.0.0.0/0</code>) に設定されていることを確認します。</p></li><li><p>[<strong>Type</strong>]
      リストから [<strong>HTTPS</strong>] を選択し、[<strong>Source</strong>] が [<strong>Anywhere</strong>]
      (<code>0.0.0.0/0</code>) に設定されていることを確認します。</p></li><li><p>[<strong>Type</strong>]
      リストから [<strong>SSH</strong>] を選択します。[<strong>Source</strong>] ボックスで [<strong>My
      IP</strong>] を選択すると、ローカルコンピューターのパブリック IPv4 アドレスが自動的にフィールドに入力されます。別の方法として、[Custom]
      を選択してコンピュータまたはネットワークのパブリック IPv4 アドレスを CIDR 表記で指定することもできます。CIDR 表記で個々の IP アドレスを指定するには、ルーティングサフィックス
      <code>/32</code> を追加します (<code>203.0.113.25/32</code>など)。会社が特定の範囲からアドレスを割り当てている場合、範囲全体
      (<code>203.0.113.0/24</code>など) を指定します。</p></li></ul><p>＊ 表記IP アドレス以外のSSH アクセスがブロックされる</p><p><br></p><p><br></p><p><a
      href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#sign-up-for-aws">ドキュメント</a></p>'
    - '2019-04-04 08:26:02.123608'
    - '2019-04-04 08:59:06.301811'
  - - 132
    - AWS EC2 のキーペアを作成する
    - "<h2 style=\"text-align: center;\"><span style=\"font-size: 30px;\">キーペアを作成する</span></h2><p><br></p><p><span
      style=\"font-size: 24px;\">役割: Amazon EC2 は<code>パブリックキー暗号</code>を使用して、<span
      style=\"background-color: rgb(247, 218, 100);\">ログイン情報の暗号化と復号</span>を行います。パブリックキー暗号はパブリックキーを使用してデータを暗号化し
      (パスワードなど)、受信者はプライベートキーを使用してデータを復号します。パブリックキーとプライベートキーは、<em>キーペア</em>と呼ばれます。ログイン情報の安全性を保護しています。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順1: AWS ダッシュボードから、[<strong>EC2</strong>] を選択して Amazon
      EC2 コンソールを開きます。</span></p><p><span style=\"font-size: 24px;\"><br></span></p><p><span
      style=\"font-size: 24px;\">手順2: ナビゲーションバーで、キーペアを生成するリージョンを選択します。たとえば、東京リージョン
      でインスタンスを起動する予定がある場合、東京 リージョン のインスタンス用にキーペアを作成する必要があります。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\"><span style=\"font-size: 24px;\">手順3:&nbsp;</span>ナビゲーションペインの
      [<strong>NETWORK &amp; SECURITY</strong>] で、[<strong>Key Pairs</strong>] を選択します。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順4: [<strong>Create Key Pair</strong>] を選択します。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順5:&nbsp;</span><strong><span style=\"font-size:
      24px;\">Create Key Pair</span></strong><span style=\"font-size: 24px;\">] ダイアログボックスの
      [<strong>Key pair name</strong>] フィールドに新しいキーペアの名前を入力し、[<strong>Create</strong>]
      を選択します。覚えやすい名前 (IAM ユーザー名など) を使用し、その後に <code>-key-pair</code> を続け、さらにリージョン名を続けます。たとえば、iamuser-key-pair-apnortheast1
      とします。</span></p><p><br></p><p><span style=\"font-size: 24px;\">手順6: ブラウザによって秘密キーファイルが自動的にダウンロードされます。ベースファイル名はキーペアの名前として指定した名前となり、ファイル名の拡張子は
      <code>.pem</code> となります。プライベートキーファイルを安全な場所に保存します。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順7: Mac または Linux コンピュータの SSH クライアントを使用して Linux
      インスタンスに接続する場合は、次のコマンドを使用して</span><span style=\"font-size: 24px; color: rgb(243,
      121, 52);\">プライベートキーファイルの権限を設定</span><span style=\"font-size: 24px;\">すると、お客様以外のユーザーはそれを読み取ることができないようになります。</span></p><pre><span
      style=\"font-size: 24px;\"><strong><code>$ chmod 400 <em><code>your_user_name</code></em>-key-pair-<em><code>region_name</code></em>.pem</code></strong></span></pre><p><span
      style=\"font-size: 24px;\"><code>所有者 rのみ <span style=\"font-size: 24px;\"><code>所有グループ
      rwx全て権限なし その他ユーザー<span style=\"font-size: 24px;\"><code><span style=\"font-size:
      24px;\"><code>&nbsp;rwx全て権限なし</code></span></code></span></code></span></code></span></p><p><br></p><pre><span
      style=\"font-size: 24px;\">$ mv Downloads/<span style=\"font-size: 24px;\"><strong><code><em><code>your_user_name</code></em>-key-pair-<em><code>region_name</code></em>.pem</code></strong></span>
      .ssh/ <span style=\"color: rgb(163, 143, 132);\">(#作成した公開鍵をsshフォルダに移動)</span></span>\r\n<span
      style=\"font-size: 24px;\">$ cd .ssh/</span>\r\n<span style=\"font-size: 24px;
      color: rgb(163, 143, 132);\">(#ディレクトリをsshに移動)</span>\r\n<span style=\"font-size:
      24px;\"><strong><code>$ chmod 400 <em><code>your_user_name</code></em>-key-pair-<em><code>region_name</code></em>.pem</code></strong></span></pre><p><span
      style=\"font-size: 24px;\"><code>所有者 rのみ <span style=\"font-size: 24px;\"><code>所有グループ
      rwx全て権限なし その他ユーザー<span style=\"font-size: 24px;\"><code><span style=\"font-size:
      24px;\"><code>&nbsp;rwx全て権限なし</code></span></code></span></code></span></code></span></p><p><br></p><p><span
      style=\"font-size: 24px;\">＊ chmodについて</span></p><pre>$ chmod モード 対象ファイル名</pre><table
      style=\"margin-right: calc(0%); width: 100%;\"><thead><tr><th style=\"background-color:
      rgb(247, 218, 100);\">モード(数字)</th><th style=\"background-color: rgb(247, 218,
      100);\">モード(アルファベット)</th><th style=\"background-color: rgb(247, 218, 100);\">権限</th></tr></thead><tbody><tr><td>4</td><td>r</td><td>読み取り</td></tr><tr><td>2</td><td>w</td><td>書き込み</td></tr><tr><td>1</td><td>x</td><td>実行</td></tr></tbody></table><p><br></p><p><span
      style=\"font-size: 24px;\"><code>chmodは「所有者」「所有グループ」「その他」の順で入力することでパーミッションを変更することができます</code></span></p><p>「764」は<br>「所有者」に対して「読み取り」「書き込み」「実行」を、<br>「所有グループ」に対して「読み取り」「書き込み」を、<br>「その他」に「読み取り」を付与しています。</p><p><br></p><p><a
      href=\"https://qiita.com/shisama/items/5f4c4fa768642aad9e06\"><span style=\"font-size:
      24px;\">chmod 参考記事</span></a></p><p><span style=\"font-size: 24px;\"><a href=\"https://qiita.com/naoki_mochizuki/items/814e0979217b1a25aa3e\">デプロイの参考記事</a></span></p><p><br></p><p><br></p><p><a
      href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html\">ドキュメント</a></p><p><br></p><p><br></p>"
    - '2019-04-05 06:13:55.572095'
    - '2019-04-05 09:44:45.849737'
  - - 133
    - AWS コマンドラインインターフェイス
    - "<h1 style=\"text-align: center;\">AWS コマンドラインインターフェイス</h1><p><br></p><p><span
      style=\"font-size: 24px;\">役割: AWS コマンドラインインターフェイス (CLI) は、AWS サービスを管理するための統合ツールです。ダウンロードおよび設定用の単一のツールのみを使用して、コマンドラインから複数の
      AWS サービスを制御し、スクリプトを使用してこれらを自動化することができます。</span></p><p><br></p><p><strong>Windows<br></strong><a
      href=\"https://s3.amazonaws.com/aws-cli/AWSCLI64.msi\">64 ビット</a>または <a href=\"https://s3.amazonaws.com/aws-cli/AWSCLI32.msi\">32
      ビット</a> の Windows インストーラをダウンロードし、実行します。</p><p><strong>Mac および Linux<br></strong><span
      style=\"color: rgb(184, 49, 47);\"><a href=\"http://www.python.org/download/\"
      target=\"_blank\">Python</a> 2.6.5</span> 以降が必要です。<br><span style=\"color: rgb(184,
      49, 47);\"><a href=\"http://www.pip-installer.org/en/latest/\" target=\"_blank\">pip</a></span>
      を使ってインストールします。</p><pre>$ pip install awscli </pre><p><strong>Amazon Linux<br></strong>AWS
      CLI は <a href=\"https://aws.amazon.com/amazon-linux-ami/\">Amazon Linux AMI</a>
      にプレインストールされています。</p><p><strong>リリースノート<br></strong>最新バージョンの詳細については、<a href=\"https://aws.amazon.com/releasenotes/CLI\">リリースノート</a>を確認してください。</p><p><br></p><p><br></p><p><span
      style=\"font-size: 24px;\">Mac</span></p><p><span style=\"font-size: 24px;\">手順1:
      Python 2.6.5 以降が必要</span></p><pre>$sudo brew install python</pre><p><br></p><p><span
      style=\"font-size: 24px;\">手順2: Python のパッケージのインストーラーを使用する</span></p><pre>$sudo
      easy_install pip</pre><p><br></p><p><span style=\"font-size: 24px;\">手順3: awscli
      をインストール</span></p><pre>pip install awscli</pre><p><br></p><p><span style=\"font-size:
      24px; background-color: rgb(209, 213, 216);\">matplotlib 1.3.1 requires nose,
      which is not installed.</span></p><p><span style=\"font-size: 24px; background-color:
      rgb(209, 213, 216);\">matplotlib 1.3.1 requires tornado, which is not installed.</span></p><p><span
      style=\"font-size: 24px;\">みたいなエラーが出たら</span></p><pre>$ sudo easy_install nose\r\n$
      sudo easy_install tornado\r\n(エラーがまだ消えないなら)\r\n$ pip install tornado</pre><p><br></p><p><span
      style=\"font-size: 24px; background-color: rgb(209, 213, 216);\">Cannot uninstall
      &#39;six&#39;. It is a distutils installed project and thus we cannot accurately
      determine which files belong to it which would lead to only a partial uninstall.</span></p><p><span
      style=\"font-size: 24px;\">みたいなエラーはsixがすでに入っているのが原因みたいなので以下で解決</span></p><pre>$
      sudo pip install awscli --upgrade --ignore-installed six</pre><p><br></p><p><br></p><p><br></p><p><a
      href=\"https://aws.amazon.com/jp/cli/\">document</a></p>"
    - '2019-04-05 06:59:35.082106'
    - '2019-04-05 09:48:24.397612'
  - - 134
    - AWS EC2インスタンスの作成
    - '<h1 style="text-align: center;">EC2インスタンスの作成</h1><p><span style="font-size:
      24px;"><br></span></p><p><span style="font-size: 24px;">前提: VPC, サブネット, インターネットゲートウェイ,
      ルートテーブル, セキュリティーグループ, EC2のキーペアが準備できている</span></p><p><br></p><p><span style="font-size:
      24px;">EC2とは: <a href="http://e-words.jp/w/Amazon.com.html"></a>Amazon社が運営している、仮想化技術を応用したレンタルサーバサービス。<span
      style="font-size: 24px;">Amazon社</span>の運営するサーバ上のソフトウェアによって構築された仮想マシンを貸り、利用者は仮想マシン上でLinuxやWindows
      ServerなどのOSを起動し、独自のオンラインサービスを構築することができる。</span></p><p><span style="font-size:
      24px;">一言で言うと、<span style="font-size: 24px; color: rgb(226, 80, 65);">Amazon社のサーバー</span><span
      style="color: rgb(226, 80, 65);">上に擬似的に自分のパソコンを作成して起動する</span>ということ。</span></p><p><br></p><p><span
      style="font-size: 24px;">メリット: 消費した処理能力に応じて課金される仕組みで、突発的にサーバの増強が必要になった場合でもすぐに能力を拡張することができ、必要なくなったらすぐにサーバを削減してコストを抑えることができる。</span></p><p><br></p><p><span
      style="font-size: 24px;">はじめに: EC2&rarr;インスタンス&rarr;インスタンスの起動　を選択します。</span></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554640875017-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.22.23.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><br></p><p><span style="font-size:
      24px;">手順1: AMI(仮想マシンの種類)を選択する。今回は、無料枠の範囲内で、一番上のAmazon Linuxを利用する。</span></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554641120552-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.30.02.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><br></p><p><span style="font-size:
      24px;">手順2: EC2インスタンスのタイプ選択。メモリやCPUなどを決めていきます。</span></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554641236704-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.31.23.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><span style="font-size: 24px;">手順3:
      インスタンス設定 (自動割り当てパブリックIPは最後に固定します)</span></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554641574983-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.52.45.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><br></p><p><br></p><p><span
      style="font-size: 24px;">手順4: ストレージの追加</span></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554641825420-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.52.56.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><span style="font-size: 24px;">手順5:
      タグの追加 インスタンスを認識しやすくする為の設定なので任意(なくても良い)。</span></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554641956243-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.53.04.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><br></p><p><span style="font-size:
      24px;">手順6: セキュリティグループの設定</span></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554642135045-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.53.15.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><span style="font-size: 24px;">手順6:
      確認して作成する。</span></p><p><br></p><p><span style="font-size: 24px;">ここまでしたら、こんな感じ。</span></p><p><span
      style="font-size: 24px;"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554642322747-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+15.00.35.png"
      style="width: 900px;" class="fr-fic fr-dib"></span></p><p><br></p><p><span style="font-size:
      24px;">最後に: Elastic IPの作成、紐付け (サーバーのグローバルIPは再起動させるたびに変わってしまう ＊手順3のパブリックIP自動割り当ての通り)</span></p><p><span
      style="font-size: 24px;">IPが変わってしまうということは、IP指定の設定ファイル等を、その都度書き換えならなくなるのでIPを固定しよう。</span></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554643299905-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+15.02.43.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><br></p><p><span style="font-size:
      24px;">以上でEC2インスタンスの作成は完了<span class="fr-emoticon fr-deletable fr-emoticon-img"
      style="background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f604.svg);">&nbsp;</span><span
      class="fr-emoticon fr-deletable fr-emoticon-img" style="background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f600.svg);">&nbsp;</span><span
      class="fr-emoticon fr-deletable fr-emoticon-img" style="background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f601.svg);">&nbsp;</span>
      !</span></p><p><br></p><p><a href="https://qiita.com/naoki_mochizuki/items/22cfbf4bf7ec95f6ac1c"><span
      style="font-size: 24px;">お宝参考記事</span></a></p><p><br></p><p><br></p>'
    - '2019-04-07 12:11:32.531703'
    - '2019-04-07 13:25:28.680954'
  - - 135
    - AWS EC2へのSSHログイン
    - "<p style=\"text-align: center;\"><span style=\"font-size: 30px;\">EC2へのSSHログイン</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">前提:&nbsp;</span></p><p><span style=\"font-size: 24px;\">awscliが導入済み
      <a href=\"https://dragonarrow.herokuapp.com/articles/133\">導入してない場合はこちらを参照</a></span></p><p><span
      style=\"font-size: 24px;\">EC2のキーペアを作成済み&nbsp;</span><a href=\"https://dragonarrow.herokuapp.com/articles/132\"><span
      style=\"font-size: 24px;\">作成してsshフォルダ移動、権限付与までしてない人はこちらを参照</span></a></p><p><br></p><h3><br>インスタンスへのログイン設定</h3><p><span
      style=\"font-size: 18px;\">EC2インスタンスにログインできるユーザーとして、AWSでは、デフォルトでec2-userという名のユーザーが用意されている。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順1: ec2-userでログイン</span></p><pre><span style=\"font-size:
      18px;\">$ mv Downloads/administrator-key-pair-ap-northeast-1.pem .ssh/ <span
      style=\"color: rgb(163, 143, 132);\">(キーペアををすでに .ssh まで移動している人は飛ばして良い administrator-key-pair-ap-northeast-1.pemは自分のキーペア名)</span></span></pre><pre><span
      style=\"font-size: 18px;\">$ cd .ssh/ (ディレクトリをsshに移動)\r\n[.ssh] $ chmod 400
      administrator-key-pair-ap-northeast-1.pem <span style=\"color: rgb(163, 143,
      132);\">(所有者のみread権限 すでにしている人は飛ばす)</span>\r\n[.ssh] $ ssh -i administrator-key-pair-ap-northeast-1.pem
      ec2-user@54.250.70.47 <span style=\"color: rgb(163, 143, 132);\">(公開鍵を利用してec2-userとしてログイン
      54.250.70.47は自分のEC2<code>パブリックIPか<code>パブリックDNS名を指定</code></code>)</span></span></pre><p><code><span
      style=\"font-size: 18px;\">$&nbsp;</span></code><span style=\"font-size: 18px;\"><code>ssh</code></span><code><span
      style=\"font-size: 18px;\">-i &lt;key-pair&gt;.pem &lt;ユーザ名&gt;@&lt;パブリックIP
      or パブリックDNS名&gt;</span></code></p><pre><span style=\"color: rgb(163, 143, 132);
      font-size: 18px;\">The authenticity of host &#39;52.68.~~~~~~ (52.68.~~~~~~)&#39;
      can&#39;t be established.\r\nRSA key fingerprint is eb:7a:bd:e6:aa:da:~~~~~~~~~~~~~~~~~~~~~~~~.\r\nAre
      you sure you want to continue connecting (yes/no)?</span><span style=\"font-size:
      18px;\">\r\n[.ssh] $ yes</span></pre><p><br></p><p><span style=\"font-size:
      24px;\">手順2: ユーザーを作成し、作成したユーザーにマスター権限を与える</span></p><pre><span style=\"font-size:
      18px;\">[ec2-user|~]$ sudo adduser tatsuya </span><span style=\"color: rgb(163,
      143, 132); font-size: 18px;\">(新規ユーザー名の登録 adduserでなくuseraddでも良い)</span>\r\n<span
      style=\"color: rgb(226, 80, 65); font-size: 18px;\">間違って作った時は</span><span style=\"color:
      rgb(226, 80, 65);\">\r\n</span><span style=\"color: rgb(226, 80, 65); font-size:
      18px;\"><span style=\"font-size: 18px;\">[ec2-user|~]$ sudo </span>userdel -r <span
      style=\"font-size: 18px;\">tatsuya</span></span>\r\n<span style=\"font-size:
      18px;\">[ec2-user|~]$ sudo passwd <span style=\"font-size: 18px;\">tatsuya</span>\r\n<span
      style=\"color: rgb(163, 143, 132);\">(<span style=\"font-size: 18px;\">ユーザーの</span>パスワード設定と確認がされる)</span>\r\n[ec2-user|~]$
      sudo visudo</span>\r\n<span style=\"font-size: 18px; color: rgb(163, 143, 132);\">(sudoコマンドの設定ファイルをvimで編集する)</span></pre><pre><span
      style=\"font-size: 18px;\">...\r\nroot    ALL=(ALL)       ALL\r\n<span style=\"color:
      rgb(163, 143, 132);\">この真下に</span>\r\ntatsuya   ALL=(ALL)       ALL\r\n<span
      style=\"color: rgb(163, 143, 132);\">を書き加える</span>\r\n...</span></pre><p><code><span
      style=\"font-size: 18px;\">vim の使い方は&nbsp;</span></code></p><p><code><span style=\"font-size:
      18px;\">i:入力モード&nbsp;</span></code></p><p><code><span style=\"font-size: 18px;\">esc:閲覧モード&nbsp;</span></code></p><p><code><span
      style=\"font-size: 18px;\"><code><span style=\"font-size: 18px;\">閲覧モードでZZ:保存</span></code></span></code></p><p><code><span
      style=\"font-size: 18px;\"><code><span style=\"font-size: 18px;\">閲覧モードで<span
      style=\"color: rgb(44, 130, 201);\">:q!の後にEnter押下</span>:変更せずに終了</span></code></span></code></p><p><code><span
      style=\"font-size: 18px;\"><code><span style=\"font-size: 18px;\">閲覧モードで<span
      style=\"color: rgb(44, 130, 201);\">:wq!の後にEnter押下</span>:書き込んで終了(保存)</span></code></span></code></p><p><br></p><p><span
      style=\"font-size: 18px;\">編集が完了したら、</span></p><pre><span style=\"font-size:
      18px;\">[ec2-user|~]$ sudo su - tatsuya <span style=\"color: rgb(163, 143, 132);\">(ユーザーの切り替え)</span></span>\r\n<span
      style=\"font-size: 18px; color: rgb(163, 143, 132);\">[tatsuya@ip-10-0-0-149
      ~]$ に変われば成功</span></pre><p><br></p><h3>SSH通信によるインスタンスへのログイン設定を作る(<span style=\"font-size:
      24px;\">ローカル編&amp;サーバー編</span>)</h3><p><br></p><p><span style=\"font-size: 24px;\">ローカル編</span></p><pre><span
      style=\"font-size: 18px;\">$ cd .ssh</span>\r\n<span style=\"font-size: 18px;\">$
      ssh-keygen -t rsa</span>\r\n<span style=\"font-size: 18px;\">-----------------------------\r\nEnter
      file in which to save the key ():<span style=\"color: rgb(44, 130, 201);\">ec2_key_rsa(作る鍵の名前)</span>
      \r\n(#ここでファイルの名前を記述して、エンター)\r\nEnter passphrase (empty for no passphrase): \r\n(#何もせずそのままエンター)\r\nEnter
      same passphrase again: \r\n(#何もせずそのままエンター)\r\n-----------------------------</span>\r\n<span
      style=\"font-size: 18px;\">[.ssh]$ ls</span>\r\n<span style=\"font-size: 18px;\">#「<span
      style=\"font-size: 18px;\"><span style=\"color: rgb(44, 130, 201);\">ec2_key_rsa</span></span>」(秘密鍵)と「<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"color:
      rgb(44, 130, 201);\">ec2_key_rsa</span></span></span>.pub」(公開鍵)が生成されたことを確認\r\n[.ssh]$
      vi config\r\n(#VIMを起動し、設定ファイルを編集する)</span>\r\n<span style=\"font-size: 18px;\">-----------------------------\r\nHost
      dragonarrow (この部分がsshコマンドの一部になる)\r\n  Hostname <span style=\"font-size: 18px;\">54.250.70.47
      (</span>前出の固定IP</span> <span style=\"font-size: 18px;\"><code><span style=\"font-size:
      18px;\">or パブリックDNS名</span></code> #自分の設定に合わせて)\r\n  Port 22\r\n  User tatsuya (#先ほどのユーザー名)\r\n 
      IdentityFile ~/.ssh/<span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"color: rgb(44, 130, 201);\">ec2_key_rsa</span></span></span>\r\n-----------------------------</span>\r\n<span
      style=\"font-size: 18px;\">[.ssh]$ cat <span style=\"font-size: 18px;\"><span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"color:
      rgb(44, 130, 201);\">ec2_key_rsa</span></span></span></span>.pub</span>\r\n<span
      style=\"font-size: 18px;\">(#鍵の中身をターミナル上に出力&rarr;ssh-rsa~~~~最後までをコピーしておく)</span></pre><p><br></p><p><span
      style=\"font-size: 30px; color: rgb(184, 49, 47);\">重要</span></p><p><span style=\"font-size:
      18px;\">これでローカル設定は終了だが、補足！！</span></p><p><span style=\"font-size: 18px;\">githubのSSH接続設定経験がある人
      .ssh/配下に</span></p><pre><span style=\"font-size: 18px; color: rgb(44, 130, 201);\">config</span>\r\n<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"font-size: 18px;\"><span style=\"color: rgb(44, 130, 201);\">ec2_key_rsa</span></span></span></span></span></span></span>\r\n<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"font-size: 18px;\"><span style=\"color: rgb(44, 130, 201);\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"color:
      rgb(44, 130, 201);\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"color: rgb(44, 130, 201);\">ec2_key_rsa.pub</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>\r\n<span
      style=\"font-size: 18px;\">id_rsa\r\nid_rsa.pub\r\nknown_hosts</span></pre><p><span
      style=\"font-size: 18px;\">があると思うが、筆者はこの階層に</span></p><pre><span style=\"font-size:
      18px;\">$ mkdir AWS</span>\r\n<span style=\"font-size: 18px; color: rgb(163,
      143, 132);\">でAWSフォルダを作って</span>\r\n<span style=\"font-size: 18px;\">$ cd AWS</span>\r\n<span
      style=\"font-size: 18px;\">$ <span style=\"font-size: 18px;\">ssh-keygen -t
      rsa</span></span>\r\n<span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"color: rgb(163, 143, 132);\">をしてAWS配下に</span><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"color: rgb(44, 130, 201);\">ec2_key_rsa, <span style=\"font-size: 18px;\"><span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"color: rgb(44, 130, 201);\">ec2_key_rsa.pubを作った</span></span></span></span></span></span></span></span></span></span></span></pre><p>&nbsp;</p><p><span
      style=\"font-size: 18px;\">つまり、.ssh配下には AWSやgithubなどサーバーごとにフォルダを作って鍵を入れ込み.ssh配下のconfigで読み込むことで見易さと管理しやすさを維持した。</span></p><pre><span
      style=\"font-size: 18px;\">[.ssh配下] \r\n</span><span style=\"font-size: 24px;
      color: rgb(226, 80, 65);\">config</span><span style=\"font-size: 18px;\">\r\n</span><span
      style=\"font-size: 24px; color: rgb(226, 80, 65);\">github</span><span style=\"font-size:
      18px;\">(配下に<span style=\"font-size: 18px;\">github秘密鍵id_rsa 公開鍵id_rsa.pub</span>)\r\n</span><span
      style=\"font-size: 24px; color: rgb(226, 80, 65);\">AWS</span><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\">(配下にEC2<span style=\"font-size: 18px;\">秘密鍵<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"color: rgb(44, 130, 201);\">ec2_key_rsa</span></span></span></span></span></span>
      公開鍵<span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"color: rgb(44, 130, 201);\">ec2_key_rsa.pub</span></span></span></span></span></span></span>)</span></span>\r\n<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\">[config中身]</span></span></span>\r\n<span style=\"font-size: 18px;\"><span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\">-----------------------------</span></span></span></span>\r\n<span style=\"font-size:
      18px;\">Host dragonarrow\r\n    HostName 54.250.70.47\r\n    Port 22\r\n   
      IdentityFile ~/.ssh/AWS/ec2_key_rsa\r\n    User tatsuya\r\n\r\n\r\nHost GitHub\r\n 
        HostName <a href=\"//github.com\">github.com</a>\r\n    IdentityFile ~/.ssh/github/id_rsa\r\n 
        TCPKeepAlive yes\r\n    IdentitiesOnly yes\r\n    User git</span>\r\n<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\">-----------------------------</span></span></span></span></pre><p><span
      style=\"font-size: 18px;\">これでサーバーが増えてもどの鍵がどのプロジェクトか混乱しない</span></p><p><span
      style=\"font-size: 18px;\"><a href=\"https://qiita.com/suin/items/e4a976d076134f755a9a\">このような管理の仕方もあるようだ!!</a></span></p><p><br></p><p><span
      style=\"font-size: 24px;\">サーバー編</span></p><p><br></p><pre><span style=\"font-size:
      18px;\">[tatsuya|~]$ mkdir .ssh\r\n[<span style=\"font-size: 18px;\">tatsuya</span>|~]$
      chmod 700 .ssh\r\n[<span style=\"font-size: 18px;\">tatsuya</span>|~]$ cd .ssh\r\n[<span
      style=\"font-size: 18px;\">tatsuya</span>|.ssh]$ vi authorized_keys\r\n(#vimが開く)\r\n-----------------------------\r\nssh-rsa
      asfs.....aef\r\n(#先ほどコピーした鍵の中身を貼り付け)\r\n-----------------------------\r\n[<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">tatsuya</span></span>|.ssh]$
      chmod 600 authorized_keys</span>\r\n<span style=\"font-size: 18px;\">(所有者のみread
      write権限)\r\n[<span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">tatsuya</span></span>|.ssh]$
      exit\r\n[ec2-user|~]$ exit</span></pre><p><span style=\"font-size: 18px;\">サーバー編終了</span></p><p><br></p><p><span
      style=\"font-size: 18px;\">いざ接続!!</span></p><pre><span style=\"font-size: 18px;\">[~]$
      ssh dragonarrow <span style=\"color: rgb(163, 143, 132);\">(configの<span style=\"font-size:
      18px;\">Hostで指定した語句がHostNameの代わりになってくれる</span>)</span></span>\r\n<span style=\"font-size:
      18px;\">接続できれば終了!!</span></pre><p><br></p><p><span style=\"font-size: 30px;\"><span
      style=\"color: rgb(44, 130, 201);\">初めてのサーバー構築はかなり難しかったがなんとか完了！！<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f602.svg);\">&nbsp;&nbsp;</span></span><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style='background: url(\"https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f602.svg\");
      color: rgb(44, 130, 201);'>&nbsp;</span></span></p><p><br></p><p><a href=\"https://qiita.com/naoki_mochizuki/items/814e0979217b1a25aa3e\">参考文献</a></p><p><br></p>"
    - '2019-04-07 13:29:44.959176'
    - '2019-04-07 15:15:35.762164'
  - - 138
    - 中央値の取り方
    - "<p><br></p><p><a href=\"https://atcoder.jp/contests/s8pc-6/tasks/s8pc_6_b\"></a><a
      href=\"https://atcoder.jp/contests/s8pc-6/tasks/s8pc_6_b\"><span style=\"font-size:
      30px;\">B - AtCoder Market atCoder問題</span></a></p><p><br></p><p><span style=\"color:
      rgb(226, 80, 65);\">ヒント&nbsp;</span></p><p><span style=\"color: rgb(226, 80,
      65);\">\U0001D441 個の数 \U0001D44E1, \U0001D44E2, \U0001D44E3, &hellip; , \U0001D44E\U0001D441
      があります。 |\U0001D465 &minus; \U0001D44E1| + |\U0001D465 &minus; \U0001D44E2| +
      ⋯ + |\U0001D465 &minus; \U0001D44E\U0001D441| の最小値を求めなさい。</span></p><p><span
      style=\"color: rgb(226, 80, 65);\">実は、最小値となる \U0001D465 は「\U0001D44E1, \U0001D44E2,
      \U0001D44E3, &hellip; , \U0001D44E\U0001D441 の中央値」となる！</span></p><p><span style=\"color:
      rgb(226, 80, 65);\"><br></span></p><p><span style=\"color: rgb(226, 80, 65);\"><strong>wikipedia:
      中央値</strong>（ちゅうおうち、英: median）とは、代表<strong>値</strong>の一つで、有限個のデータを小さい順に並べたとき<strong>中央</strong>に位置する<strong>値</strong>。
      たとえば5人の人がいるとき、その5人の年齢の<strong>中央値</strong>は3番目に年寄りな人の年齢である。 ただし、データが偶数個の場合は、<strong>中央</strong>に近い2つの<strong>値</strong>の算術平均をとる。</span></p><p><span
      style=\"color: rgb(226, 80, 65);\"><br></span></p><h3><span style=\"color: rgb(226,
      80, 65);\">Ribyで中央値を求めるコード</span></h3><pre data-lang=\"ruby\" data-unlink=\"\"><span
      style=\"color: rgb(226, 80, 65);\">(a.size % 2).zero? ? a[a.size/2 - 1, 2].inject(:+)
      / 2.0 : a[a.size/2]</span></pre><p><br></p><p><span style=\"font-size: 30px;\">解答</span></p><pre>n
      = gets.to_i\r\na, b = n.times.map{ gets.strip.split.map(&amp;:to_i) }.transpose\r\na.sort!\r\nb.sort!\r\n#
      a配列の中央値 偶数の時の中央値は真ん中二つの平均値なので注意\r\nent = (n%2).zero? ? (a[n/2 - 1, 2].inject(:+)
      / 2.0).round : a[n/2]\r\n# b配列の中央値\r\nexit = (n%2).zero? ? (b[n/2 - 1, 2].inject(:+)
      / 2.0).round : b[n/2]\r\ncount = 0\r\nn.times do |i|\r\ncount += (ent- a[i]).abs\r\ncount
      += (b[i] - a[i]).abs\r\ncount += (exit - b[i]).abs\r\nend\r\nputs count</pre>"
    - '2019-04-15 07:50:14.559412'
    - '2019-04-15 07:53:46.705265'
  - - 139
    - "[Ruby] AtCodr D - Handstand"
    - "<p><span style=\"font-size: 24px;\">問題atCoder <a href=\"https://atcoder.jp/contests/abc124/tasks/abc124_d\">https://atcoder.jp/contests/abc124/tasks/abc124_d</a></span></p><p><br></p><pre><span
      style=\"font-size: 30px;\">N,K = gets.split.map(&amp;:to_i)\r\nS = gets.chomp\r\nnums
      = []\r\nnum = &quot;1&quot;\r\ncount = 0\r\n\r\nfor i in 0..N-1 do\r\n# 連続数カウント\r\nif
      S[i] == num then\r\ncount+=1\r\nelse\r\n# 連続数メモ&amp;カウントのリセット&amp;カウント数字の切り替え\r\nnums.push(count)\r\ncount
      = 1\r\nnum = num == &quot;1&quot;  ? &quot;0&quot; : &quot;1&quot;\r\nend\r\nend\r\n#
      最後まで行くと、それ以上連続しないのでカウントをメモ\r\nnums.push(count)\r\n# 1..0みたいに0で終わってたら1の連続数0を加える\r\nif
      nums.length % 2 == 0\r\nnums.push(0)\r\nend\r\n\r\nadd = 2 * K + 1\r\nleft =
      0\r\nright = 0\r\ntmp = 0\r\nans = 0\r\n\r\n# 1の連続数は偶数ばんめのインデックス\r\n0.step(nums.length-1,
      2) do |i|\r\n# 連続の一番左インデックス\r\n# 連続の一番右インデックスの一個右\r\nnextleft = i\r\nnextright
      = [i + add, nums.length].min\r\n\r\n# インデックス0から連続の左端手前まで引く\r\nwhile nextleft
      &gt; left\r\ntmp -= nums[left]\r\nleft += 1\r\nend\r\n# インデックス0から連続の右端までたす\r\nwhile
      nextright &gt; right\r\ntmp += nums[right]\r\nright += 1\r\nend\r\nans = tmp
      if tmp &gt; ans  \r\n\r\nend\r\n\r\nputs ans</span></pre><p><br></p><p><br></p>"
    - '2019-04-16 13:19:35.598445'
    - '2019-04-18 07:14:07.346921'
  - - 140
    - Rails5.2 credentials
    - "<p><br></p><p><span style=\"font-size: 30px;\">目的: database.ymlやdatabase.ymlなどの各ファイルで、環境変数として機密情報を隠したいときに使える</span></p><p><br></p><p><strong><span
      style=\"font-size: 24px; color: rgb(251, 160, 38);\">credentials.yml.enc</span></strong><span
      style=\"font-size: 24px; color: rgb(251, 160, 38);\">の内容は暗号化されてるため<strong>credentials.yml.enc</strong>を編集するためには<code>editor=vim
      rails credentials:edit</code>コマンドを実行します。</span></p><p><br></p><pre># credentials.yml.encをviで開く\r\n$
      EDITOR=&quot;vi&quot; bin/rails credentials:edit</pre><p><br></p><p><span style=\"font-size:
      24px;\">credentials.yml.enc</span></p><pre><span style=\"font-size: 24px;\">db:\r\n
      \ host:     xxxxx\r\n  database: xxxxx\r\n  username: xxxxx\r\n  password: xxxxx</span>\r\n<span
      style=\"font-size: 24px;\">aws:\r\n  access_key_id: xxxxxxx\r\n  secret_access_key:
      xxxxxxx\r\nsecret_key_base: xxxxxxx</span></pre><p><br></p><p>config/database.yml</p><pre><span
      style=\"font-size: 30px;\"># 省略\r\nproduction:\r\n  &lt;&lt;: *default\r\n  #
      省略\r\n  host:     &lt;%= Rails.application.credentials.db[:host] %&gt;\r\n  <span
      style=\"color: rgb(226, 80, 65);\"># host:     &lt;%= Rails.application.credentials.dig(:db,
      :host) %&gt;でも良い</span>\r\n  database: &lt;%= Rails.application.credentials.db[:database]
      %&gt;\r\n  <span style=\"color: rgb(226, 80, 65);\"># database:     &lt;%= Rails.application.credentials.dig(:db,
      :database) %&gt;</span>\r\n  username: &lt;%= Rails.application.credentials.db[:username]
      %&gt;\r\n  <span style=\"color: rgb(226, 80, 65);\"># username:     &lt;%= Rails.application.credentials.dig(:db,
      :username) %&gt;</span>\r\n  password: &lt;%= Rails.application.credentials.db[:password]
      %&gt;\r\n  <span style=\"color: rgb(226, 80, 65);\"># password:     &lt;%= Rails.application.credentials.dig(:db,
      :password) %&gt;</span></span></pre><p><br></p><p><span style=\"font-size: 30px;\">config/database.yml</span></p><pre><span
      style=\"font-size: 30px;\"># 省略</span>\r\n<span style=\"font-size: 30px;\">amazon:\r\nservice:
      S3\r\naccess_key_id: <span style=\"color: rgb(226, 80, 65);\">&lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;</span>\r\nsecret_access_key: <span style=\"color: rgb(226,
      80, 65);\">&lt;%= Rails.application.credentials.dig(:aws, :secret_access_key)
      %&gt;</span>\r\nregion: ap-northeast-1\r\nbucket: mybucket</span></pre><p><br></p><p><span
      style=\"font-size: 30px;\">暗号化するときの鍵は <em>RAILS_MASTER_KEY</em> という環境変数に格納</span></p><pre><span
      style=\"font-size: 30px;\">$ export RAILS_MASTER_KEY=&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;\r\n$
      rails c\r\n\r\nirb(main):001:0&gt; Rails.application.credentials.secret_key_base\r\n=&gt;
      xxxxx..</span></pre><p><br></p><p><span style=\"font-size: 30px;\">Editor指定がめんどい...</span></p><pre><span
      style=\"font-size: 30px;\">$ EDITOR=vi bin/rails credentials:edit</span></pre><p><span
      style=\"font-size: 30px;\">.bash_profileなどに<strong>環境変数：EDITOR</strong>を指定しておけば、<code>EDITOR=&quot;xxx&quot;</code>の指定は不要になります。</span></p><pre><span
      style=\"font-size: 30px;\"># .bash_profileに環境変数 EDITOR を設定する\r\n$ echo &#39;export
      EDITOR=&quot;vi&quot;&#39; &gt;&gt; ~/.bash_profile\r\n$ source ~/.bash_profile\r\n$
      echo $EDITOR\r\n  #=&gt; vi\r\n\r\n$ bin/rails credentials:edit</span></pre>"
    - '2019-04-17 09:18:11.45448'
    - '2019-04-17 09:50:12.596595'
  - - 141
    - cakePHP3.6でディレクトリを移行した後に生じた謎エラー
    - "<h1 style=\"text-align: center;\"><span style=\"font-size: 30px;\">作業ディレクトリ変更後の謎エラー</span></h1><p><br></p><p><span
      style=\"font-size: 30px;\">経緯: デスクトップからUSBに訳あって移動していたのだが、久しぶりに必要になりデスクトップに持ってきて開くとエラーが...</span></p><p><br></p><p><br></p><pre><span
      style=\"font-size: 24px;\">$ bin/cake server\r\nfailed to open stream: No such
      file or directory in /作業ディレクトリ/アプリ名/config/bootstrap.php on line 19</span>\r\n<span
      style=\"font-size: 24px;\">PHP Fatal error:  require(): Failed opening required
      &#39;/<span style=\"font-size: 24px;\">作業ディレクトリ/アプリ名</span>/config/paths.php&#39;</span></pre><p><br></p><p><span
      style=\"font-size: 24px;\">え、何もファイルいじってないのになぜにエラーが...</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">原因: なんと、config配下のpaths.phpがなくなっているではないか!なぜ勝手に消えているのだ？！</span></p><p><span
      style=\"font-size: 24px;\">そして、<span style=\"font-size: 24px;\">path.phpを新規作成してサーバーを起動すると、無事に治ったのだ！あジャバ、不思議な不思議なエラーでした<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f613.svg);\">&nbsp;</span>&nbsp;</span></span></p><p><br></p><p><br></p><pre><span
      style=\"font-size: 24px;\"><span style=\"font-size: 24px; color: rgb(44, 130,
      201);\">root_path/config/paths.php</span></span>\r\n<span style=\"font-size:
      24px;\"><span style=\"font-size: 14px;\">&lt;?php\r\n/**\r\n* CakePHP(tm) :
      Rapid Development Framework (https://cakephp.org)\r\n* Copyright (c) Cake Software
      Foundation, Inc. (https://cakefoundation.org)\r\n*\r\n* Licensed under The MIT
      License\r\n* Redistributions of files must retain the above copyright notice.\r\n*\r\n*
      @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\r\n*
      @link          https://cakephp.org CakePHP(tm) Project\r\n* @since         3.0.0\r\n*
      @license       MIT License (https://opensource.org/licenses/mit-license.php)\r\n*/\r\n\r\n/**\r\n*
      Use the DS to separate the directories in other defines\r\n*/\r\nif (!defined(&#39;DS&#39;))
      {\r\ndefine(&#39;DS&#39;, DIRECTORY_SEPARATOR);\r\n}\r\n\r\n/**\r\n* These defines
      should only be edited if you have cake installed in\r\n* a directory layout
      other than the way it is distributed.\r\n* When using custom settings be sure
      to use the DS and do not add a trailing DS.\r\n*/\r\n\r\n/**\r\n* The full path
      to the directory which holds &quot;src&quot;, WITHOUT a trailing DS.\r\n*/\r\ndefine(&#39;ROOT&#39;,
      dirname(__DIR__));\r\n\r\n/**\r\n* The actual directory name for the application
      directory. Normally\r\n* named &#39;src&#39;.\r\n*/\r\ndefine(&#39;APP_DIR&#39;,
      &#39;src&#39;);\r\n\r\n/**\r\n* Path to the application&#39;s directory.\r\n*/\r\ndefine(&#39;APP&#39;,
      ROOT . DS . APP_DIR . DS);\r\n\r\n/**\r\n* Path to the config directory.\r\n*/\r\ndefine(&#39;CONFIG&#39;,
      ROOT . DS . &#39;config&#39; . DS);\r\n\r\n/**\r\n* File path to the webroot
      directory.\r\n*/\r\ndefine(&#39;WWW_ROOT&#39;, ROOT . DS . &#39;webroot&#39;
      . DS);\r\n\r\n/**\r\n* Path to the tests directory.\r\n*/\r\ndefine(&#39;TESTS&#39;,
      ROOT . DS . &#39;tests&#39; . DS);\r\n\r\n/**\r\n* Path to the temporary files
      directory.\r\n*/\r\ndefine(&#39;TMP&#39;, ROOT . DS . &#39;tmp&#39; . DS);\r\n\r\n/**\r\n*
      Path to the logs directory.\r\n*/\r\ndefine(&#39;LOGS&#39;, ROOT . DS . &#39;logs&#39;
      . DS);\r\n\r\n/**\r\n* Path to the cache files directory. It can be shared between
      hosts in a multi-server setup.\r\n*/\r\ndefine(&#39;CACHE&#39;, TMP . &#39;cache&#39;
      . DS);\r\n\r\n/**\r\n* The absolute path to the &quot;cake&quot; directory,
      WITHOUT a trailing DS.\r\n*\r\n* CakePHP should always be installed with composer,
      so look there.\r\n*/\r\ndefine(&#39;CAKE_CORE_INCLUDE_PATH&#39;, ROOT . DS .
      &#39;vendor&#39; . DS . &#39;cakephp&#39; . DS . &#39;cakephp&#39;);\r\n\r\n/**\r\n*
      Path to the cake directory.\r\n*/\r\ndefine(&#39;CORE_PATH&#39;, CAKE_CORE_INCLUDE_PATH
      . DS);\r\ndefine(&#39;CAKE&#39;, CORE_PATH . &#39;src&#39; . DS);</span><span
      style=\"font-size: 24px;\">\r\n</span></span></pre>"
    - '2019-04-20 12:03:05.373043'
    - '2019-04-20 12:16:25.740822'
  - - 142
    - MySQL 5.6から8.0にupgradeした後のエラー
    - "<h1 itemprop=\"headline\">SQLSTATE[HY000] [2054] The server requested authentication
      method unknown to the client</h1><p><br></p><p><span style=\"color: rgb(226,
      80, 65); font-size: 24px;\">MYSQL５.7まで有効なコマンドで、MySQL8では利用できません。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">MacでMysqlを5.6から8.0にupgradeした後、LaravelからMysqlにアクセスできなくなった。</span></p><p><span
      style=\"font-size: 24px;\">ちなみにupgradeのコマンドは、</span></p><pre><span style=\"font-size:
      24px;\">$ brew upgrade mysql\r\n$ mysql_upgrade -u root -p</span></pre><p><br></p><p><br></p><p><br></p><p><span
      style=\"font-size: 36px;\">修理手順1 MySQL８での、ユーザのパスワード変更</span></p><pre><code><span
      style=\"font-size: 24px;\">mysql &gt; USE mysql;\r\nmysql &gt; ALTER USER &#39;root&#39;@&#39;localhost&#39;
      identified BY &#39;your_now_password&#39;;\r\n\r\nQuery OK, 1 row affected (0.04
      sec)\r\nRows matched: 1  Changed: 1  Warnings: 0</span></code></pre><p><br></p><p><br></p><h2>【補足】root
      ユーザのパスワード忘れて、ログイン出来ないとき</h2><pre><code><span spellcheck=\"true\" style=\"font-size:
      24px;\">// 一度終了</span><span style=\"font-size: 24px;\">\r\n$ mysql.server stop\r\n\r\n<span
      spellcheck=\"true\">// セーフモードでの起動、</span>\r\n$ mysqld_safe <span spellcheck=\"true\">--skip-grant-tables
      &amp;</span>\r\n\r\n<span spellcheck=\"true\">// パスワードなしでログインできる</span>\r\n$
      mysql -u root</span></code></pre><p><br></p><p><span style=\"font-size: 24px;\">一度パスワードを空にします。</span></p><pre><code><span
      style=\"font-size: 24px;\"><span spellcheck=\"true\">// root のパスワードを空にする</span>\r\nmysql
      &gt; UPDATE mysql.user SET authentication_string=null WHERE User=&#39;root&#39;;\r\nmysql
      &gt; exit;</span></code></pre><p><br></p><p><span style=\"font-size: 24px;\">その後、MYSQLを再起動。空のパスワードでログインして、上記のALTERコマンドを実行します。</span></p><pre><code><span
      style=\"font-size: 24px;\"><span spellcheck=\"true\">// MySQL再起動（非セーフモード）</span>\r\n$
      mysql.server restart\r\n\r\n<span spellcheck=\"true\">// 空のパスワードでログイン</span>\r\n$
      mysql -u root -p \r\n\r\n<span spellcheck=\"true\">// パスワード設定</span>\r\nmysql
      &gt; USE mysql;\r\nmysql &gt; ALTER USER &#39;root&#39;@&#39;localhost&#39;
      identified BY &#39;remake_password&#39;;\r\n\r\nQuery OK, 1 row affected (0.04
      sec)\r\nRows matched: 1  Changed: 1  Warnings: 0</span></code></pre><p><br></p><h1><a
      href=\"http://www-creators.com/archives/5574\"><br></a></h1><h1>補足】MySQL８のパスワード認証プラグインについて</h1><p><br></p><p><span
      style=\"font-size: 24px;\">MySQLでは、パスワードの認証時に、実行される、「authentication plugin」という仕組みのがあります。</span></p><p><span
      style=\"font-size: 24px;\">例えば上記のコマンドで設定したパスワードについて、下記のコマンドで、確認できます。</span></p><pre><span
      style=\"font-size: 24px;\"><code>mysql&gt; select User, Plugin from mysql.user
      where User = &#39;root&#39;;\r\n+<span spellcheck=\"true\">------+-----------------------+</span>\r\n|
      User | Plugin                |\r\n+<span spellcheck=\"true\">------+-----------------------+</span>\r\n|
      root | caching_sha2_password |\r\n+<span spellcheck=\"true\">------+-----------------------+</span></code><a>Copy</a></span></pre><p><span
      style=\"font-size: 24px;\">下のコマンドで確かめられるように、<span style=\"background-color:
      rgb(247, 218, 100);\">MySQL8　からは、「caching_sha2_password」がデフォルト</span>となったようなのですが・・、</span></p><pre><span
      style=\"font-size: 24px;\"><code>mysql &gt; use mysql;\r\nmysql &gt; show variables
      like &#39;default_authentication_plugin&#39;;\r\n+<span spellcheck=\"true\">-------------------------------+-----------------------+</span>\r\n|
      Variable_name                 | Value                 |\r\n+<span spellcheck=\"true\">-------------------------------+-----------------------+</span>\r\n|
      default_authentication_plugin | caching_sha2_password |\r\n+<span spellcheck=\"true\">-------------------------------+-----------------------+</span></code><a>Copy</a></span></pre><p><span
      style=\"font-size: 24px; background-color: rgb(247, 218, 100);\">mysqlを利用するクライアントソフトウェア（例えば、PhpMyAdminなど）では、この認証方法をサポートしていないため、エラーとなりログイン出来ないことがあるようです。</span></p><h1><a
      href=\"http://www-creators.com/archives/5574\"></a></h1><p><span style=\"font-size:
      24px; color: rgb(0, 0, 0);\">パスワードを下記のコマンドで設定すると、回避できます。</span></p><p><br></p><pre><span
      style=\"font-size: 24px;\">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39;
      identified WITH mysql_native_password BY &#39;your_now_password&#39;;\r\nQuery
      OK, 0 rows affected (0.01 sec)</span></pre><p>同様に「my.cnf」にも書き込んでおきます。これでデフォルトの認証プラグインを変更できましたので、これ以降の新規ユーザ作成時は、デフォルトで、mysql_native_password　が使用されます。</p><p><span
      style=\"font-size: 36px;\">修理手順2 my.cnfの設定を変更する</span></p><pre><span style=\"font-size:
      24px;\">$ mysql --help | grep my.cnf\r\n                      order of preference,
      my.cnf, $MYSQL_TCP_PORT,\r\n/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf
      ~/.my.cnf</span></pre><p><span style=\"font-size: 24px;\">左から順に存在するファイルを確認していく</span></p><pre><span
      style=\"font-size: 24px;\">$ ls -la /usr/local/etc/my.cnf\r\nls: /etc/my.cnf:
      No such file or directory\r\n\r\n$ ls -la /usr/local/etc/my.cnf\r\nls: /etc/mysql/my.cnf:
      No such file or directory\r\n\r\n$ ls -la /usr/local/etc/my.cnf\r\n-rw-r--r--@
      1 nakajitatsuya  admin  222  4 20 21:57 /usr/local/etc/my.cnf</span></pre><p><span
      style=\"font-size: 24px;\">/usr/local/etc/my.cnfが存在しているので、<span style=\"font-size:
      24px;\">[mysqld]下</span>に、<br>default_authentication_plugin = mysql_native_password<br>を加える</span></p><p><span
      style=\"font-size: 24px;\"><br></span></p><p><span style=\"font-size: 24px;\">conf.d/my.conf</span></p><pre
      data-lang=\"\" data-unlink=\"\"><span style=\"font-size: 24px;\">$ vi /usr/local/etc/my.cnf</span>\r\n\r\n<span
      style=\"font-size: 24px;\">[mysqld]\r\n# 省略\r\n<span style=\"color: rgb(226,
      80, 65);\">default_authentication_plugin = mysql_native_password</span> #&lt;--追加</span></pre><p><span
      style=\"font-size: 24px;\"><br></span></p><pre><span style=\"font-size: 24px;\">$
      mysql.server restart</span></pre><p><span style=\"font-size: 24px;\">これで完了</span></p><p><br></p><p><span
      style=\"font-size: 48px;\">はあ〜〜お疲れ様でした<span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f605.svg);\">&nbsp;</span><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f604.svg);\">&nbsp;</span>
      <span class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background:
      url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f602.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p><p><span
      style=\"font-size: 48px;\"><a href=\"http://www-creators.com/archives/5574\"></a></span><span
      style=\"font-size: 10px;\"><a href=\"http://www-creators.com/archives/5574\">参考文献</a></span></p><p><br></p>"
    - '2019-04-20 13:04:54.11034'
    - '2019-04-20 13:53:33.155435'
  - - 143
    - Rubyの配列で使えるメソッド、二次元配列の使い方
    - "<h1 itemprop=\"headline\"><span style=\"font-size: 36px;\">Rubyの配列で使えるメソッド、二次元配列の使い方</span></h1><section
      itemprop=\"articleBody\"><span style=\"font-size: 36px;\"><h3><br></h3><h3>配列の数、要素の長さ</h3>index.rb<pre>ary
      = [&quot;aaaaa&quot;,&quot;aa&quot;,&quot;aaa&quot;]\r\np ary.length\r\n#=&gt;
      3 #配列の要素数\r\n\r\np ary[0].length\r\n#=&gt; 5 #配列の一番目にある文字の長さ</pre><h3>要素の特定、検索、場所</h3>index.rb<pre>#include?は要素の皆無を調べる\r\nary
      = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\r\np ary.include?(&quot;a&quot;)\r\n#=&gt;true\r\np
      ary.include?(&quot;d&quot;)\r\n#=&gt;false\r\n\r\n#findは要素を探して取り出す\r\nary =
      [1,3,6,8]\r\np ary.find{|n| n % 3 == 0 }\r\n#=&gt; 3 #3で割り切れるものを一個しか返さない\r\n\r\np
      ary.find_all{|n| n % 3 == 0 }\r\n#0&gt; [3,6] #3で割り切れるもの全て返す\r\n\r\nary = [&quot;a&quot;,&quot;ab&quot;,&quot;cc&quot;,&quot;ac&quot;,&quot;ds&quot;]\r\np
      ary.find_all{|n| n.include?(&quot;a&quot;)}\r\n#=&gt;[&quot;a&quot;, &quot;ab&quot;,
      &quot;ac&quot;] #aと含まれているものを返す\r\n\r\n#indexは要素の位置を教えてくれる\r\nary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\r\np
      ary.index(&quot;b&quot;)\r\n#=&gt; 1</pre><h3>要素を結合させる</h3><pre>ary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\r\np
      ary.join\r\n#=&gt; &quot;abc&quot; #配列の中にある要素を全て結合\r\n\r\np ary.join(&quot;,&quot;)\r\n#=&gt;
      &quot;a,b,c&quot; #引数を指定するとそれを区切り文字とする</pre><h3>要素を順番に取り出して使う</h3><pre>ary =
      [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\r\n\r\nary.each do |n|\r\n  puts
      n\r\nend\r\n#=&gt;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;と順番に出力される</pre><p>参考にしたサイト一覧<br><a
      href=\"http://www.sejuku.net/blog/11843#index\" rel=\"nofollow noopener\" target=\"_blank\"></a><a
      href=\"http://www.sejuku.net/blog/11843#index\">http://www.sejuku.net/blog/11843#index</a><br><a
      href=\"http://ref.xaio.jp/ruby\" rel=\"nofollow noopener\" target=\"_blank\">http://ref.xaio.jp/ruby</a></p><h1>多次元配列</h1><h2>多次元配列の作り方</h2>index.rb<pre>ary
      = Array.new(3)\r\np ary\r\n#=&gt; [nil,nil,nil] \r\n\r\nary = Array.new(3, Array.new(3,
      &quot;a&quot;) )\r\n#=&gt;[[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]]\r\n#これで2次元配列ができる\r\n\r\nary
      = Array.new(3, Array.new(3, &quot;a&quot;) )\r\n#=&gt;[[&quot;a&quot;, &quot;a&quot;,
      &quot;a&quot;], [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;], [&quot;a&quot;,
      &quot;a&quot;, &quot;a&quot;]]\r\n#第二引数に要素を指定できる</pre><h2>要素の追加</h2>index.rb<pre>ary
      = Array.new(3, Array.new(3, &quot;a&quot;) )\r\nary[0][0] = 1\r\np ary\r\n#=&gt;
      [[1, &quot;a&quot;, &quot;a&quot;], [1, &quot;a&quot;, &quot;a&quot;], [1, &quot;a&quot;,
      &quot;a&quot;]]\r\n\r\nary = Array.new(3).map{Array.new(3,0)}\r\nary[0][0] =
      1\r\np ary\r\n#=&gt; [[1, &quot;a&quot;, &quot;a&quot;], [&quot;a&quot;, &quot;a&quot;,
      &quot;a&quot;], [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;]]\r\n\r\n</pre><blockquote><p>上記の原因は全て同じオブジェクトとして認識されているため<br>そこでmapメソッドを使って別々のオブジェクトとして初期化</p></blockquote>index.rb<pre>ary
      = Array.new(3, Array.new(3, &quot;a&quot;) )\r\np ary.map(&amp;:object_id) #idを調べる\r\n#=&gt;[70167967248120,
      70167967248120, 70167967248120]</pre><h5>同じobject_idが出るためmapで別々のオブジェクトに作り変える</h5>index.rb<pre>ary
      = Array.new(3).map{Array.new(3,0)}\r\np ary(&amp;:object_id)\r\n#=&gt; [70190754844300,
      70190754844200, 70190754844140]</pre><p>下記のサイトを見ておお！ってなりました。<br><a href=\"http://simanman.hatenablog.com/entry/2013/06/24/200306\"
      rel=\"nofollow noopener\" target=\"_blank\">http://simanman.hatenablog.com/entry/2013/06/24/200306</a></p><p><br><br>ちなみにmap抜かしても同義になるので、そこはまだ謎です。</p></span><pre><span
      style=\"font-size: 36px;\">ary = Array.new(3){Array.new(3,0)}\r\np ary.map(&amp;:object_id)\r\n#=&gt;
      [70322091142940, 70322091142840, 70322091142800]</span></pre></section>"
    - '2019-04-26 04:48:06.407622'
    - '2019-04-26 04:49:10.267062'
  - - 144
    - AWS RDS
    - "<h1 style=\"text-align: center;\"><span style=\"font-size: 60px;\">初めてのRDS</span></h1><p><br></p><p><span
      style=\"font-size: 30px;\">RDS:</span><span style=\"font-size: 24px;\">&nbsp;クラウド上で提供するRDBMSサービスRDBMS（アールディービーエムエス）とは、リレーショナルデータベースを管理するソフトウェアの総称です。Oracle,MySQL,PostgreSQLといったようなもの</span></p><p><br></p><p><span
      style=\"font-size: 24px;\"><strong>Multi-AZ機能:&nbsp;</strong>AWS側が自動で親機と子機のデータの同期を取ってくれ、さらに、フェイルオーバー機能を使い、親機に障害があった際に自動で子機に切り替えが行われます。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">前提: EC2インスタンスの作成が済んでいて、ssh接続ができる状態</span></p><p><br></p><h1>ステップ
      1: RDS DB インスタンスの作成</h1><p><br></p><p><strong>インスタンスを起動するには</strong></p><ol><li><p>AWS
      マネジメントコンソールにサインインし、Amazon RDS コンソール (<a href=\"https://console.aws.amazon.com/rds/\"
      target=\"_blank\"></a><a href=\"https://console.aws.amazon.com/rds/\">https://console.aws.amazon.com/rds/</a>)
      を開きます。</p></li><li><p>AWS マネジメントコンソール の右上で、DB インスタンスを作成する AWS リージョンを選択します。</p></li><li><p>ナビゲーションペインで、[<strong>データベース</strong>]
      を選択します。</p><p>ナビゲーションペインが閉じられている場合は、左上隅のメニューアイコンを選択して開きます。</p></li><li><p>[<strong>Create
      database (データベースの作成)</strong>] を選択して、[<strong>エンジンの選択</strong>] ページを開きます。</p></li><li><p>以下に示すように、[<strong>Select
      engine</strong>] で [<strong>MySQL</strong>] を選択し、続いて [<strong>Next</strong>]
      を選択します。</p></li></ol><p><br></p><p>(*注意 amazon auoraは有料です、無料プランで試す場合、対応しているものを選ぶ)</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556257755158-enjine.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>6.
      [<strong>Choose use case</strong>] ページで、[<strong>Dev/Test &ndash; MySQL</strong>]、[<strong>Next</strong>]
      の順に選択します。</p><p>7. 次に示す [<strong>Specify DB details</strong>] ページで、次の値を設定します。</p><ul
      type=\"disc\"><li><p><strong>License model:</strong> デフォルト値を使用します。</p></li><li><p><strong>DB
      engine version:</strong> デフォルト値を使用します。</p></li><li><p><strong>DB インスタンスクラス:</strong>\r\n<code>db.t2.small</code></p></li><li><p><strong>マルチ
      AZ 配置:</strong>\r\n<code>No (ここは冒頭で説明しましたが、この機能は有料)</code></p></li><li><p><strong>ストレージタイプ:</strong>\r\n<code>General
      Purpose (SSD)</code></p></li><li><p><strong>ストレージ割り当て:</strong>\r\n<code>20
      GiB</code></p></li><li><p><strong>DB インスタンス識別子:</strong>\r\n<code>tutorial-db-instance</code></p></li><li><p><strong>マスターユーザー名:</strong>\r\n<code>root</code></p></li><li><p><strong>Master
      password:</strong> パスワードを選択します。</p></li><li><p><strong>Confirm password:</strong>
      パスワードを再入力します。</p></li></ul><p><br><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556258115275-db_setting.png\"
      style=\"width: 489px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>8.
      [<strong>Next</strong>] を選択し、[<strong>Configure advanced settings</strong>]
      ページに以下の値を設定します。</p><ul type=\"disc\"><li><p>[<strong>Virtual Private Cloud (VPC):</strong>]
      EC2と同じVPCを選択</p><p>注記</p><p>VPC の各サブネットは異なるアベイラビリティーゾーンに存在している必要があります。</p></li><li><p>[<strong>Subnet
      group</strong>] (サブネットグループ): 「<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateVPC.html#CHAP_Tutorials.WebServerDB.CreateVPC.DBSubnetGroup\">DB
      サブネットグループを作成する</a>」で作成する <code>tutorial-db-subnet-group</code> のような、<span style=\"color:
      rgb(184, 49, 47); font-size: 24px;\">VPC 用の DB サブネットグループ</span></p></li><li><p>[<strong>パブリックアクセシビリティ</strong>]:
      [<strong>いいえ</strong>]</p></li><li><p>[<strong>アベイラビリティーゾーン</strong>]: [<strong>指定なし</strong>]</p></li><li><p>[<strong>VPC
      セキュリティグループ</strong>]: プライベートアクセス用に設定した既存の VPC セキュリティグループを選択します。これには、「<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateVPC.html#CHAP_Tutorials.WebServerDB.CreateVPC.SecurityGroupDB\">&nbsp;プライベート
      Amazon RDS DB インスタンスの VPC セキュリティグループの作成</a>」で作成する <code>tutorial-db-securitygroup</code>
      などが該当します。</p><p>他のセキュリティグループ (デフォルトのセキュリティグループなど) は、それぞれの対応する [<strong>X</strong>]
      を選択して削除します。</p></li><li><p><strong>データベース名:</strong>\r\n<code>sample</code></p></li></ul><p>その他のオプションについては、デフォルト設定のままにしておきます。</p><p><br><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556258548043-rds_setting.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>9.
      Amazon RDS MySQL DB インスタンスを作成するには、[<strong>Create database (データベースの作成)</strong>]
      を選択します。</p><p>10. 次のページで、[<strong>View DB instances details</strong>] を選択して
      RDS MySQL DB インスタンスを表示します。</p><p>11. 新しい DB インスタンスの [<strong>DB インスタンスのステータス&nbsp;</strong>]
      が [<strong>利用可能</strong>] と表示されるまで待ちます。次に示す [<strong>Connect</strong>] セクションにスクロールします。</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556258873377-Tutorial_WebServer_10.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>DB インスタンスのエンドポイントとポートを書きとめます。この情報を使用して、ウェブサーバーを
      RDS DB インスタンスに接続します。</p><p><br></p><p>あとは、EC2セキュリティグループのインバウンド、アウトバウンド設定にRDSセキュリティグループidを追加</p><p>RDSセキュリティグループのインバウンド、アウトバウンド設定にEC2セキュリティグループidを追加</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556260069210-rds_sec.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556260286884-outbaund.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556260569115-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-26+15.32.27.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556260693491-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-26+15.36.52.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>サーバーにmysqlを入れる</p><pre>$
      yum list installed | grep mysql     <span style=\"color: rgb(163, 143, 132);\">mysqlがインストールされているか確認</span>\r\n$
      sudo yum install mysql</pre><p>接続する</p><pre>sshでec2にログイン\r\n$[tatsuya ~] mysql
      -h エンドポインt -P ポート -u DBインスタンスで設定したマスターユーザー -p\r\nEnter password: (DBインスタンスで設定したパスワードを打ち込む)\r\n\r\n<strong>Welcome
      to the MariaDB monitor.  Commands end with ; or \\g.</strong>\r\n<strong>Your
      MySQL connection id is 37</strong>\r\n<strong>Server version: 5.6.40-log Source
      distribution</strong>\r\n\r\n\r\n<strong>Copyright (c) 2000, 2018, Oracle, MariaDB
      Corporation Ab and others.</strong>\r\n\r\n\r\n<strong>Type &#39;help;&#39;
      or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.</strong>\r\n\r\n\r\nMySQL
      [(none)]&gt; </pre><p><span style=\"font-size: 96px;\">完璧！<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f624.svg);\">&nbsp;</span>&nbsp;</span></p><p>ちなみに接続エラーが出た人はセキュリティグループにMySQLの許可を正しく書き込めてないので、RDSに設定したセキュリティグループがMySQL許可を書き込んだセキュリティグループと同じか,きちんとec2側のセキュリティグループにもMySQL許可を書き込んだかもう一度確認してください。</p><p><br></p><section
      itemprop=\"articleBody\"><h2><span style=\"color: rgb(163, 143, 132);\">番外編：MySQLアンインストール方法</span></h2><h3><span
      style=\"color: rgb(163, 143, 132);\">yumでアンインストール処理を実施</span></h3><pre><span
      style=\"color: rgb(163, 143, 132);\">$ yum remove mysql</span></pre><h3><span
      style=\"color: rgb(163, 143, 132);\">データが入っているディレクトリを削除</span></h3><pre><span
      style=\"color: rgb(163, 143, 132);\">$ rm -rf /var/lib/mysql</span></pre></section><p><br></p><p><br></p><p><br></p>"
    - '2019-04-26 05:38:38.287188'
    - '2019-04-26 07:01:09.097883'
  - - 145
    - Python環境構築(python + pip + pyenv)
    - "<h1 style=\"text-align: center;\"><span style=\"font-size: 48px;\">Python環境構築</span></h1><p><br></p><p><span
      style=\"font-size: 36px;\">やること: pythonインストール &amp; pipインストール(pythonのパッケージ管理ツール)
      &amp; pyenvインストール(pythonのバージョンを簡単に切り替えることができるようにしてくれるツール)</span></p><p><span
      style=\"font-size: 30px;\">&nbsp;</span></p><p><span style=\"font-size: 36px;\">1.pythonインストール</span></p><pre><span
      style=\"font-size: 24px;\">$sudo brew install python</span></pre><p><br></p><p><span
      style=\"font-size: 36px;\">2. pipインストール</span></p><p><span style=\"font-size:
      24px;\">Python のパッケージのインストーラーを使用する</span></p><pre><span style=\"font-size: 24px;\">$sudo
      easy_install pip</span></pre><p><span style=\"color: rgb(44, 130, 201);\"><br></span></p><p><span
      style=\"color: rgb(44, 130, 201); font-size: 18px;\">pythonはバージョン2系と3系があり, 2系を動かすときは
      pythonコマンド($ python sample.py や $ python など)を 3系を動かすときはpython3コマンド($ python3
      sample.py や $ python3 など) とかき分けねばならず、気色が悪いので、pyenvをインストールして初めからバージョン指定をしてしまおうというわけです(いつでもバージョンを切り替えられます)</span></p><p><br></p><h1
      itemprop=\"headline\">3.pyenvのインストール</h1><section itemprop=\"articleBody\"><h2><br></h2><h2>pyenvとは</h2><p>pythonのバージョンを簡単に切り替えることができるようにしてくれるツールです。２系列と３系列との切り替えに便利です。また、ディレクトリごとにpythonのバージョンを切り替えることができます。</p><h2>pyenvのインストール</h2><p>ではまず、
      pyenvをインストールしましょう。gitから持ってくる場合上のコマンドを、brewが使える場合は下のコマンドを利用してもできます。</p><pre>$
      brew install pyenv</pre><h2>bash_profileの編集</h2><p>次にpyenvのパスを通すためにbash_profileを編集します。</p><pre>$
      echo &#39;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#39; &gt;&gt; ~/.bash_profile\r\n$
      echo &#39;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#39; &gt;&gt; ~/.bash_profile\r\n$
      echo &#39;eval &quot;$(pyenv init -)&quot;&#39; &gt;&gt; ~/.bash_profile</pre><p>またはvimを使ってbash_profileに直書きしても構いません。</p><pre>$
      vim ~/.bash_profile\r\nexport PYENV_ROOT=&quot;$HOME/.pyenv&quot;\r\nexport
      PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;\r\neval &quot;$(pyenv init -)&quot;</pre><p>最後にbash_profileの保存を適用します</p><pre>$
      source ~/.bash_profile</pre><h2>pyenvでpythonをインストール</h2><p>バージョン切り替えを体験するために２つほどバージョンが違うpythonをインストールしてましょう。インストールできるか確認をしたければ３つめのコマンドを利用すると一覧が確認できます。</p><pre>$
      pyenv install 2.7.15\r\n$ pyenv install 3.7.3\r\n$ pyenv install --list　 </pre><h2>pyenvでバージョンを切り替えてみる</h2><p>バージョンの切り替えをしてみます。localの場合は今いるディレクトリに、globalの場合は全体に反映されます。</p><pre>$
      pyenv local 2.7.15\r\n$ pyenv global 3.7.3</pre><p>ここできちんと変更が反映されているか確認するためpythonのバージョンを調べます。</p><pre>$
      python --version\r\nPython 2.7.15</pre><p>このように変更が反映されていれば問題ありません。<br>反映されていなければ下の記事をお試しください。</p><h2>pyenvでのpythonのバージョンがpython
      -vと違う時の対処法</h2><pre>$ pyenv versions\r\n  system\r\n* 2.7.15 \r\n  3.7.3\r\n$
      python --version                                                                                             \r\nPython
      3.7.3 (pyenvが適用されてない)</pre><p>その場合、whichコマンドでパスを表示してみてください。</p><pre>$ which
      python\r\n<span style=\"color: rgb(226, 80, 65);\">/usr/bin</span></pre><p>このようになっていたら、</p><p>pyenvがインストールされている/usr/localよりPythonがデフォルトでインストールされている/usr/binの優先度が高くなっているので、以下のように編集してください。</p><pre>$
      vim /etc/paths\r\n/usr/local/bin\r\n/usr/bin\r\n/bin\r\n/usr/local/sbin\r\n/usr/sbin\r\n/sbin</pre><p><span
      style=\"font-size: 24px; color: rgb(44, 130, 201);\">ここで、順番大事です！優先度が高いものが上に来るようにしており、パスがusr/binよりも/usr/localを優先されるようになります</span><span
      style=\"color: rgb(44, 130, 201);\">。</span></p><p>確認のためwhichコマンドをもう一度入力すると</p><pre>$
      which python\r\n<span style=\"color: rgb(226, 80, 65);\">/usr/local/bin/pyenv</span></pre><p>のようになるはずです。<br>最後にもう一度pyenvのpythonのバージョンがpythonのバージョンと一致するか確かめてみてください。</p></section><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1557209882746-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-05-07+15.17.02.png\"
      style=\"width: 819px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><span style=\"font-size:
      30px;\">python3 って打たなくてもバージョン3が起動するようになった！！</span></p><p><br></p><p><br></p>"
    - '2019-05-07 05:54:01.709739'
    - '2019-05-07 06:24:53.781135'
  - - 146
    - python matplotlibのインストール
    - "<p style=\"text-align: center;\"><span style=\"font-size: 36px;\">python matplotlibのインストール</span></p><p
      style=\"text-align: center;\"><br></p><p><strong><span style=\"font-size: 30px;\">初めに:
      Matplotlib</span></strong><span style=\"font-size: 30px;\">は、プログラミング言語<a href=\"https://ja.wikipedia.org/wiki/Python\"
      title=\"Python\">Python</a>およびその科学計算用ライブラリ<a href=\"https://ja.wikipedia.org/wiki/NumPy\"
      title=\"NumPy\">NumPy</a>のためのグラフ描画ライブラリである。(wikipedia)</span></p><p><br></p><p><span
      style=\"font-size: 30px;\">手順1. matplotlibのインストール</span></p><pre>pip install
      matplotlib</pre><p><br></p><p><span style=\"font-size: 30px;\">手順2. 設定ファイル(=matplotlibrc)を編集する(これしないと動かない)</span></p><pre>$
      python\r\nPython 3.7.3 (default, May  7 2019, 14:28:48) \r\n[Clang 9.1.0 (clang-902.0.39.1)]
      on darwin\r\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot;
      or &quot;license&quot; for more information.\r\n&gt;&gt;&gt; <span style=\"color:
      rgb(44, 130, 201);\">import matplotlib as mpl</span>\r\n&gt;&gt;&gt; <span style=\"color:
      rgb(44, 130, 201);\">print(mpl.get_configdir()) </span><span style=\"color:
      rgb(163, 143, 132);\">Matplotlib設定保存用ディレクトリ確認</span>\r\n~/.matplotlib\r\n&gt;&gt;&gt;
      <span style=\"color: rgb(44, 130, 201);\">print(mpl.matplotlib_fname()) <span
      style=\"color: rgb(163, 143, 132);\">適用されているmatplotlibrcの確認</span></span>\r\n<span
      style=\"background-color: rgb(247, 218, 100);\">~/matplotlib/mpl-data/matplotlibrc</span>\r\n&gt;&gt;&gt;</pre><p><br></p><p>なるほど！このmpl-dataってディレクトリに「設定ファイル(=matplotlibrc)」が入っているのですね！！！</p><pre>$
      open matplotlibrc</pre><p>すると、ついに設定ファイル（.txt）が姿を表します！<br>こんな感じ</p><pre>### MATPLOTLIBRC
      FORMAT\r\n\r\n# This is a sample matplotlib configuration file - you can find
      a copy\r\n# of it on your system in\r\n# site-packages/matplotlib/mpl-data/matplotlibrc.
      \ If you edit it\r\n# there, please note that it will be overwritten in your
      next install.\r\n# If you want to keep a permanent local copy that will not
      be\r\n# overwritten, place it in the following location:\r\n# unix/linux:\r\n#
      \    $HOME/.config/matplotlib/matplotlibrc or\r\n#     $XDG_CONFIG_HOME/matplotlib/matplotlibrc
      (if $XDG_CONFIG_HOME is set)\r\n# other platforms:\r\n#     $HOME/.matplotlib/matplotlibrc\r\n#\r\n#
      See http://matplotlib.org/users/customizing.html#the-matplotlibrc-file for\r\n#
      more details on the paths which are checked for the configuration file.\r\n#\r\n#
      This file is best viewed in a editor which supports python mode\r\n# syntax
      highlighting. Blank lines, or lines starting with a comment\r\n# symbol, are
      ignored, as are trailing comments.  Other lines must\r\n# have the format\r\n#
      \   key : val # optional comment\r\n#\r\n# Colors: for the color values below,
      you can either use - a\r\n# matplotlib color string, such as r, k, or b - an
      rgb tuple, such as\r\n# (1.0, 0.5, 0.0) - a hex string, such as ff00ff - a scalar\r\n#
      grayscale intensity such as 0.75 - a legal html color name, e.g., red,\r\n#
      blue, darkslategray\r\n\r\n#### CONFIGURATION BEGINS HERE\r\n\r\n# The default
      backend; one of GTK GTKAgg GTKCairo GTK3Agg GTK3Cairo\r\n# MacOSX Qt4Agg Qt5Agg
      TkAgg WX WXAgg Agg Cairo GDK PS PDF SVG\r\n# Template.\r\n# You can also deploy
      your own backend outside of matplotlib by\r\n# referring to the module name
      (which must be in the PYTHONPATH) as\r\n# &#39;module://my_backend&#39;.\r\n<span
      style=\"background-color: rgb(247, 218, 100);\">backend      : </span><span
      style=\"font-size: 12px; color: rgb(44, 130, 201); background-color: rgb(247,
      218, 100);\">macos</span>\r\n\r\n...</pre><p><span style=\"font-size: 30px;\">この最後の行の　<br>backend
      : <span style=\"color: rgb(44, 130, 201); background-color: rgb(247, 218, 100);\">macos</span><br>を、</span></p><pre>backend
      : <span style=\"background-color: rgb(247, 218, 100);\">TkAgg</span></pre><p>にしてあげる。</p><p><span
      style=\"font-size: 36px;\">これで完了!!<span class=\"fr-emoticon fr-deletable fr-emoticon-img\"
      style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f602.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p><p><br></p>"
    - '2019-05-07 07:59:20.212672'
    - '2019-05-07 08:31:00.447258'
  - - 147
    - python numpyインストール
    - "<p style=\"text-align: center;\"><span style=\"font-size: 36px;\">python numpyインストール</span></p><p
      style=\"text-align: center;\"><br></p><p><span style=\"font-size: 30px;\">numpyとは...</span><span
      style=\"font-size: 14px;\">&nbsp;<strong>NumPy</strong>は、プログラミング言語<a href=\"https://ja.wikipedia.org/wiki/Python\"
      title=\"Python\">Python</a>において数値計算を効率的に行うための拡張モジュールである。</span></p><p><span
      style=\"font-size: 14px;\">効率的な数値計算を行うための型付きの多次元<a href=\"https://ja.wikipedia.org/wiki/%E9%85%8D%E5%88%97\"
      title=\"配列\">配列</a>（例えばベクトルや行列などを表現できる）のサポートをPythonに加えるとともに、それらを操作するための大規模な<a
      href=\"https://ja.wikipedia.org/wiki/%E9%AB%98%E7%B4%9A%E8%A8%80%E8%AA%9E\"
      title=\"高級言語\">高水準</a>の<a href=\"https://ja.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6\"
      title=\"数学\">数学</a><a href=\"https://ja.wikipedia.org/wiki/%E9%96%A2%E6%95%B0_(%E6%95%B0%E5%AD%A6)\"
      title=\"関数 (数学)\">関数</a>ライブラリを提供する。</span></p><p><span style=\"font-size: 14px;\"><a
      href=\"https://ja.wikipedia.org/wiki/Python\" title=\"Python\">Python</a>は<a
      href=\"https://ja.wikipedia.org/wiki/%E5%8B%95%E7%9A%84%E5%9E%8B%E4%BB%98%E3%81%91\"
      title=\"\">動的型付け言語</a>(プログラムの実行よりも前にあらかじめ型を決めるということをせず、実行時の実際の値によって決める<a href=\"https://ja.wikipedia.org/wiki/%E5%9E%8B%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0\"
      title=\"型システム\">型システム</a>の性質のこと)であるため、プログラムを柔軟に記述できる一方で、純粋にPythonのみを使って<a href=\"https://ja.wikipedia.org/wiki/%E6%95%B0%E5%80%A4%E8%A8%88%E7%AE%97\"
      title=\"数値計算\">数値計算</a>を行うと、ほとんどの場合<a href=\"https://ja.wikipedia.org/wiki/C%E8%A8%80%E8%AA%9E\"
      title=\"C言語\">C言語</a>や<a href=\"https://ja.wikipedia.org/wiki/Java\" title=\"Java\">Java</a>などの静的型付き言語で書いたコードに比べて大幅に計算時間がかかる。そこでNumPyは、Pythonに対して型付きの多次元配列オブジェクト
      (<code>numpy.ndarray</code>) と、その配列に対する多数の演算関数や操作関数を提供することにより、この問題を解決しようとしている。NumPyの内部はC言語
      (およびFortran)によって実装されているため非常に高速に動作する。(wikipedia)</span></p><p><br></p><pre>python
      -m pip install numpy</pre><p><br></p><pre>$ python\r\nPython 3.7.3 (default,
      May  7 2019, 14:28:48) \r\n[Clang 9.1.0 (clang-902.0.39.1)] on darwin\r\nType
      &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot;
      for more information.\r\n&gt;&gt;&gt; import numpy as np\r\n&gt;&gt;&gt; np.random.seed(1)\r\n&gt;&gt;&gt; \r\n&gt;&gt;&gt;
      x = np.arange(10)\r\n&gt;&gt;&gt; y = np.random.randint(1, 100, 10)\r\n&gt;&gt;&gt;
      print(x)\r\n[0 1 2 3 4 5 6 7 8 9]\r\n&gt;&gt;&gt; print(y)\r\n[38 13 73 10 76
       6 80 65 17  2]\r\n&gt;&gt;&gt; \r\n<span style=\"color: rgb(163, 143, 132);\">matplotlibをインストールしてたら以下もやってみると面白い</span>\r\n&gt;&gt;&gt;
      import matplotlib.pyplot as plt\r\n&gt;&gt;&gt; plt.plot(x, y)\r\n[&lt;matplotlib.lines.Line2D
      object at 0x11408fba8&gt;]\r\n&gt;&gt;&gt; plt.show()</pre><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1557219955741-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-05-07+18.05.39.png\"
      style=\"width: 1030px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p><br></p>"
    - '2019-05-07 09:04:53.546952'
    - '2019-05-07 09:13:24.421143'
  - - 148
    - "『ゼロから作る Deep Learning』第1章 勉強メモ(最低限)"
    - "<h1 style=\"text-align: center;\">『ゼロから作る Deep Learning』第1章 勉強メモ</h1><p><code>numpy
      高速で計算</code></p><p><code>matplotlib データのプロット</code></p><p><br></p><pre><span
      style=\"font-size: 24px;\"># coding: utf-8\r\nimport numpy as np\r\nimport matplotlib.pyplot
      as plt\r\n\r\n<span style=\"color: rgb(163, 143, 132);\"># データの作成</span>\r\nx
      = np.arange(0, 6, 0.1) <span style=\"color: rgb(163, 143, 132);\"># 0から6まで0.1刻みで生成0,
      0.1, 0.2, ... 5.9</span>\r\ny1 = np.sin(x)\r\ny2 = np.cos(x)\r\n\r\n<span style=\"color:
      rgb(163, 143, 132);\"># グラフの描画</span>\r\nplt.plot(x, y1, label=&quot;sin&quot;)\r\nplt.plot(x,
      y2, linestyle = &quot;--&quot;, label=&quot;cos&quot;)\r\nplt.xlabel(&quot;x&quot;)
      <span style=\"color: rgb(163, 143, 132);\"># x軸のラベル</span>\r\nplt.ylabel(&quot;y&quot;)
      <span style=\"color: rgb(163, 143, 132);\"># y軸のラベル</span>\r\nplt.title(&#39;sin
      &amp; cos&#39;)\r\nplt.legend()\r\nplt.show()</span></pre><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1557382401192-Figure_1.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-05-09 06:03:24.348408'
    - '2019-06-08 08:44:22.063048'
  - - 149
    - ゼロから作る Deep Learning』第2章 勉強メモ(最低限)
    - "<h1 style=\"text-align: center;\">ゼロから作る Deep Learning』第2章 勉強メモ</h1><p><br></p><pre><span
      style=\"font-size: 24px;\"># coding: utf-8\r\nimport numpy as np\r\n\r\n\r\ndef
      AND(x1, x2):\r\nx = np.array([x1, x2])\r\nw = np.array([0.5, 0.5])\r\nb = -0.7\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># { |w * x|インデックスごとで掛け算 [0.5, 0.5] * [x1,
      x2] =&gt; [0.5 * x1, 0.5 * x2] }\r\n# { |np.sum(w*x)| <span style=\"font-size:
      24px;\"><span style=\"color: rgb(163, 143, 132);\">w*xの</span></span>各要素を全てたす
      (0.5 * x1) + (0.5 * x2) }</span>\r\ntmp = <span style=\"color: rgb(226, 80,
      65);\">np.sum(w*x)</span> + b\r\nif tmp &lt;= 0:\r\nreturn 0\r\nelse:\r\nreturn
      1\r\n\r\nif __name__ == &#39;__main__&#39;:\r\nfor xs in [(0, 0), (1, 0), (0,
      1), (1, 1)]:\r\ny = AND(xs[0], xs[1])\r\nprint(str(xs) + &quot; -&gt; &quot;
      + str(y))</span></pre><p>実行結果</p><p><code>(0, 0) -&gt; 0</code></p><p><code>(1,
      0) -&gt; 0</code></p><p><code>(0, 1) -&gt; 0</code></p><p><code>(1, 1) -&gt;
      1</code></p><p><br></p><p><span style=\"font-size: 24px;\">＊ if __name__ ==
      &#39;__main__&#39; について</span></p><p>Pythonファイルのモジュール名が文字列で入っている　<code>__name__</code>
      という特殊な変数があります。</p><ul><li><code><span style=\"font-size: 18px;\">$ python hello.py</span></code><span
      style=\"font-size: 18px;\">&nbsp;のようにスクリプトからファイルを実行すると__name__ 変数は自動で <code>&quot;__main__&quot;</code>
      という文字列になる</span></li><li><span style=\"font-size: 18px;\"><code>import hello</code>
      した：<code>hello.py</code> 内部で <code>__name__</code> は <code>&quot;hello&quot;</code>
      という文字列になる</span></li></ul><p><br></p><p><span style=\"font-size: 24px; background-color:
      rgb(247, 218, 100);\">つまり...インポートしてもファイルが勝手に実行されない！！</span></p><p>(例)</p><p><span
      style=\"font-size: 14px;\">hello.py</span></p><pre data-lang=\"python\" data-unlink=\"\">def
      main():\r\n    print(&quot;Hello&quot;)\r\n\r\nmain()</pre><pre>$ python hello.py\r\nHello</pre><p>外部から
      <code>import hello</code> という風に hello.py をインポートした際にも 「Hello」と表示されてしまいます</p><pre
      data-lang=\"\" data-unlink=\"\">&gt;&gt;&gt; import hello  # この時点で「Hello」が表示されてしまう\r\nHello\r\n&gt;&gt;&gt;</pre><p><br></p><p>if
      __name__ == &quot;__main__&quot;: を加えると</p><p><span style=\"font-size: 14px;\">hello.py</span></p><pre
      data-lang=\"python\" data-unlink=\"\">def main():\r\n    print(&quot;Hello&quot;)\r\nif
      __name__ == &quot;__main__&quot;:\r\n    main()</pre><p>このif文の内部は import された際には実行されません。</p><pre
      data-lang=\"\" data-unlink=\"\">&gt;&gt;&gt; import hello\r\n&gt;&gt;&gt;</pre><p><br></p><p><span
      style=\"font-size: 48px;\">以上！！</span></p>"
    - '2019-05-09 06:31:22.596321'
    - '2019-06-08 08:44:43.003648'
  - - 150
    - ゼロから作る Deep Learning』第3章 勉強メモ(最低限)
    - "<h2 style=\"text-align: center;\">手書き数字認識</h2><h2>MNIST データセット</h2><p><span
      style=\"font-size: 18px;\">ここで使用するデータセットは MNIST という手書き数字の画像セット(</span>機械学習の分野で最も有名なデータセットの一つ<span
      style=\"font-size: 18px;\">)</span></p><p>0 から 9 までの数字画像から構成されます(図3-24)。 訓練画像が
      60,000 枚、テスト画像が 10,000 枚用意されており、それらの画像を使用 して、学習と推論を行う。</p><p><br></p><p><span
      style=\"font-size: 30px;\">準備: データセットのダウンロード・画像のNumPy 配列 への変換</span></p><p><br></p><p>本で紹介されている通り、MNIST
      データセットのダウンロードから画像データの NumPy 配列 への変換を記述した Python スクリプト(<a href=\"https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/dataset/mnist.py\">mnist.py</a>)を作成して実行する</p><p><a
      href=\"https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/dataset/mnist.py\">mnist.pyのload_mnist引数</a>&nbsp;</p><p>1
      つ目の引数の normalize は、入力画像を 0.0~1.0 の値に正規化する(255で割る)かどうか False にすれば、入力画像のピクセル(色のついた微小な点)は元の
      0~255 のまま</p><p>2 つ目の引数の flatten は、入力画像を平らにする(1 次元配列にする)かどうか&nbsp;</p><p>False
      に設定すると、入力画像は 1 &times; 28 &times; 28 の 3 次元配列として、True にすると 784 個の要素からなる 1 次元配列として格納</p><p>3
      つ目の引数の one_hot_label は、ラベルを one-hot 表現([0,0,1,0,0,0,0,0,0,0] のように、正解となるラベルだけが
      1 で、それ以外 は 0 で表現)として格納するかどうか&nbsp;</p><p>False のときは、7、2 といったように単純に 正解となるラベルを格納</p><p><code>Python
      には、pickle という便利な機能があります。これは、プログラム の実行中のオブジェクトをファイルとして保存する機能です。一度保存したpickle
      ファイルをロードすると、プログラムの実行中だったときのオブジェク トを即座に復元することができます。なお、MNIST データセットを読み込むload_mnist()
      関数の内部でも、(2 回目以降の読み込み時に)pickle を利 用しています。pickle の機能を利用することによって、MNIST のデータの準
      備を高速に行うことができます。</code></p><p><br></p><pre>$ cd work_dir\r\n$ mkdir dataset
      &amp;&amp; cd dataset <span style=\"color: rgb(163, 143, 132);\"># フォルダ名datasetにしておく(任意)</span>\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\">dataset配下にmnist.pyを貼り付け</span>\r\n$ python
      mnist.py\r\n<span style=\"color: rgb(163, 143, 132);\">ダウンロードされれば終了</span>\r\n\r\n(mnist.pyと同じディレクトリに<span
      style=\"color: rgb(243, 121, 52);\">\r\n<span style=\"font-size: 18px;\">mnist.pkl,
      t10k-images-idx3-ubyte.gz, t10k-labels-idx1-ubyte.gz, train-images-idx3-ubyte.gz,
      train-labels-idx1-ubyte.gz </span>\r\n</span>が作成されます)</pre><p><br></p><pre>$
      cd work_dir \r\n$ mkdir ch03 <span style=\"color: rgb(163, 143, 132);\"># ch03は3章で作成するファイルをまとめるフォルダ(名前は任意)</span>\r\n$
      ls\r\ndataset ch03 <span style=\"color: rgb(163, 143, 132);\"># dataset(miniset.pyなどが入ったフォルダ)
      ch03(3章で作成するファイルをまとめるフォルダ)</span>\r\n$ cd ch03 <span style=\"color: rgb(163,
      143, 132);\"># 以下、このフォルダにファイルを作成する</span></pre><p><br></p><h1><span style=\"font-size:
      48px;\">実践</span></h1><h2>訓練画像データ, 訓練教師データ, テスト画像データ, テスト教師データ を見てみる</h2><pre>(test.py)\r\nimport
      sys, os\r\nsys.path.append(os.pardir) <span style=\"color: rgb(163, 143, 132);\">#
      親ディレクトリからファイルをインポートするためのパス追加</span>\r\nfrom dataset.mnist import load_mnist
      <span style=\"color: rgb(163, 143, 132);\"># 親ディレクトリ直下の datasetフォルダのmnist.pyファイルからload_mnistメソッドをimport</span>\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># コードのxは <strong>画像データ</strong> 、tは <strong>教師ラベルデータ</strong> で、trainは学習用データ、testはモデルの性能を評価する際に使用するデータ\r\n#
      trainデータとtestデータには、データとしての本質的な違いはない。\r\n# X_train、y_train、X_test、y_test はすべてnumpy.ndarray型</span>\r\n(x_train,
      t_train), (x_test, t_test) = load_mnist(flatten=True, normalize=False)\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># それぞれのデータの形状を出力\r\n# ndarray.shapeは、</span><strong><span
      style=\"color: rgb(163, 143, 132);\">各次元ごとの要素数を示します。</span></strong>\r\nprint(x_train.shape)
      # (60000, 784) 訓練画像が6万枚用意されており、それぞれに28ピクセル*28ピクセル=784個の要素からなる平坦化された一次元配列が入った二次元配列になっている\r\nprint(t_train.shape)
      # (60000,) ラベル(0~9のどれか)が6万枚分答えとして一次元配列になっている\r\nprint(x_test.shape) # (10000,
      784) テスト画像が1万枚用意されており、それぞれに28ピクセル*28ピクセル=784個の要素からなる平坦化された一次元配列が入った二次元配列になっている\r\nprint(t_test.shape)
      # (10000,) ラベル(0~9のどれか)が1万枚分答えとして一次元配列になっている\r\n\r\n</pre><p><span style=\"color:
      rgb(243, 121, 52);\">＊ 親ディレクトリに置かれているスクリプトファイルをimportしたい場合</span></p><ul><li><span
      style=\"color: rgb(243, 121, 52);\">os.pardirは、親ディレクトリを表す文字列定数。</span></li><li><span
      style=\"color: rgb(243, 121, 52);\">sys.pathは、importするファイルを検索するパスを示す文字列のリストです。PYTHONPATH
      環境変数と、インストール先でのデフォルトパスで初期化されます。ですので、sys.pathにimportしたいファイルのディレクトリを含めれば、適当なディレクトリに置かれているスクリプトファイルをimport出来る。</span></li></ul><pre><span
      style=\"color: rgb(243, 121, 52);\">&gt;&gt;&gt; import sys,os\r\n&gt;&gt;&gt;
      sys.path.append(os.pardir)\r\n&gt;&gt;&gt; import tools</span></pre><p><br></p><h2>MNISTの手書き文字の画像を表示してみる</h2><pre>(mnist_show.py)\r\n#
      coding: utf-8\r\nimport sys, os\r\nsys.path.append(os.pardir) <span style=\"color:
      rgb(163, 143, 132);\"># 親ディレクトリのファイルをインポートするための設定</span>\r\nimport numpy as
      np\r\nfrom dataset.mnist import load_mnist\r\nfrom PIL import Image <span style=\"color:
      rgb(163, 143, 132);\"># MNIST 画像表示には PIL(Python Image Library)モジュールを使用</span>\r\n\r\n\r\ndef
      img_show(img):\r\npil_img = Image.fromarray(np.uint8(img)) <span style=\"color:
      rgb(163, 143, 132);\"># NumPy として格納された画像データを、PIL用のデータオブジェクトに変換する</span>\r\npil_img.show()\r\n\r\n(x_train,
      t_train), (x_test, t_test) = load_mnist(flatten=True, normalize=False)\r\n\r\nimg
      = x_train[0]\r\nlabel = t_train[0]\r\nprint(label)  # 5\r\n\r\nprint(img.shape)
       <span style=\"color: rgb(163, 143, 132);\"># (784,) flatten=True として読み込んだ画像imgは
      NumPy配列として1列(1次元)で格納されている</span>\r\nimg = img.reshape(28, 28)  <span style=\"color:
      rgb(163, 143, 132);\"># imgは一次元配列の入りのついた点の集まりなので、縦横28pxで元の画像サイズに変形(ちなみにimg.reshape(2,
      392)とかやるとビヨーンと横線みたいになる)</span>\r\nprint(img.shape)  <span style=\"color: rgb(163,
      143, 132);\"># (28, 28)</span>\r\n\r\nimg_show(img)</pre><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1557393696699-tmpr1b1jmp2.png\"
      style=\"width: 63px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><h2>ニューラルネットワークの推論処理</h2><pre>(neuralnet_mnist.py)\r\nimport
      sys, os\r\nsys.path.append(os.pardir)  <span style=\"color: rgb(163, 143, 132);\">#
      親ディレクトリのファイルをインポートするための設定</span>\r\nimport numpy as np\r\nimport pickle\r\nfrom
      dataset.mnist import load_mnist <span style=\"color: rgb(163, 143, 132);\">#
      親ディレクトリ直下の datasetフォルダのmnist.pyファイルからload_mnistメソッドをimport</span>\r\nfrom common.functions
      import sigmoid, softmax <span style=\"color: rgb(163, 143, 132);\">#</span>
      <span style=\"color: rgb(163, 143, 132);\">親ディレクトリ直下の</span><a href=\"https://dragonarrow.herokuapp.com/articles/156\"><span
      style=\"font-size: 18px;\">commonフォルダのfunctions.py</span></a><span style=\"color:
      rgb(163, 143, 132);\">から必要なメソッドをimport</span>\r\n\r\n\r\ndef get_data():\r\n(x_train,
      t_train), (x_test, t_test) = load_mnist(normalize=True, flatten=True, one_hot_label=False)\r\nreturn
      x_test, t_test\r\n\r\n\r\n<span style=\"color: rgb(163, 143, 132);\"># pickleファイルの
      sample_weight.pklに保存された学習済みの重みパラメータを読み込みます</span>\r\n<span style=\"color: rgb(163,
      143, 132);\"># このファイルには、重みとバイアスのパラメータがディクショナリ型の変数として保存されています</span>\r\n<span
      style=\"color: rgb(163, 143, 132);\"># 隠れ層が2つあり、ひとつ目の隠れ層か50 個、2つ目の層が100個のニューロンを持つものとします。この50と100という数字は、任意の値に設定できます</span>\r\ndef
      init_network():\r\nwith open(&quot;sample_weight.pkl&quot;, &#39;rb&#39;) as
      f:\r\nnetwork = pickle.load(f)\r\nreturn network\r\n\r\n<span style=\"color:
      rgb(163, 143, 132);\"># ニューラルネットワークアルゴリズムで入力層 -&gt; 隠れ層1 -&gt; 隠れ層2 -&gt; 隠れ層3
      -&gt; 出力層 まで算出\r\n# ニューロンは764個のピクセル(正規化されているので、それぞれの値が0~1) 出力は [0の確率, 1の確率,
      2の確率, ... ,9の確率]として分類される</span>\r\ndef predict(network, x):\r\nW1, W2, W3 =
      network[&#39;W1&#39;], network[&#39;W2&#39;], network[&#39;W3&#39;]\r\nb1, b2,
      b3 = network[&#39;b1&#39;], network[&#39;b2&#39;], network[&#39;b3&#39;]\r\n\r\na1
      = np.dot(x, W1) + b1\r\nz1 = sigmoid(a1)\r\na2 = np.dot(z1, W2) + b2\r\nz2 =
      sigmoid(a2)\r\na3 = np.dot(z2, W3) + b3\r\ny = softmax(a3) <span style=\"color:
      rgb(163, 143, 132);\"># 他クラス分類は、出力層の活性化関数はソフトマックス関数</span>\r\n\r\nreturn y\r\n\r\n\r\nx,
      t = get_data() <span style=\"color: rgb(163, 143, 132);\"># x:テストする画像データ t:
      テストする教師ラベルデータ</span>\r\nnetwork = init_network()\r\naccuracy_cnt = 0\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># テスト画像をループで渡し、全て予測していく</span>\r\nfor i
      in range(len(x)):\r\n  y = predict(network, x[i])\r\n  p = np.argmax(y) <span
      style=\"color: rgb(163, 143, 132);\"># 最も確率の高い要素の インデックス を取得(深層学習で返された配列のインデックスが手書き文字の数字でvalueが確率)\r\n#
      確率が最も高いと予測される数字と教師データが一致したら精度をメモ</span>\r\n  if p == t[i]:\r\n  accuracy_cnt
      += 1\r\n\r\n<span style=\"color: rgb(163, 143, 132);\"># 最後に 精度 (的中した回数 / 予測した回数)
      を出力</span>\r\nprint(&quot;Accuracy:&quot; + str(float(accuracy_cnt) / len(x)))\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># 出力結果 Accuracy:0.9352</span></pre><p><br></p><p><br></p><h2>ニューラルネットワークのバッチ化</h2><p>上記のneuralnet_mnist.pyでは、ループでMNIST画像を1ループにつき1個渡しおり、画像の個数分ループを実行している。</p><p>しかし、ループでデータを一個一個渡してニューラルネットワークで計算して確率を出していくより、複数の画像をまとめて渡して巨大な配列を一度に計算するほうが、速く計算が完了する。</p><p>このようにデータを束でまとめて渡して計算処理を行うやり方をバッチ処理といい、1
      枚あたりの処理時間を大幅に短縮できる。</p><p><br></p><pre>(neuralnet_mnist_batch.py)\r\nimport
      sys, os\r\nsys.path.append(os.pardir)  <span style=\"color: rgb(163, 143, 132);\">#
      親ディレクトリのファイルをインポートするための設定</span>\r\nimport numpy as np\r\nimport pickle\r\nfrom
      dataset.mnist import load_mnist\r\nfrom common.functions import sigmoid, softmax\r\n\r\n\r\ndef
      get_data():\r\n(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True,
      flatten=True, one_hot_label=False)\r\nreturn x_test, t_test\r\n\r\n\r\ndef init_network():\r\nwith
      open(&quot;sample_weight.pkl&quot;, &#39;rb&#39;) as f:\r\nnetwork = pickle.load(f)\r\nreturn
      network\r\n\r\n\r\ndef predict(network, x):\r\nw1, w2, w3 = network[&#39;W1&#39;],
      network[&#39;W2&#39;], network[&#39;W3&#39;]\r\nb1, b2, b3 = network[&#39;b1&#39;],
      network[&#39;b2&#39;], network[&#39;b3&#39;]\r\n\r\na1 = np.dot(x, w1) + b1\r\nz1
      = sigmoid(a1)\r\na2 = np.dot(z1, w2) + b2\r\nz2 = sigmoid(a2)\r\na3 = np.dot(z2,
      w3) + b3\r\ny = softmax(a3)\r\n\r\nreturn y\r\n\r\n<span style=\"color: rgb(163,
      143, 132);\"># バッチなし\r\n# x, t = get_data()\r\n# network = init_network()\r\n#
      accuracy_cnt = 0\r\n# for i in range(len(x)):\r\n#     y = predict(network,
      x[i])\r\n#     p = np.argmax(y)\r\n#     if p == t[i]:\r\n#         accuracy_cnt
      += 1\r\n# print(&quot;Accuracy:&quot; + str(float(accuracy_cnt) / len(x)))</span>\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># バッチあり 1枚あたりの処理時間を大幅に短縮できるという利点 (大きな配列を一度に計算するほうが、分割した小さい配列を大量に計算するよりも速く計算が完了する)</span>\r\nx,
      t = get_data()\r\nnetwork = init_network()\r\n\r\n<span style=\"color: rgb(44,
      130, 201);\">batch_size = 100</span> <span style=\"color: rgb(163, 143, 132);\">#
      バッチの数</span>\r\naccuracy_cnt = 0\r\n\r\n<span style=\"color: rgb(163, 143, 132);\">#
      一回のループで画像一枚一枚ではなく, batch_size(100個)をまとめて処理する</span>\r\n<span style=\"color:
      rgb(44, 130, 201);\">for i in range(0, len(x), batch_size):</span>\r\n<span
      style=\"color: rgb(44, 130, 201);\">  x_batch = x[i:i+batch_size]</span> <span
      style=\"color: rgb(163, 143, 132);\"># xのインデックスi番目 から (i+batch_size-1)番目までが取り出される
      i+batch_size-1が最大インデックスを超えても、最大までしか取りだされないので、範囲が大きくなってても綺麗に最後まで配列取得ができる</span>\r\n<span
      style=\"color: rgb(44, 130, 201);\">  y_batch = predict(network, x_batch)</span>
      <span style=\"color: rgb(163, 143, 132);\"># batch_size(100)個分のバッチ画像配列それぞれに0~9の確率が入った,
      二次元配列になっている</span>\r\n<span style=\"color: rgb(44, 130, 201);\">  p = np.argmax(y_batch,
      axis=1)</span> <span style=\"color: rgb(163, 143, 132);\"># 行列の各行で最大のインデックスを返す
      すなわち、各画像で確率が最も高い数字を返す 大きさbatch_sizeの一次元配列になる</span>\r\n<span style=\"color:
      rgb(163, 143, 132);\"># batch_size個の予測データと正解データを比べる p == t[i:i+batch_size] =&gt;
      array([False,..., True])みたいになり\r\n# np.sumにより、正解した数(False=0 と True=1の総和)がaccuracy_cntに足される</span>\r\n<span
      style=\"color: rgb(44, 130, 201);\">  accuracy_cnt += np.sum(p == t[i:i+batch_size])</span>\r\n\r\n<span
      style=\"color: rgb(44, 130, 201);\">print(&quot;Accuracy:&quot; + str(float(accuracy_cnt)
      / len(x)))</span>\r\n\r\n</pre><p><span style=\"color: rgb(44, 130, 201);\">axisはどの軸かを指定するための方法</span></p><p>二次元配列の時</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1558167500757-IMG_0824_Fotor.jpg\"
      style=\"width: 543px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>三次元配列の時</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1558167522983-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-05-18+17_Fotor.png\"
      style=\"width: 543px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>例:</p><p><code>&gt;&gt;&gt;
      import numpy as np</code></p><p><code>&gt;&gt;&gt; a = np.arange(6).reshape((3,
      2))</code></p><p><code>&gt;&gt;&gt; a</code></p><p><code>array([[0, 1],</code></p><p><code>&nbsp;
      &nbsp; &nbsp; &nbsp;[2, 3],</code></p><p><code>&nbsp; &nbsp; &nbsp; &nbsp;[4,
      5]])</code></p><p><code>&gt;&gt;&gt; print(a.sum(axis=0)) # 列ごと</code></p><p><code>[6
      9]</code></p><p><code>&gt;&gt;&gt; print(a.sum(axis=1)) # 行ごと</code></p><p><code>[1
      5 9]</code></p><p><br></p><p><br></p><p><code>&gt;&gt;&gt; a = np.arange(24).reshape((3,
      2, 4))</code></p><p><code><br></code></p><p><code>&gt;&gt;&gt; a</code></p><p><code>array([[[
      0, &nbsp;1, &nbsp;2, &nbsp;3],</code></p><p><code>&nbsp; &nbsp; &nbsp; &nbsp;
      [ 4, &nbsp;5, &nbsp;6, &nbsp;7]],</code></p><p><code><br></code></p><p><code>&nbsp;
      &nbsp; &nbsp; &nbsp;[[ 8, &nbsp;9, 10, 11],</code></p><p><code>&nbsp; &nbsp;
      &nbsp; &nbsp; [12, 13, 14, 15]],</code></p><p><code><br></code></p><p><code>&nbsp;
      &nbsp; &nbsp; &nbsp;[[16, 17, 18, 19],</code></p><p><code>&nbsp; &nbsp; &nbsp;
      &nbsp; [20, 21, 22, 23]]])</code></p><p><code>&gt;&gt;&gt; a.sum(axis=0).shape</code></p><p><code>(2,
      4)</code></p><p><code>&gt;&gt;&gt; a.sum(axis=1).shape</code></p><p><code>(3,
      4)</code></p><p><code>&gt;&gt;&gt; a.sum(axis=2).shape</code></p><p><code>(3,
      2)</code></p><p><code>&gt;&gt;&gt; a.sum(axis=0)</code></p><p><code>array([[24,
      27, 30, 33],</code></p><p><code>&nbsp; &nbsp; &nbsp; &nbsp;[36, 39, 42, 45]])</code></p><p><code>&gt;&gt;&gt;
      a.sum(axis=1)</code></p><p><code>array([[ 4, &nbsp;6, &nbsp;8, 10],</code></p><p><code>&nbsp;
      &nbsp; &nbsp; &nbsp;[20, 22, 24, 26],</code></p><p><code>&nbsp; &nbsp; &nbsp;
      &nbsp;[36, 38, 40, 42]])</code></p><p><code>&gt;&gt;&gt; a.sum(axis=2)</code></p><p><code>array([[
      6, 22],</code></p><p><code>&nbsp; &nbsp; &nbsp; &nbsp;[38, 54],</code></p><p><code>&nbsp;
      &nbsp; &nbsp; &nbsp;[70, 86]])</code></p><p><br></p><p><br></p><h1>三章まとめ</h1><p><span
      style=\"font-size: 24px;\">ニューラルネットワークの順方向の伝播(forward propagation)につ いて解説しました</span></p>"
    - '2019-05-09 06:52:22.536088'
    - '2019-06-08 08:44:59.484887'
  - - 151
    - EC2の仮想サーバーで yum がタイムアウトしてしまう
    - "<h1 style=\"text-align: center;\">EC2の仮想サーバーで yum がタイムアウトしてしまう</h1><p><br></p><pre><span
      style=\"font-size: 18px;\">[tatsuya@ip-10-0-0-149 ~]$ <span style=\"color: rgb(44,
      130, 201);\">yum install httpd -y</span>\r\n読み込んだプラグイン:extras_suggestions, langpacks,
      priorities, update-motd\r\nこのコマンドを実行するには root である必要があります。\r\n[tatsuya@ip-10-0-0-149
      ~]$ sudo yum install httpd -y\r\n[sudo] tatsuya のパスワード:\r\n読み込んだプラグイン:extras_suggestions,
      langpacks, priorities, update-motd\r\nCould not retrieve mirrorlist http://amazonlinux.ap-northeast-1.amazonaws.com/2/core/latest/x86_64/mirror.list
      error was\r\n12: Timeout on http://amazonlinux.ap-northeast-1.amazonaws.com/2/core/latest/x86_64/mirror.list:
      (28, &#39;Connection timed out after 5000 milliseconds&#39;)\r\nhttp://amazonlinux.ap-northeast-1.amazonaws.com/2/core/2.0/x86_64/6b3b97044ef1b82f2b9d1a39eb94eb0a201e1e70311d576e25d9b66195edcc42/repodata/repomd.xml?instance_id=i-0f3828953fadaf9cf&amp;region=ap-northeast-1:
      [Errno 12] Timeout on http://amazonlinux.ap-northeast-1.amazonaws.com/2/core/2.0/x86_64/6b3b97044ef1b82f2b9d1a39eb94eb0a201e1e70311d576e25d9b66195edcc42/repodata/repomd.xml?instance_id=i-0f3828953fadaf9cf&amp;region=ap-northeast-1:
      (28, &#39;Connection timed out after 5001 milliseconds&#39;)\r\n他のミラーを試します。\r\nhttp://amazonlinux.ap-northeast-1.amazonaws.com/2/core/2.0/x86_64/6b3b97044ef1b82f2b9d1a39eb94eb0a201e1e70311d576e25d9b66195edcc42/repodata/repomd.xml?instance_id=i-0f3828953fadaf9cf&amp;region=ap-northeast-1:
      [Errno 12] Timeout on http://amazonlinux.ap-northeast-1.amazonaws.com/2/core/2.0/x86_64/6b3b97044ef1b82f2b9d1a39eb94eb0a201e1e70311d576e25d9b66195edcc42/repodata/repomd.xml?instance_id=i-0f3828953fadaf9cf&amp;region=ap-northeast-1:
      (28, &#39;Connection timed out after 5000 milliseconds&#39;)\r\n他のミラーを試します。\r\n...</span></pre><p><br></p><p><span
      style=\"font-size: 30px;\">原因: EC2のセキュリティグループのアウトバウンド設定を何もしていなかった(ネットワークが外に出られない状態であった)</span></p><p><br></p><p><span
      style=\"font-size: 30px;\">解決策: <span style=\"font-size: 30px;\">EC2に紐付けたセキュリティグループのアウトバウンド設定にhttpとhttpsの外部接続を許可した。</span></span></p><p><span
      style=\"font-size: 30px;\"><span style=\"font-size: 30px;\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1557740997579-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-05-13+18.41.17.png\"
      style=\"width: 700px;\" class=\"fr-fic fr-dib fr-fil\"></span></span></p><p>もう一度...</p><p><br></p><pre>[tatsuya@ip-10-0-0-149
      ~]$ sudo yum install httpd -y\r\n[sudo] tatsuya のパスワード:\r\n読み込んだプラグイン:extras_suggestions,
      langpacks, priorities, update-motd\r\namzn2-core                            
                        | 2.4 kB     00:00     \r\namzn2extra-docker              
                               | 1.3 kB     00:00     \r\n(1/3): amzn2-core/2/x86_64/group_gz
                             | 2.4 kB   00:00     \r\n(2/3): amzn2-core/2/x86_64/updateinfo
                           | 103 kB   00:00     \r\n(3/3): amzn2-core/2/x86_64/primary_db
                           |  29 MB   00:00     \r\n依存性の解決をしています\r\n--&gt; トランザクションの確認を実行しています。\r\n---&gt;
      パッケージ httpd.x86_64 0:2.4.39-1.amzn2.0.1 を インストール\r\n--&gt; 依存性の処理をしています: httpd-tools
      = 2.4.39-1.amzn2.0.1 のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt; 依存性の処理をしています:
      httpd-filesystem = 2.4.39-1.amzn2.0.1 のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt;
      依存性の処理をしています: system-logos-httpd のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt;
      依存性の処理をしています: mod_http2 のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt; 依存性の処理をしています:
      httpd-filesystem のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt; 依存性の処理をしています:
      /etc/mime.types のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt; 依存性の処理をしています:
      libaprutil-1.so.0()(64bit) のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt;
      依存性の処理をしています: libapr-1.so.0()(64bit) のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt;
      トランザクションの確認を実行しています。\r\n---&gt; パッケージ apr.x86_64 0:1.6.3-5.amzn2.0.2 を インストール\r\n---&gt;
      パッケージ apr-util.x86_64 0:1.6.1-5.amzn2.0.2 を インストール\r\n--&gt; 依存性の処理をしています: apr-util-bdb(x86-64)
      = 1.6.1-5.amzn2.0.2 のパッケージ: apr-util-1.6.1-5.amzn2.0.2.x86_64\r\n---&gt; パッケージ
      generic-logos-httpd.noarch 0:18.0.0-4.amzn2 を インストール\r\n---&gt; パッケージ httpd-filesystem.noarch
      0:2.4.39-1.amzn2.0.1 を インストール\r\n---&gt; パッケージ httpd-tools.x86_64 0:2.4.39-1.amzn2.0.1
      を インストール\r\n---&gt; パッケージ mailcap.noarch 0:2.1.41-2.amzn2 を インストール\r\n---&gt;
      パッケージ mod_http2.x86_64 0:1.14.1-1.amzn2 を インストール\r\n--&gt; トランザクションの確認を実行しています。\r\n---&gt;
      パッケージ apr-util-bdb.x86_64 0:1.6.1-5.amzn2.0.2 を インストール\r\n--&gt; 依存性解決を終了しました。\r\n\r\n\r\n依存性を解決しました\r\n\r\n\r\n================================================================================\r\n Package
                      アーキテクチャー\r\n                                    バージョン      
            リポジトリー    容量\r\n================================================================================\r\nインストール中:\r\n httpd
                        x86_64     2.4.39-1.amzn2.0.1     amzn2-core     1.3 M\r\n依存性関連でのインストールをします:\r\n apr
                          x86_64     1.6.3-5.amzn2.0.2      amzn2-core     118 k\r\n apr-util
                     x86_64     1.6.1-5.amzn2.0.2      amzn2-core      99 k\r\n apr-util-bdb
                 x86_64     1.6.1-5.amzn2.0.2      amzn2-core      19 k\r\n generic-logos-httpd
          noarch     18.0.0-4.amzn2         amzn2-core      19 k\r\n httpd-filesystem
             noarch     2.4.39-1.amzn2.0.1     amzn2-core      23 k\r\n httpd-tools
                  x86_64     2.4.39-1.amzn2.0.1     amzn2-core      87 k\r\n mailcap
                      noarch     2.1.41-2.amzn2         amzn2-core      31 k\r\n mod_http2
                    x86_64     1.14.1-1.amzn2         amzn2-core     147 k\r\n\r\n\r\nトランザクションの要約\r\n================================================================================\r\nインストール
       1 パッケージ (+8 個の依存関係のパッケージ)\r\n\r\n\r\n総ダウンロード容量: 1.9 M\r\nインストール容量: 5.1 M\r\nDownloading
      packages:\r\nDelta RPMs disabled because /usr/bin/applydeltarpm not installed.\r\n(1/9):
      apr-1.6.3-5.amzn2.0.2.x86_64.rpm                    | 118 kB   00:00     \r\n(2/9):
      apr-util-bdb-1.6.1-5.amzn2.0.2.x86_64.rpm           |  19 kB   00:00     \r\n(3/9):
      apr-util-1.6.1-5.amzn2.0.2.x86_64.rpm               |  99 kB   00:00     \r\n(4/9):
      generic-logos-httpd-18.0.0-4.amzn2.noarch.rpm       |  19 kB   00:00     \r\n(5/9):
      httpd-filesystem-2.4.39-1.amzn2.0.1.noarch.rpm      |  23 kB   00:00     \r\n(6/9):
      httpd-2.4.39-1.amzn2.0.1.x86_64.rpm                 | 1.3 MB   00:00     \r\n(7/9):
      httpd-tools-2.4.39-1.amzn2.0.1.x86_64.rpm           |  87 kB   00:00     \r\n(8/9):
      mailcap-2.1.41-2.amzn2.noarch.rpm                   |  31 kB   00:00     \r\n(9/9):
      mod_http2-1.14.1-1.amzn2.x86_64.rpm                 | 147 kB   00:00     \r\n--------------------------------------------------------------------------------\r\n合計
                                                    6.5 MB/s | 1.9 MB  00:00     \r\nRunning
      transaction check\r\nRunning transaction test\r\nTransaction test succeeded\r\nRunning
      transaction\r\n  インストール中          : apr-1.6.3-5.amzn2.0.2.x86_64            
             1/9 \r\n  インストール中          : apr-util-bdb-1.6.1-5.amzn2.0.2.x86_64  
              2/9 \r\n  インストール中          : apr-util-1.6.1-5.amzn2.0.2.x86_64      
              3/9 \r\n  インストール中          : httpd-tools-2.4.39-1.amzn2.0.1.x86_64  
              4/9 \r\n  インストール中          : generic-logos-httpd-18.0.0-4.amzn2.noarch
            5/9 \r\n  インストール中          : mailcap-2.1.41-2.amzn2.noarch            
            6/9 \r\n  インストール中          : httpd-filesystem-2.4.39-1.amzn2.0.1.noarch
           7/9 \r\n  インストール中          : mod_http2-1.14.1-1.amzn2.x86_64          
            8/9 \r\n  インストール中          : httpd-2.4.39-1.amzn2.0.1.x86_64          
            9/9 \r\n  検証中                  : apr-util-1.6.1-5.amzn2.0.2.x86_64    
                1/9 \r\n  検証中                  : apr-util-bdb-1.6.1-5.amzn2.0.2.x86_64
                2/9 \r\n  検証中                  : httpd-tools-2.4.39-1.amzn2.0.1.x86_64
                3/9 \r\n  検証中                  : httpd-2.4.39-1.amzn2.0.1.x86_64  
                    4/9 \r\n  検証中                  : httpd-filesystem-2.4.39-1.amzn2.0.1.noarch
           5/9 \r\n  検証中                  : apr-1.6.3-5.amzn2.0.2.x86_64          
               6/9 \r\n  検証中                  : mod_http2-1.14.1-1.amzn2.x86_64  
                    7/9 \r\n  検証中                  : mailcap-2.1.41-2.amzn2.noarch
                        8/9 \r\n  検証中                  : generic-logos-httpd-18.0.0-4.amzn2.noarch
            9/9 \r\n\r\n\r\nインストール:\r\n  httpd.x86_64 0:2.4.39-1.amzn2.0.1        
                                          \r\n\r\n\r\n依存性関連をインストールしました:\r\n  apr.x86_64
      0:1.6.3-5.amzn2.0.2                                                \r\n  apr-util.x86_64
      0:1.6.1-5.amzn2.0.2                                           \r\n  apr-util-bdb.x86_64
      0:1.6.1-5.amzn2.0.2                                       \r\n  generic-logos-httpd.noarch
      0:18.0.0-4.amzn2                                   \r\n  httpd-filesystem.noarch
      0:2.4.39-1.amzn2.0.1                                  \r\n  httpd-tools.x86_64
      0:2.4.39-1.amzn2.0.1                                       \r\n  mailcap.noarch
      0:2.1.41-2.amzn2                                               \r\n  mod_http2.x86_64
      0:1.14.1-1.amzn2                                             \r\n\r\n\r\n完了しました!\r\n[tatsuya@ip-10-0-0-149
      ~]$</pre><p><br></p><p><span style=\"font-size: 48px;\">バッチリ!!<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60e.svg);\">&nbsp;&nbsp;</span><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60e.svg);\">&nbsp;</span>
      <span class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background:
      url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60e.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p>"
    - '2019-05-13 09:36:11.058148'
    - '2019-05-13 10:07:26.680994'
  - - 152
    - "[AWS] EC2+RDS開発環境設定　Nginx+Unicorn+Ruby2.6+Rails5.2+MySQL5.5"
    - "<h1 style=\"text-align: center;\">RDS開発環境設定</h1><p>初めにsshでEC2にログイン</p><pre> 
           __|  __|_  )\r\n       _|  (     /   Amazon Linux 2 AMI\r\n      ___|\\___|___|\r\n\r\n\r\n<a
      href=\"https://aws.amazon.com/amazon-linux-2/\">https://aws.amazon.com/amazon-linux-2/</a>\r\n10
      package(s) needed for security, out of 14 available\r\nRun &quot;sudo yum update&quot;
      to apply all updates.\r\n[tatsuya@ip-10-0-0-149 ~]$ </pre><p>作成したRDSに接続できるか確認</p><pre>$
      sudo yum install mysql\r\n$ sudo yum install mysql-devel #後でエラーが出たのでインストール\r\n$
      mysql -h [エンドポイント] -P 3306 -u [ユーザ名] -p [DB名]</pre><p><br></p><h2>Ruby,Railsのインストール</h2><h3>git,rbenvのインストール</h3><pre>[tatsuya@ip-10-0-0-149
      ~]$ sudo yum -y install git\r\n[tatsuya@ip-10-0-0-149 ~]$ git clone https://github.com/sstephenson/rbenv.git
      ~/.rbenv #rbenvインストール\r\n[tatsuya@ip-10-0-0-149 ~]$ git clone https://github.com/sstephenson/ruby-build.git
      ~/.rbenv/plugins/ruby-build #ruby-buildインストール\r\n<span style=\"color: rgb(44,
      130, 201);\">[tatsuya@ip-10-0-0-149 ~]$ sudo vi .bash_profile　#.bash_profileの編集\r\n\r\n=ファイルの編集画面=\r\n\r\nexport
      PATH\r\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot; &larr;　追加\r\neval &quot;$(rbenv
      init -)&quot; &larr;　追加\r\n\r\n=================</span>\r\n<span style=\"color:
      rgb(44, 130, 201);\">または</span>\r\n<span style=\"color: rgb(226, 80, 65);\">[tatsuya@ip-10-0-0-149
      ~]$ echo &#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39; &gt;&gt; ~/.bash_profile
      \r\n(#パスを通す)\r\n[tatsuya@ip-10-0-0-149 ~]$ echo &#39;eval &quot;$(rbenv init
      -)&quot;&#39; &gt;&gt; ~/.bash_profile\r\n[tatsuya@ip-10-0-0-149 ~]$ source
      .bash_profile  \r\n(#.bash_profileの読み込み)\r\n\r\n[tatsuya@ip-10-0-0-149 ~]$ source
      ~/.bash_profile #環境変数の反映</span>\r\n[tatsuya@ip-10-0-0-149 ~]$ rbenv rehash  \r\n(#rehashを行う)
      \r\n[tatsuya@ip-10-0-0-149 ~]$ rbenv -v #バージョン確認\r\nrbenv 1.1.0-2-g4f8925a</pre><p>rbenvとは、簡単にrubyのバージョンの切り替えを行うためのツールです。<br>まずはこれをgitからクローンしてきます。<br>git
      clone http://~~~~　の後に、** ~/.rbenv** とあるのは、<br>「クローンしてきたものはこのフォルダに入れてね」という意味合いとなり、<br>また、フォルダ名の前に「.」と付いているので、新しく隠しフォルダが生成されていることが分かります。</p><p>そしてsourceコマンドで.bash_profileを読み込んだ後、パスを通して(rbenvコマンドを使えるようにして)、ruby-build(rubyをインストールするためのrbenvプラグイン)をインストールしています。</p><p>また、最後のrehashはこれまたrbenv版のおまじないのようなものなので、この操作によってrubyやらgemでインストールしてきたファイルの実行環境が生成されています。</p><p>ここらへんは覚えるしかない
      &amp; 使用するツールによって操作が様々なので、<br>都度リファレンスなどを見ながらインプットしていきましょう。</p><p><br></p><h3>rubyのインストール</h3><pre>[tatsuya@ip-10-0-0-149
      ~]$ rbenv install --list (-lでも良い) # インストールできるバージョン一覧を確認する\r\n[tatsuya@ip-10-0-0-149
      ~]$ sudo yum install -y gcc\r\n[tatsuya@ip-10-0-0-149 ~]$ sudo yum install -y
      openssl-devel readline-devel zlib-devel\r\n[tatsuya@ip-10-0-0-149 ~]$ rbenv
      install 2.4.2\r\n[tatsuya@ip-10-0-0-149 ~]$ rbenv install 2.6.3\r\n[tatsuya@ip-10-0-0-149
      ~]$ rbenv global 2.6.3</pre><p><span style=\"color: rgb(163, 143, 132);\">プロジェクトで特定のバージョンを使いたいときは、
      <strong>local</strong> を使う。すると、カレントディレクトリの <em>.ruby-version</em> に使うバージョンが書き込まれる。</span></p><pre><span
      style=\"color: rgb(163, 143, 132);\">$ rbenv local 1.8.7</span></pre><p><span
      style=\"color: rgb(163, 143, 132);\">[tatsuya@ip-10-0-0-149 ~]$ rbenv versions
      # このコマンドでインストールしたバージョンを確認できる</span></p><p><span style=\"color: rgb(163, 143,
      132);\">&nbsp; 2.4.2</span></p><p><span style=\"color: rgb(163, 143, 132);\">*
      2.6.3 (set by /home/tatsuya/.rbenv/version)</span></p><h3><br></h3><h3><span
      style=\"font-size: 14px;\">おすすめ参考記事&nbsp;<a href=\"https://qiita.com/iwaseasahi/items/b28f8b91c4638e2c57fd\">https://qiita.com/iwaseasahi/items/b28f8b91c4638e2c57fd</a></span></h3>"
    - '2019-05-14 02:15:31.048711'
    - '2019-05-31 07:15:20.169601'
  - - 153
    - AWS EC2仮想サーバーに環境構築(Ruby, MySQL, node.js, git連携)
    - "<h1 style=\"text-align: center;\">EC2インスタンス内でrubyやgitその他の環境が動くよう設定する</h1><p><br></p><pre>[tatsuya@ip-10-0-0-238
      ~]$ sudo yum install \\<span style=\"color: rgb(163, 143, 132);\"> #yumのインストール</span>\r\ngit
      make gcc-c++ patch \\ <span style=\"color: rgb(163, 143, 132);\">#cとc++のコンパイラ、gitの差分をpatchファイルに変更</span>\r\nopenssl-devel
      \\ \r\nlibyaml-devel libffi-devel libicu-devel \\\r\nlibxml2 libxslt libxml2-devel
      libxslt-devel \\\r\nzlib-devel readline-devel \\\r\nmysql mysql-server mysql-devel
      \\\r\nImageMagick ImageMagick-devel \\\r\nepel-release</pre><h2><br></h2><h2>rbenv,
      ruby , ruby-buildのインストール</h2><pre>git clone https://github.com/sstephenson/rbenv.git
      ~/.rbenv\r\necho &#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39; &gt;&gt;
      ~/.bash_profile\r\necho &#39;eval &quot;$(rbenv init -)&quot;&#39; &gt;&gt;
      ~/.bash_profile\r\nvi .bash_profile\r\ngit clone https://github.com/sstephenson/ruby-build.git
      ~/.rbenv/plugins/ruby-build\r\nrbenv rehash\r\nrbenv install --list\r\nrbenv
      install 2.6.3\r\nrbenv install 2.4.2\r\nrbenv global 2.6.3\r\nruby -v\r\nrbenv
      rehash</pre><h2>お次はNode.jsのインストール)</h2><p><a href=\"https://aws.amazon.com/jp/premiumsupport/knowledge-center/ec2-enable-epel/\"></a><span
      style=\"font-size: 18px;\">ドキュメント <a href=\"\">CentOS、RHEL、または Amazon Linux
      が実行されている Amazon EC2 インスタンスに対して EPEL リポジトリを有効にする方法を教えてください。</a></span></p><p>標準リポジトリで利用できないパッケージのインストールを可能にする
      <a href=\"https://fedoraproject.org/wiki/EPEL\" target=\"_blank\">Extra Packages
      for Enterprise Linux (EPEL)</a> リポジトリへのアクセスを有効にする</p><p><br></p><p><code>$ sudo
      curl -sL https://rpm.nodesource.com/setup_11.x | bash -</code></p><p><code>問題なく上記コマンドができるようなら以下の6つのコマンドは無視</code></p><pre><code>$
      sudo yum install -y nodejs</code>\r\n<code>$ sudo yum install -y epel-release</code>\r\n\r\nAmazon
      Linux 2(AL2) では、Amazon Linux Extras を利用すると EPEL レポジトリを簡単に利用できます。\r\n<code>$
      sudo amazon-linux-extras install epel</code>\r\n\r\nYum-config-manager コマンドを用いて
      Amazon Linux 上の EPEL リポジトリを有効にする\r\n<code>$ sudo yum-config-manager --enable
      epel</code>\r\n\r\nEPEL リポジトリが有効になっていることを確認するには、以下のコマンドを実行します。\r\nepel/x86_64
       や epel-debuginfo/x86_64 が表示されていればOK\r\n\r\n<code>$ sudo yum repolist</code>\r\n<code>$
      sudo vim /etc/yum.repos.d/epel.repo</code>\r\nenabled=0 を見つけて enabled=1 に変更します。これは、epel.repo
      ファイルの $basearch セクションにあります。\r\n変更を保存し、vim エディターを終了します</pre><p>npm, node.js の
      インストール</p><p><code>$ sudo yum install nodejs npm --enablerepo=epel</code></p><h2><br>gitとの連携、アプリのクローン</h2><pre>$
      vi .gitconfig\r\n\r\n-----------------------------\r\n[user]\r\n  name = your_name
      (#gitに登録した自分の名前)\r\n  email = hoge@hoge.com (#git登録時の自分のメアド)\r\n\r\n[alias]
      (#これはお好きに)\r\n  a = add\r\n  b = branch\r\n  ch = checkout\r\n  st = status\r\n\r\n[color]
      (#色付け)\r\n  ui = true\r\n\r\n# githubの場合\r\n[url &quot;github:&quot;] (#pull、pushのための設定)\r\n
      \   InsteadOf = https://github.com/\r\n    InsteadOf = git@github.com:\r\n#
      bitbucketの場合\r\n[url &quot;bitbucket:&quot;]\r\n    InsteadOf = https://ユーザ名@bitbucket.org/\r\n
      \   InsteadOf = git@bitbucket.org:\r\n-----------------------------</pre><p>完了したらファイルを保存し、<br>アプリを配置するディレクトリを作成していきます。</p><pre>sudo
      chown tatsuya var\r\ncd var\r\nsudo mkdir www\r\nsudo chown tatsuya www\r\ncd
      www\r\nsudo mkdir rails\r\nsudo chown tatsuya rails\r\nsudo yum update</pre><p>さぁ、下準備が整ったら、いよいよgitとの接続です。</p><p><br></p><p>ローカル
      からEC2 にsshするためにローカルでキーペアを作った時みたいに、今度は</p><p>EC2 からgithub にsshするためにEC2でキーペアを作ります。</p><pre>[tatsuya|~]$
      chmod 700 .ssh\r\n[tatsuya|.ssh]$ cd .ssh\r\n[tatsuya|.ssh]$ ssh-keygen -t rsa\r\n-----------------------------\r\nEnter
      file in which to save the key ():aws_git_rsa \r\n(#ここでファイルの名前を記述して、エンター)\r\nEnter
      passphrase (empty for no passphrase): \r\n(#何もせずそのままエンター)\r\nEnter same passphrase
      again: \r\n(#何もせずそのままエンター)\r\n-----------------------------\r\n[tatsuya|.ssh]$
      ls\r\n(#「aws_git_rsa」と「aws_git_rsa.pub」が生成されたことを確認)\r\n[tatsuya|.ssh]$ vi config\r\n-----------------------------\r\n#
      githubの場合以下を追記\r\nHost github\r\n  Hostname github.com\r\n  User git\r\n  IdentityFile
      ~/.ssh/aws_git_rsa (#秘密鍵の設定)\r\n# bitbucketの場合以下を追記\r\nHost bitbucket\r\n  Hostname
      bitbucket.org\r\n  User git\r\n  IdentityFIle ~/.ssh/aws_git_rsa (#秘密鍵の設定)\r\n-----------------------------\r\n[tatsuya|.ssh]$
      cat aws_git_rsa.pub\r\n-----------------------------\r\nxxxxxxxxxxxxxxxxxxx\r\n-----------------------------</pre><p>公開鍵(aws_git_rsa.pub)をコピーしてgithubのssh設定に中身を登録する</p><p><a
      href=\"https://github.com/settings/keys\"></a><a href=\"https://github.com/settings/keys\">https://github.com/settings/keys</a></p><p><br></p><p>最後に、EC2セキュリティグループのアウトバウンド設定でsshを許可する</p><pre>$
      ssh -T github</pre><p>を実行してみてください。</p><ul><li>githubの場合</li></ul><pre>Hi NaokiMochizuki!
      You&#39;ve succwwwessfully authenticated, but GitHub does not provide shell
      access.</pre><ul><li>bitbucketの場合</li></ul><pre>logged in as tatsuya.</pre><p><br></p><p>登録が済んだら、いよいよクローン</p><pre>[naoki|.ssh]$
      cd /var/www/rails\r\n[naoki|rails]$ git clone git@github.com:~~~~~~~~~~~~</pre><p>git
      cloneの後に続くURLは、githubの下記より取得してください。</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1558673915146-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-05-24+13.54.59.png\"
      style=\"width: 700px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>アプリ名が記載されたフォルダが存在すれば、見事クローン成功です。</p><h3><a
      href=\"https://qiita.com/naoki_mochizuki/items/814e0979217b1a25aa3e#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AEsecret_key_base%E3%81%AE%E8%A8%AD%E5%AE%9A\"></a></h3><p><br></p><header><h1>＊
      Amazon Linuxで古いNode.jsがインストールされる時の解決方法</h1></header><p><a href=\"http://d.hatena.ne.jp/keyword/Amazon\">Amazon</a>\r\n<a
      href=\"http://d.hatena.ne.jp/keyword/Linux\">Linux</a>で何度Node.js v11をインストールしようとしてもv6が入ってしまう現象が起こったのでその解決策をメモ。</p><h1>現象</h1><p>v11用<a
      href=\"http://d.hatena.ne.jp/keyword/RPM\">RPM</a>のセットアップをする。</p><pre data-lang=\"\"
      data-unlink=\"\">$ curl -sL https://rpm.nodesource.com/setup_11.x | sudo bash
      -</pre><p>その後、<a href=\"http://d.hatena.ne.jp/keyword/yum\">yum</a> installしても
      <code>2:6.14.4-1nodesource</code> がインストールされる。</p><pre data-lang=\"\" data-unlink=\"\">$
      sudo yum install -y nodejs\r\n...\r\nInstalled:\r\n  nodejs.x86_64 2:6.14.4-1nodesource</pre><h1>解決策</h1><p>以下のコマンドで<a
      href=\"http://d.hatena.ne.jp/keyword/RPM\">RPM</a>のキャッシュを消す。</p><pre data-lang=\"\"
      data-unlink=\"\">$ sudo yum remove -y nodesource-release* nodejs\r\n$ yum clean
      all\r\n$ sudo rm -rf /var/cache/yum/*\r\n$ sudo rm /etc/yum.repos.d/nodesource-el.repo</pre><p>その後、再度RPMセットアップコマンドを流してyum
      installすればよい。</p><pre data-lang=\"\" data-unlink=\"\">$ curl -sL https://rpm.nodesource.com/setup_11.x
      | sudo bash -\r\n...\r\n$ sudo yum install -y nodejs\r\n...\r\nInstalled:\r\n\r\n$
      node -v\r\nv11.15.0</pre>"
    - '2019-05-16 04:20:26.263562'
    - '2019-05-24 05:01:42.00465'
  - - 154
    - EC2 sshが権限ミスで突然死する
    - '<h2>Amazon EC2で「ssh_exchange_identification: Connection closed by remote host」エラーでインスタンスに接続出来ない。</h2><p><br></p><p>Amazon
      EC2でそれまではインスタンスに接続出来ていたのに、作業をしていると急に以下のエラーでSSHでインスタンスに接続出来なくなる現象が起きました。</p><p><br>ssh_exchange_identification:
      Connection closed by remote host</p><p>ネットを調べると/etc/hosts.allowの設定や/etc/ssh/sshd_configのMaxStartupsのパラメタに大きな値が設定されていない事が原因等の情報は載っていましたが、それでも解決せず・・・。</p><p
      data-empty="true"><br></p><p>サーバーで原因を調べていたところ、何と/varディレクトリのパーミッションが問題でssh接続出来ない事が分かりました！</p><p
      data-empty="true"><br></p><p>デフォルトでは以下のパーミション設定になっているのを「chmod -R 777 /var」などとやってしまい、パーミションに変更するとsshで接続出来なくなるようです(全ての人がsshできる設定にするともう接続不可になってしまう)。気を付けないといけませんね。</p><p><br></p><p>筆者は一度EC2インスタンスを作り直すハメになりました。</p><p
      data-empty="true"><br></p><pre>drwxr-xr-x 20 root root 4096 Aug 2 04:55 var</pre>'
    - '2019-05-16 07:19:01.982539'
    - '2019-05-16 07:23:01.597606'
  - - 155
    - EC2サーバーからGitHubにsshアクセスできない
    - "<h1 style=\"text-align: center;\">EC2サーバーからGitHubにsshアクセスできない</h1><p><br></p><p>仮想サーバーのフォルダやssh設定ファイル状況</p><pre>[tatsuya@ip-10-0-0-238
      .ssh]$ ls\r\nGitHub  authorized_keys  config  known_hosts\r\n[tatsuya@ip-10-0-0-238
      .ssh]$ cd GitHub\r\n[tatsuya@ip-10-0-0-238 GitHub]$ ls\r\naws_git_rsa  aws_git_rsa.pub\r\n[tatsuya@ip-10-0-0-238
      GitHub]$ cd ..\r\n[tatsuya@ip-10-0-0-238 .ssh]$ cat config\r\nHost github\r\n 
      Hostname <a href=\"//github.com\">github.com</a>\r\n  User git\r\n  Port 22\r\n 
      IdentityFile ~/.ssh/GitHub/aws_git_rsa\r\n[tatsuya@ip-10-0-0-238 .ssh]$ </pre><p>sshでGitHubに接続する</p><pre>[tatsuya@ip-10-0-0-238
      .ssh]$ ssh -T github\r\nssh: connect to host github.com port 22: Connection
      timed out</pre><p><br></p><p><span style=\"font-size: 60px;\">ファっ？！<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f632.svg);\">&nbsp;</span></span></p><p>結構手こずったものの、原因は単純にEC2セキュリティグループのアウトバウンド設定でした（ーー；）</p><p>以下の画像のようにSSH接続の許可を出すと、無事接続できました。なお、ssh接続は今は任意の場所にしていますが、固定IPのルーターがある会社や組織などでは基本IPを指定して、他の場所からは接続できないようにするのが定石です。</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1557995540070-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-05-16+17.30.02.png\"
      style=\"width: 700px;\" class=\"fr-fic fr-dib fr-fil\"></p><pre>[tatsuya@ip-10-0-0-238
      .ssh]$ ssh github\r\nWarning: Permanently added the RSA host key for IP address
      to the list of known hosts.\r\nPTY allocation request failed on channel 0\r\nHi
      NakajiTatsuya! You&#39;ve successfully authenticated, but GitHub does not provide
      shell access.\r\nConnection to github.com closed.\r\n\r\n</pre><p><span style=\"font-size:
      30px;\">つながりました、完璧!!</span></p><p><br></p><p><br></p><p><br></p>"
    - '2019-05-16 08:24:51.502644'
    - '2019-05-16 08:38:50.59554'
  - - 156
    - ゼロから作る Deep Learning』で使用する関数ファイル
    - "<h1 style=\"text-align: center;\">深層学習の活性化関数</h1><p><br></p><p><br></p><p><span
      style=\"font-size: 18px;\">書籍ではch01,ch02,ch03...フォルダと同じ階層にcommonフォルダを作成し、そのフォルダにfunctions.pyとして置いてある</span></p><p><span
      style=\"font-size: 18px;\"><a href=\"https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/functions.py\"></a>書籍のgithub<a
      href=\"https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/functions.py\">https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/functions.py</a></span></p><p><span
      style=\"font-size: 18px;\">各関数が必要な時はimportするだけで利用できるようにする。</span></p><p><br></p><pre><span
      style=\"font-size: 24px;\"># coding: utf-8\r\nimport numpy as np\r\n\r\n\r\ndef
      identity_function(x):\r\n  return x\r\n\r\n\r\ndef step_function(x):\r\n  return
      np.array(x &gt; 0, dtype=np.int)\r\n\r\n\r\ndef sigmoid(x):\r\n  return 1 /
      (1 + np.exp(-x))    \r\n\r\n\r\ndef sigmoid_grad(x):\r\n  return (1.0 - sigmoid(x))
      * sigmoid(x)\r\n\r\n\r\ndef relu(x):\r\n  return np.maximum(0, x)\r\n\r\n\r\ndef
      relu_grad(x):\r\n  grad = np.zeros(x)\r\n  grad[x&gt;=0] = 1\r\n  return grad\r\n\r\n\r\ndef
      softmax(x):\r\n  if x.ndim == 2:\r\n    x = x.T\r\n    x = x - np.max(x, axis=0)\r\n
      \   y = np.exp(x) / np.sum(np.exp(x), axis=0)\r\n    return y.T\r\n\r\n  x =
      x - np.max(x) # オーバーフロー対策(値が大きすぎて計算不可になるのを防ぐ)\r\n  return np.exp(x) / np.sum(np.exp(x))\r\n\r\n\r\ndef
      mean_squared_error(y, t):\r\n  return 0.5 * np.sum((y-t)**2)\r\n\r\n\r\ndef
      cross_entropy_error(y, t):\r\n  if y.ndim == 1:\r\n    t = t.reshape(1, t.size)\r\n
      \   y = y.reshape(1, y.size)\r\n\r\n  # 教師データがone-hot-vectorの場合、正解ラベルのインデックスに変換\r\n 
      if t.size == y.size:\r\n    t = t.argmax(axis=1)\r\n\r\n  batch_size = y.shape[0]\r\n
      \ return -np.sum(np.log(y[np.arange(batch_size), t] + 1e-7)) / batch_size\r\n\r\n\r\ndef
      softmax_loss(X, t):\r\n  y = softmax(X)\r\n  return cross_entropy_error(y, t)</span></pre>"
    - '2019-05-17 10:16:18.151877'
    - '2019-06-08 08:45:16.256342'
  - - 157
    - EC2仮想サーバーにpostgresqlをインストールする手順
    - "<h1 style=\"text-align: center;\">postgresqlのサーバはyumでインストールする</h1><p>どうやら <code>amazon-linux-extras</code>
      コマンドでは <code>psql</code> コマンドがインストールされるだけのようです。</p><p>なので、yumで入れましょう</p><p><br></p><p><span
      style=\"font-size: 30px;\">前提: EC2仮想サーバーにsshできる状態、ec2内にユーザーを作成済み(筆者の場合tatsuya)</span></p><p>　</p><h3>手順1.
      インストール</h3><p>と言うことで、postgresのサーバは普通に <code>yum install</code> でインストールしましょう。</p><pre>[tatsuya@ip-10-0-0-238
      ~]$<code>sudo</code> <code>yum </code><code>install</code> <code>-y postgresql
      postgresql-server postgresql-devel postgresql-contrib postgresql-docs</code></pre><p>結果(一部)</p><pre><code>Loaded
      plugins: extras_suggestions, langpacks, priorities, update-motd\r\namzn2-core
      \                                                                                                                                                                          \r\n\r\n〜〜中略〜〜\r\n\r\nComplete!\r\n</code></pre><p>確認</p><p><code>$
      psql --version</code></p><p><code>psql (PostgreSQL) 9.2.4</code></p><p>　</p><h3>手順2.
      初期設定</h3><p>次に初期設定を行います。以下のコマンドでできます。</p><p><code>## 初期化(PostgreSQLインストール後には必ず実施)</code></p><pre>[tatsuya@ip-10-0-0-238
      ~]$ <code>sudo </code><code>/sbin/service </code><code>postgresql initdb</code></pre><p><br></p><h3>サービスの起動・停止・再起動</h3><pre><code>##
      起動・停止・再起動</code></pre><pre>[tatsuya@ip-10-0-0-238 ~]$ <code>sudo </code><code>/sbin/service </code><code>postgresql
      start</code>\r\n<code>Starting postgresql service:                               </code><code>[
       OK  ]</code>\r\n[tatsuya@ip-10-0-0-238 ~]$<code>$ </code><code>sudo </code><code>/sbin/service </code><code>postgresql
      stop</code>\r\n<code>Stopping postgresql service:                          
          [  OK  ]</code>\r\n\r\n[tatsuya@ip-10-0-0-238 ~]$<code>sudo </code><code>/sbin/service </code><code>postgresql
      restart</code>\r\n<code>Stopping postgresql service:                        
            [  OK  ]</code>\r\n<code>Starting postgresql service: </code></pre><p>　</p><h3>サービスの自動起動化設定</h3><p>必要に応じて以下の自動起動設定を行なってください。</p><pre><code>$ </code><code>sudo
      </code><code>/sbin/chkconfig </code><code>--list | </code><code>grep </code><code>postgresql
      </code>\r\n<code><span style=\"color: rgb(163, 143, 132);\">postgresql      0:off
      1:off 2:off 3:off 4:off 5:off 6:off</span></code>\r\n<code>$ </code><code>sudo
      </code><code>/sbin/chkconfig </code><code>postgresql on</code>\r\n<code>$ </code><code>sudo
      </code><code>/sbin/chkconfig </code><code>--list | </code><code>grep </code><code>postgresql </code><code>postgresql</code>\r\n<code><span
      style=\"color: rgb(163, 143, 132);\">0:off 1:off 2:on  3:on  4:on  5:on  6:off</span></code></pre><p>　</p><h3>手順4.
      接続(ユーザー:postgres)</h3><p>ec2-userにてPostgreSQL用ユーザーpostgresのパスワードを変更します。</p><pre>[tatsuya@ip-10-0-0-238
      ~]$ <code>sudo </code><code>passwd </code><code>postgres</code>\r\n<code>ユーザー
      postgres のパスワードを変更。</code>\r\n<code>新しいパスワード:(**************)</code>\r\n<code>新しいパスワードを再入力してください:(**************)</code>\r\n<code>passwd</code><code>:
      全ての認証トークンが正しく更新できました。</code></pre><p><br></p><p>ユーザが変更出来ることを確認してみます。</p><pre>[tatsuya@ip-10-0-0-238
      ~]$<code> </code><code>su </code><code>- postgres</code>\r\n<code>パスワード:</code>\r\n<code>-</code><code>bash</code><code>-4.1$ </code><code>exit</code>\r\n<code>-</code><code>bash</code><code>-4.1</code></pre><p>次にpsqlコマンドで接続します。</p><p>psql
      -U postgres -h localhost</p><p>以下のような結果が得られればOKです。</p><pre><code>psql (9.6.8)\r\nType
      &quot;help&quot; for help.\r\n\r\npostgres=#</code></pre><p><br></p><h3>PG設定ファイルの編集</h3><p>設定ファイルpostgresql.confを編集。listen_addressは行先頭のコメントを除去し内容を『*』に変更</p><pre>$ <code>su
      </code><code>- postgres</code>\r\n<p><code>$ </code><code>vi </code><code>/var/lib/pgsql/data/postgresql</code><code>.conf</code></p><p><code>-----</code></p><p><code>...</code></p><p><code>#------------------------------------------------------------------------------</code></p><p><code>#
      CONNECTIONS AND AUTHENTICATION</code></p><p><code>#------------------------------------------------------------------------------</code></p>\r\n<p><code>#
      - Connection Settings -</code></p>\r\n<p><code><span style=\"color: rgb(243,
      121, 52);\">listen_addresses = </span></code><code><span style=\"color: rgb(243,
      121, 52);\">&#39;*&#39;</span></code>                  <code># what IP address(es)
      to listen on;</code></p>\r\n<p><code>                                        </code><code>#
      comma-separated list of addresses;</code></p>\r\n\r\n<p><code>             
                                </code><code># defaults to &#39;localhost&#39;; use
      &#39;*&#39; for all</code></p><code><code><span style=\"color: rgb(243, 121,
      52);\">port = 5432</span>                             </code><code># (change
      requires restart)</code></code></pre><p>次いでpg_hba.confの編集。ここは以下の様に最低限の設定でひとまず進めます。</p><pre><code>$ </code><code>vi
      </code><code>/var/lib/pgsql/data/pg_hba</code><code>.conf</code>\r\n\r\n# local
      \  all             all                                    peer\r\n<span style=\"color:
      rgb(163, 143, 132);\"># 以下に変更(peer認証を取り除く)</span>\r\nlocal   all             all
      \                                   md5\r\n\r\n# host    all             all
      \            127.0.0.1/32            ident\r\n<span style=\"color: rgb(163,
      143, 132);\"># 以下に変更(localhostからの時passwordを求めない)</span>\r\nhost    all             all
      \            127.0.0.1/32            trust</pre><p><code>trust でローカル環境なら　psql
      -U postgres -h localhost でパスワードなしでもアクセスできるようになる</code></p><ul><li>Ident ： DB
      の所有者がシェルを実行している OS のユーザ名と一致するかで認証</li><li>MD5 ： PW 認証 (MD5-hashed)</li><li>Trust
      ： 認証せず、DB への接続許可 (PW スルー)</li></ul><h2>DB接続用ユーザーの作成</h2><p>postgresユーザとは別に、今回の動作確認用のDB接続ユーザーを作成します。まずは、実行ユーザをpostgresにチェンジ。</p><pre><code>$ </code><code>su
      </code><code>- postgres</code>\r\n<code>パスワード: (***********)</code>\r\n<code>-</code><code>bash</code><code>-4.1$</code></pre><table
      style=\"margin-right: calc(75%); width: 25%;\"><tbody><tr><td style=\"width:
      63.9535%;\">ユーザー名<br></td><td style=\"width: 35.6589%;\">tatsuya<br></td></tr><tr><td
      style=\"width: 63.9535%;\">パスワード<br></td><td style=\"width: 35.6589%;\">cmtestpass<br></td></tr><tr><td
      style=\"width: 63.9535%;\">データベース(テスト環境)<br></td><td style=\"width: 35.6589%;\">db_test<br></td></tr><tr><td
      style=\"width: 63.9535%;\">データベース(開発環境)<br></td><td style=\"width: 35.6589%;\">db_development<br></td></tr><tr><td
      style=\"width: 63.9535%;\">データベース(本番環境)<br></td><td style=\"width: 35.6589%;\">db_production<br></td></tr></tbody></table><p><span
      style=\"color: rgb(243, 121, 52);\">ユーザー名はec2-user以外の登録したユーザを作成する。理由はEC2のユーザー名と、<span
      style=\"color: rgb(243, 121, 52);\">これから作成する</span>postgresqlサーバー内のユーザー名を合わせることで、勝手にユーザーを識別してくれる</span></p><pre><span
      style=\"color: rgb(243, 121, 52);\">[tatsuya@ip-10-0-0-238 ~]$ psql -l -U tatsuya</span></pre><p><span
      style=\"color: rgb(243, 121, 52);\">-Uを指定しなくてもpsql -lだけでユーザー名tatsuyaとして認識してくれてちょっと楽</span></p><p><span
      style=\"color: rgb(243, 121, 52);\">-Uオプション指定の手間なんて気にしないという人はcmtestuserなり好きなユーザー名を作成してください</span></p><p><br></p><h2>DB,
      role作成(やり方2通り書くがどちらでも良い)</h2><h3><span style=\"color: rgb(97, 189, 109);\">方法1.
      CLIで作成</span></h3><p><span style=\"color: rgb(97, 189, 109);\">今回作業用の接続ユーザー及びパスワードの設定は上記内容とします。まずはDB接続ユーザー作成/パスワード設定</span></p><pre>-bash-4.1$
      createuser -AdPE tatsuya\r\nEnter password for\r\nnew role: (作成ユーザー名に対応するパスワードを設定)\r\nEnter
      it again: (上記内容を再入力)\r\n-bash-4.1$</pre><p><span style=\"color: rgb(97, 189,
      109);\">ユーザーが利用するDBの作成(パスワードは上記作成ユーザのパスワードを入力)</span></p><pre>$ createdb -U
      tatsuya -W db_test\r\n$ createdb -U tatsuya -W db_production\r\n$ createdb -U
      tatsuya -W db_development\r\nPassword: (**********)\r\n-bash-4.1$ /usr/bin/pg_ctl
      restart -D /var/lib/pgsql/data -o &quot;-p 5432&quot; -w -t 300 # または\r\n[tatsuya@ip-10-0-0-238
      ~]$ sudo /sbin/service postgresql restart</pre><p><span style=\"color: rgb(97,
      189, 109);\">以上でDBに関する接続ユーザー情報の設定は完了。</span></p><p><br></p><h3><span style=\"color:
      rgb(26, 188, 156);\">方法2. SQLで作成</span></h3><pre>$ su - postgres\r\nパスワード: (***********)\r\n-bash-4.1$
      psql\r\npsql (9.2.24)\r\nType &quot;help&quot; for help.\r\n\r\n\r\npostgres=#
      CREATE ROLE ユーザ名 LOGIN CREATEDB PASSWORD &#39;ここにパスワード&#39;; # ユーザ名をtatsuya,パスワードにはpgサーバーにユーザー名でログインするときのパスワードを指定\r\npostgres=#
      CREATE DATABASE データベース名 OWNER ユーザ名; # db_test, db_development, db_productionを作成</pre><p><span
      style=\"color: rgb(26, 188, 156);\">ちなみにユーザー(ROLE)のパスワードを変更したい、忘れたので上書きしたい時とか以下でできる</span></p><pre>postgres=#　ALTER
      ROLE postgres with password &#39;postgres&#39;;</pre><p><span style=\"color:
      rgb(26, 188, 156);\">上記サンプルでは「postgres」という文字列のパスワードを設定しています</span></p><p><br></p><h2>接続確認(Local:CUI)</h2><pre><code>$ </code><code>su
      </code><code>- tatsuya</code>\r\n<code>パスワード:</code></pre><pre>[tatsuya@ip-10-0-0-238
      ~]$ psql -l\r\nパスワード: \r\n                                                データベース一覧\r\n 
              名前           |  所有者  | エンコーディング |  照合順序   | Ctype(変演算子) |      アクセス権
            \r\n-------------------------+----------+------------------+-------------+----------\r\n---------+-----------------------\r\n db_test
      | tatsuya  | UTF8             | en_US.UTF-8 | en_US.UTF-8       | \r\n db_production
       | tatsuya  | UTF8             | en_US.UTF-8 | en_US.UTF-8       | \r\n db_development
             | tatsuya  | UTF8             | en_US.UTF-8 | en_US.UTF-8       | \r\n postgres
                     | postgres | UTF8             | en_US.UTF-8 | en_US.UTF-8    
        | \r\n template0               | postgres | UTF8             | en_US.UTF-8
      | en_US.UTF-8       | =c/postgres          +\r\n                         |  
             |                  |             |          \r\n         | postgres=CTc/postgres\r\n template1
                    | postgres | UTF8             | en_US.UTF-8 | en_US.UTF-8    
        | =c/postgres          +\r\n                         |          |        
               |             |          \r\n         | postgres=CTc/postgres\r\n(6
      行)\r\n\r\n</pre><p><br></p><p><br></p><p><br></p><ul><li><strong><a href=\"http://www.pgadmin.org/\">pgAdmin:
      PostgreSQL administration and management tools</a>で確認してみると良い</strong></li></ul><p><br></p><p><code><code><a
      href=\"https://dev.classmethod.jp/cloud/aws/install-postgresql-on-aws-ec2/\"></a>参考記事
      <a href=\"https://dev.classmethod.jp/cloud/aws/install-postgresql-on-aws-ec2/\">https://dev.classmethod.jp/cloud/aws/install-postgresql-on-aws-ec2/</a></code></code></p><p><a
      href=\"https://www.setouchino.cloud/blogs/95\"></a><a href=\"https://www.setouchino.cloud/blogs/95\">https://www.setouchino.cloud/blogs/95</a></p><p><a
      href=\"http://cocodrips.hateblo.jp/entry/2017/09/04/213323\"></a><a href=\"http://cocodrips.hateblo.jp/entry/2017/09/04/213323\">http://cocodrips.hateblo.jp/entry/2017/09/04/213323</a></p><p><br></p><p><br></p><p><br></p><p><br></p><p>アンインストール</p><p>sudo
      yum -y remove postgresql*</p><p>sudo rm -rf /var/lib/pgsql*</p><p>sudo rm -rf
      /var/lib/postgresql*</p>"
    - '2019-05-20 04:12:01.201069'
    - '2019-06-11 11:15:47.472281'
  - - 158
    - EC2に入れたMySQL5.6を8.0にする
    - "<h1 style=\"text-align: center;\">EC2仮想サーバーに入れたMySQL5.6を8.0にする</h1><p><br></p><p>現在,
      仮想サーバーに入れたMySQLは以下の通り5.7です。</p><pre>[tatsuya@ip-10-0-0-238 ~]$ mysql -u root
      -p\r\nEnter password: \r\nWelcome to the MySQL monitor.  Commands end with ;
      or \\g.\r\nYour MySQL connection id is 13\r\nServer version: 5.7.26 MySQL Community
      Server (GPL)</pre><p><br></p><h2>初めに...MySQL8.0を入れてみる</h2><pre>[tatsuya@ip-10-0-0-238
      rails] $sudo rpm -ivh https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm\r\n\r\nhttps://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm
      を取得中\r\nエラー: 依存性の欠如:\r\nmysql57-community-release は mysql80-community-release-el7-2.noarch
      と競合します。</pre><p>MySQL5.7がすでに入っていて、新たに入れようとしているMySQL8.0と競合を起こすとエラーが出ています。</p><p><code>$
      yum list installed | grep mysql でインストール済みのmysqlを確認できる</code></p><h2>MySQL5.6を一旦アンインストールする</h2><pre>[tatsuya@ip-10-0-0-238
      /]$ sudo yum remove mysql\r\n[sudo] tatsuya のパスワード:\r\n読み込んだプラグイン:extras_suggestions,
      langpacks, priorities, update-motd\r\n依存性の解決をしています\r\n--&gt; トランザクションの確認を実行しています。\r\n---&gt;
      パッケージ mysql-community-client.x86_64 0:5.7.26-1.el7 を 削除\r\n--&gt; 依存性の処理をしています:
      mysql-community-client(x86-64) &gt;= 5.7.9 のパッケージ: mysql-community-server-5.7.26-1.el7.x86_64\r\n--&gt;
      トランザクションの確認を実行しています。\r\n---&gt; パッケージ mysql-community-server.x86_64 0:5.7.26-1.el7
      を 削除\r\n--&gt; 依存性解決を終了しました。\r\namzn2-core/2/x86_64                        
                   | 2.4 kB     00:00     \r\n...\r\n依存性を解決しました</pre><pre>[tatsuya@ip-10-0-0-238
      /]$ sudo rm -rf /var/lib/mysql</pre><pre>[tatsuya@ip-10-0-0-238 /]$ sudo yum
      remove mysql*\r\n読み込んだプラグイン:extras_suggestions, langpacks, priorities, update-motd\r\n依存性の解決をしています\r\n--&gt;
      トランザクションの確認を実行しています。\r\n---&gt; パッケージ mysql-community-common.x86_64 0:5.7.26-1.el7
      を 削除\r\n---&gt; パッケージ mysql-community-devel.x86_64 0:5.7.26-1.el7 を 削除\r\n---&gt;
      パッケージ mysql-community-libs.x86_64 0:5.7.26-1.el7 を 削除\r\n---&gt; パッケージ mysql57-community-release.noarch
      0:el7-10 を 削除\r\n--&gt; 依存性解決を終了しました。\r\n\r\n...\r\n依存性を解決しました</pre><h2><br></h2><h2>MySQL8.0を入れる</h2><pre>[tatsuya@ip-10-0-0-238
      /]$ sudo  rpm -ivh <a href=\"https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm\">https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</a>\r\nhttps://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm
      を取得中\r\n準備しています...              ################################# [100%]\r\n更新中
      / インストール中...\r\n   1:mysql80-community-release-el7-1  #################################
      [100%]</pre><pre>[tatsuya@ip-10-0-0-238 /]$ sudo  yum -y install mysql-community-server
      mysql-devel\r\n読み込んだプラグイン:extras_suggestions, langpacks, priorities, update-motd\r\nmysql80-community
                                             | 2.5 kB     00:00     \r\nmysql80-community/x86_64/primary_db
                             |  70 kB   00:00     \r\n200 packages excluded due to
      repository priority protections\r\n依存性の解決をしています\r\n...\r\n--&gt; 依存性解決を終了しました。\r\n依存性を解決しました</pre><p><code>ロックファイル
      /var/run/yum.pid が存在します: PID 5633 として別に実行されています。みたいなエラーが出たら...</code></p><p><code>[tatsuya@ip-10-0-0-238
      /]$ sudo rm -rf /var/run/yum.pid</code></p><p><br></p><h2>MySQL初期設定</h2><pre>[tatsuya@ip-10-0-0-238
      /]$ sudo  systemctl start mysqld.service\r\n[tatsuya@ip-10-0-0-238 /]$ sudo
       systemctl enable mysqld.service\r\n[tatsuya@ip-10-0-0-238 /]$ grep password
      /var/log/mysqld.log\r\n2019-05-21T03:09:44.809223Z 5 [Note] [MY-010454] [Server]
      A temporary <strong>password</strong> is generated for root@localhost: ##########(臨時パスワード)</pre><pre>[tatsuya@ip-10-0-0-238
      /]$ sudo mysql_secure_installation\r\n\r\nSecuring the MySQL server deployment.\r\nEnter
      password for user root: (臨時パスワードを打ち込む)\r\nThe existing password for the user
      account root has expired. Please set a new password.\r\nNew password: (新規パスワード)\r\nRe-enter
      new password: (もう一度)\r\nThe &#39;validate_password&#39; component is installed
      on the server.\r\nThe subsequent steps will run with the existing configuration\r\nof
      the component.\r\nUsing existing password for root.\r\nEstimated strength of
      the password: 100 \r\nChange the password for root ? ((Press y|Y for Yes, any
      other key for No) : y\r\nNew password: \r\nRe-enter new password: \r\nEstimated
      strength of the password: 100 \r\nDo you wish to continue with the password
      provided?(Press y|Y for Yes, any other key for No) : y\r\nEstimated strength
      of the password: 100 \r\nDo you wish to continue with the password provided?(Press
      y|Y for Yes, any other key for No) : y\r\nBy default, a MySQL installation has
      an anonymous user,\r\nallowing anyone to log into MySQL without having to have\r\na
      user account created for them. This is intended only for\r\ntesting, and to
      make the installation go a bit smoother.\r\nYou should remove them before moving
      into a production\r\nenvironment.\r\nRemove anonymous users? (Press y|Y for
      Yes, any other key for No) : y\r\nSuccess.\r\nNormally, root should only be
      allowed to connect from\r\n&#39;localhost&#39;. This ensures that someone cannot
      guess at\r\nthe root password from the network.\r\nDisallow root login remotely?
      (Press y|Y for Yes, any other key for No) : \r\n ... skipping.\r\nBy default,
      MySQL comes with a database named &#39;test&#39; that\r\nanyone can access.
      This is also intended only for testing,\r\nand should be removed before moving
      into a production\r\nenvironment.\r\nRemove test database and access to it?
      (Press y|Y for Yes, any other key for No) : \r\n ... skipping.\r\nReloading
      the privilege tables will ensure that all changes\r\nmade so far will take effect
      immediately.\r\nReload privilege tables now? (Press y|Y for Yes, any other key
      for No) : \r\n ... skipping.\r\nAll done!</pre><p><br></p><h2>発行したパスワードでログインしてみる</h2><pre>[tatsuya@ip-10-0-0-238
      /]$ mysql -uroot -p\r\nEnter password: \r\nWelcome to the MySQL monitor.  Commands
      end with ; or \\g.\r\nYour MySQL connection id is 13\r\nServer version: <span
      style=\"color: rgb(184, 49, 47);\">8.0.16</span> MySQL Community Server - GPL\r\n\r\nCopyright
      (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\r\n\r\nOracle
      is a registered trademark of Oracle Corporation and/or its\r\naffiliates. Other
      names may be trademarks of their respective\r\nowners.\r\n\r\nType &#39;help;&#39;
      or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.\r\nmysql&gt;
      select version();\r\n+-----------+\r\n| version() |\r\n+-----------+\r\n| <span
      style=\"color: rgb(184, 49, 47);\">8.0.16</span>    |\r\n+-----------+\r\n1
      row in set (0.00 sec)</pre>"
    - '2019-05-21 03:14:54.744679'
    - '2019-05-21 04:04:03.770659'
  - - 159
    - EC2仮想サーバーにRuby On Rails5.2 のアプリをクローンした後の稼働まで
    - "<h3>目的: Rails4までは　$ rake secret でシークレットキーを確認してconfig/secrets.yml に貼り付けることで本番環境でファイルを読み込めるようになっていた。</h3><h3>Rails5.2から機密情報をcredentialsで暗号化する手法が導入され、MASTERを使ってファイルを読み込む。</h3><h3>今回はMASTERKEYをどう渡すのか、そしてDBをどう設定してローカルで動いていた時みたいに稼働させるのか、手順を記す。</h3><p><br></p><h2><br>環境変数：RAILS_MASTER_KEY</h2><p><code>/config/master.key</code>が共有できない環境では<strong>master
      key</strong>を<strong>環境変数：RAILS_MASTER_KEY</strong>で指定します。</p><p><code>/config/master.key</code>が存在せず、<strong>環境変数：RAILS_MASTER_KEY</strong>で<strong>master
      key</strong>が設定されてない場合は<strong>credentials.yml.enc</strong>内のデータは読み取れません。</p><p>今回は/config/master.keyを作成しますが、EC2では
      $ export RAILS_MASTER_KEY=&quot;xxx&quot;で設定したら読み込めなくなります。</p><p><br></p><h2>GitHubからRailsアプリをクローン</h2><p>作成したprojectsへ移動</p><pre>$
      cd /var/www/projects</pre><p><br></p><p>bundlerをインストール</p><pre>$ gem install
      bundler</pre><p><br></p><p>Gemfileを作成</p><pre>$ bundle init</pre><p><br></p><p>Gemfileを編集</p><pre>$
      vim Gemfile</pre><p><br></p><p>Railsバージョンを記載</p><pre>gem &quot;rails&quot;, &#39;5.2.3&#39;</pre><p><br></p><p>vendor/bundleへgemをインストール</p><pre>$
      bundle install --path vendor/bundle --jobs=4\r\n$ bundle exec rails -v</pre><p><br></p><p>GitHubからアプリをクローン</p><pre>$
      git clone git@github.com:GitHubのユーザー名/リポジトリ名.git\r\n$ ls# リポジトリ名  Gemfile  Gemfile.lock
      \ vendor</pre><p><br></p><p>クローンしたディレクトリへ移動</p><pre>$ cd リポジトリ名/</pre><p><br></p><p>gemインストール</p><pre>$
      bundle install --path vendor/bundle</pre><p><br></p><p>ローカル環境で開発していたときと同じ状態になるようにmaster.keyをconfig配下に作成する</p><pre>$
      cd config\r\n$ vi master.key\r\n---\r\n.gitignoreされているマスターキーを貼り付ける\r\n---</pre><p>これで、credentialsで暗号化したファイルの内容を読み込むことができるようになる!</p><p><br></p><p>ちなみに...$
      export RAILS_MASTER_KEY=&quot;xxx&quot;で環境変数から設定したら読み込めませんでした。</p><p><br></p><p><br></p><h2>DBのテーブル作成</h2><p>初めにMySQLなり
      PostgreSQLなりでDBやユーザー、パスワード設定までdatabase.ymlと同じ設定の環境を用意する。</p><p>これをしとかないと、MySQLサーバー,
      PostgreSQLサーバーにそもそも接続ができない</p><pre>ec2サーバーにsshした後に\r\n$ bundle exec rake db:schema:load
      RAILS_ENV=&quot;test&quot;\r\n$ bundle exec rake db:schema:load RAILS_ENV=&quot;development&quot;\r\n$
      bundle exec rake db:schema:load RAILS_ENV=&quot;production&quot;</pre><p>テーブル一覧が作成されるはず！</p><p><br></p><p><span
      style=\"color: rgb(163, 143, 132);\">ちなみに画像表示が必要な場合...クローンしたら</span></p><pre>bundle
      exec rake assets:precompile RAILS_ENV=&quot;test&quot;</pre><pre>bundle exec
      rake assets:precompile RAILS_ENV=&quot;development&quot;</pre><pre>bundle exec
      rake assets:precompile RAILS_ENV=&quot;production&quot;</pre><p><span style=\"color:
      rgb(163, 143, 132);\">も早めにしとこう</span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-05-24 05:05:04.718116'
    - '2019-05-24 06:43:44.526384'
  - - 160
    - Rails5.2 EC2サーバーでRailsコンソールが起動しない
    - "<h1 style=\"text-align: center;\">bin/rails sとかは動くのにコンソールが不動</h1><p><br></p><pre>[tatsuya@ip-10-0-0-238
      my-project]$ bin/rails c</pre><p>...ずっとこのままです。</p><p>control + c で止めると...</p><pre>^C/var/www/rails/my-project/vendor/bundle/ruby/2.4.0/gems/spring-2.0.2/lib/spring/client/run.rb:117:in
      `gets&#39;: Interrupt\r\nfrom /var/www/rails/my-project/vendor/bundle/ruby/2.4.0/gems/spring-2.0.2/lib/spring/client/run.rb:117:in
      `verify_server_version&#39;\r\nfrom /var/www/rails/my-project/vendor/bundle/ruby/2.4.0/gems/spring-2.0.2/lib/spring/client/run.rb:62:in
      `run&#39;\r\nfrom /var/www/rails/my-project/vendor/bundle/ruby/2.4.0/gems/spring-2.0.2/lib/spring/client/run.rb:42:in
      `warm_run&#39;\r\n...\r\n...</pre><p><br></p><h1>調査と対応</h1><p>調べてみるとspringというプロセスがrails
      consoleを走らせた時に走っているらしい。</p><p>springのプロセスが走っているか確認</p><pre>[tatsuya@ip-10-0-0-238
      my-project]$ bin/spring status\r\nSpring is running:\r\n\r\n\r\n10327 spring
      server | my-project | started 74 hours ago\r\n11326 [ruby] &lt;defunct&gt;</pre><p>何もしていないのにsprig
      のプロセスが起動しっぱなしだった。</p><p>原因を調べてみると、この my-projectに当たるプロジェクトを同名で、以前に何度か作っては壊し、作っては壊しを続けていた。<br>そのため、すでに壊した環境のrails
      consoleのプロセスがそのまま残ってしまっていたらしい... <img alt=\":sweat_smile:\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f605.png\"
      title=\":sweat_smile:\" width=\"20\" class=\"fr-fic fr-dii\"></p><h2>解決法：springデーモンをkillする</h2><pre>[tatsuya@ip-10-0-0-238
      my-project]$ ps axww | grep spring\r\nXXXXX ?        Sl     0:00 <strong>spring</strong>
      server | froala-blog | started 74 hours ago\r\nYYYYY pts/2    S+     0:00 grep
      --color=auto <strong>spring</strong>\r\n[tatsuya@ip-10-0-0-238 froala-blog]$
      kill -9 XXXXX\r\n\r\n\r\n[tatsuya@ip-10-0-0-238 froala-blog]$ bin/rails c\r\nRunning
      via Spring preloader in process 17428\r\nLoading development environment (Rails
      5.2.3)\r\nirb(main):001:0&gt;</pre><h2>動いたー！！<span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f607.svg);\">&nbsp;&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f607.svg);\">&nbsp;</span>
      &nbsp;</h2><p><br></p><h1><span style=\"font-family: Georgia, serif;\">最後に:
      同じ名前でプロジェクトを作ったり壊したりするときはプロセスが残っていないか確認しよう。</span></h1><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-05-24 07:49:20.225236'
    - '2019-05-24 08:03:55.945239'
  - - 161
    - EC2内にRails5.2 + unicorn(アプリケーションサーバ) + Nginx(Webサーバ) を導入
    - "<p><span style=\"font-size: 30px;\">前提: ruby, データベースのユーザー作成済み、gitの連携が終わっていて、
      AWSで公開する最終段階にいることを想定</span></p><p><span style=\"font-size: 18px;\"><br></span></p><p><span
      style=\"font-size: 18px;\">初めに:&nbsp;</span></p><ul><li><span style=\"font-size:
      18px;\">Webサーバは、HTTPに則り、クライアントソフトウェアのウェブブラウザに対して、HTMLやオブジェクト（画像など）の表示を提供するサービスプログラム及び、サーバコンピュータを指す
      (wikipedia)</span></li><li><span style=\"font-size: 18px;\">アプリケーションサーバは、ビジネスロジックなどを実装したアプリケーションソフトウェアを実行することを専門とするコンピュータネットワーク上のサーバコンピュータ、もしくはそのようなコンピュータ上でのアプリケーションの実行を管理補助するミドルウェアのこと。クライアントからのHTTPのレスポンス要求を処理するウェブサーバとバックエンドのデータベース中核層への橋渡しを担い、データの加工などの処理を行う。
      (wikipedia)</span></li></ul><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1559550316169-server.png\"
      style=\"width: 470px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>(<a href=\"https://www.draw.io/\"></a><a
      href=\"https://www.draw.io/\">https://www.draw.io/</a> で上記画像を作成しました。面白いので使ってみてね)</p><p>ちなみに、rails
      s　のコマンドを打ち込んで起動するサーバー(WEBrick)は、<strong>アプリケーションサーバー</strong>です。</p><p>大半のアプリケーションサーバーは、webサーバーを使わずに単体で実行できます。<br>(本番環境ではwebサーバーを設置することがほとんどですが)</p><p><br></p><p><br></p><h2>手順1.
      Unicornの設定</h2><pre><strong>Unicorn</strong>とはアプリケーションサーバーの一種です。\r\n[tatsuya@ip-10-0-0-238
      ~] $: vi Gemfile\r\n-----------------------------\r\n#以下を追記\r\ngroup :production,
      :staging do\r\n    gem &#39;unicorn&#39;\r\nend\r\n----------------------------\r\n[tatsuya@ip-10-0-0-238
      ~] $ gem install bundler\r\n[tatsuya@ip-10-0-0-238 ~] $ bundle install\r\n[tatsuya@ip-10-0-0-238
      ~] $ vi config/unicorn.conf.rb\r\n----------------------------</pre><p>viコマンドでconfig配下に生成したunicornの設定ファイルに、下記を記述します。</p><p>unicorn.conf.rb</p><pre>
      \ # set lets\r\n  $worker  = 2\r\n  $timeout = 30\r\n  $app_dir = &quot;/var/www/rails/myapp&quot;
      #自分のアプリケーション名\r\n  $listen  = File.expand_path &#39;tmp/sockets/unicorn.sock&#39;,
      $app_dir\r\n  $pid     = File.expand_path &#39;tmp/pids/unicorn.pid&#39;, $app_dir\r\n
      \ $std_log = File.expand_path &#39;log/unicorn.log&#39;, $app_dir\r\n  # set
      config\r\n  worker_processes  $worker\r\n  working_directory $app_dir\r\n  stderr_path
      $std_log\r\n  stdout_path $std_log\r\n  timeout $timeout\r\n  listen  $listen\r\n
      \ pid $pid\r\n  # loading booster\r\n  preload_app true\r\n  # before starting
      processes\r\n  before_fork do |server, worker|\r\n    defined?(ActiveRecord::Base)
      and ActiveRecord::Base.connection.disconnect!\r\n    old_pid = &quot;#{server.config[:pid]}.oldbin&quot;\r\n
      \   if old_pid != server.pid\r\n      begin\r\n        Process.kill &quot;QUIT&quot;,
      File.read(old_pid).to_i\r\n      rescue Errno::ENOENT, Errno::ESRCH\r\n      end\r\n
      \   end\r\n  end\r\n  # after finishing processes\r\n  after_fork do |server,
      worker|\r\n    defined?(ActiveRecord::Base) and ActiveRecord::Base.establish_connection\r\n
      \ end</pre><p>これでUnicornの設定が完了です。</p><p><br></p><h2>手順2. Nginxの設定</h2><p>NginxはWebサーバーにあたります。</p><pre>[tatsuya@ip-10-0-0-238
      ~] sudo yum install nginx\r\n[tatsuya@ip-10-0-0-238 ~]$ cd /etc/nginx/conf.d/\r\n[tatsuya|conf.d]$
      sudo vi myapp.conf #自分のアプリケーション名でファイル名変更</pre><p>viコマンドで作成したnginxの設定ファイルには、下記を記述します。</p><p><br></p><p>myapp.conf(アプリ名.conf)</p><pre>#
      log directory\r\nerror_log  /var/www/rails/myapp/log/nginx.error.log; #自分のアプリケーション名に変更\r\naccess_log
      /var/www/rails/myapp/log/nginx.access.log; #自分のアプリケーション名に変更\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream <span style=\"color: rgb(243, 121, 52);\">app_server</span>
      {\r\n  # for UNIX domain socket setups\r\n  server unix:/var/www/rails/myapp/tmp/sockets/unicorn.sock
      fail_timeout=0; #自分のアプリケーション名に変更\r\n}\r\nserver {\r\n  listen 80;\r\n  server_name
      ~~~.~~~.~~~.~~~;(#アプリのElastic IPに変更してください)\r\n  # nginx so increasing this is
      generally safe...\r\n  keepalive_timeout 5;\r\n  # path for static files\r\n
      \ root /var/www/rails/myapp/public; #自分のアプリケーション名に変更\r\n  # page cache loading\r\n
      \ try_files $uri/index.html $uri.html $uri @app;\r\n  location @app {\r\n    #
      HTTP headers\r\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n
      \   proxy_set_header Host $http_host;\r\n    proxy_redirect off;\r\n    proxy_pass
      http://<span style=\"color: rgb(243, 121, 52);\">app_server</span>;\r\n  }\r\n
      \ # Rails error pages\r\n  error_page 500 502 503 504 /500.html;\r\n  location
      = /500.html {\r\n    root /var/www/rails/myapp/public; #自分のアプリケーション名に変更\r\n
      \ }\r\n}</pre><p><br></p><p>下記のファイルで読み込まれます。なお下記のファイルはデフォルトのままにしておきます。</p><p>etc/nginx/nginx.conf</p><pre>#
      for more information on configuration, see:\r\n#   * Official English Documentation:
      <a href=\"http://nginx.org/en/docs/\">http://nginx.org/en/docs/</a>\r\n#   *
      Official Russian Documentation: http://nginx.org/ru/docs/\r\n\r\nuser nginx;\r\nworker_processes
      auto;\r\nerror_log /var/log/nginx/error.log;\r\npid /var/run/nginx.pid;\r\n\r\n#
      Load dynamic modules. See /usr/share/nginx/README.dynamic.\r\ninclude /usr/share/nginx/modules/*.conf;\r\n\r\nevents
      {\r\n  worker_connections 1024;\r\n}\r\n\r\nhttp {\r\nlog_format  main  &#39;$remote_addr
      - $remote_user [$time_local] &quot;$request&quot; &#39;\r\n&#39;$status $body_bytes_sent
      &quot;$http_referer&quot; &#39;\r\n&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\r\n\r\naccess_log
       /var/log/nginx/access.log  main;\r\n\r\nsendfile            on;\r\ntcp_nopush
               on;\r\ntcp_nodelay         on;\r\nkeepalive_timeout   65;\r\ntypes_hash_max_size
      2048;\r\n\r\ninclude             /etc/nginx/mime.types;\r\ndefault_type    
         application/octet-stream;\r\n\r\n# Load modular configuration files from
      the /etc/nginx/conf.d directory.\r\n# See http://nginx.org/en/docs/ngx_core_module.html#include\r\n#
      for more information.\r\ninclude /etc/nginx/conf.d/*.conf;\r\n\r\nserver {\r\nlisten
            80 default_server;\r\nlisten       [::]:80 default_server;\r\nserver_name
       _;\r\nroot         /usr/share/nginx/html;\r\n\r\n# Load configuration files
      for the default server block.\r\ninclude /etc/nginx/default.d/*.conf;\r\n\r\nlocation
      / {\r\n}\r\n\r\nerror_page 404 /404.html;\r\nlocation = /40x.html {\r\n}\r\n\r\nerror_page
      500 502 503 504 /50x.html;\r\nlocation = /50x.html {\r\n}\r\n}\r\n\r\n# Settings
      for a TLS enabled server.\r\n#\r\n#    server {\r\n#        listen       443
      ssl http2 default_server;\r\n#        listen       [::]:443 ssl http2 default_server;\r\n#
             server_name  _;\r\n#        root         /usr/share/nginx/html;\r\n#\r\n#
             ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;\r\n#        ssl_certificate_key
      &quot;/etc/pki/nginx/private/server.key&quot;;\r\n#        ssl_session_cache
      shared:SSL:1m;\r\n#        ssl_session_timeout  10m;\r\n#        ssl_ciphers
      HIGH:!aNULL:!MD5;\r\n#        ssl_prefer_server_ciphers on;\r\n#\r\n#      
       # Load configuration files for the default server block.\r\n#        include
      /etc/nginx/default.d/*.conf;\r\n#\r\n#        location / {\r\n#        }\r\n#\r\n#
             error_page 404 /404.html;\r\n#            location = /40x.html {\r\n#
             }\r\n#\r\n#        error_page 500 502 503 504 /50x.html;\r\n#        
         location = /50x.html {\r\n#        }\r\n#    }\r\n\r\n}</pre><p><br></p><p>設定ファイルの記述が終わったら、下記も実行してください。やらないと画像のアップロード等のファイル送信系はPermission
      deniedになります</p><pre>[tatsuya|conf.d] cd /var/lib\r\n[tatsuya|lib] sudo chmod
      -R 775 nginx</pre><h2>MySQLの設定</h2><p><br></p><p>続いてDBです。<br>(アプリケーションのDBがMySQLで作成されている前提で話を進めていきます。)</p><p>下記コマンドを打ち込み、MySQLに関する設定を変更していきましょう。</p><pre>[tatsuya|myapp]$
      vi config/database.yml\r\n----------------------------\r\n  production:\r\n
      \   &lt;&lt;: *default\r\n    database: &lt;%= Rails.application.credentials.db[:database]
      %&gt;\r\n    username: &lt;%= Rails.application.credentials.db[:username] %&gt;\r\n
      \   password: &lt;%= Rails.application.credentials.db[:password] %&gt;\r\n    host:
      &lt;%= Rails.application.credentials.db[:host] %&gt; # RDSを使ってないので、とりあえずlocalhostを指定しています
      RDS使用者はエンドポイント</pre><pre>[tatsuya|myapp]$ EDITOR=vim bin/rails credentials:edit\r\ndb:\r\n 
      database: xxxxx\r\n  username: xxxxx\r\n  password: xxxxx\r\n  host: xxxxx\r\n...</pre><pre>[tatsuya|myapp]$
      sudo service mysqld start #mysqldの起動\r\n[tatsuya|myapp]$ ln -s /var/lib/mysql/mysql.sock
      /tmp/mysql.sock\r\n[tatsuya|myapp]$ rake db:create RAILS_ENV=production\r\n[tatsuya|myapp]$
      rake db:migrate RAILS_ENV=production</pre><p>アプリのmigrationファイルが実行されたログが出て来れば無事成功です(権限が原因でmysqldの起動が出来ないことがあります。その場合はchownやchmodコマンドでmysql関連ファイルの権限を変更してあげましょう。)</p><h2>Nginxの起動</h2><p>Nginxを起動</p><pre>[tatsuya|myapp]$
      sudo service nginx start</pre><p>http://xx.xx.xx.xx (Elastic IPアドレス) にアクセス</p><p>もし繋がらなかったらUnicornを再起動もしくは停止してたら起動させる</p><pre>[myapp]$
      ps -ef | grep unicorn | grep -v grep\r\ntatsuya  <span style=\"color: rgb(243,
      121, 52);\">xxxxx</span>     1  0 05:19 ?        00:00:01 unicorn_rails master
      -c /var/www/rails/myapp/config/unicorn.conf.rb -D -E production\r\ntatsuya  yyyyy
      xxxxx  0 05:19 ?        00:00:00 unicorn_rails worker[0] -c /var/www/rails/myapp/config/unicorn.conf.rb
      -D -E production\r\ntatsuya  zzzzz xxxxx  0 05:19 ?        00:00:00 unicorn_rails
      worker[1] -c /var/www/rails/myapp/config/unicorn.conf.rb -D -E production</pre><p>こんな感じで3行表示されていれば既に起動されています。何も表示されなかったら起動してません</p><h3>[起動方法]</h3><pre>[tatsuya]$
      unicorn_rails -c /var/www/rails/myapp(アプリの名前)/config/unicorn.conf.rb -D -E production
      #unicornを起動させる</pre><h3>[再起動方法]</h3><p>・一旦きる</p><pre>[tatsuya]$ kill -9 <span
      style=\"color: rgb(243, 121, 52);\">xxxx </span># unicornプロセスをきる</pre><p>・起動する</p><pre>[tatsuya]$
      unicorn_rails -c /var/www/rails/myapp(アプリの名前)/config/unicorn.conf.rb -D -E production
      #unicornを起動させる</pre><p><br></p><p>Nginxもリロードさせます。</p><pre>[tatsuya|myapp]$ sudo
      nginx -s reload</pre><p><br></p><p>アクセスできれば完了</p><p>「このサイトにアクセスできません」となる人は本番環境設定でブロックしてしまっている可能性があります。ssl設定を確認しましょう</p><p>config/environments/production.rb</p><pre>config.force_ssl
      = true\r\nを\r\nconfig.force_ssl = false\r\nに変更(ssl証明書をまだ発行していない人はtrueだとアクセスできない)</pre><p><br></p><p>勝手にhttpsにリダイレクトされてしまう人は</p><p>chromeにて</p><p>&nbsp;閲覧履歴を消去-&gt;キャッシュされた画像ファイルを削除-&gt;データを削除<br>キャッシュを捨てることで,httpsに勝手に飛ばされていたのをhttpでアクセスできるようになる</p><p><br></p><p>セキュリティグループの許可について</p><p>インバウンド設定、アウトバウンド設定にてhttpの許可を出しておく</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1559554922005-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-03+18.34.49.png\"
      style=\"width: 557px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>上記をきちんとやれていればアクセスできるはずです！</p><p>祝デプロイ！</p><p><span
      style=\"font-size: 60px;\">完！！</span></p><p><br></p><p><br></p><p><br></p><p>d以下、サーバーでの多用コマンド(注意:
      筆者のアプリ名はfroala-blogなので自分のアプリ名に読み替えてください)</p><h2>・nginx</h2><p>アクセスログ(アプリ接続)</p><pre>sudo
      tail -f /var/www/rails/froala-blog/log/nginx.access.log</pre><p>エラーログ(アプリ接続)</p><pre>sudo
      tail -f /var/www/rails/froala-blog/log/nginx.error.log</pre><p>アクセスログ(エンジン起動時)</p><pre>sudo
      tail -f /var/log/nginx/access.log</pre><p>エラーログ(エンジン起動時)</p><pre>sudo tail -f
      /var/log/nginx/error.log</pre><p>リロード</p><pre>sudo nginx -s reload</pre><p>スタート、ストップ、再起動</p><pre>sudo
      service nginx start\r\nsudo service nginx stop\r\nsudo service nginx restart</pre><p>プロセスのポートを調べる(nginxをstopできないときにプロセスをkillして再起動)</p><pre>ps
      aux | grep nginx</pre><p>ポートをきる</p><pre>kill -9 xxxx</pre><p>nginxの設定ファイル編集</p><pre>sudo
      vi /etc/nginx/nginx.conf</pre><p>アプリのnginxとの接続設定ファイル編集</p><pre>sudo vi /etc/nginx/conf.d/froala-blog.conf</pre><p><br></p><h2>・unicorn</h2><p>unicornログ</p><pre>sudo
      tail -f /var/www/rails/froala-blog/log/unicorn.log</pre><p>unicorn設定ファイル編集</p><pre>vim
      /var/www/rails/froala-blog/config/unicorn.conf.rb</pre><p>unicorn起動</p><pre>bundle
      exec unicorn_rails -c /var/www/rails/froala-blog/config/unicorn.conf.rb -D -E
      production</pre><p>プロセス確認</p><pre>ps -ef | grep unicorn | grep -v grep</pre><p>ポート確認</p><pre>cat
      /var/www/rails/froala-blog/tmp/pids/unicorn.pid</pre><p>停止(プロセス確認からポートを探ってkillしてもいいが以下だと一行で停止できる)</p><pre>sudo
      kill -QUIT `cat /var/www/rails/froala-blog/tmp/pids/unicorn.pid`</pre><p>起動</p><pre>bundle
      exec unicorn_rails -c /var/www/rails/froala-blog/config/unicorn.conf.rb -D -E
      production</pre><p>再起動</p><pre>sudo kill -HUP `cat /var/www/rails/froala-blog/tmp/pids/unicorn.pid`</pre><p><br></p><p><br></p><p>参考文献
      <a href=\"https://qiita.com/naoki_mochizuki/items/5a1757d222806cbe0cd1\"></a><a
      href=\"https://qiita.com/naoki_mochizuki/items/5a1757d222806cbe0cd1\">https://qiita.com/naoki_mochizuki/items/5a1757d222806cbe0cd1</a></p><p><br></p>"
    - '2019-06-03 06:12:43.788525'
    - '2019-07-08 10:05:18.902384'
  - - 162
    - "『ゼロから作る Deep Learning』第4章 勉強メモ(最低限)"
    - "<h1 style=\"text-align: center;\">『ゼロから作る Deep Learning』第4章 勉強メモ(最低限)</h1><h2>損失関数</h2><p>ニューラルネットワークの性能の&ldquo;悪さ&rdquo;を示す指標で一般には、2
      乗和誤差や交差エントロピー誤差などが用いられる</p><h3>2 乗和誤差</h3><h4>E = &frac12; &sum; (y-t)&sup2;</h4><pre>def
      mean_squared_error(y, t):\r\n  return 0.5 * np.sum((y-t)**2)\r\n&gt;&gt;&gt;
      # 「2」を正解とする\r\n&gt;&gt;&gt; t = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]\r\n&gt;&gt;&gt;\r\n&gt;&gt;&gt;
      # 例 1:「2」の確率が最も高い場合(0.6)\r\n&gt;&gt;&gt; y = [0.1, 0.05, 0.6, 0.0, 0.05, 0.1,
      0.0, 0.1, 0.0, 0.0]\r\n&gt;&gt;&gt; mean_squared_error(np.array(y), np.array(t))0.097500000000000031</pre><p><br></p><h3>交差エントロピー誤差</h3><h4>E
      = -&sum; t logy</h4><pre>def cross_entropy_error(y, t):\r\n  delta = 1e-7\r\n
      \ return -np.sum(t * np.log(y + delta))</pre><p>np.log(0) はマイナスの無限大を表す-inf となり、そ
      うなってしまうと、それ以上計算を進めることができなくなります。その防止策とし て、微小な値を追加して、マイナス無限大を発生させないようにしています。</p><pre>&gt;&gt;&gt;
      t = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]\r\n&gt;&gt;&gt; y = [0.1, 0.05, 0.6, 0.0,
      0.05, 0.1, 0.0, 0.1, 0.0, 0.0]\r\n&gt;&gt;&gt; cross_entropy_error(np.array(y),
      np.array(t))\r\n0.51082545709933802</pre><h3><br></h3><p>訓練データすべての損失関数の平均</p><h4>E
      = -1/N &sum; &sum; t logy (データが N 個)</h4><p><br></p><h3>[バッチ対応版]交差エントロピー誤差の実装</h3><pre>#
      データがひとつの場合と、データがバッチとしてまとめら れて入力される場合の両方のケースに対応\r\ndef cross_entropy_error(y,
      t):\r\n  # yが普通の配列だったとき(データ一個の出力だったとき)行列にする\r\n  if y.ndim == 1:\r\n    t =
      t.reshape(1, t.size)\r\n    y = y.reshape(1, y.size)\r\n  # 出力した画像全てをまとめて損失関数の総和を出す\r\n
      \ # ちなみにy.shape[1]は出力層のニューロンの数\r\n  batch_size = y.shape[0]\r\n  return -np.sum(t
      * np.log(y)) / batch_size</pre><p>ちなみにnp.sumや配列積は以下の例からわかるはず</p><pre>&gt;&gt;&gt;
      import numpy as np\r\n&gt;&gt;&gt; x = np.arange(10).reshape(2,5)\r\n&gt;&gt;&gt;
      y = np.arange(10).reshape(2,5)\r\n&gt;&gt;&gt; x\r\narray([[0, 1, 2, 3, 4],\r\n 
           [5, 6, 7, 8, 9]])\r\n&gt;&gt;&gt; x*y\r\narray([[ 0,  1,  4,  9, 16],\r\n 
           [25, 36, 49, 64, 81]])\r\n&gt;&gt;&gt; np.sum(x*y)\r\n285</pre><p><br></p><p>教師データがラベルとして与えられたとき(one-hot&nbsp;表現ではなく、「2」や
      「7」といったラベルとして与えられたとき)、交差エントロピー誤差は次のように実</p><p>装することができます</p><pre>def cross_entropy_error(y,
      t):\r\n  if y.ndim == 1:\r\n    t = t.reshape(1, t.size)\r\n    y = y.reshape(1,
      y.size)\r\n  batch_size = y.shape[0]\r\n  return -np.sum(np.log(y[np.arange(batch_size),
      t])) / batch_size</pre><p>実装のポイントは、one-hot 表現で t が 0 の要素は、交差エントロピー誤差 も 0
      であるから、その計算は無視してもよい。</p><p>y[np.arange(batch_size), t] は 各画像行 正解ラベル列として</p><p>array([
      画像1の正解ラベル出力値, 画像2の正解ラベル出力値, 画像3の正解ラベル出力値, ... , 画像Nの正解ラベル出力値 ])</p><p>になっている。</p><p><br></p><h2>なぜ損失関数を設定するのか?</h2><p>認識精度が高くなるようなパラメータ
      を獲得したいので、「認識精度」を指標にすべきではないか?</p><p>認識精度は離散値であり、微分がほとんどの場所で 0 になってし まい、パラメータの更新(学習)ができなくなってしまう。</p><p>例えば、訓練データが100枚の時、精度は1%毎にしか変化できない</p><p><br></p><h2>微分</h2><p>df(x)/dx
      = lim{(f(x + h) &minus; f(x)) / h}</p><pre># 悪い実装例\r\ndef numerical_diff(f,
      x):\r\n  h = 10e-50\r\n  return (f(x+h) - f(x)) / h</pre><p>h には 10e-50(「0.00...1」の
      0 が 50 個続く数)という小さな値を用いてます。しかし、これでは逆に丸め誤差になる。</p><p>丸め誤差とは, 小数の小さな範囲において数値が省略され
      ることで(たとえば、小数点第 8 位以下が省略されるといったこと)、最終的な計算 結果に誤差が生じる</p><pre>&gt;&gt;&gt;
      import numpy as np\r\n&gt;&gt;&gt; np.float32(1e-50)\r\n0.0</pre><p><br></p><p>改善点1:
      丸め誤差を避けるべく、微小な値 h として 10&minus;4 を用いる。(10&minus;4 程度 の値を用いれば、良い結果が得られることが分かってる。)</p><p>改善点2:
      (x, f(x)) (x+h, f(x+h)) の2点間の直線であり(前方差分)、接戦の傾きとは誤差があるので、誤差を減らす工夫とし て、(x + h)
      と (x &minus; h) での関数 f の差分を計算する(中心差分)</p><p><br></p><pre>def numerical_diff(f,
      x):\r\n  h = 1e-4 # 0.0001\r\n  return (f(x+h) - f(x-h)) / (2*h)</pre><p>上記のように微小な差分によって微分を求めることを数値微分</p><p>一方、数式の展開によって微分を「解析的に解く」とか「解析的に微分を求める」などと言います</p><p><br></p><h3>数値微分の例</h3><pre>(gradient_1d.py)\r\nimport
      numpy as np\r\nimport matplotlib.pylab as plt\r\n\r\ndef numerical_diff(f, x):\r\n
      \ h = 1e-4 # 0.0001\r\n  return (f(x+h) - f(x-h)) / (2*h)\r\n\r\ndef function_1(x):\r\n
      \ return 0.01*x**2 + 0.1*x\r\n\r\ndef tangent_line(f, x):\r\n  d = numerical_diff(f,
      x)\r\n  print(d)\r\n  # 接戦Y = dx + bより、以下はy切片bを表している\r\n  b = f(x) - d*x\r\n
      \ # 傾きd y切片bの1次関数を返す関数を表している\r\n  return lambda t: d*t + b\r\n\r\nx = np.arange(0.0,
      20.0, 0.1)\r\ny = function_1(x) # 関数1\r\nplt.xlabel(&quot;x&quot;)\r\nplt.ylabel(&quot;f(x)&quot;)\r\n\r\ntf
      = tangent_line(function_1, 5)\r\ny2 = tf(x) # 接戦\r\n\r\nplt.plot(x, y)\r\nplt.plot(x,
      y2)\r\nplt.show()</pre><pre>$ python gradient_1d.py\r\n0.1999999999990898 #
      真の微分は0.2なのでほとんど同じ値と見なすことができるぐらい小さな誤差\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1559807689484-Figure_1.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></pre><p><br></p><h3>偏微分</h3><p>f(x0,x1)=x0&sup2;
      +x1&sup2;</p><pre>def function_2(x):\r\n  return x[0]**2 + x[1]**2\r\n  # または
      return np.sum(x**2)</pre><p>x0 = 3、x1 = 4 のときの x0 に対する偏微分&part;f / &part;x0</p><pre>&gt;&gt;&gt;
      def function_tmp1(x0):\r\n... return x0*x0 + 4.0**2.0\r\n...\r\n&gt;&gt;&gt;
      numerical_diff(function_tmp1, 3.0)6.00000000000378</pre><p>x0 = 3、x1 = 4 のときの
      x1 に対する偏微分&part;f / &part;x1</p><pre>&gt;&gt;&gt; def function_tmp2(x1):\r\n... return
      3.0**2.0 + x1*x1\r\n...\r\n&gt;&gt;&gt; numerical_diff(function_tmp2, 4.0)7.999999999999119</pre><p><br></p><p><br></p><pre>(gradient_2d.py)\r\nimport
      numpy as np\r\nimport matplotlib.pylab as plt\r\nfrom mpl_toolkits.mplot3d import
      Axes3D\r\n\r\n# すべての変数の偏微分ベクトル(勾配)を求める\r\ndef _numerical_gradient_no_batch(f,
      x):\r\n  h = 1e-4  # 0.0001\r\n  grad = np.zeros_like(x) # xと形状が同じで値が全て0の配列\r\n\r\n
      \ for idx in range(x.size):\r\n    tmp_val = x[idx]\r\n    x[idx] = float(tmp_val)
      + h\r\n    fxh1 = f(x)  # f(x+h)\r\n\r\n    x[idx] = tmp_val - h\r\n    fxh2
      = f(x)  # f(x-h)\r\n    grad[idx] = (fxh1 - fxh2) / (2*h)\r\n\r\n    x[idx]
      = tmp_val  # 値を元に戻す\r\n  return grad\r\n\r\n# バッチ処理\r\ndef numerical_gradient(f,
      X):\r\n  if X.ndim == 1:\r\n    return _numerical_gradient_no_batch(f, X)\r\n
      \ else:\r\n    grad = np.zeros_like(X)\r\n\r\n  for idx, x in enumerate(X):\r\n
      \   grad[idx] = _numerical_gradient_no_batch(f, x)\r\n\r\n  return grad\r\n\r\n\r\ndef
      function_2(x):\r\n  if x.ndim == 1:\r\n    return np.sum(x**2)\r\n  else:\r\n
      \   return np.sum(x**2, axis=1)\r\n\r\n\r\ndef tangent_line(f, x):\r\n  d =
      numerical_gradient(f, x)\r\n  print(d) # 微分結果\r\n  # 接戦のy切片d\r\n  b = f(x) -
      d*x\r\n  return lambda t: d*t + b\r\n\r\n\r\nif __name__ == &#39;__main__&#39;:\r\n
      \ x0 = np.arange(-2, 2.5, 0.25)\r\n  x1 = np.arange(-2, 2.5, 0.25)\r\n  X, Y
      = np.meshgrid(x0, x1)\r\n\r\n  X = X.flatten()\r\n  Y = Y.flatten()\r\n\r\n
      \ grad = numerical_gradient(function_2, np.array([X, Y]).T).T\r\n\r\n  plt.figure()
      # Figureインスタンスを作成\r\n  plt.quiver(X, Y, -grad[0], -grad[1],  angles=&quot;xy&quot;,color=&quot;#666666&quot;)
      # 矢印（ベクトル）\r\n  plt.xlim([-2, 2])\r\n  plt.ylim([-2, 2])\r\n  plt.xlabel(&#39;x0&#39;)\r\n
      \ plt.ylabel(&#39;x1&#39;)\r\n  plt.grid()\r\n  plt.draw()\r\n  plt.show()</pre><p>補足:
      enumerate&nbsp;</p><p>Pythonの<code>enumerate()</code>関数を使うと、forループの中でリスト（配列）などのイテラブルオブジェクトの要素と同時にインデックス番号（カウント、順番）を取得できる。</p><pre>l
      = [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charlie&#39;]\r\nfor i, name in enumerate(l):\r\n
      \   print(i, name)\r\n# 0 Alice\r\n# 1 Bob\r\n# 2 Charlie</pre><p>補足: np.ndarray.flatten
      多次元配列を一次元配列</p><pre>&gt;&gt;&gt; x=np.arange(12).reshape(2,3,2)\r\n&gt;&gt;&gt;
      x.flatten()\r\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])</pre><p>補足:
      meshgridについて</p><p>例えば<code>x = [1,2,3,4,5,6,7,8,9]</code>の配列をX軸<code>y = [10,20,30,40,50]</code>の配列をY軸として表を作る場合</p><table><thead><tr><th><div
      style=\"margin-left: 60px;\">y \\ x&nbsp;</div></th><th><div style=\"margin-left:
      60px;\">1</div></th><th><div style=\"margin-left: 60px;\">2</div></th><th><div
      style=\"margin-left: 60px;\">3</div></th><th><div style=\"margin-left: 60px;\">4</div></th><th><div
      style=\"margin-left: 60px;\">5</div></th><th><div style=\"margin-left: 60px;\">6</div></th><th><div
      style=\"margin-left: 60px;\">7</div></th><th><div style=\"margin-left: 60px;\">8</div></th><th><div
      style=\"margin-left: 60px;\">9</div></th></tr></thead><tbody><tr><td><div style=\"margin-left:
      60px;\">10</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td></tr><tr><td><div style=\"margin-left: 60px;\">20</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td></tr><tr><td><div
      style=\"margin-left: 60px;\">30</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td></tr><tr><td><div style=\"margin-left: 60px;\">40</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td></tr><tr><td><div
      style=\"margin-left: 60px;\">50</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td></tr></tbody></table><p>上のような表の各要素のx値とy値から各要素に入る値を求めることになる。</p><p><strong>meshgrid()</strong>
      を使うと、予め上のような表（実際は行列）に各要素毎のx値とy値を埋めたものを生成してくれる。</p><p><code>import numpy as npx
      = [1,2,3,4,5,6,7,8,9]</code></p><p><code>y = [10,20,30,40,50]</code></p><p><code>X,Y
      = np.meshgrid(x,y)</code></p><p><code>print(X)</code></p><p><code># =&gt; [[1
      2 3 4 5 6 7 8 9]</code></p><p><code># &nbsp; &nbsp;</code><code>[1 2 3 4 5 6
      7 8 9]</code></p><p><code># &nbsp; &nbsp;</code><code>[1 2 3 4 5 6 7 8 9]</code></p><p><code>#
      &nbsp; &nbsp;</code><code>[1 2 3 4 5 6 7 8 9]</code></p><p><code># &nbsp; &nbsp;</code><code>[1
      2 3 4 5 6 7 8 9]]</code></p><p><code>print(Y)</code></p><p><code># =&gt; [[10
      10 10 10 10 10 10 10 10]</code></p><p><code># &nbsp; &nbsp; [20 20 20 20 20
      20 20 20 20]</code></p><p><code># &nbsp; &nbsp; [30 30 30 30 30 30 30 30 30]</code></p><p><code>#
      &nbsp; &nbsp; [40 40 40 40 40 40 40 40 40]</code></p><p><code># &nbsp; &nbsp;
      [50 50 50 50 50 50 50 50 50]]</code></p><p>このような座標行列を予め作成しておくことより、<br>例えば<br>f(x,y)&nbsp;=&nbsp;x+yの値を求める場合</p><p><code>print(X+Y)</code></p><p><code>#
      =&gt; [[11 12 13 14 15 16 17 18 19]</code></p><p><code># &nbsp; &nbsp; [21 22
      23 24 25 26 27 28 29]</code></p><p><code># &nbsp; &nbsp; [31 32 33 34 35 36
      37 38 39]</code></p><p><code># &nbsp; &nbsp; [41 42 43 44 45 46 47 48 49]</code></p><p><code>#
      &nbsp; &nbsp; [51 52 53 54 55 56 57 58 59]]</code></p><p>f(x,y)&nbsp;=&nbsp;x+2yの場合は</p><p><code><code
      data-language=\"Python\">print(X+2*Y)&nbsp;</code></code></p><p><code><code
      data-language=\"Python\"># =&gt; [[ 21 22 23 24 25 26 27 28 29]&nbsp;</code></code></p><p><code><code
      data-language=\"Python\"># &nbsp; &nbsp; [ 41 42 43 44 45 46 47 48 49]&nbsp;</code></code></p><p><code><code
      data-language=\"Python\"># &nbsp; &nbsp; [ 61 62 63 64 65 66 67 68 69]&nbsp;</code></code></p><p><code><code
      data-language=\"Python\"># &nbsp; &nbsp; [ 81 82 83 84 85 86 87 88 89]&nbsp;</code></code></p><p><code><code
      data-language=\"Python\"># &nbsp; &nbsp; [101 102 103 104 105 106 107 108 109]]</code></code></p><p>のようにシンプルに各座標値を求めることができます。</p><p><br></p><p>補足:
      plt.quiver ベクトル(矢印)について</p><p><code>plt.quiver(0.5,0.5,0.5,0.5) #(x,y,u,v) x,y-始点座標、u,v-ベクトルの向き</code></p><p><a
      href=\"https://algorithm.joho.info/programming/python/matplotlib-quiver/\"></a>わかりやすかった参考文献<a
      href=\"https://algorithm.joho.info/programming/python/matplotlib-quiver/\">&nbsp;https://algorithm.joho.info/programming/python/matplotlib-quiver/</a></p><p><br></p><pre>$
      python gradient_2d.py\r\n<code><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1559812660576-Figure_2.png\"
      style=\"width: 597px;\" class=\"fr-fic fr-dib fr-fil\"></code></pre><p><br></p><h2>勾配法</h2><p>最小値を探す場合を勾配降下法(gradient
      descent method)、最大値を探す場合を勾配上昇法(gradient ascent method)と言います。</p><p>一般的に、ニューラルネットワーク(ディー
      プラーニング)の分野では、勾配法は「勾配降下法」として登場</p><h3>x0 = x0 - &eta; (&part;f / &part;x0)</h3><p>&eta;
      は学習率と呼ばれ、</p><p>学習率の値は、0.01 や 0.001 など、前もって何らかの値に決める必要がある。一般的に、大きすぎても小さすぎても、「良い場所」にたどり着くことができない。</p><pre>#
      lr(learningrate)学習率, step_num 学習回数\r\ndef gradient_descent(f, init_x, lr=0.01,
      step_num=100):\r\n  x  = init_x\r\n  for i in range(step_num):\r\n    grad =
      numerical_gradient(f, x)\r\n    x -= lr * grad\r\n  return x</pre><p><br></p><p>問:
      f(x0 , x1 ) = x0&sup2; + x1&sup2; の最小値を勾配法で求めよ</p><pre>&gt;&gt;&gt; def function_2(x):\r\n... 
      \ return x[0]**2 + x[1]**2...\r\n\r\n&gt;&gt;&gt;  init_x = np.array([-3.0,
      4.0])\r\n&gt;&gt;&gt;  gradient_descent(function_2, init_x=init_x, lr=0.1, step_num=100)\r\narray([
      -6.11110793e-10, 8.14814391e-10])</pre><p>最終的な結果は (-6.1e-10, 8.1e-10) となり、これはほとんど
      (0, 0)に近い。</p><p>真の最小値は (0, 0) なので、勾配法によって、ほぼ正 しい結果を得ることができた</p><p><br></p><pre>(gradient_method.py)\r\nimport
      numpy as np\r\nimport matplotlib.pylab as plt\r\nfrom gradient_2d import numerical_gradient\r\n\r\n\r\ndef
      gradient_descent(f, init_x, lr=0.01, step_num=100):\r\n  x = init_x\r\n  x_history
      = []\r\n\r\n  for i in range(step_num):\r\n    x_history.append( x.copy() )
      # 配列に要素を追加\r\n    grad = numerical_gradient(f, x)\r\n    x -= lr * grad\r\n
      \ return x, np.array(x_history)\r\n\r\n\r\ndef function_2(x):\r\n  return x[0]**2
      + x[1]**2\r\n\r\ninit_x = np.array([-3.0, 4.0])    \r\nlr = 0.1\r\nstep_num
      = 20\r\nx, x_history = gradient_descent(function_2, init_x, lr=lr, step_num=step_num)\r\n<span
      style=\"color: rgb(163, 143, 132);\">#print(&quot;学習結果x&quot;)\r\n#print(x)\r\n#print(&quot;学習過程&quot;)\r\n#print(x_history)</span>\r\n\r\nplt.plot(
      [-5, 5], [0,0], &#39;--b&#39;) # blue markers with default shape\r\nplt.plot(
      [0,0], [-5, 5], &#39;--b&#39;)\r\nplt.plot(x_history[:,0], x_history[:,1], &#39;o&#39;)
      # &#39;o&#39; サークルマーカー\r\n\r\nplt.xlim(-3.5, 3.5)\r\nplt.ylim(-4.5, 4.5)\r\nplt.xlabel(&quot;X0&quot;)\r\nplt.ylabel(&quot;X1&quot;)\r\nplt.show()</pre><p>補足:
      array.copy() オブジェクトをコピーする(値を参照ではなく全く別のものを複製)</p><p>・値渡しと参照渡し</p><pre>参照渡し\r\n&gt;&gt;&gt;
      x=[1,2,3]\r\n&gt;&gt;&gt; y=x\r\n&gt;&gt;&gt; y.apend(4)\r\n&gt;&gt;&gt; y,x\r\n[1,
      2, 3, 4], [1, 2, 3, 4]</pre><p>上記は参照元と参照先がメモリを共有した状態であり、一方を変更したら両方変更が適用される</p><pre>値渡し\r\n&gt;&gt;&gt;
      x=[1,2,3]\r\n&gt;&gt;&gt; y=x.copy()\r\n&gt;&gt;&gt; y.append(4)\r\n&gt;&gt;&gt;
      x,y\r\n([1, 2, 3], [1, 2, 3, 4])</pre><p><a href=\"https://translate.google.com/translate?hl=ja&sl=en&u=https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.plot.html&prev=search\"></a><a
      href=\"https://translate.google.com/translate?hl=ja&sl=en&u=https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.plot.html&prev=search\"></a></p><p><br></p><p>補足:
      matplotlib.pyplot.plotのオプションいついてはドキュメント参照</p><p><a href=\"https://translate.google.com/translate?hl=ja&sl=en&u=https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.plot.html&prev=search\">https://translate.google.com/translate?hl=ja&amp;sl=en&amp;u=https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.plot.html&amp;prev=search</a></p><p><br></p><p>補足:
      array[:,0]やarray[:,1]について</p><p><code>[行:列]</code>でスライスでき、省略した場合はすべてを指定したことになるので、<code>[:,&nbsp;0]</code>は全ての行の0列目を取得することになります。省略せずに書くと2x2の配列の場合なら<code>a[0:2,&nbsp;0]</code>となります。</p><pre>&gt;&gt;&gt;
      a = numpy.array([[0,1], [2, 3]])\r\n&gt;&gt;&gt; aarray([[0, 1],       [2, 3]])\r\n&gt;&gt;&gt;
      a[:,0]array([0, 2])\r\n&gt;&gt;&gt;</pre><p><br></p><pre>$ python gradient_method.py\r\n<img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1559901748741-gradient.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></pre><p><br></p><p><br></p><h2>簡単なニューラルネットワークを例にして、実際に勾配を求める実装</h2><p><br></p><pre>(gradient_simplenet.py)\r\nimport
      sys, os \r\nsys.path.append(os.pardir)\r\nimport numpy as np from common.functions
      \r\nfrom common.functions import softmax, cross_entropy_error \r\nfrom common.gradient
      import numerical_gradient\r\nclass simpleNet:    \r\n  def __init__(self):\r\n
      \   self.W = np.random.randn(2,3) # ガウス分布で重み初期化\r\n\r\n  def predict(self,
      x):\r\n      return np.dot(x, self.W)\r\n\r\n  def loss(self, x, t):\r\n    z
      = self.predict(x)\r\n    y = softmax(z)\r\n    loss = cross_entropy_error(y,
      t)\r\n    return loss\r\n\r\nx = np.array([0.6, 0.9])\r\nt = np.array([0, 0,
      1])\r\n\r\nnet = simpleNet()\r\n\r\nf = lambda w: net.loss(x, t)\r\ndW = numerical_gradient(f,
      net.W)\r\n\r\nprint(dW) # 重みの微分結果</pre><p><br></p><h2>学習アルゴリズムの実装</h2><p>2
      層ニューラルネットワークを、ひとつのクラスとして実装する</p><p><br></p><pre>(two_layer_net.py)\r\nimport
      sys, os\r\nsys.path.append(os.pardir)  # 親ディレクトリのファイルをインポートするための設定\r\nfrom common.functions
      import *\r\nfrom common.gradient import numerical_gradient\r\n\r\nclass TwoLayerNet:\r\n
      \ # 引数は、入力層のニューロンの数、隠れ層のニューロンの数、出力層のニューロンの数\r\n  def __init__(self, input_size,
      hidden_size, output_size, weight_init_std=0.01):\r\n  # 重みの初期化\r\n    self.params
      = {}\r\n    self.params[&#39;W1&#39;] = weight_init_std * np.random.randn(input_size,
      hidden_size)\r\n    self.params[&#39;b1&#39;] = np.zeros(hidden_size)\r\n    self.params[&#39;W2&#39;]
      = weight_init_std * np.random.randn(hidden_size, output_size)\r\n    self.params[&#39;b2&#39;]
      = np.zeros(output_size)\r\n\r\n  # 入力層のニューロンからニューラルネットワークの計算値を出力\r\n  def predict(self,
      x):\r\n    W1, W2 = self.params[&#39;W1&#39;], self.params[&#39;W2&#39;]\r\n
      \   b1, b2 = self.params[&#39;b1&#39;], self.params[&#39;b2&#39;]\r\n\r\n    a1
      = np.dot(x, W1) + b1\r\n    z1 = sigmoid(a1)\r\n    a2 = np.dot(z1, W2) + b2\r\n
      \   y = softmax(a2)\r\n    return y\r\n\r\n  # 損失関数を求める x:入力データ, t:教師データ\r\n
      \ def loss(self, x, t):\r\n    y = self.predict(x)\r\n    return cross_entropy_error(y,
      t)\r\n\r\n  # 認識精度(0~1)\r\n  def accuracy(self, x, t):\r\n    y = self.predict(x)\r\n
      \   y = np.argmax(y, axis=1)\r\n    t = np.argmax(t, axis=1)\r\n    accuracy
      = np.sum(y == t) / float(x.shape[0])\r\n    return accuracy\r\n\r\n  # 重みパラメータに対する勾配を求める
      x:入力データ, t:教師データ\r\n  def numerical_gradient(self, x, t):\r\n    loss_W = lambda
      W: self.loss(x, t)\r\n    # 勾配を保持するディクショナリ変数\r\n    grads = {}\r\n    grads[&#39;W1&#39;]
      = numerical_gradient(loss_W, self.params[&#39;W1&#39;])\r\n    grads[&#39;b1&#39;]
      = numerical_gradient(loss_W, self.params[&#39;b1&#39;])\r\n    grads[&#39;W2&#39;]
      = numerical_gradient(loss_W, self.params[&#39;W2&#39;])\r\n    grads[&#39;b2&#39;]
      = numerical_gradient(loss_W, self.params[&#39;b2&#39;])\r\n    return grads\r\n\r\n
      \ # 重みパラメータに対する勾配を求める numerical_gradient() の高速版!\r\n  def gradient(self, x,
      t):\r\n    W1, W2 = self.params[&#39;W1&#39;], self.params[&#39;W2&#39;]\r\n
      \   b1, b2 = self.params[&#39;b1&#39;], self.params[&#39;b2&#39;]\r\n    grads
      = {}\r\n\r\n    batch_num = x.shape[0]\r\n\r\n    # forward\r\n    a1 = np.dot(x,
      W1) + b1\r\n    z1 = sigmoid(a1)\r\n    a2 = np.dot(z1, W2) + b2\r\n    y =
      softmax(a2)\r\n\r\n    # backward\r\n    dy = (y - t) / batch_num\r\n    grads[&#39;W2&#39;]
      = np.dot(z1.T, dy) # 2層目の重みの勾配\r\n    grads[&#39;b2&#39;] = np.sum(dy, axis=0)
      # 二層目のバイアスの勾配\r\n\r\n    dz1 = np.dot(dy, W2.T)\r\n    da1 = sigmoid_grad(a1)
      * dz1\r\n    grads[&#39;W1&#39;] = np.dot(x.T, da1) # 1層目の重みの勾配\r\n    grads[&#39;b1&#39;]
      = np.sum(da1, axis=0) # 一層目のバイアスの勾配\r\n\r\n    return grads</pre><p><br></p><p>TwoLayerNet
      クラスを対象に、MNIST データセッ トを使って学習</p><pre>(train_nueralnet.py)\r\n# coding: utf-8\r\nimport
      sys, os\r\nsys.path.append(os.pardir)  # 親ディレクトリのファイルをインポートするための設定\r\nimport
      numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom dataset.mnist import
      load_mnist\r\nfrom two_layer_net import TwoLayerNet\r\n\r\n# データの読み込み\r\n(x_train,
      t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)\r\n\r\nnetwork
      = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)\r\n\r\niters_num
      = 10000  # 勾配法による更新の回数(繰り返し回数)を適宜設定する\r\ntrain_size = x_train.shape[0]\r\nbatch_size
      = 100\r\nlearning_rate = 0.1\r\n\r\ntrain_loss_list = []\r\ntrain_acc_list =
      []\r\ntest_acc_list = []\r\n\r\n# 1エポックあたりの繰り返し数(訓練データの総数6万枚に相当する量を読み込んだ時全ての画像を見たと定め1エポック)\r\niter_per_epoch
      = max(train_size / batch_size, 1)\r\ncount=0\r\nfor i in range(iters_num):\r\n
      \ # ミニバッチの取得\r\n  batch_mask = np.random.choice(train_size, batch_size) # train_size未満の自然数をbatch_size個セレクト\r\n
      \ x_batch = x_train[batch_mask] # 例えば, x_train[[0,3]] だったら[x_train[0],x_train[3]]
      になる\r\n  t_batch = t_train[batch_mask]\r\n\r\n <span style=\"color: rgb(163,
      143, 132);\"> # 勾配の計算\r\n  #grad = network.numerical_gradient(x_batch, t_batch)</span>\r\n
      \ grad = network.gradient(x_batch, t_batch)\r\n\r\n  # パラメータの更新(学習)\r\n  for
      key in (&#39;W1&#39;, &#39;b1&#39;, &#39;W2&#39;, &#39;b2&#39;):\r\n    network.params[key]
      -= learning_rate * grad[key]\r\n\r\n  # 損失関数を計算して配列にメモ\r\n  loss = network.loss(x_batch,
      t_batch)\r\n  train_loss_list.append(loss)\r\n\r\n  # 1エポック(バッチ)ごとに認識精度を計算 今回はiter_per_epochが600.0なので600回ごとに実行される\r\n
      \ if i % iter_per_epoch == 0:\r\n    # print(i) =&gt; 0,600,1200, ... ,9600\r\n
      \   train_acc = network.accuracy(x_train, t_train)\r\n    test_acc = network.accuracy(x_test,
      t_test)\r\n    train_acc_list.append(train_acc) # 精度をメモ\r\n    test_acc_list.append(test_acc)
      # 精度をメモ\r\n    print(&quot;train acc, test acc | &quot; + str(train_acc) + &quot;,
      &quot; + str(test_acc))\r\n\r\n  # グラフの描画\r\nmarkers = {&#39;train&#39;: &#39;o&#39;,
      &#39;test&#39;: &#39;s&#39;}\r\nx = np.arange(len(train_acc_list))\r\nplt.plot(x,
      train_acc_list, label=&#39;train acc&#39;)\r\nplt.plot(x, test_acc_list, label=&#39;test
      acc&#39;, linestyle=&#39;--&#39;)\r\nplt.xlabel(&quot;epochs&quot;)\r\nplt.ylabel(&quot;accuracy&quot;)\r\nplt.ylim(0,
      1.0)\r\nplt.legend(loc=&#39;lower right&#39;)\r\nplt.show()</pre><pre>$ python
      train_neuralnet.py\r\ntrain acc, test acc | 0.09871666666666666, 0.098\r\ntrain
      acc, test acc | 0.7983166666666667, 0.8035\r\ntrain acc, test acc | 0.8775833333333334,
      0.8794\r\ntrain acc, test acc | 0.8989, 0.902\r\ntrain acc, test acc | 0.9080333333333334,
      0.9117\r\ntrain acc, test acc | 0.9140666666666667, 0.9162\r\ntrain acc, test
      acc | 0.91905, 0.9208\r\ntrain acc, test acc | 0.92365, 0.9265\r\ntrain acc,
      test acc | 0.9277333333333333, 0.9272\r\ntrain acc, test acc | 0.9306166666666666,
      0.9305\r\ntrain acc, test acc | 0.9336333333333333, 0.9334\r\ntrain acc, test
      acc | 0.9368166666666666, 0.9366\r\ntrain acc, test acc | 0.93925, 0.9399\r\ntrain
      acc, test acc | 0.9417333333333333, 0.9401\r\ntrain acc, test acc | 0.9438833333333333,
      0.942\r\ntrain acc, test acc | 0.9452666666666667, 0.9444\r\ntrain acc, test
      acc | 0.9467, 0.9455\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1559980371365-Figure.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></pre><p>学習をしていない初めは確率通りでほぼ10%であり、6万枚を16エポック96万枚学習した性能は94%である</p><p><br></p><p>訓練データとテストデータを使って評価した認識精度は両方とも向上している。</p><p>また、その
      2 つの認識精度には差がないことが分かる(その 2 つの線はほぼ重なっている)。</p><p>そのため、今回の学習では過学習が起きていないことが
      分かる。</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-06-06 04:08:16.369075'
    - '2019-06-25 09:45:52.535471'
  - - 163
    - MuuMuuDomain + Route53 独自ドメイン取得＆IPと紐付け
    - "<h1 style=\"text-align: center;\">MuuMuuDomain + Route53</h1><p><br></p><h2>現状:
      EC2にてアプリをデプロイし、http://[ElasticIP] で公開している状態</h2><p><br></p><h2>目的: 独自ドメインを取得してhttp://[ElasticIP]
      とひもづけることで、独自ドメインでサイトにアクセスできるようにする</h2><h2><br></h2><h2>ドメイン取得</h2><p><a href=\"https://muumuu-domain.com/\"></a><a
      href=\"https://muumuu-domain.com/\">https://muumuu-domain.com/<img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560142365082-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-10+13.52.21.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></a></p><p>検索を押下すると一覧が表示されるのでその中で欲しいものを選択</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560142460039-domain.jpeg\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>基本既定値で大丈夫です。<br>DNSに関しても後で設定するのでそのままでOK</p><p>支払いはコンビニやクレジットカードが選択できます。<br>そのまま進んでいき最後にサマリが出てくるので確認して申し込めば完了です。</p><p>以上でドメインが取得できました。</p><p><br></p><h2><br>Route
      53</h2><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560142774071-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-10+13.58.30.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560143415984-domain.jpeg\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>ドメインネームを記載（取得したドメイン名
      例: example.com）</p><p>コメントは適当に作成</p><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560143938289-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-10+14.12.52.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h2>ムームードメインの管理画面へ移動</h2><p>ネームサーバーをRoute53に変更<br><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560144051171-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-09+20.00.25.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>先ほどの4つのNameServersの情報を記載します。最後の.は要らない</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560144222858-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-09+20.00.13.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>例ではサブドメインをwwwと定義しました。</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560144774834-ip.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p>これでEC2（WEBサーバ)に独自ドメイン(http://www.example.com)で接続できるようになる。</p><p>と言いたいところだが、私の場合、「welcome
      to nginx」のページが表示されてしまい、サイトのページが表示されなかった。</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560144894853-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-10+14.34.36.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>理由は、nginxの設定ファイル
      /etc/nginx/conf.d/froala-blog.conf (froala-blogは私のアプリ名)</p><p>にて<br><code>server_name
      xx.xx.xx.xx;</code>&nbsp;<br>ではなく<br><code>server_name www.example.com xx.xx.xx.xx;</code>&nbsp;<br>というように、サーバー名に独自ドメインを追加した</p><p><br></p><p>/etc/nginx/conf.d/froala-blog.conf</p><pre>#
      log directory\r\nerror_log  /var/www/rails/froala-blog/log/nginx.error.log;\r\naccess_log
      /var/www/rails/froala-blog/log/nginx.access.log;\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream app_server {\r\n  # for UNIX domain socket setups\r\n  server
      unix:/var/www/rails/froala-blog/tmp/sockets/unicorn.sock fail_timeout=0;\r\n}\r\nserver
      {\r\n  listen 80;\r\n  server_name <span style=\"color: rgb(243, 121, 52);\">www.example.com</span>
      <span style=\"color: rgb(243, 121, 52);\">xx.xx.xx.xx</span>; # 独自ドメイン ElasticIP\r\n 
      # nginx so increasing this is generally safe...\r\n  keepalive_timeout 5;\r\n 
      # path for static files\r\n  root /var/www/rails/froala-blog/public;\r\n  #
      page cache loading\r\n  try_files $uri/index.html $uri.html $uri @app;\r\n 
      location @app {\r\n    # HTTP headers\r\n    proxy_set_header X-Forwarded-For
      $proxy_add_x_forwarded_for;\r\n    proxy_set_header Host $http_host;\r\n   
      proxy_redirect off;\r\n    proxy_pass http://app_server;\r\n  }\r\n  # Rails
      error pages\r\n  error_page 500 502 503 504 /500.html;\r\n  location = /500.html
      {\r\n    root /var/www/rails/froala-blog/public;\r\n  }\r\n}</pre><p><br></p><p>最後にnginxとunicornを再起動して無事アクセスできました。</p><pre>sudo
      service nginx restart(nginx再起動)</pre><pre>sudo kill -HUP `cat /var/www/rails/froala-blog/tmp/pids/unicorn.pid`(unicorn再起動)</pre><p><br></p><p><br></p><p><span
      style=\"font-size: 60px;\">完！！<span class=\"fr-emoticon fr-deletable fr-emoticon-img\"
      style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f600.svg);\">&nbsp;</span>
      </span></p><p><br></p><p><br></p><p><br></p>"
    - '2019-06-10 04:48:30.35856'
    - '2019-06-10 05:47:51.934507'
  - - 164
    - Amazon EC2のタイムゾーンを日本時間に変更する方法
    - "<h1 itemprop=\"headline\">Amazon EC2のタイムゾーンを日本時間に変更する方法<p>Tokyoリージョンでインスタンスを立ち上げたものの、タイムゾーンが初期設定でUTCになっていたので、日本時間に変更する方法。<br>確認するとこんな感じ。</p><pre>$
      date\r\n2019年  6月 13日 木曜日 07:14:45 UTC</pre></h1><h1>時間帯の変更</h1><h2>Step1 インスタンスで使用する時間帯を検索</h2><p><code>/usr/share/zoneinfo</code>にすべての時間帯があるので、そちらを参照。</p><pre>$
      ls /usr/share/zoneinfo/\r\nAfrica      Canada   GB         Indian     Mexico
         ROK        iso3166.tab\r\nAmerica     Chile    GB-Eire    Iran       NZ  
           Singapore  leapseconds\r\nAntarctica  Cuba     GMT        Israel     NZ-CHAT
        Turkey     posix\r\nArctic      EET      GMT+0      Jamaica    Navajo    UCT
             posixrules\r\nAsia        EST      GMT-0      <span style=\"color: rgb(243,
      121, 52);\">Japan</span>      PRC       US         right\r\nAtlantic    EST5EDT
       GMT0       Kwajalein  PST8PDT   UTC        tzdata.zi\r\nAustralia   Egypt  
       Greenwich  Libya      Pacific   Universal  zone.tab\r\nBrazil      Eire    
      HST        MET        Poland    W-SU       zone1970.tab\r\nCET         Etc  
         Hongkong   MST        Portugal  WET\r\nCST6CDT     Europe   Iceland    MST7MDT
         ROC       Zulu</pre><p><code>Japan</code>があることを確認。</p><p><br></p><h2>Step2
      clockファイルの変更</h2><pre>$ vim /etc/sysconfig/clock</pre><p>こちらでファイルを編集</p><pre>#
      ZONE=&quot;UTC&quot;\r\nZONE=&quot;Japan&quot;\r\nUTC=true</pre><p><br></p><h2>Step3
      時間帯ファイルにシンボリックリンク</h2><p>インスタンスが現地時間情報を参照する際に、時間帯ファイルを読み込むためシンボリックリンクをはる。</p><pre>$
      sudo ln -sf /usr/share/zoneinfo/Japan /etc/localtime</pre><h2>Step4 システムの再起動</h2><pre>$
      sudo reboot</pre><p><code>Connection to xx.xx.xx.xx closed by remote host.<br>Connection
      to xx.xx.xx.xx closed.<br>sshすると...<br>ssh: connect to host 54.250.70.47 port
      22: Operation timed out<br><br>ですが大丈夫1分くらい待ってもう一度sshすると無事接続でき、反映されている<br></code></p><p><br></p><h2>Step5
      日本時間になってるかを確認</h2><pre>$ date\r\n2019年  6月 13日 木曜日 16:22:53 JST</pre>"
    - '2019-06-13 07:25:19.446024'
    - '2019-06-13 07:30:04.837476'
  - - 165
    - EC2にHeroku CLI を導入
    - "<h1 style=\"text-align: center;\">EC2にHeroku CLI を導入</h1><p><br></p><pre><code>$
      npm install -g heroku</code></pre><p>すると...</p><p><code>npm WARN deprecated
      heroku-cli@7.0.9: &#39;heroku-cli&#39; has been renamed &#39;heroku&#39;\r\nnpm
      WARN deprecated cross-spawn-async@2.2.5: cross-spawn no longer requires a build
      toolchain, use it instead</code></p><p>&#39;heroku-cli&#39; は &#39;heroku&#39;
      に変わったのでそっちを使えとさ。</p><p><br></p><pre>1...$ npm uninstall -g heroku-cli\r\n2...$
      npm i -g heroku</pre><p><span style=\"font-size: 60px;\">完</span></p>"
    - '2019-06-15 10:10:55.748712'
    - '2019-06-15 10:14:21.396101'
  - - 166
    - EC2-ローカル間でのファイル転送
    - "<h1 style=\"text-align: center;\">EC2-ローカル間でのファイル転送</h1><h2><br></h2><h3>目的:
      ローカル内でエクスポートしたDBのダンプファイルをEC2に転送させたかった。初めは$viコマンドでファイル作成&amp;貼り付けで済んでいたのだが、重いファイルだとviコマンドでは貼り付け先でフリーズを起こす。よって、コマンドを使用することにした。</h3><p><br></p><h2>ちなみに、scpはsshとcopyを意味するらしい</h2><p><br></p><p>ローカル：Mac<br>Amazon
      EC2：Amazon Linux</p><p><br></p><h1>EC2 &rarr; ローカル 転送</h1><p>scp -i [公開鍵ファイルのパス]
      [ユーザ名@ドメイン]:[送信元EC2ファイルパス] [転送先ローカルファイルパス]</p><pre># 例\r\nscp -i /keys/hoge.pem
      user@ec2-xxxx.com:/sqls/hoge.sql /Desktop</pre><p><br></p><h1>ローカル &rarr; EC2
      転送</h1><p>scp -i [公開鍵ファイルのパス] [送信元先ローカルファイルパス] [ユーザ名@ドメイン]:[転送先EC2ファイルパス]</p><pre>#
      例\r\nscp -i /keys/hoge.pem /Desktop/hoge.sql user@ec2-xxxx.com:/sqls</pre><p><br></p><p>筆者の場合は</p><pre>$scp
      -i ~/.ssh/EC2/ec2_key_rsa ~/DIARY/dragonarrow/latest.dump tatsuya@xx.xx.xx.xx:/var/www/rails/myApp/
      </pre><p>これで /var/www/rails/myApp配下にlatest.dumpが作成されました。</p><p>ec2-userでやるとmyAppの権限でエラーを出したため、権限ユーザーでアクセスしました。</p><p><br></p><h1
      itemprop=\"headline\">scpコマンドでPermission deniedが出るときの対処法</h1><p>原因が二つあり、一つはアップロード先にアップロードのためのディレクトリが用意されていないこと、もう一つは権限の問題。</p><p>一つ目に関してはアップロード先のディレクトリにアップロードするディレクトリと同名のディレクトリを用意してあげることで解決する。</p><p><br></p><p>二つ目の問題については、<span
      style=\"color: rgb(41, 105, 176);\">アップロードするディレクトリのローカルにおける権限</span>と、<span
      style=\"color: rgb(184, 49, 47);\">アップロード先に用意したディレクトリの権限</span>の両方を気にしてあげる必要がある。権限を持つuserを指定してscpするか、一時的に777にしてあげるのもあり（ほんとは危険・・・）</p><pre
      title=\"\">$ chmod 777 myApp/</pre><p><br></p><h1>まとめ</h1><p>scpコマンド便利、ありがたや。</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-06-15 11:05:53.035518'
    - '2019-06-16 09:53:56.851012'
  - - 167
    - Herokuにあげてるアプリをクローンしたい
    - "<h1 style=\"text-align: center;\"><span style=\"font-size: 48px;\">Heroku にある既存のアプリを
      git clone する</span></h1><p><br></p><h1>Heroku で既存アプリを扱う</h1><p><code>$ heroku
      create</code> をしてその流れの中でアプリを扱う説明はよく見かけるのですが、すでに存在しているアプリをまっさらな環境にもってくる場合はあまり見かけなかったので書いておきます。なお、
      Heroku Toolbelt の準備はできているものとします。</p><p><br></p><h1><code>heroku apps</code>
      でアプリ一覧の情報を得る</h1><p><code>$ heroku apps</code> で現在存在するアプリの一覧が得られます。</p><pre
      data-lang=\"\" data-unlink=\"\">$ heroku apps\r\n=== your@mail.address Apps\r\nfoo-bar-12345\r\nhoge-fuga-98765\r\nfoobar-hogefuga-54321</pre><p><br></p><h1><code>heroku
      git:clone --app アプリ名</code> をすると「アプリ名」のファイルがダウンロードできる</h1><p>前項の結果によりアプリ名が分かれば、<code>$
      heroku git:clone --app アプリ名</code> としてアプリ名を指定することでいわゆる <code>git clone</code>
      ができます。</p><pre data-lang=\"\" data-unlink=\"\">$ heroku git:clone --app foobar-hogefuga-54321\r\nCloning
      into &#39;foobar-hogefuga-54321&#39;...\r\nwarning: You appear to have cloned
      an empty repository.\r\nChecking connectivity... done.</pre><p><br></p><h1><code>heroku
      git:clone</code> したファイル群には Heroku と連携する情報が組み込み済み</h1><p>前項で clone したリポジトリは Heroku
      と結びついた設定が組み込み済みです。具体的には <code>.git/config</code> に以下のような設定がすでに書き込まれています。</p><pre
      data-lang=\"config\" data-unlink=\"\">[remote &quot;heroku&quot;]\r\n    url
      = <a href=\"https://git.heroku.com/foobar-hogefuga\">https://git.heroku.com/foobar-hogefuga</a>-54321.git\r\n
      \   fetch = +refs/heads/*:refs/remotes/heroku/*\r\n[branch &quot;master&quot;]\r\n
      \   remote = heroku\r\n    merge = refs/heads/master</pre><p>したがって、<code>$ git
      push heroku master</code> のように実行すれば Heroku に すぐさまPush できることになります。</p><p><br></p><h1>補足</h1><h4><code>heroku
      apps:info アプリ名</code> でアプリの詳細情報を得る</h4><p>アプリ名が分かれば、<code>$ heroku apps:info
      アプリ名</code> を実行すると指定したアプリの詳細情報が得られます。</p><pre data-lang=\"\" data-unlink=\"\">$
      heroku apps:info hoge-fuga-98765\r\n=== hoge-fuga-98765\r\nAuto Cert Mgmt: false\r\nDynos:\r\nGit
      URL:        https://git.heroku.com/hoge-fuga-98765.git\r\nOwner:          your@mail.address\r\nRegion:
      \        us\r\nRepo Size:      0 B\r\nSlug Size:      0 B\r\nStack:          heroku-16\r\nWeb
      URL:        https://hoge-fuga-98765.herokuapp.com/</pre><p><br></p><p><br></p>"
    - '2019-06-15 11:44:15.787108'
    - '2019-06-15 11:48:16.278988'
  - - 168
    - yaml_dbを使ってローカルDBをEC2にダンプ
    - "<h1 style=\"text-align: center;\">yaml_dbを使ってローカルDBをEC2にダンプ</h1><p><br></p><h3>手順1
      yaml_dbを導入</h3><pre># Gemfile\r\ngem &#39;yaml_db&#39;\r\n$ bundle install</pre><p><br></p><h3>手順2
      コピーしたいデータをダンプ&amp;ロード</h3><pre>$ rake db:dump RAILS_ENV=&quot;development&quot;\r\n(config/db/data.yml
      will be created!)\r\n\r\n$ rake db:data:load RAILS_ENV=&quot;production&quot;\r\n(production.sqlite3
      will be created!)</pre><p><br></p><h1>今回は、<span style=\"color: rgb(41, 105,
      176);\">ローカルのdevelopment環境のpostgreSQLデータベース</span>を<span style=\"color: rgb(184,
      49, 47);\">EC2直入れのpostgreSQLデータベース</span>にダンプする</h1><p><br></p><p>1. ローカルのdevelopment環境のDBデータをダンプして転送</p><pre>ローカル\r\n$
      cd ~/DIARY/dragonarrow # 自分の作業ディレクトリに移動\r\n$ rake db:dump RAILS_ENV=&quot;development&quot;　#
      development環境のDBデータをダンプ\r\n$ scp -i ~/.ssh/AWS/dragonarrow_key_rsa ~/DIARY/dragonarrow/db/data.yml
      <a href=\"mailto:tatsuya@xx%3A/var/www/rails/froala-blog/db/.xx\">tatsuya@xx.xx.xx.xx:/var/www/rails/froala-blog/db/</a>\r\ndata.yml
                                           100%  516KB   2.0MB/s   00:00</pre><p>scpはディレクトリごとアップロードする時は
      -rをつける</p><p><br></p><p>2. 転送されたdata.ymlをproduction環境で読み込む</p><pre>EC2\r\nec2にssh\r\n$
      cd /var/www/rails/froala-blog/\r\n$ bundle exec rake db:data:load RAILS_ENV=&quot;production&quot;</pre><p><br></p><h1>終了です。無事ダンプされました。</h1><p><br></p><h1><br></h1><h1>SCPとは？</h1><p>sshを使用してネットワーク越しに、ファイルをコピーするコマンドです。</p><p><br></p><h2>オプション</h2><pre>-i
      秘密鍵ファイル　　秘密鍵ファイルを使用する際に使用\r\n-P ポート番号　　　　SSHの接続ポート番号が接続先で変更されている場合に使用\r\n-p
      \ 　　　　　　　　　コピー元データの更新時間やパーミッション情報を保持させる\r\n-r                ディレクトリ内のデータを再帰的にコピーする\r\n-C
      \               データを圧縮し、コピーする</pre><p><br></p><h2>scp書式(リモートホストからのローカルへコピー)</h2><pre>scp
      [オプション] <span style=\"color: rgb(184, 49, 47);\">[接続ユーザ]@ホスト名(IPアドレス):コピー元</span>　　<span
      style=\"color: rgb(41, 105, 176);\">コピー先</span></pre><h2>scp書式(ローカルからリモートへコピー)</h2><pre>scp
      [ オプション ] <span style=\"color: rgb(41, 105, 176);\">コピー元</span>  <span style=\"color:
      rgb(184, 49, 47);\">[接続先ユーザ]@ホスト名(IPアドレス):コピー先</span></pre><p><br></p><h2>よく出てくるエラーメッセージ</h2><pre>Permission
      denied</pre><p>コピーするディレクトリ、ファイルに書き込み権限がない場合に表示<br>&rarr;ファイルの所有者やパーミッションを確認する必要がある</p><pre>not
      a regular file</pre><p>ディレクトリをコピーする際に[-r]オプションを使用しない場合に表示</p>"
    - '2019-06-16 09:56:21.074893'
    - '2019-06-16 10:24:11.409876'
  - - 169
    - Jupyter Notebookのインストール
    - "<h1 itemprop=\"headline\" style=\"text-align: center;\">Jupyter Notebookのインストール</h1><p><br></p><section
      itemprop=\"articleBody\"><h2>はじめに</h2><p>Jupyter NotebookをmacOSに導入した際の記録（手順メモ）です。</p><ul><li>macOS
      High Sierra</li><li>Python3.6.4</li></ul><h2>pipを更新する</h2><p>pipを最新の状態へ更新します。</p><pre>$
      pip install --upgrade setuptools\r\n$ pip install --upgrade pip</pre><h2>必要パッケージをインストールする</h2><p>必要なパッケージをインストールします。</p><pre>$
      pip install numpy\r\n$ pip install scipy\r\n$ pip install matplotlib\r\n$ pip
      install Pillow\r\n$ pip install ipython[all]</pre><h2>Jupyter Notebookをインストールする</h2><p>Jupyter
      Notebookをインストールします。</p><pre>$ pip install jupyter</pre><h2>確認する</h2><p>以下を実行し、ブラウザでJupyter
      Notebookが開けるか確認します。</p><pre>$ jupyter notebook</pre><p><br></p><p><br></p><p><span
      style=\"font-size: 60px;\">以上で起動しました。</span></p></section>"
    - '2019-06-17 01:18:49.27233'
    - '2019-06-17 02:09:16.232844'
  - - 170
    - ゼロから作る Deep Learning』で使用する微分ファイル
    - "<h1 style=\"text-align: center;\">深層学習の微分関数</h1><p>書籍ではch01,ch02,ch03...フォルダと同じ階層にcommonフォルダを作成し、そのフォルダにgradient.pyとして置いてある</p><p>書籍のgithub<a
      href=\"https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/functions.py\"></a><a
      href=\"https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/gradient.py\">https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/gradient.py</a></p><p>各関数が必要な時はimportするだけで利用できるようにする。</p><p><br></p><pre><span
      style=\"font-size: 24px;\">import numpy as np\r\n\r\n\r\ndef _numerical_gradient_1d(f,
      x):\r\n    h = 1e-4 # 0.0001\r\n    grad = np.zeros_like(x)\r\n    \r\n    for
      idx in range(x.size):\r\n        tmp_val = x[idx]\r\n        x[idx] = float(tmp_val)
      + h\r\n        fxh1 = f(x) # f(x+h)\r\n        \r\n        x[idx] = tmp_val
      - h \r\n        fxh2 = f(x) # f(x-h)\r\n        grad[idx] = (fxh1 - fxh2) /
      (2*h)\r\n        \r\n        x[idx] = tmp_val # 値を元に戻す\r\n        \r\n    return
      grad\r\n\r\n\r\n\r\n\r\ndef numerical_gradient_2d(f, X):\r\n    if X.ndim ==
      1:\r\n        return _numerical_gradient_1d(f, X)\r\n    else:\r\n        grad
      = np.zeros_like(X)\r\n        \r\n        for idx, x in enumerate(X):\r\n   
              grad[idx] = _numerical_gradient_1d(f, x)\r\n        \r\n        return
      grad\r\n\r\n\r\n# 中心差分で微分\r\ndef numerical_gradient(f, x):\r\n    h = 1e-4 #
      0.0001\r\n    grad = np.zeros_like(x)\r\n    \r\n    it = np.nditer(x, flags=[&#39;multi_index&#39;],
      op_flags=[&#39;readwrite&#39;])\r\n    while not it.finished:\r\n        idx
      = it.multi_index\r\n        tmp_val = x[idx]\r\n        x[idx] = float(tmp_val)
      + h\r\n        fxh1 = f(x) # f(x+h)\r\n        \r\n        x[idx] = tmp_val
      - h \r\n        fxh2 = f(x) # f(x-h)\r\n        grad[idx] = (fxh1 - fxh2) /
      (2*h)\r\n        \r\n        x[idx] = tmp_val # 値を元に戻す\r\n        it.iternext()\r\n 
            \r\n    return grad</span></pre><p><br></p><p><span style=\"font-size:
      24px;\"><span style=\"font-size: 24px;\">_numerical_gradient_1d は画像一枚が渡ってきたときの微分</span></span></p><p>x
      = array([0.1, 0.1, 0.9, 0.1, 0.6, 0. , 0.9, 0.7, 0. , 0.7]) みたいな状況</p><p><br></p><p><span
      style=\"font-size: 24px;\"><span style=\"font-size: 24px;\">_numerical_gradient_2d
      は画像がバッチ処理(100枚とか)で渡ってきたときの微分</span></span></p><p>x = array([[0.9, 0.9, 0.2,
      0. , 0.2, 0.3, 0.8, 0.2, 0.1, 0.1],</p><p>&nbsp; &nbsp; &nbsp; &nbsp;[0.3, 0.1,
      0. , 0.2, 0.4, 0.1, 0.5, 0.6, 0.5, 0.7],</p><p>&nbsp; &nbsp; &nbsp; &nbsp;...</p><p>&nbsp;
      &nbsp; &nbsp; &nbsp;[0.2, 0.7, 0.5, 0.4, 0.7, 0.8, 0.5, 0.3, 0.4, 0. ]]) &nbsp;みたいな状況</p><p><br></p><p><span
      style=\"font-size: 24px;\">numerical_gradient はxの次元数に場合分けを使わない便利な書き方</span></p><p>役割は
      <span style=\"font-size: 14px;\">_numerical_gradient_2d と同じ</span></p><p><span
      style=\"font-size: 24px;\">補足:【Python】numpy.nditer()という関数</span></p><p><a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nditer.html\">numpy.nditer
      &mdash; NumPy v1.12 Manual</a></p><p>オプションのop_flags=[&#39;readwrite&#39;]配下の説明参照</p><p><span
      style=\"font-size: 24px;\"><a href=\"https://teratail.com/questions/79756\"></a></span><span
      style=\"font-size: 14px;\"><a href=\"https://teratail.com/questions/79756\">https://teratail.com/questions/79756</a></span></p><p>何するの、これ？
      と思ったけど、使ってみた。まずはコードから。</p><pre data-lang=\"python\" data-unlink=\"\">np_array
      = np.random.randn(2, 3)\r\nprint(np_array)\r\n\r\nnditer = np.nditer(np_array,
      flags=[&#39;multi_index&#39;])\r\nwhile not nditer.finished:\r\n    print(nditer.multi_index)\r\n
      \   print(np_array[nditer.multi_index])\r\n    nditer.iternext()</pre><p>結果</p><pre
      data-lang=\"\" data-unlink=\"\"># 最初のprint()\r\n[[-1.74892591 -0.59628881  0.05522772]\r\n
      [ 1.31665726  1.22965398 -0.41140946]]\r\n\r\n# whileループ\r\n(0, 0)\r\n-1.7489259098\r\n(0,
      1)\r\n-0.596288812217\r\n(0, 2)\r\n0.0552277235215\r\n(1, 0)\r\n1.31665726393\r\n(1,
      1)\r\n1.229653983\r\n(1, 2)\r\n-0.411409464808</pre><p>なるほどー。何が便利かわからん。。。と思ったけど、numpyの次元が増えた時、２重ループとか使わず全パターン繰り返される</p><p>画像っぽい値で。2行2列3の値（３次元）</p><pre
      data-lang=\"python\" data-unlink=\"\">np_array = np.random.randn(2, 2, 3)\r\nprint(np_array)\r\n\r\nnditer
      = np.nditer(np_array, flags=[&#39;multi_index&#39;])\r\nwhile not nditer.finished:\r\n
      \   print(nditer.multi_index)\r\n    print(np_array[nditer.multi_index])\r\n
      \   nditer.iternext()</pre><pre data-lang=\"\" data-unlink=\"\">[[[ 0.40570373
      \ 0.29383617  0.19770627]\r\n  [-0.35118724  0.64944819 -0.85610483]]\r\n\r\n
      [[-0.99811347 -0.3842173  -0.40674939]\r\n  [-0.28392354  1.00559893 -0.36640248]]]\r\n(0,
      0, 0)\r\n0.405703731115\r\n(0, 0, 1)\r\n0.293836169251\r\n(0, 0, 2)\r\n0.197706273648\r\n(0,
      1, 0)\r\n-0.351187235594\r\n(0, 1, 1)\r\n0.649448185325\r\n(0, 1, 2)\r\n-0.856104830751\r\n(1,
      0, 0)\r\n-0.998113470526\r\n(1, 0, 1)\r\n-0.384217298371\r\n(1, 0, 2)\r\n-0.406749392256\r\n(1,
      1, 0)\r\n-0.283923537977\r\n(1, 1, 1)\r\n1.0055989324\r\n(1, 1, 2)\r\n-0.366402477684</pre><p>すばらしい！！！</p><p><br></p><p><br></p><p><br></p>"
    - '2019-06-25 09:56:50.821113'
    - '2019-06-25 11:01:09.097739'
  - - 171
    - froala ライセンス 裏技
    - "<h1 style=\"text-align: center;\">froala ライセンス 裏技</h1><p><br></p><p><code>Ruby
      On Rails (5.2.1)</code></p><p><code>froala-editor-sdk (1.2.0</code></p><p><code>前準備としてjqueryを使うためにサードパーティの使用もしくはCNDを記述して置く必要がある</code></p><p><br></p><p>froalaを使う場合、本番環境だとライセンスがないと警告みたいなのが出て、それを購入して手続きすると警告が消える仕組み</p><pre>&lt;style&gt;\r\n 
      .fr-wrapper &gt; div:first-child {\r\n  display: none;\r\n  }\r\n&lt;/style&gt;\r\n\r\n\r\n&lt;script&gt;\r\n 
      window.onload=function() {\r\n  // alert(&#39;remove copyrite&#39;);\r\n  //
      var save=$(&#39;.fr-wrapper show-placeholder .fr-element fr-view&#39;).detach();\r\n 
      // $(&#39;.fr-wrapper show-placeholder&#39;).empty().append(save);\r\n  var
      appendHtml=&quot;&lt;div class=&#39;fr-element fr-view&#39; dir=&#39;auto&#39;
      contenteditable=&#39;true&#39; ariadisabled=&#39;false&#39; spellcheck=&#39;true&#39;&gt;&lt;p
      id=&#39;postCont&#39;&gt;&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&quot;\r\n  // $(&#39;.fr-wrapper.show-placeholder&#39;).empty().append(appendHtml);\r\n 
       $(&#39;.fr-wrapper.show-placeholder&#39;).children().hide();\r\n    $(&#39;.fr-element.fr-view&#39;).show();\r\n 
      }\r\n&lt;/script&gt;</pre><p><br></p><p>終わり。</p><p><br></p><p>一説によると以下のcssだけでもでもいけるとか</p><pre>.fr-wrapper
      div:first-child a{\r\n  display: none !important;    \r\n}</pre><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-07-01 01:47:23.344967'
    - '2019-07-01 02:30:31.44143'
  - - 172
    - EC2でyumがCannot allocate memory
    - '<h1 style="text-align: center;">EC2でyumがCannot allocate memoryになる</h1><p><br></p><h2>問題</h2><h3>AWS
      EC2 の最低スペック(nano インスタンス)で動かしているマシンがあったのですが、そこで yum update を行ったところ [Errno 5]
      [Errno 12] Cannot allocate memoryとエラーが出た。</h3><p><br></p><h2>原因</h2><h3>メモリが足りないこと。
      AWS EC2 の nano インスタンスなんで500MBぐらいしかない。</h3><p><br></p><h2>エラーへの対処</h2><p>メモリ不足が原因ですので、メモリを増やしてあげれば解決するのですが、EC2の物理メモリはインスタンスタイプ毎に決められているので物理メモリを増やすことはできない。</p><p>そこで、LINUXのしくみで、ディスクをメモリ代わりに使用する<strong>仮想メモリというものを追加</strong></p><p><br></p><p><br></p><p><br></p><pre>fallocate
      -l 512M /swapfile</pre><p>これで仮想メモリとして使う<strong>スワップファイルを確保</strong>します。-l の後には追加する大きさを指定します。</p><p><br></p><pre>chmod
      600 /swapfile</pre><p>スワップファイルのアクセス権を設定</p><p><br></p><pre>mkswap /swapfile</pre><p>仮想メモリとして使うファイルとして指定</p><p><br></p><pre>swapon
      /swapfile</pre><p>仮想メモリを有効にします</p><p><br></p><p><code>以上の手順で&nbsp;swapon failed:
      Invalid argument というエラーが出てしまう場合は以下の手順をお試しください</code></p><p><code>まず、<strong>先ほど作成した
      swapfile を削除します</strong>。その後以下のコマンドラインを入力してください。（fallocate を dd に変えただけです）</code></p><p><br></p><p><code>dd
      if=/dev/zero of=/swapfile count=512000 bs=1K<br>chmod 600 /swapfile<br>mkswap
      /swapfile<br>swapon /swapfile</code></p><p data-empty="true"><br></p><p data-empty="true"><strong>仮想メモリの追加完了！</strong></p><p
      data-empty="true"><br></p><p>以上の操作がエラーなく終わったら改めて yum update</p><p>無事にアップデートが完了しました。</p><p>仮想メモリの大きさは自由に変更できますので、上記のコマンドの512の部分を適切な数値に変更してお試しください。</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>'
    - '2019-07-05 09:40:52.377605'
    - '2019-07-05 10:00:38.069981'
  - - 173
    - certbotで無料でHTTPS化
    - "<h1 style=\"text-align: center;\">certbotで無料でHTTPS化</h1><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1562654275349-certbot_ec2.jpg\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib\"></p><p><br></p><h1>実行環境</h1><ul><li>Amazon
      Linux 2</li><li>nginx version: nginx/1.12.2</li></ul><p><br></p><h1>1．Let&#39;s
      Encryptとは？</h1><p>今まで、サイトをSSL化するためには、1年単位でライセンスを購入し、その証明書を用いる必要がありました。</p><p>こいつがピンきりですが高いものはめちゃくちゃ高くて、<strong>年間数千円~十数万円の費用がかかるのが普通</strong>でした。</p><p>そこで、「インターネットを介した安全な通信を行う際の、経済面・技術面・教育面での障壁を減らすこと」を指名として活動している、非営利団体のISRG(Internet
      Security Research Group)が開発したのが、このLet&#39;s Encryptなのです。</p><p><br></p><p><strong>これを使えば無料かつ、面倒な更新手続き・運用を自動化しながら、安全な通信を行うことが出来るようになります。</strong></p><p><br></p><h1>2．なぜcertbotを使うの？</h1><p>こちらの記事を参考に見ていただくと、今回はパターン2になります。</p><p><a
      href=\"https://recipe.kc-cloud.jp/archives/11067\"></a><a href=\"https://recipe.kc-cloud.jp/archives/11067\">https://recipe.kc-cloud.jp/archives/11067</a></p><p>AWSではAWS
      Certificate Manager (ACM) を使って無料で証明書を発行できますが、以下のサービスでしか配置ができません。</p><p>・Elastic
      Load Balancing.<br>・Amazon CloudFront.</p><p><br></p><p><strong>◯主なメリット　まとめ</strong><br>・更新はAWSが自動で行なってくれる（最短で有効期限の60日前～）<br>・再起動などのダウンタイムを最小限にできる<br>・証明書をコンソールなどから一括で管理が出来る<br>・ワイルドカードも対応可能</p><p><strong>◯利用する際の注意点　まとめ</strong><br>・特定サービスのみの対応（ELB,Cloudfront）<br>・AWS環境以外で利用ができない<br>・最低限の証明となっている（SSL/TSL）<br>・アカウント単位で20個までという制限がある<br>・コード署名や
      E メールの暗号化に利用できない</p><p><br></p><p>結論: ACM自体には基本お金がかからないが、ELBやCloudFrontで結構お金がかかるので、完全無料のものを使いたいと思った結果、certbotにたどり着きました。</p><h1><br>3．証明書を発行しよう！</h1><h2>3-1．certbotのインストール</h2><p>certbotとはLet&rsquo;s
      Encryptが提供する、クライアントソフトウェアで、<strong>これを使えばSSL証明書の取得・更新作業を自動化出来る</strong>ようになっています。</p><p>今回はこれを使ってサイトのSSL化をしていくので、まずはcertbotをインストールします。</p><h2><br></h2><p>最初はGitHubからcertbotをcloneしてcertbotを実行できるようにしようと思っていたのですが、2019年5月現在、GitHubからcloneしてcertbot-autoを実行すると、次のエラーが発生します。</p><pre><code>Requesting
      to rerun ./certbot-auto with root privileges...\r\nSorry, I don&#39;t know how
      to bootstrap Certbot on your operating system!</code></pre><p>設定ファイルを書き換えて対応する方法もあるようなのですが、今回はyumでcertbotをインストールすることにします。</p><p><br></p><pre><code>$
      sudo yum -y install certbot</code></pre><p><br></p><h2>Nginx対応プラグインのインストール</h2><p>Nginxを使用している場合は「certbot-nginx」をインストールします。</p><p>certbot実行時にnginxを指定することで、nginxの設定ファイルに証明書の設定を自動で追加してくれます。(めちゃくちゃ便利)</p><pre><code>$
      sudo yum -y install certbot-nginx</code></pre><p><br></p><h2>certbotを使ってSSL証明書を取得</h2><p>Nginxを使用している場合は、オプションで「&ndash;nginx」を指定します。</p><p>「-d」オプションに続いてドメイン名を入力します。</p><p>certbot実行時に権限でエラーになる場合は、root権限で実行します。</p><pre><code>$
      certbot --nginx -d www.example.com</code></pre><pre>Saving debug log to /var/log/letsencrypt/letsencrypt.log\r\nPlugins
      selected: Authenticator nginx, Installer nginx\r\nObtaining a new certificate\r\nPerforming
      the following challenges:\r\nhttp-01 challenge for www.example.com\r\nWaiting
      for verification...\r\nCleaning up challenges\r\nDeploying Certificate to VirtualHost
      /etc/nginx/conf.d/froala-blog.conf\r\n\r\nPlease choose whether or not to redirect
      HTTP traffic to HTTPS, removing HTTP access.\r\n- - - - - - - - - - - - - -
      - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n1: No redirect - Make
      no further changes to the webserver configuration.\r\n2: Redirect - Make all
      requests redirect to secure HTTPS access. Choose this for\r\nnew sites, or if
      you&#39;re confident your site works on HTTPS. You can undo this\r\nchange by
      editing your web server&#39;s configuration.\r\n- - - - - - - - - - - - - -
      - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nSelect the appropriate
      number [1-2] then [enter] (press &#39;c&#39; to cancel): 2\r\nRedirecting all
      traffic on port 80 to ssl in /etc/nginx/conf.d/froala-blog.conf\r\n\r\n- - -
      - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nCongratulations!
      You have successfully enabled https://www.examle.com\r\n\r\nYou should test
      your configuration at:\r\nhttps://www.ssllabs.com/ssltest/analyze.html?d=www.example.com\r\n-
      - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      -\r\n\r\nIMPORTANT NOTES:\r\n- Congratulations! Your certificate and chain have
      been saved at:\r\n/etc/letsencrypt/live/www.example.com/fullchain.pem\r\nYour
      key file has been saved at:\r\n/etc/letsencrypt/live/www.example.com/privkey.pem\r\nYour
      cert will expire on 2019-10-03. To obtain a new or tweaked\r\nversion of this
      certificate in the future, simply run certbot again\r\nwith the &quot;certonly&quot;
      option. To non-interactively renew *all* of\r\nyour certificates, run &quot;certbot
      renew&quot;\r\n- If you like Certbot, please consider supporting our work by:\r\n\r\nDonating
      to ISRG / Let&#39;s Encrypt:   https://letsencrypt.org/donate\r\nDonating to
      EFF:                    https://eff.org/donate-le\r\n\r\n</pre><p><br></p><h2>Nginxの再起動</h2><p>Nginxのコンフィグをテストし、問題なければNginxを再起動します。</p><pre><code>$
      nginx -t\r\n$ </code>sudo service nginx restart</pre><p><br></p><p><span style=\"font-size:
      24px;\">以上でhttpsでアクセスできます。</span></p><p><br></p><p><br></p><p><br></p><h2>SSL/TLS証明書を失効・削除したいとき</h2><p>　Let&rsquo;s
      Encrypt で発行した SSL/TLS 証明書を失効した上で削除します。 これは certbot revoke コマンドで行うことができます。 (certbot
      コマンドには delete オプションもありますが、これだと失効させられないので注意してください。) certbot revoke コマンドを実行する際に
      &ndash;cert-pat オプションで、失効させる証明書のパスを指定します。 コマンドを実行すると、次のような表示で完了することができます。</p><p>削除のみ</p><pre>$
      sudo certbot delete --cert-name www.example.com</pre><p>削除・失効</p><pre>$ sudo
      certbot revoke --cert-path /etc/letsencrypt/live/www.example.com/cert.pem</pre><pre>Saving
      debug log to /var/log/letsencrypt/letsencrypt.log\r\nStarting new HTTPS connection
      (1): acme-v01.api.letsencrypt.org\r\n\r\n-------------------------------------------------------------------------------\r\nWould
      you like to delete the cert(s) you just revoked?\r\n-------------------------------------------------------------------------------\r\n(Y)es
      (recommended)/(N)o: y\r\n\r\n-------------------------------------------------------------------------------\r\nDeleted
      all files relating to certificate www.example.com.\r\n-------------------------------------------------------------------------------\r\n\r\n-------------------------------------------------------------------------------\r\nCongratulations!
      You have successfully revoked the certificate that was located\r\nat /etc/letsencrypt/live/www.example.com/cert.pem\r\n\r\n-------------------------------------------------------------------------------</pre><p>これで、SSL/TLS証明書を失効させ、削除することができました。
      ただし、Apache や Nginx などの各種ソフトウェアへ行った設定は残ったままですので、それらについては別途対応するようにしてください。</p><h2>証明書を手動更新したいとき</h2><p>以下は、証明書の期限がまだ十分にあるためリニューアルを実行しませんでしたという内容になっていますが、期限前にやると実行されます。</p><pre>$
      sudo certbot renew --post-hook &quot;sudo service nginx restart&quot;\r\nSaving
      debug log to /var/log/letsencrypt/letsencrypt.log\r\n\r\n- - - - - - - - - -
      - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nProcessing /etc/letsencrypt/renewal/www.example.com\r\n-
      - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      -\r\nCert not yet due for renewal\r\n\r\n- - - - - - - - - - - - - - - - - -
      - - - - - - - - - - - - - - - - - - - - - -\r\n\r\nThe following certs are not
      due for renewal yet:\r\n/etc/letsencrypt/live/www.example.com/fullchain.pem
      expires on 2019-10-06 (skipped)\r\nNo renewals were attempted.\r\nNo hooks were
      run.\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - - - - - -</pre><p><br></p><h2>証明書を自動更新したいとき</h2><h4>cronで自動更新の設定</h4><pre>$
      sudo vi /etc/cron.d/letsencrypt</pre><p>SSL証明書の有効期限が90日なので自動更新の設定をします。</p><pre>#毎月1日の1時に強制的に更新をします\r\n0
      1 1 * * root certbot renew --force-renewal &amp;&amp; service nginx restart</pre><p>これで設定終了です。簡単なのでサクッとやってしまいましょう。</p><p><br></p><h1>最後に</h1><p>--nginxオプションで自動で設定の書き込みを行なったが、自動で加わった内容をチェックする</p><p><span
      style=\"color: rgb(209, 72, 65);\">ーなくなった部分 赤</span></p><p><span style=\"color:
      rgb(97, 189, 109);\">＋付け加えられた部分 緑</span></p><p>( /etc/nginx/conf.d/froala-blog.conf
      )</p><pre># log directory\r\nerror_log  /var/www/rails/froala-blog/log/nginx.error.log;\r\naccess_log
      /var/www/rails/froala-blog/log/nginx.access.log;\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream app_server {\r\n  # for UNIX domain socket setups\r\n  server
      unix:/var/www/rails/froala-blog/tmp/sockets/unicorn.sock fail_timeout=0;\r\n}\r\nserver
      {\r\n  <span style=\"color: rgb(209, 72, 65);\">- listen 80;</span>\r\n  server_name
      www.example.com [IP];\r\n  # nginx so increasing this is generally safe...\r\n 
      keepalive_timeout 5;\r\n  # path for static files\r\n  root /var/www/rails/froala-blog/public;\r\n 
      # page cache loading\r\n  try_files $uri/index.html $uri.html $uri @app;\r\n 
      location @app {\r\n    # HTTP headers\r\n    proxy_set_header X-Forwarded-For
      $proxy_add_x_forwarded_for;\r\n    <span style=\"color: rgb(243, 121, 52);\">proxy_set_header
      X-Forwarded-Proto https;</span> # ここは手動で追記する 追記しないと「リダイレクトが多すぎます」というエラーが出てアクセスできない\r\n 
        proxy_set_header Host $http_host;\r\n    proxy_redirect off;\r\n    proxy_pass
      http://app_server;\r\n  }\r\n  # Rails error pages\r\n  error_page 500 502 503
      504 /500.html;\r\n  location = /500.html {\r\n    root /var/www/rails/froala-blog/public;\r\n 
      }\r\n<span style=\"color: rgb(97, 189, 109);\">    listen 443 ssl; # managed
      by Certbot</span>\r\n<span style=\"color: rgb(97, 189, 109);\">    ssl_certificate
      /etc/letsencrypt/live/www.exaple.com/fullchain.pem; # managed by Certbot</span>\r\n<span
      style=\"color: rgb(97, 189, 109);\">    ssl_certificate_key /etc/letsencrypt/live/www.exaple.com/privkey.pem;
      # managed by Certbot</span>\r\n<span style=\"color: rgb(97, 189, 109);\">   
      include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot</span>\r\n<span
      style=\"color: rgb(97, 189, 109);\">    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
      # managed by Certbot</span>\r\n}\r\n\r\n\r\n<span style=\"color: rgb(97, 189,
      109);\">server {</span>\r\n<span style=\"color: rgb(97, 189, 109);\">    if
      ($host = <span style=\"color: rgb(97, 189, 109);\"><a href=\"//www.exaple.com\">www.exaple.com</a></span>)
      {</span>\r\n<span style=\"color: rgb(97, 189, 109);\">        return 301 https://$host$request_uri;</span>\r\n<span
      style=\"color: rgb(97, 189, 109);\">    } # managed by Certbot</span>\r\n<span
      style=\"color: rgb(97, 189, 109);\">  listen 80;</span>\r\n<span style=\"color:
      rgb(97, 189, 109);\">  server_name www.exaple.com [IP];</span>\r\n<span style=\"color:
      rgb(97, 189, 109);\">    return 404; # managed by Certbot</span>\r\n<span style=\"color:
      rgb(97, 189, 109);\">}</span></pre><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-07-09 04:40:28.641605'
    - '2019-07-19 09:05:47.425508'
  - - 174
    - AWSのインフラ構成図を書く
    - '<h1 style="text-align: center;">AWSのインフラ構成図</h1><h2>利用ツール</h2><p><a href="https://www.draw.io/"
      rel="nofollow noopener" target="_blank"></a><a href="https://www.draw.io/">https://www.draw.io/</a></p><ul><li>オンラインで作図できる</li><li>AWS作図用のアイコンセットがある</li><li>無料で使える</li><li>保存先が色々選べる<ul><li>ローカル保存の他にGitHubやGoogleDriveなどにも連携可能</li></ul></li><li>必要最低限の画像出力<ul><li>PNG,PDF</li></ul></li></ul><p><br></p><h2>なぜこのツールなのか</h2><p>インフラ関連の説明に使う多くの画像が揃っている</p><p>ソフトをインストールせずに使うことができるため、メモリを使用せず便利。</p><h2><br>ツールの使い方</h2><h3>新しくファイルを作る</h3><p><a
      href="https://www.draw.io/" rel="nofollow noopener" target="_blank"></a><a href="https://www.draw.io/">https://www.draw.io/</a></p><p>上記にアクセスすると以下のダイアログが出る</p><p>「Create
      New Diagram」 をクリック</p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1562655304214-diagram.png"
      style="width: 603px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>左側のテンプレートメニューの
      「Network」を選択</p><p>AWSの公式ドキュメントでよく見るアイコンのテンプレートがあるので、それを選択して、「Create」ボタンをクリック</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1562655659010-edit.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>すると、以下のようにAWSのアイコンセットが使える状態の図が作られる</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1562655864153-sampleinfra.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>追加で欲しい画像を調べて付け足したり、いらないものを削除して編集をお行う。</p><p><br></p><p><br></p><h2>ファイル保存</h2><p>「File」メニューの
      「Save」をクリックし、<br>xmlファイルをダンロードする。</p><h2><br>再開</h2><p><a href="https://www.draw.io/"></a><a
      href="https://www.draw.io/">https://www.draw.io/</a> から「Open Exixting Diagram」
      を選ぶ</p><p>この画面で 「Open Existing Diagram」 をクリックし、<br>xmlファイルをアップロードする。</p><p><br></p><h2>画像出力</h2><p>「File」メニューの
      「Export as」 で出力したフォーマットを選ぶ。</p><p>googleDriveやパソコン本体、ブラウザなど好きなところに保存して利用できる</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>'
    - '2019-07-09 06:40:03.34379'
    - '2019-07-09 07:13:54.463374'
  - - 175
    - 'ActiveStorageにて 「Mixed Content: The page at ''<URL>'' was loaded over HTTPS,
      but requested an insecure image ''<URL>''. This content should also be served
      over HTTPS.」'
    - "<h1 itemprop=\"headline\" style=\"text-align: center;\">【Rails 5.2】 Active
      Storageの混合コンテンツのエラー</h1><p><br></p><h2>環境</h2><p>Amazon Linux 2<br>Rails 5.2.1<br>ruby
      2.4.2<br>(アプリケーション、ウェブサーバー)<br>nginx version: nginx/1.12.2<br>unicorn 5.5.1<br>(ssl証明書)<br>python2-certbot-nginx
      0.34.2-1.el7<br>certbot 0.34.2-3.el7<br>certbot-nginx 0.34.2-3.el7</p><p><br></p><h2><strong>エラー内容</strong></h2><p><strong>「混合コンテンツ：
      &#39;&lt;URL&gt;&#39;のページはHTTPS経由でロードされましたが、安全でない画像 &#39;&lt;URL&gt;&#39;を要求しました。このコンテンツもHTTPS経由で配信する必要があります」</strong></p><p><br></p><h2>原因</h2><p>ページのURLがhttpsなのに、保証されてないurl(http)がリクエストされていること</p><p>=&gt;
      https://[domain]　に　アクセスするとhttpsで暗号化により通信が保護されるが、画像のプロトコルがhttpであるため、他者にすり替えられた危険なコンテンツの恐れがある</p><p>と言っている</p><p><br></p><h2>解決策</h2><p>activeStorageのURL
      http://[domain]/rails/active_storage/blobs/xxxxxxxxxx/image.jpg を</p><p>http
      =&gt; httpsにするだけ...ですがこれがくせもの。</p><p><br></p><h3>・試したこと（以下どれも効果がなかった）</h3><p>1:&nbsp;fileアップロード先であるs3にてプロパティ&nbsp;-&gt;&nbsp;static&nbsp;website&nbsp;hosting設定にて<br>「ウェブサイトのホスティングを無効」
      から <span style=\"font-size: 18px;\">バケットを指定してhttpsプロトコルにリダイレクト</span><br>に変更。</p><p>2:&nbsp;Railsのconfig/environments/production.rbにて以下を追記</p><pre>Rails.application.configure
      do\r\n  Rails.application.routes.default_url_options[:protocol] = &#39;https&#39;\r\n
      \ Rails.application.routes.default_url_options[:host] = &quot;www.example.com&quot;\r\n 
      ...\r\nend</pre><p>3: activestorageのアップロード先のs3にて　アクセス権限-&gt;CORSの設定にhttp以外にもhttpsでの通信許可を追加した</p><pre>&lt;CORSRule&gt;\r\n&lt;AllowedOrigin&gt;https://xxxx&lt;/AllowedOrigin&gt;\r\n&lt;AllowedMethod&gt;GET&lt;/AllowedMethod&gt;\r\n&lt;AllowedMethod&gt;POST&lt;/AllowedMethod&gt;\r\n&lt;AllowedMethod&gt;PUT&lt;/AllowedMethod&gt;\r\n&lt;MaxAgeSeconds&gt;3000&lt;/MaxAgeSeconds&gt;\r\n&lt;AllowedHeader&gt;*&lt;/AllowedHeader&gt;\r\n&lt;/CORSRule&gt;</pre><p>4:&nbsp;config/initializersにforce_ssl.rbというファイルを新規作成<br>(
      https://medium.com/@stacietaylorcima/rails-active-storage-serve-your-images-over-https-14b916c67a51
      を参考にした)</p><pre>(force_ssl.rb)\r\nif Rails.application.config.force_ssl  \r\n 
      Rails.application.routes.default_url_options[:protocol] = &#39;https&#39;\r\nend</pre><p><br></p><p>結局プロトコルで矯正すると「「リダイレクトが多すぎます」と表示されてしまう」ためアクセスできなくなるだけだった...</p><h3>・解決方法</h3><p>ウェブサーバーにてNginx
      のリバースプロキシ設定が入ってなかった。</p><p>Rails側に過失はなかった。</p><p>・Nginx - Rails の場合</p><p>NginxでリバースプロキシするときにもSSLはNginxで処理させる場合が多く、プロキシされるアプリケーションサーバにはSSLが解かれた状態でリクエストが届く。<br>そのため
      X-Forwarded-Proto ヘッダを使って SSL であることを Railsに伝えなければ、force_ssl が機能しない</p><pre>#
      log directory\r\nerror_log  /var/www/rails/myapp/log/nginx.error.log; #自分のアプリケーション名に変更\r\naccess_log
      /var/www/rails/myapp/log/nginx.access.log; #自分のアプリケーション名に変更\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream app_server {\r\n  # for UNIX domain socket setups\r\n  server
      unix:/var/www/rails/myapp/tmp/sockets/unicorn.sock fail_timeout=0; #自分のアプリケーション名に変更\r\n}\r\nserver
      {\r\n  listen 80;\r\n  server_name ~~~.~~~.~~~.~~~;(#アプリのElastic IPに変更してください)\r\n
      \ # nginx so increasing this is generally safe...\r\n  keepalive_timeout 5;\r\n
      \ # path for static files\r\n  root /var/www/rails/myapp/public; #自分のアプリケーション名に変更\r\n
      \ # page cache loading\r\n  try_files $uri/index.html $uri.html $uri @app;\r\n
      \ location @app {\r\n    # HTTP headers\r\n    proxy_set_header X-Forwarded-For
      $proxy_add_x_forwarded_for;\r\n    <span style=\"color: rgb(250, 197, 28);\">proxy_set_header
      X-Forwarded-Proto https;</span>\r\n    proxy_set_header Host $http_host;\r\n
      \   proxy_redirect off;\r\n    proxy_pass http://app_server;\r\n  }\r\n  # Rails
      error pages\r\n  error_page 500 502 503 504 /500.html;\r\n  location = /500.html
      {\r\n    root /var/www/rails/myapp/public; #自分のアプリケーション名に変更\r\n  }\r\n}</pre><p><br></p><h1><br></h1><h1>以下は非推奨</h1><h3>・臨時の解決方法</h3><p>結論、画像表示のコードをいじり、絶対パスから相対パスに書き換えて表示させることにしました。</p><pre>&lt;%
      @articles.each do |article| %&gt;\r\n  &lt;% if article.image.attached? %&gt;\r\n 
        <span style=\"color: rgb(184, 49, 47);\">- &lt;%= image_tag article.image,
      :alt =&gt; &quot;イメージ&quot;, width: &#39;30%&#39;, height: &#39;30%&#39; %&gt;</span>\r\n 
       <span style=\"color: rgb(0, 168, 133);\"> + &lt;%= image_tag(url_for(article.image),
      :alt =&gt; &quot;イメージ&quot;, width: &#39;30%&#39;, height: &#39;30%&#39;) %&gt;</span>\r\n 
      &lt;% end %&gt;\r\n&lt;% end %&gt;</pre><p><br></p><p>出力されてHTMLでいうと、こんな感じになっています</p><p><span
      style=\"color: rgb(184, 49, 47);\">&lt;img alt=&quot;イメージ&quot; width=&quot;30%&quot;
      height=&quot;30%&quot; src=&quot;http://[domain]/rails/active_storage/blobs/xxxxx/sample.jpg&quot;&gt;</span></p><p><span
      style=\"color: rgb(0, 168, 133);\">&lt;img alt=&quot;イメージ&quot; width=&quot;30%&quot;
      height=&quot;30%&quot; src=&quot;/rails/active_storage/blobs/xxxxx/sample.jpg&quot;&gt;</span></p><p><br></p><p>絶対パス
      =&gt; 相対パス でプロトコルに左右されないという形にしました。</p><p>やむをえずって感じです。</p><p><br></p><p><br></p>"
    - '2019-07-11 05:39:12.788444'
    - '2019-07-20 04:35:56.527513'
  - - 176
    - ゼロから作る Deep Learning』第5章 勉強メモ(最低限)
    - "<h1 style=\"text-align: center;\">ゼロから作る Deep Learning』第5章 勉強メモ(最低限)</h1><p><br></p><h2>目次</h2><pre>・順伝播と逆伝播\r\n・連鎖律\r\n・リンゴの買い物による逆伝播\r\n・加算ノードの逆伝播\r\n・乗算ノードの逆伝播\r\n・活性化関数レイヤの実装\r\n・そもそも誤差逆伝播法はどこで使用するのか\r\n・誤差逆伝播法に対応したニューラルネットワークの構築\r\n・誤差逆伝播法の勾配確認\r\n・誤差逆伝播法を使用した学習\r\n・5章を学んでみて</pre><p><br></p><h2>5.1
      計算グラフ</h2><p><br></p><p>問 1:太郎くんはスーパーで 1 個 100 円のリンゴを 2 個買いました。支払う金額 を求めなさい。ただし、消費税が
      10% 適用されるものとします。</p><p><br></p><p style=\"margin-left: 20px;\">計算グラフで解くと...</p><p
      style=\"margin-left: 20px;\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563100588019-flow.png\"
      style=\"width: 443px;\" class=\"fr-fic fr-dib fr-fil\"></p><p style=\"margin-left:
      20px;\"><br></p><p style=\"margin-left: 20px;\">乗算レイヤーを2回使って220円という出力が計算されます。</p><p
      style=\"margin-left: 20px;\"><br></p><p>問 2:太郎くんはスーパーでリンゴを 2 個、みかんを 3 個買いました。リンゴは1
      個 100 円、みかんは 1 個 150 円です。消費税が 10% かかるものとして、支払う金額を求めなさい。</p><p><br></p><p style=\"margin-left:
      20px;\">計算グラフで解くと...</p><p style=\"margin-left: 20px;\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563101651107-orange_apple.png\"
      style=\"width: 488px;\" class=\"fr-fic fr-dib fr-fil\"></p><p style=\"margin-left:
      20px;\"><br></p><p style=\"margin-left: 20px;\">乗算レイヤーを3回、加算レイヤーを1回使って715円という出力が計算されます。</p><p><br></p><p>計算グラフを使って問題を解くには、</p><p>1.
      計算グラフを構築する<br>2.&nbsp;計算グラフ上で計算を左から右へ進める</p><p>という流れで行います。ここで 2 番目の「計算を左から右へ進める」というステップは、順方向の伝播、略して、<span
      style=\"font-size: 24px;\">順伝播(forward propagation)</span></p><p>右から左方向への伝播を<span
      style=\"font-size: 24px;\">逆伝播(backward propagation)</span></p><p><br></p><h2>なぜ計算グラフで解くのか?</h2><p>計算グラフを使う最大の理由は、逆方向の伝播に
      よって「微分」を効率良く計算できる点</p><p><br></p><h2>計算グラフの逆伝播</h2><p><br></p><p>最終的に L という値を出力する大きな計算グラフを想定</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563106124907-L.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>逆伝播の計算は以下のようになっている</p><p>①では、x
      -&gt; z になっているので波の強度は (dz / dx) と考える。</p><p><span style=\"font-size: 24px;\">上流から流れてきた値(=dL/dz)が　強度
      (dz / dx)の波で強められるので、(上流値)&times;(波の強度)で下流値が出る</span></p><p>②では、y -&gt; z になっているので波の強度は
      (dz / dy) と考える。</p><p><span style=\"font-size: 24px;\">上流から流れてきた値(=dL/dz)が　強度
      (dz / dy)の波で強められるので、(上流値)&times;(波の強度)で下流値が出る</span></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563105664980-theory_reverse.png\"
      style=\"width: 500px; height: 300px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563108300801-reverse_apple_orange.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>入力値が1アップした時の出力値のアップ</p><p>りんごの値段が1円アップ
      -&gt; 全支払いが2.2円アップ</p><p><span style=\"color: rgb(209, 72, 65); font-size: 18px;\">支払いのリンゴの値段の微分は
      2.2</span></p><p>みかんの値段が1円アップ -&gt; 全支払いが3.3円アップ</p><p><span style=\"color:
      rgb(209, 72, 65); font-size: 18px;\">支払いのみかんの値段の微分は 2.2</span></p><p>消費税が1(100%)アップ
      -&gt; 全支払いが650円アップ</p><p><span style=\"color: rgb(209, 72, 65); font-size: 18px;\">支払いの消費税の値段の微分は
      650</span></p><p><br></p><p><span style=\"font-size: 24px; background-color:
      rgb(247, 218, 100);\">「微分」を効率良く計算できる</span></p><p><br></p><p><span style=\"font-size:
      24px;\">筆者の逆伝播の考え方</span></p><p><code>渓流がたくさんあります。&nbsp;</code></p><p><code>流れの強さは、緩やかなものもあれば急なものもあり、流れの向きは順速(加速する)のものもあれば逆速(減速する)のものもあります。&nbsp;</code></p><p><code>上流から岩石を下流に向けて流すと、全ての滝を超えて下流についた頃には隕石のスピードになったとします。</code></p><p><code>次に、全ての滝に関して、流れの勢いは変えないまま、流れの向きだけを反対にします。&nbsp;</code><code>そして今度は下流から上流に岩石を流したとします。</code></p><p><code>&nbsp;全ての滝を超えて上流についた頃には同じく隕石のスピードになっています。</code></p><p><span
      style=\"color: rgb(41, 105, 176); font-size: 18px;\">これが逆伝播の理屈です。</span></p><p><code>順伝播と逆伝播の違いは、渓流を上流から下流に向かうか、下流から上流に向かうかのみの違いで、
      準速の渓流は準速のまま、逆速の渓流は逆速のまま計算しているため、 結局、岩石が渓流を渡る順番が違うだけなのです。&nbsp;</code></p><p><code>したがって、順伝播も逆伝播も計算結果は同じで、どちらの方法でも岩石は同じスピードで帰ってくる。</code></p><p><br></p><h2>乗算レイヤの実装</h2><p>ソースコードは
      ch05/layer_naive.py</p><pre>class MulLayer:\r\n  def __init__(self):\r\n    self.x
      = None\r\n    self.y = None\r\n\r\n  def forward(self, x, y):\r\n    self.x
      = x\r\n    self.y = y\r\n    out = x * y\r\n\r\n    return out\r\n\r\n  def
      backward(self, dout):\r\n    dx = dout * self.y # xとyを逆にする\r\n    dy = dout
      * self.x\r\n    \r\n    return dx, dy</pre><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563109730037-apple_reverse.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>上記の順伝播は次のように実装することができます
      ソースコードは ch05/buy_apple.py&nbsp;</p><pre><span style=\"color: rgb(184, 49, 47);\">from</span>
      layer_naive <span style=\"color: rgb(184, 49, 47);\">import</span> <span style=\"color:
      rgb(85, 57, 130);\">*</span>\r\n\r\n\r\napple <span style=\"color: rgb(184,
      49, 47);\">=</span> <span style=\"color: rgb(85, 57, 130);\">100</span>\r\napple_num
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(85,
      57, 130);\">2</span>\r\ntax <span style=\"color: rgb(184, 49, 47);\">=</span>
      <span style=\"color: rgb(85, 57, 130);\">1.1</span>\r\n\r\nmul_apple_layer <span
      style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(84, 172,
      210);\">MulLayer</span>()\r\nmul_tax_layer <span style=\"color: rgb(184, 49,
      47);\">=</span> <span style=\"color: rgb(84, 172, 210);\">MulLayer</span>()\r\n\r\n#
      forward\r\napple_price <span style=\"color: rgb(184, 49, 47);\">=</span> mul_apple_layer.<span
      style=\"color: rgb(44, 130, 201);\">forward</span>(apple, apple_num)\r\nprice
      <span style=\"color: rgb(184, 49, 47);\">=</span> mul_tax_layer.<span style=\"color:
      rgb(44, 130, 201);\">forward</span>(apple_price, tax)\r\n\r\n# backward\r\ndprice
      <span style=\"color: rgb(184, 49, 47);\">=</span> 1\r\ndapple_price, dtax <span
      style=\"color: rgb(184, 49, 47);\">=</span> mul_tax_layer.<span style=\"color:
      rgb(44, 130, 201);\">backward</span>(dprice)\r\ndapple, dapple_num <span style=\"color:
      rgb(184, 49, 47);\">=</span> mul_apple_layer.<span style=\"color: rgb(44, 130,
      201);\">backward</span>(dapple_price)\r\n\r\nprint(<span style=\"color: rgb(250,
      197, 28);\">&quot;price:&quot;</span>, <span style=\"color: rgb(44, 130, 201);\">int</span>(price))\r\nprint(<span
      style=\"color: rgb(250, 197, 28);\">&quot;dApple:&quot;</span>, dapple)\r\nprint(<span
      style=\"color: rgb(250, 197, 28);\">&quot;dApple_num:&quot;</span>, <span style=\"color:
      rgb(44, 130, 201);\">int</span>(dapple_num))\r\nprint(<span style=\"color: rgb(250,
      197, 28);\">&quot;dTax:&quot;</span>, dtax)\r\n<span style=\"color: rgb(163,
      143, 132);\"># price: 220</span>\r\n<span style=\"color: rgb(163, 143, 132);\">#
      dApple: 2.2\r\n# dApple_num: 110\r\n# dTax: 200</span></pre><p><br></p><h2>加算レイヤの実装</h2><p>ソースコードは
      ch05/layer_naive.py</p><pre>class AddLayer:\r\n  def __init__(self):\r\n    <span
      style=\"color: rgb(184, 49, 47);\">pass</span> <span style=\"color: rgb(163,
      143, 132);\"># クラス変数としてx,yを保持する必要がない 「何も行わない」という命令</span>\r\n\r\n  def forward(self,
      x, y):\r\n    out = x + y\r\n    return out\r\n\r\n  def backward(self, dout):\r\n
      \   dx = dout * 1 <span style=\"color: rgb(163, 143, 132);\"># 下流に流すだけ</span>\r\n
      \   dy = dout * 1\r\n    \r\n    return dx, dy</pre><p><br><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563108300801-reverse_apple_orange.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>計算グラフは、Python
      で実装すると次のようになります(ソースコードは ch05/buy_apple_orange.py )</p><pre><span style=\"color:
      rgb(184, 49, 47);\">from</span> layer_naive <span style=\"color: rgb(184, 49,
      47);\">import</span> <span style=\"color: rgb(85, 57, 130);\">*</span>\r\n\r\napple
      <span style=\"color: rgb(184, 49, 47);\">=</span> 100\r\napple_num <span style=\"color:
      rgb(184, 49, 47);\">=</span> 2\r\norange <span style=\"color: rgb(184, 49, 47);\">=</span>
      150\r\norange_num <span style=\"color: rgb(184, 49, 47);\">=</span> 3\r\ntax
      <span style=\"color: rgb(184, 49, 47);\">=</span> 1.1\r\n\r\n# layer\r\nmul_apple_layer
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(44,
      130, 201);\">MulLayer</span>()\r\nmul_orange_layer <span style=\"color: rgb(184,
      49, 47);\">=</span> <span style=\"color: rgb(44, 130, 201);\">MulLayer</span>()\r\nadd_apple_orange_layer
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(44,
      130, 201);\">AddLayer</span>()\r\nmul_tax_layer <span style=\"color: rgb(184,
      49, 47);\">=</span> <span style=\"color: rgb(44, 130, 201);\">MulLayer</span>()\r\n\r\n#
      forward\r\napple_price <span style=\"color: rgb(184, 49, 47);\">=</span> mul_apple_layer.<span
      style=\"color: rgb(44, 130, 201);\">forward</span>(apple, apple_num)  # (1)\r\norange_price
      <span style=\"color: rgb(184, 49, 47);\">=</span> mul_orange_layer.<span style=\"color:
      rgb(44, 130, 201);\">forward</span>(orange, orange_num)  # (2)\r\nall_price
      <span style=\"color: rgb(184, 49, 47);\">=</span> add_apple_orange_layer.<span
      style=\"color: rgb(44, 130, 201);\">forward</span>(apple_price, orange_price)
       # (3)\r\nprice <span style=\"color: rgb(184, 49, 47);\">=</span> mul_tax_layer.<span
      style=\"color: rgb(44, 130, 201);\">forward</span>(all_price, tax)  # (4)\r\n\r\n#
      backward\r\ndprice <span style=\"color: rgb(184, 49, 47);\">=</span> 1\r\ndall_price,
      dtax <span style=\"color: rgb(184, 49, 47);\">=</span> mul_tax_layer.<span style=\"color:
      rgb(44, 130, 201);\">backward</span>(dprice)  # (4)\r\ndapple_price, dorange_price
      <span style=\"color: rgb(184, 49, 47);\">=</span> add_apple_orange_layer.<span
      style=\"color: rgb(44, 130, 201);\">backward</span>(dall_price)  # (3)\r\ndorange,
      dorange_num <span style=\"color: rgb(184, 49, 47);\">=</span> mul_orange_layer.<span
      style=\"color: rgb(44, 130, 201);\">backward</span>(dorange_price)  # (2)\r\ndapple,
      dapple_num <span style=\"color: rgb(184, 49, 47);\">=</span> mul_apple_layer.<span
      style=\"color: rgb(44, 130, 201);\">backward</span>(dapple_price)  # (1)\r\n\r\nprint(<span
      style=\"color: rgb(250, 197, 28);\">&quot;price:&quot;</span>, <span style=\"color:
      rgb(44, 130, 201);\">int</span>(price))\r\nprint(<span style=\"color: rgb(250,
      197, 28);\">&quot;dApple:&quot;</span>, dapple)\r\nprint(<span style=\"color:
      rgb(250, 197, 28);\">&quot;dApple_num:&quot;</span>, int(dapple_num))\r\nprint(<span
      style=\"color: rgb(250, 197, 28);\">&quot;dOrange:&quot;</span>, dorange)\r\nprint(<span
      style=\"color: rgb(250, 197, 28);\">&quot;dOrange_num:&quot;</span>, <span style=\"color:
      rgb(44, 130, 201);\">int</span>(dorange_num))\r\nprint(<span style=\"color:
      rgb(250, 197, 28);\">&quot;dTax:&quot;</span>, dtax)\r\n<span style=\"color:
      rgb(163, 143, 132);\"># price: 715\r\n# dApple: 2.2\r\n# dApple_num: 110\r\n#
      dOrange: 3.3000000000000003\r\n# dOrange_num: 165\r\n# dTax: 650</span></pre><p><br></p><h2>活性化関数レイヤの実装</h2><h3>ReLU
      レイヤ</h3><table style=\"width: 60%;\"><tbody><tr><td rowspan=\"2\" style=\"width:
      50%; vertical-align: middle; text-align: center;\">y =<br></td><td style=\"width:
      50%; text-align: center;\">x (x&gt;0)<br></td></tr><tr><td style=\"width: 50%;
      text-align: center;\">0 (x≦0)<br></td></tr></tbody></table><table style=\"width:
      60%;\"><tbody><tr><td rowspan=\"2\" style=\"width: 50%; vertical-align: middle;
      text-align: center;\">&part;y/&part;x =<br></td><td style=\"width: 50%; text-align:
      center;\">1 (x&gt;0)<br></td></tr><tr><td style=\"width: 50%; text-align: center;\">0
      (x≦0)<br></td></tr></tbody></table><p><br></p><p>ReLU レイヤの実装は、common/layers.py</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563112329210-reverse_apple_orange+%281%29.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><pre>class
      Relu:\r\n  def __init__(self):\r\n    self.mask = None\r\n\r\n  def forward(self,
      x):\r\n    self.mask = (x &lt;= 0) <span style=\"color: rgb(163, 143, 132);\">#
      x=np.array([ 1.29400019, -0.78059715, -1.09235197)] の時、mask=np.array([False,
       True,  True])</span>\r\n    out = x.copy() <span style=\"color: rgb(163, 143,
      132);\"># 参照コピーではなく値コピー</span>\r\n    out[self.mask] = 0 <span style=\"color:
      rgb(163, 143, 132);\"># out=np.array([ 1.29400019, 0., 0.)] Trueのインデックスに代入が適用される</span>\r\n\r\n 
        return out\r\n\r\n  def backward(self, dout):\r\n    dout[self.mask] = 0 <span
      style=\"color: rgb(163, 143, 132);\"># xが0以下の時は0を流す、それ以外は値をそのまま流す</span>\r\n 
        dx = dout\r\n\r\n    return dx</pre><p><br></p><p><br></p><h3>Sigmoid レイヤ</h3><p><br></p><p><span
      style=\"font-size: 18px;\">シグモイド関数</span></p><p>&nbsp;y=1 / (1 + exp(&minus;x))</p><p
      class=\"fr-text-gray\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563168380252-sigmoid.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>Sigmoid
      レイヤを Python で実装(common/layers.py)</p><pre>class Sigmoid:\r\n  def __init__(self):\r\n
      \   self.out = None\r\n\r\n  def forward(self, x):\r\n    out = 1 / (1 + np.exp(-x))\r\n
      \   self.out = out\r\n\r\n    return out\r\n\r\n  def backward(self, dout):\r\n
      \   dx = dout * (1.0 - self.out) * self.out\r\n\r\n    return dx</pre><p><br></p><h3>Affine
      レイヤ</h3><p>Affine レイヤの計算グラフ</p><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563173813967-affine.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>Affine
      の実装(common/layers.py)</p><pre>class Affine:\r\n  def __init__(self, W, b):\r\n
      \   self.W =W\r\n    self.b = b\r\n    self.x = None\r\n    self.dW = None\r\n
      \   self.db = None\r\n\r\n  def forward(self, x):\r\n    self.x = x\r\n    out
      = np.dot(self.x, self.W) + self.b\r\n\r\n    return out\r\n\r\n  def backward(self,
      dout):\r\n    dx = np.dot(dout, self.W.T)\r\n    self.dW = np.dot(self.x.T,
      dout)\r\n    self.db = np.sum(dout, axis=0)\r\n\r\n    return dx</pre><p><br></p><h3>Softmax-with-Loss
      レイヤ</h3><p>Softmax レイヤは、入力された値を正規化(出力の和が1 になるように変形)して出力</p><p>なお、手書き数字認識は、10
      クラス分類を 行うため、Softmax レイヤへの入力は 10 個</p><p><br></p><p>Softmax レイヤの出力</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563175855599-softmax.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>損失関数である交差 エントロピー誤差(cross
      entropy error)も含めて、「Softmax-with-Loss レイヤ」 という名前のレイヤで実装</p><p>&nbsp;Softmax-with-Loss
      レイヤ(ソ フトマックス関数と交差エントロピー誤差)の計算グラフ</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563176167145-softmax_loss.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>逆伝播の結果を見ると、Softmax
      レイヤからの逆伝播は、(y1 &minus; t1, y2 &minus; t2, y3 &minus; t3) という&ldquo;キレイ&rdquo;な結果になっています</p><p>(y1,
      y2, y3) はSoftmax レイヤの出力、(t1, t2, t3) は教師データなので、(y1 &minus; t1, y2 &minus;
      t2, y3 &minus; t3)は、Softmax レイヤの出力と教師ラベルの差分</p><p><br></p><p>「ソフトマックス関数」の損失関数として「交差エントロピー誤差」を用いると、
      逆伝播が (y1 &minus; t1, y2 &minus; t2, y3 &minus; t3) という&ldquo;キレイ&rdquo;な結果になりました。
      実は、そのような&ldquo;キレイ&rdquo;な結果は偶然ではなく、そうなるように交差エント ロピー誤差という関数が設計された。</p><p>また、回帰問題では出力層に「恒
      等関数」を用い、損失関数として「2 乗和誤差」を用いますが(「3.5 出力層の 設計」参照)、これも同様の理由によります。つまり、「恒等関数」の損失関数
      として「2 乗和誤差」を用いると、逆伝播が (y1 &minus; t1, y2 &minus; t2, y3 &minus; t3) とい う&ldquo;キレイ&rdquo;な結果になる。</p><p><br></p><p>Softmax-with-Loss
      レイヤの実装(common/layers.py)</p><pre>class SoftmaxWithLoss:\r\n  def __init__(self):\r\n
      \   self.loss = None\r\n    self.y = None # softmaxの出力\r\n    self.t = None
      # 教師データ(one-hot vector)\r\n\r\n  def forward(self, x, t):\r\n    self.t = t\r\n
      \   self.y = softmax(x)\r\n    self.loss = cross_entropy_error(self.y, self.t)\r\n\r\n
      \   return self.loss\r\n\r\n  def backward(self, dout=1):\r\n    batch_size
      = self.t.shape[0]\r\n    dx = (self.y - self.t) / batch_size\r\n\r\n    return
      dx</pre><p><br></p><p>逆伝播の際には、伝播する値をバッチの個数(batch_size)で割ることで、データ 1 個あたりの
      誤差が前レイヤへ伝播する点に注意</p><p><br></p><h2>誤差逆伝播法に対応したニューラルネットワークの 実装</h2><p>2 層のニューラルネットワークをTwoLayerNet
      として実装</p><pre>(ch05/two_layer_net.py)\r\n<span style=\"color: rgb(184, 49, 47);\">import</span>
      sys, os\r\nsys.path.<span style=\"color: rgb(84, 172, 210);\">append</span>(os.pardir)
       # 親ディレクトリのファイルをインポートするための設定\r\n<span style=\"color: rgb(184, 49, 47);\">import</span>
      numpy <span style=\"color: rgb(184, 49, 47);\">as</span> np\r\n<span style=\"color:
      rgb(184, 49, 47);\">from</span> common.layers <span style=\"color: rgb(184,
      49, 47);\">import</span> <span style=\"color: rgb(147, 101, 184);\">*</span>\r\n<span
      style=\"color: rgb(184, 49, 47);\">from</span> common.gradient <span style=\"color:
      rgb(184, 49, 47);\">import</span> numerical_gradient\r\n<span style=\"color:
      rgb(184, 49, 47);\">from</span> collections <span style=\"color: rgb(184, 49,
      47);\">import</span> OrderedDict\r\n\r\n\r\n<span style=\"color: rgb(97, 189,
      109);\">class</span> <span style=\"color: rgb(84, 172, 210);\">TwoLayerNet</span>:\r\n\r\n
      \ <span style=\"color: rgb(84, 172, 210);\">def __init__</span>(<span style=\"color:
      rgb(251, 160, 38);\">self</span>, <span style=\"color: rgb(251, 160, 38);\">input_size</span>,
      <span style=\"color: rgb(251, 160, 38);\">hidden_size</span>, <span style=\"color:
      rgb(251, 160, 38);\">output_size</span>, <span style=\"color: rgb(251, 160,
      38);\">weight_init_std</span> <span style=\"color: rgb(184, 49, 47);\">=</span>
      <span style=\"color: rgb(147, 101, 184);\">0.01</span>):\r\n    # 重みの初期化\r\n<span
      style=\"color: rgb(251, 160, 38);\">    self</span>.params = {}\r\n<span style=\"color:
      rgb(251, 160, 38);\">    self</span>.params[<span style=\"color: rgb(250, 197,
      28);\">&#39;W1&#39;</span>] = weight_init_std * np.random.<span style=\"color:
      rgb(84, 172, 210);\">randn</span>(input_size, hidden_size)\r\n<span style=\"color:
      rgb(251, 160, 38);\">    self</span>.params[<span style=\"color: rgb(250, 197,
      28);\">&#39;b1&#39;</span>] = np.<span style=\"color: rgb(84, 172, 210);\">zeros</span>(hidden_size)\r\n<span
      style=\"color: rgb(251, 160, 38);\">    self</span>.params[<span style=\"color:
      rgb(250, 197, 28);\">&#39;W2&#39;</span>] = weight_init_std * np.random.<span
      style=\"color: rgb(84, 172, 210);\">randn</span>(hidden_size, output_size)\r\n<span
      style=\"color: rgb(251, 160, 38);\">    self</span>.params[<span style=\"color:
      rgb(250, 197, 28);\">&#39;b2&#39;</span>] = np.<span style=\"color: rgb(84,
      172, 210);\">zeros</span>(output_size)\r\n\r\n    # レイヤの生成\r\n<span style=\"color:
      rgb(251, 160, 38);\">    self</span>.layers = <span style=\"color: rgb(84, 172,
      210);\">OrderedDict</span>()\r\n<span style=\"color: rgb(251, 160, 38);\">    self</span>.layers[<span
      style=\"color: rgb(250, 197, 28);\">&#39;Affine1&#39;</span>] = <span style=\"color:
      rgb(84, 172, 210);\">Affine</span>(<span style=\"color: rgb(251, 160, 38);\">self</span>.params[<span
      style=\"color: rgb(250, 197, 28);\">&#39;W1&#39;</span>], <span style=\"color:
      rgb(251, 160, 38);\">self</span>.params[<span style=\"color: rgb(250, 197, 28);\">&#39;b1&#39;</span>])\r\n<span
      style=\"color: rgb(251, 160, 38);\">    self</span>.layers[<span style=\"color:
      rgb(250, 197, 28);\">&#39;Relu1&#39;</span>] = <span style=\"color: rgb(84,
      172, 210);\">Relu</span>()\r\n<span style=\"color: rgb(251, 160, 38);\">    self</span>.layers[<span
      style=\"color: rgb(250, 197, 28);\">&#39;Affine2&#39;</span>] = <span style=\"color:
      rgb(84, 172, 210);\">Affine</span>(<span style=\"color: rgb(251, 160, 38);\">self</span>.params[<span
      style=\"color: rgb(250, 197, 28);\">&#39;W2&#39;</span>], <span style=\"color:
      rgb(251, 160, 38);\">self</span>.params[<span style=\"color: rgb(250, 197, 28);\">&#39;b2&#39;</span>])\r\n\r\n<span
      style=\"color: rgb(251, 160, 38);\">    self</span>.lastLayer = <span style=\"color:
      rgb(84, 172, 210);\">SoftmaxWithLoss</span>()\r\n\r\n<span style=\"color: rgb(84,
      172, 210);\">    def</span> <span style=\"color: rgb(97, 189, 109);\">predict</span>(<span
      style=\"color: rgb(251, 160, 38);\">self</span>, <span style=\"color: rgb(251,
      160, 38);\">x</span>):\r\n    # インスタンスを取り出して順伝播させる\r\n<span style=\"color: rgb(184,
      49, 47);\">    for</span> layer <span style=\"color: rgb(184, 49, 47);\">in</span>
      <span style=\"color: rgb(251, 160, 38);\">self</span>.layers.values():\r\n      x
      <span style=\"color: rgb(184, 49, 47);\">=</span> layer.<span style=\"color:
      rgb(84, 172, 210);\">forward</span>(x)\r\n\r\n      <span style=\"color: rgb(184,
      49, 47);\">return</span> x\r\n\r\n    # x:入力データ, t:教師データ\r\n    <span style=\"color:
      rgb(84, 172, 210);\">def</span> <span style=\"color: rgb(97, 189, 109);\">loss</span>(<span
      style=\"color: rgb(251, 160, 38);\">self</span>, <span style=\"color: rgb(251,
      160, 38);\">x</span>, <span style=\"color: rgb(251, 160, 38);\">t</span>):\r\n
      \     y <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color:
      rgb(251, 160, 38);\">self</span>.<span style=\"color: rgb(84, 172, 210);\">predict</span>(x)\r\n
      \     <span style=\"color: rgb(184, 49, 47);\">return</span> <span style=\"color:
      rgb(251, 160, 38);\">self</span>.lastLayer.<span style=\"color: rgb(84, 172,
      210);\">forward</span>(y, t)\r\n\r\n    <span style=\"color: rgb(84, 172, 210);\">def</span>
      <span style=\"color: rgb(97, 189, 109);\">accuracy</span>(<span style=\"color:
      rgb(251, 160, 38);\">self</span>, <span style=\"color: rgb(251, 160, 38);\">x</span>,
      <span style=\"color: rgb(251, 160, 38);\">t</span>):\r\n      y <span style=\"color:
      rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(251, 160, 38);\">self</span>.<span
      style=\"color: rgb(84, 172, 210);\">predict</span>(x)\r\n      y <span style=\"color:
      rgb(184, 49, 47);\">=</span> np.<span style=\"color: rgb(84, 172, 210);\">argmax</span>(y,
      <span style=\"color: rgb(251, 160, 38);\">axis</span><span style=\"color: rgb(184,
      49, 47);\">=</span><span style=\"color: rgb(147, 101, 184);\">1</span>)\r\n
      \     if t.ndim <span style=\"color: rgb(184, 49, 47);\">!= </span>1 : t = np.argmax(t,
      <span style=\"color: rgb(251, 160, 38);\">axis</span><span style=\"color: rgb(184,
      49, 47);\">=</span><span style=\"color: rgb(147, 101, 184);\">1</span>)\r\n\r\n
      \     accuracy <span style=\"color: rgb(184, 49, 47);\">=</span> np.<span style=\"color:
      rgb(84, 172, 210);\">sum</span>(y <span style=\"color: rgb(184, 49, 47);\">==</span>
      t) / <span style=\"color: rgb(84, 172, 210);\">float</span>(x.shape[<span style=\"color:
      rgb(147, 101, 184);\">0</span>])\r\n      <span style=\"color: rgb(184, 49,
      47);\">return</span> accuracy\r\n\r\n    # x:入力データ, t:教師データ\r\n    <span style=\"color:
      rgb(84, 172, 210);\">def</span> <span style=\"color: rgb(97, 189, 109);\">numerical_gradient</span>(<span
      style=\"color: rgb(251, 160, 38);\">self</span>, <span style=\"color: rgb(251,
      160, 38);\">x</span>, <span style=\"color: rgb(251, 160, 38);\">t</span>):\r\n
      \     loss_W <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color:
      rgb(84, 172, 210);\">lambda</span> <span style=\"color: rgb(251, 160, 38);\">W</span>:
      <span style=\"color: rgb(251, 160, 38);\">self</span>.<span style=\"color: rgb(84,
      172, 210);\">loss</span>(x, t)\r\n\r\n      grads <span style=\"color: rgb(184,
      49, 47);\">=</span> {}\r\n      grads[<span style=\"color: rgb(250, 197, 28);\">&#39;W1&#39;</span>]
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(84,
      172, 210);\">numerical_gradient</span>(loss_W, <span style=\"color: rgb(251,
      160, 38);\">self</span>.params[<span style=\"color: rgb(250, 197, 28);\">&#39;W1&#39;</span>])\r\n
      \     grads[<span style=\"color: rgb(250, 197, 28);\">&#39;b1&#39;</span>] <span
      style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(84, 172,
      210);\">numerical_gradient</span>(loss_W, <span style=\"color: rgb(251, 160,
      38);\">self</span>.params[<span style=\"color: rgb(250, 197, 28);\">&#39;b1&#39;</span>])\r\n
      \     grads[<span style=\"color: rgb(250, 197, 28);\">&#39;W2&#39;</span>] <span
      style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(84, 172,
      210);\">numerical_gradient</span>(loss_W, <span style=\"color: rgb(251, 160,
      38);\">self</span>.params[<span style=\"color: rgb(250, 197, 28);\">&#39;W2&#39;</span>])\r\n
      \     grads[<span style=\"color: rgb(250, 197, 28);\">&#39;b2&#39;</span>] <span
      style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(84, 172,
      210);\">numerical_gradient</span>(loss_W, <span style=\"color: rgb(251, 160,
      38);\">self</span>.params[<span style=\"color: rgb(250, 197, 28);\">&#39;b2&#39;</span>])\r\n\r\n
      \     <span style=\"color: rgb(184, 49, 47);\">return</span> grads\r\n\r\n    <span
      style=\"color: rgb(84, 172, 210);\">def</span> <span style=\"color: rgb(97,
      189, 109);\">gradient</span>(<span style=\"color: rgb(251, 160, 38);\">self</span>,
      <span style=\"color: rgb(251, 160, 38);\">x</span>, <span style=\"color: rgb(251,
      160, 38);\">t</span>):\r\n      # forward\r\n      <span style=\"color: rgb(251,
      160, 38);\">self</span>.<span style=\"color: rgb(84, 172, 210);\">loss</span>(x,
      t)\r\n\r\n      # backward\r\n      dout <span style=\"color: rgb(184, 49, 47);\">=</span>
      <span style=\"color: rgb(147, 101, 184);\">1</span>\r\n      dout <span style=\"color:
      rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(251, 160, 38);\">self</span>.lastLayer.<span
      style=\"color: rgb(84, 172, 210);\">backward</span>(dout)\r\n\r\n      layers
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(84,
      172, 210);\">list</span>(self.layers.<span style=\"color: rgb(84, 172, 210);\">values</span>())
      # 各層のインスタンスをリストで取得\r\n      layers.<span style=\"color: rgb(84, 172, 210);\">reverse</span>()
      # 下流から上流の順にする\r\n      <span style=\"color: rgb(184, 49, 47);\">for</span> layer
      <span style=\"color: rgb(184, 49, 47);\">in</span> layers:\r\n        dout <span
      style=\"color: rgb(184, 49, 47);\">=</span> layer.<span style=\"color: rgb(84,
      172, 210);\">backward</span>(dout)\r\n\r\n      # 設定\r\n      grads <span style=\"color:
      rgb(184, 49, 47);\">=</span> {}\r\n      grads[<span style=\"color: rgb(250,
      197, 28);\">&#39;W1&#39;</span>], grads[<span style=\"color: rgb(250, 197, 28);\">&#39;b1&#39;</span>]
      = self.layers[<span style=\"color: rgb(250, 197, 28);\">&#39;Affine1&#39;</span>].dW,
      self.layers[<span style=\"color: rgb(250, 197, 28);\">&#39;Affine1&#39;</span>].db\r\n
      \     grads[<span style=\"color: rgb(250, 197, 28);\">&#39;W2&#39;</span>],
      grads[<span style=\"color: rgb(250, 197, 28);\">&#39;b2&#39;</span>] = self.layers[<span
      style=\"color: rgb(250, 197, 28);\">&#39;Affine2&#39;</span>].dW, self.layers[<span
      style=\"color: rgb(250, 197, 28);\">&#39;Affine2&#39;</span>].db\r\n\r\n      <span
      style=\"color: rgb(184, 49, 47);\">return</span> grads\r\n\r\n</pre><p>OrderedDictは順番付きディクショナリ</p><p>キーには層の名前を、値には層の初期化したインスタンスがはいる</p><p><br></p>"
    - '2019-07-14 10:00:58.912403'
    - '2019-07-16 09:42:46.185244'
  - - 177
    - "「リダイレクトが多すぎます」でアクセスできない"
    - "<h1 style=\"text-align: center;\">「リダイレクトが多すぎます」でアクセスできない</h1><p><br></p><h3>環境</h3><hr><p>Amazon
      Linux 2<br>Rails 5.2.1<br>ruby 2.4.2<br>(アプリケーション、ウェブサーバー)<br>nginx version:
      nginx/1.12.2<br>unicorn 5.5.1<br>(ssl証明書)<br>python2-certbot-nginx 0.34.2-1.el7<br>certbot
      0.34.2-3.el7<br>certbot-nginx 0.34.2-3.el7</p><p><br></p><h3>発生している問題・エラーメッセージ</h3><p>chromeにて
      https://[domain] にアクセスすると、「リダイレクトが多すぎます。クッキーを削除してください」というエラーが画面に出てページにアクセスできない。</p><p>クッキーを削除しても効果がない。</p><p><br></p><h3>該当のソースコード</h3><hr><h3>certbotで発行した証明書</h3><pre><code>(発行した証明書情報)\r\nCertificate
      Name: [domain]\r\n    Domains: [domain]\r\n    Expiry Date: 2019-10-06 09:16:15+00:00
      (VALID: 89 days)\r\n    Certificate Path: /etc/letsencrypt/live/[domain]/fullchain.pem\r\n
      \   Private Key Path: /etc/letsencrypt/live/[domain]/privkey.pem\r\ncertbot
      0.34.2-3.el7certbot-nginx 0.34.2-3.el7</code></pre><h3><br></h3><h3>nginx設定ファイル</h3><pre><code>(/etc/nginx/conf.d/myapp.conf)\r\n#
      log directory\r\nerror_log  /var/www/rails/myapp/log/nginx.error.log;\r\naccess_log
      /var/www/rails/myapp/log/nginx.access.log;\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream app_server {\r\n  # for UNIX domain socket setups\r\n  server
      unix:/var/www/rails/myapp/tmp/sockets/unicorn.sock fail_timeout=0;\r\n}\r\nserver
      {\r\n  server_name [domain] [IP];\r\n  # nginx so increasing this is generally
      safe...\r\n  keepalive_timeout 5;\r\n  # path for static files\r\n  root /var/www/rails/myapp/public;\r\n
      \ # page cache loading\r\n  try_files $uri/index.html $uri.html $uri @app;\r\n
      \ location @app {\r\n    # HTTP headers\r\n    proxy_set_header X-Forwarded-For
      $proxy_add_x_forwarded_for;\r\n    proxy_set_header Host $http_host;\r\n    proxy_redirect
      off;\r\n    proxy_pass http://app_server;\r\n  }\r\n  # Rails error pages\r\n
      \ error_page 500 502 503 504 /500.html;\r\n  location = /500.html {\r\n    root
      /var/www/rails/myapp/public;\r\n  }\r\n\r\n    listen 443 ssl; # managed by
      Certbot\r\n    ssl_certificate /etc/letsencrypt/live/[domain]/fullchain.pem;
      # managed by Certbot\r\n    ssl_certificate_key /etc/letsencrypt/live/[domain]/privkey.pem;
      # managed by Certbot\r\n    include /etc/letsencrypt/options-ssl-nginx.conf;
      # managed by Certbot\r\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; #
      managed by Certbot\r\n\r\n\r\n}\r\n\r\nserver {\r\n    if ($host = [domain])
      {\r\n        return 301 https://$host$request_uri;\r\n    } # managed by Certbot\r\n\r\n\r\n
      \ listen 80;\r\n  server_name [domain] [IP];\r\n    return 404; # managed by
      Certbot\r\n\r\n\r\n}</code></pre><p><br></p><h3>Railsの本番環境設定ファイル</h3><p>(environments/production.rb)</p><p>Railsのconfig/environments/production.rbにて以下を追記</p><pre>Rails.application.configure
      do\r\n  ...\r\n  config.force_ssl=<span style=\"color: rgb(184, 49, 47);\">true</span>\r\n 
      if Rails.application.config.force_ssl  \r\n    Rails.application.routes.default_url_options[:protocol]
      = &lsquo;<span style=\"color: rgb(41, 105, 176);\">https</span>&rsquo;\r\n 
      end\r\nend</pre><p><br></p><h3>解決策</h3><h4>nginx設定ファイル</h4><p>に以下を書き込む</p><p><code>proxy_set_header
      X-Forwarded-Proto https;</code></p><p><br></p><pre><code>(/etc/nginx/conf.d/myapp.conf)\r\n#
      log directory\r\nerror_log  /var/www/rails/myapp/log/nginx.error.log;\r\naccess_log
      /var/www/rails/myapp/log/nginx.access.log;\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream app_server {\r\n  # for UNIX domain socket setups\r\n  server
      unix:/var/www/rails/myapp/tmp/sockets/unicorn.sock fail_timeout=0;\r\n}\r\nserver
      {\r\n  server_name [domain] [IP];\r\n  # nginx so increasing this is generally
      safe...\r\n  keepalive_timeout 5;\r\n  # path for static files\r\n  root /var/www/rails/myapp/public;\r\n
      \ # page cache loading\r\n  try_files $uri/index.html $uri.html $uri @app;\r\n
      \ location @app {\r\n    # HTTP headers\r\n    proxy_set_header X-Forwarded-For
      $proxy_add_x_forwarded_for;</code>\r\n<code>    </code><code><span style=\"color:
      rgb(250, 197, 28);\">proxy_set_header X-Forwarded-Proto https;</span></code><code>\r\n
      \   proxy_set_header Host $http_host;\r\n    proxy_redirect off;\r\n    proxy_pass
      http://app_server;\r\n  }\r\n  # Rails error pages\r\n  error_page 500 502 503
      504 /500.html;\r\n  location = /500.html {\r\n    root /var/www/rails/myapp/public;\r\n
      \ }\r\n\r\n    listen 443 ssl; # managed by Certbot\r\n    ssl_certificate /etc/letsencrypt/live/[domain]/fullchain.pem;
      # managed by Certbot\r\n    ssl_certificate_key /etc/letsencrypt/live/[domain]/privkey.pem;
      # managed by Certbot\r\n    include /etc/letsencrypt/options-ssl-nginx.conf;
      # managed by Certbot\r\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; #
      managed by Certbot\r\n\r\n\r\n}\r\n\r\nserver {\r\n    if ($host = [domain])
      {\r\n        return 301 https://$host$request_uri;\r\n    } # managed by Certbot\r\n\r\n\r\n
      \ listen 80;\r\n  server_name [domain] [IP];\r\n    return 404; # managed by
      Certbot\r\n\r\n\r\n}</code></pre><p><br></p><p><span style=\"font-size: 30px;\">かなり時間使ったが、結果はたったの1行で、エラーの悪夢が過ぎ去りました。</span></p><p><span
      style=\"font-size: 30px;\">参考資料有難や！！</span></p><p><br></p><p><span style=\"font-size:
      24px;\">参考資料</span></p><p><span style=\"font-size: 24px;\"><a href=\"https://joe-noh.hatenablog.com/entry/2016/10/28/075322\"></a><a
      href=\"https://joe-noh.hatenablog.com/entry/2016/10/28/075322\">https://joe-noh.hatenablog.com/entry/2016/10/28/075322</a></span></p><p><span
      style=\"font-size: 24px;\"><a href=\"https://qiita.com/chanken/items/b6dc4a896f8cc1615f34\"></a></span><a
      href=\"https://qiita.com/chanken/items/b6dc4a896f8cc1615f34\"><span style=\"font-size:
      24px;\">https://qiita.com/chanken/items/b6dc4a896f8cc1615f34</span></a></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-07-19 09:10:33.324388'
    - '2019-07-19 09:38:51.682138'

---
articles_tags:
  columns:
  - article_id
  - tag_id
  records: 
  - - 5
    - 14
  - - 84
    - 14
  - - 84
    - 18
  - - 85
    - 14
  - - 85
    - 18
  - - 86
    - 14
  - - 86
    - 18
  - - 87
    - 14
  - - 87
    - 18
  - - 88
    - 14
  - - 88
    - 18
  - - 89
    - 14
  - - 89
    - 18
  - - 90
    - 14
  - - 90
    - 18
  - - 91
    - 14
  - - 91
    - 18
  - - 92
    - 19
  - - 94
    - 20
  - - 95
    - 21
  - - 96
    - 14
  - - 97
    - 14
  - - 97
    - 18
  - - 98
    - 14
  - - 98
    - 18
  - - 99
    - 14
  - - 99
    - 18
  - - 103
    - 22
  - - 104
    - 22
  - - 106
    - 22
  - - 107
    - 22
  - - 108
    - 22
  - - 109
    - 22
  - - 110
    - 14
  - - 111
    - 20
  - - 112
    - 14
  - - 113
    - 14
  - - 115
    - 23
  - - 116
    - 23
  - - 117
    - 23
  - - 118
    - 20
  - - 123
    - 14
  - - 123
    - 18
  - - 124
    - 23
  - - 126
    - 14
  - - 129
    - 25
  - - 130
    - 25
  - - 132
    - 25
  - - 133
    - 25
  - - 134
    - 25
  - - 135
    - 25
  - - 138
    - 24
  - - 139
    - 24
  - - 140
    - 14
  - - 140
    - 18
  - - 141
    - 22
  - - 142
    - 19
  - - 143
    - 24
  - - 144
    - 25
  - - 145
    - 26
  - - 146
    - 26
  - - 147
    - 26
  - - 148
    - 26
  - - 149
    - 26
  - - 150
    - 26
  - - 151
    - 25
  - - 152
    - 25
  - - 153
    - 25
  - - 155
    - 25
  - - 156
    - 26
  - - 157
    - 25
  - - 158
    - 25
  - - 159
    - 25
  - - 160
    - 25
  - - 161
    - 25
  - - 162
    - 26
  - - 163
    - 25
  - - 164
    - 25
  - - 165
    - 25
  - - 166
    - 25
  - - 167
    - 14
  - - 168
    - 25
  - - 169
    - 26
  - - 170
    - 26
  - - 171
    - 18
  - - 172
    - 25
  - - 173
    - 25
  - - 174
    - 25
  - - 175
    - 14
  - - 175
    - 25
  - - 176
    - 26
  - - 177
    - 18
  - - 177
    - 25

---
tags:
  columns:
  - id
  - name
  - created_at
  - updated_at
  records: 
  - - 12
    - React Native
    - '2018-12-08 08:14:52.514427'
    - '2018-12-08 08:14:52.514427'
  - - 13
    - Swift
    - '2018-12-08 08:15:07.708535'
    - '2018-12-08 08:15:07.708535'
  - - 14
    - Ruby On Rails
    - '2018-12-08 08:15:17.474542'
    - '2018-12-08 08:15:17.474542'
  - - 18
    - ブログ(開発者用)
    - '2018-12-08 09:20:04.353576'
    - '2018-12-08 09:20:04.353576'
  - - 19
    - MySQL
    - '2018-12-16 01:57:26.462599'
    - '2018-12-16 01:57:26.462599'
  - - 20
    - github
    - '2018-12-19 05:42:07.344252'
    - '2018-12-19 05:42:07.344252'
  - - 21
    - Node.js
    - '2018-12-21 07:22:16.500838'
    - '2018-12-21 07:22:16.500838'
  - - 22
    - PHP
    - '2019-01-14 14:31:43.285449'
    - '2019-01-14 14:31:43.285449'
  - - 23
    - postgreSQL
    - '2019-03-08 04:10:41.012483'
    - '2019-03-08 04:10:41.012483'
  - - 24
    - Ruby
    - '2019-03-14 05:56:37.242555'
    - '2019-03-14 05:56:37.242555'
  - - 25
    - AWS
    - '2019-04-03 09:26:23.282363'
    - '2019-04-03 09:26:23.282363'
  - - 26
    - python
    - '2019-05-07 04:31:45.013079'
    - '2019-05-07 04:31:45.013079'

---
users:
  columns:
  - id
  - email
  - encrypted_password
  - reset_password_token
  - reset_password_sent_at
  - remember_created_at
  - created_at
  - updated_at
  - admin
  records: 
  - - 1
    - p111027t@mail.kyutech.jp
    - "$2a$11$wXm8bH4AxmroesLYNoMW.uqtjtPEWGaAzdr.mTRZn84d1wVCS2YKi"
    - 
    - 
    - 
    - '2019-03-21 16:23:15.034537'
    - '2019-03-21 13:33:51.183567'
    - true
