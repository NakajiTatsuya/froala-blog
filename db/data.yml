
---
active_storage_attachments:
  columns:
  - id
  - name
  - record_type
  - record_id
  - blob_id
  - created_at
  records: 
  - - 4
    - image
    - Article
    - 21
    - 4
    - '2018-11-19 09:08:13.348920'
  - - 13
    - image
    - Article
    - 84
    - 13
    - '2018-12-08 15:33:59.726349'
  - - 14
    - image
    - Article
    - 85
    - 14
    - '2018-12-08 15:56:28.165118'
  - - 15
    - image
    - Article
    - 86
    - 15
    - '2018-12-08 16:51:33.030346'
  - - 16
    - image
    - Article
    - 87
    - 16
    - '2018-12-09 13:39:12.372560'
  - - 17
    - image
    - Article
    - 88
    - 17
    - '2018-12-10 07:09:04.559264'
  - - 18
    - image
    - Article
    - 89
    - 18
    - '2018-12-10 08:11:09.951922'
  - - 19
    - image
    - Article
    - 90
    - 19
    - '2018-12-10 09:21:55.306621'
  - - 20
    - image
    - Article
    - 91
    - 20
    - '2018-12-10 09:43:05.658789'
  - - 21
    - image
    - Article
    - 92
    - 21
    - '2018-12-16 00:55:53.543776'
  - - 23
    - image
    - Article
    - 94
    - 23
    - '2018-12-19 06:48:55.146533'
  - - 24
    - image
    - Article
    - 95
    - 24
    - '2018-12-24 12:48:18.683708'

---
active_storage_blobs:
  columns:
  - id
  - key
  - filename
  - content_type
  - metadata
  - byte_size
  - checksum
  - created_at
  records: 
  - - 4
    - TapyRDfz3Co9bo9R45tMdKFj
    - CCC9V9A9997_TP_V.jpg
    - image/jpeg
    - '{"identified":true,"analyzed":true}'
    - 227312
    - IqSt3hW6+mYWxd9FocGSUQ==
    - '2018-11-19 09:08:13.333818'
  - - 13
    - kQeLTznXwBs1NmdxDhupjgsj
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-08 15:33:59.720368'
  - - 14
    - H54bGnG6nSsVzonkysZfM6E8
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-08 15:56:28.162019'
  - - 15
    - VuYhCmHVFSfgRDHUrf9YnGY7
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-08 16:51:33.025516'
  - - 16
    - ckUV4nEWfnXvaL9JyHgfEgfD
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-09 13:39:12.341112'
  - - 17
    - 8eaN1c4UbyMZz5x5r3WJuvMw
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-10 07:09:04.533320'
  - - 18
    - CKzZZJHNLvtHjEwmSwkBFAVM
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-10 08:11:09.900255'
  - - 19
    - Txg1f3T7M7Q3oyDk8zjtNHd3
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-10 09:21:55.283572'
  - - 20
    - wwRc7tXpaQyM1bbpGiMffxqa
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-10 09:43:05.632922'
  - - 21
    - RLntuge8F8DnCXUnpPxfi9L7
    - mysql_Fotor.png
    - image/png
    - '{"identified":true,"width":394,"height":315,"analyzed":true}'
    - 129601
    - W25NCPKs85gtnmflbd5xvA==
    - '2018-12-16 00:55:53.523744'
  - - 23
    - GD3iZwsguvvuAjj3WdqNE4Mf
    - is_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":300,"height":200,"analyzed":true}'
    - 36992
    - oXlXcUkjusFrnCAGa5bbfA==
    - '2018-12-19 06:48:55.117847'
  - - 24
    - 697CD2S2Gqc5Y6vUZxY24j2N
    - spreadsheet.png
    - image/png
    - '{"identified":true,"width":1490,"height":848,"analyzed":true}'
    - 120187
    - I8ikInjefnPc8NZrLP+1Ow==
    - '2018-12-24 12:48:18.678150'

---
ar_internal_metadata:
  columns:
  - key
  - value
  - created_at
  - updated_at
  records: 
  - - environment
    - development
    - '2018-11-12 10:16:28.781674'
    - '2018-11-12 10:16:28.781674'

---
articles:
  columns:
  - id
  - title
  - body
  - created_at
  - updated_at
  records: 
  - - 3
    - DEVISE_version
    - "<p><a href=\"https://teratail.com/questions/143329\">https://teratail.com/questions/143329</a></p><p>devise
      4.5.0から:trackableが削除されたようなので、deviseのバージョンを一つ前に戻したら、ログイン時刻が表示されるようになりました。<br>accountのモデルの削除など試行錯誤しました結果の手順を残しておきます。</p><pre><code>・下記のページからdeviseのバージョンを確認\r\n　https://github.com/plataformatec/devise/blob/master/CHANGELOG.md\r\n・下記のファイルを手動で削除\r\n　・Gemfile.lock\r\n　＜参考＞\r\n　　https://code-schools.com/ror-bundleerror/\r\n・Gemfileに「gem
      &#39;devise&#39;, &#39;~&gt; 4.4.3&#39;」を記入\r\n　＜参考＞\r\n　　http://taniguhi.hatenablog.com/entry/2013/07/31/224551\r\n・コマンドプロンプト　bundle
      install\r\n・Gemfile.lockで、devise(4.4.3)を確認\r\n・コマンドプロンプト（該当のアプリのディレクトリ）&gt;rails
      generate devise:install\r\n・rails destroy devise account\r\n　＜参考＞\r\n　　https://note.mu/oreno/n/n45f8208ade29\r\n・下記のファイルを手動で削除\r\n　db/development.sqlite3\r\n　db/migrate/20180826062337_devise_create_accounts.rb\r\n　＜参考＞\r\n　　https://teratail.com/questions/67393\r\n・rails
      db:migrate\r\n・rails generate devise account\r\n・rails db:migrate\r\n・下記のファイルを手動で削除\r\n　db/development.sqlite3\r\n・rails
      db:migrate</code></pre>"
    - '2018-11-12 11:58:25.592277'
    - '2018-11-13 08:29:59.227997'
  - - 4
    - WYSIWYGエディタ
    - <p><a href="https://www.codementor.io/kingsleysilas/how-to-build-a-blog-using-froala-wysiwyg-v86wyapnb#comments-v86wyapnb">floala-wysiwyg</a></p><p><a
      href="https://cre8cre8.com/rails/wysiwyg-editor.htm">5分導入</a></p><p><a href="https://www.froala.com/wysiwyg-editor/docs/overview">doc</a></p><p><a
      href="https://www.froala.com/wysiwyg-editor/docs/framework-plugins/rails">rails-doc</a></p>
    - '2018-11-13 04:05:45.798294'
    - '2018-11-13 04:05:45.798294'
  - - 5
    - DEVISE_rails5
    - "<p><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374\">https://qiita.com/cigalecigales/items/f4274088f20832252374</a>&nbsp;そのまま</p><p><br></p><h1>はじめに</h1><p>Rails5で再検証版です。<br>以下のRails4のときのやつを現状（2016/11/12,
      13）のバージョンで確認して、一部バージョン上がってうまく動かないところを修正したりした感じです。<br><a href=\"http://qiita.com/cigalecigales/items/73d7bd7ec59a001ccd74\">[<em>Rails</em>]
      deviseの使い方</a></p><div data-lang=\"text\"><pre>【前回】\r\nrails : 4.2.0\r\nruby
      \ : 2.2.0\r\ndevise: 3.4.1\r\n\r\n&darr;\r\n\r\n【今回】\r\nrails : 5.0.0.1\r\nruby
      \ : 2.3.1\r\ndevise: 4.2.0</pre></div><p>あと、上の記事で最後に「全部まとめきれてないので、忘れないうちにちょっとずつ追加していこうと思います。」とか書いていながら全く追加することはなかったので、追加しようと思ってたものをちょっとだけ思い出して追加したバージョンです。</p><h1><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#devise%E3%81%A8%E3%81%AF\"></a>deviseとは</h1><p>ユーザー登録して、送られてきたメールのリンクをクリックして本登録して、ログインして、パスワード忘れたら再設定して、何回もログインミスったらアカウントロックして&hellip;などといった認証系アプリに必要な機能を簡単に追加できる便利なgemです。</p><h1><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#devise%E3%81%AE%E5%B0%8E%E5%85%A5\"></a>deviseの導入</h1><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-gem%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"></a>1.
      gemのインストール</h2><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"></a>1.
      プロジェクトの作成</h3><p>新しいプロジェクトを作ります。</p><div data-lang=\"bash\"><pre>$ rails new
      devise_rails5\r\n$ cd devise_rails5</pre></div><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-gemfile%E3%81%AE%E7%B7%A8%E9%9B%86%E3%81%A8%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"></a>2.
      Gemfileの編集とインストール</h3><p>以下ファイルに<code>devise</code>と<code>omniauth-twitter</code>を追加します。</p><div
      data-lang=\"rb\">Gemfile<pre>source &#39;https://rubygems.org&#39;\r\n\r\n(省略)...\r\n\r\n#
      Devise\r\ngem &#39;devise&#39;\r\ngem &#39;omniauth-twitter&#39;\r\n\r\n</pre></div><p>gemをインストール。</p><div
      data-lang=\"bash\"><pre>$ bundle install</pre></div><h2><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-devise%E3%81%AE%E8%A8%AD%E5%AE%9A\"></a>2.
      deviseの設定</h2><p>devise関連ファイルを追加。<br>すると以下のような英文が表示されます。1から4まで順番に見ていきます。</p><div
      data-lang=\"bash\"><pre>$ rails g devise:install\r\n      create  config/initializers/devise.rb\r\n
      \     create  config/locales/devise.en.yml\r\n===============================================================================\r\n\r\nSome
      setup you must do manually if you haven&#39;t yet:\r\n\r\n  1. Ensure you have
      defined default url options in your environments files. Here\r\n     is an example
      of default_url_options appropriate for a development environment\r\n     in
      config/environments/development.rb:\r\n\r\n       config.action_mailer.default_url_options
      = { host: &#39;localhost&#39;, port: 3000 }\r\n\r\n     In production, :host
      should be set to the actual host of your application.\r\n\r\n  2. Ensure you
      have defined root_url to *something* in your config/routes.rb.\r\n     For example:\r\n\r\n
      \      root to: &quot;home#index&quot;\r\n\r\n  3. Ensure you have flash messages
      in app/views/layouts/application.html.erb.\r\n     For example:\r\n\r\n       &lt;p
      class=&quot;notice&quot;&gt;&lt;%= notice %&gt;&lt;/p&gt;\r\n       &lt;p class=&quot;alert&quot;&gt;&lt;%=
      alert %&gt;&lt;/p&gt;\r\n\r\n  4. You can copy Devise views (for customization)
      to your app by running:\r\n\r\n       rails g devise:views\r\n\r\n===============================================================================</pre></div><p><strong>1.
      デフォルトURLの指定</strong><br>英文の例に書いてあった<code>config.action_mailer.default_url_options
      = { host: &#39;localhost&#39;, port: 3000 }</code>を以下のファイルに追加しました。<br><code>config.action_mailer.default_url_options
      = { host: &#39;localhost:3000&#39; }</code>でもOKです。</p><div data-lang=\"rb\">config/environments/development.rb<pre>Rails.application.configure
      do\r\n  # Settings specified here will take precedence over those in config/application.rb.\r\n\r\n
      \ (省略)...\r\n\r\n  # mailer setting\r\n  config.action_mailer.default_url_options
      = { host: &#39;localhost&#39;, port: 3000 }\r\nend</pre></div><p><strong>2.
      root_urlの指定</strong><br>1番で指定した<em><a href=\"http://localhost:3000/\" rel=\"nofollow
      noopener\" target=\"_blank\">http://localhost:3000/</a></em>にアクセスした際に表示されるページを指定します。<br>現状ページは1つも作っていないため、先に追加します。</p><p>Pagesコントローラーと、indexページとshowページを追加してみます。</p><div
      data-lang=\"bash\"><pre>$ rails g controller Pages index show</pre></div><p>routes.rbに以下を指定します。</p><div
      data-lang=\"rb\">config/routes.rb<pre>Rails.application.routes.draw do\r\n  root
      &#39;pages#index&#39;\r\n  get &#39;pages/show&#39;\r\n  (省略)...\r\nend</pre></div><p><strong>3.
      flashメッセージの設定</strong><br>ログインした時などに上の方に「ログインしました」みたいなメッセージが出るようにします。<br>以下のファイルの<code>&lt;body&gt;</code>タグのすぐ下に指定されたタグを挿入します。</p><div
      data-lang=\"erb\">app/views/layouts/application.html.erb<pre>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;
      \r\n &lt;head&gt;\r\n  &lt;title&gt;DeviseRails5&lt;/title&gt;\r\n  &lt;%= csrf_meta_tags
      %&gt;\r\n\r\n  &lt;%= stylesheet_link_tag    &#39;application&#39;, media: &#39;all&#39;,
      &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&gt;\r\n  &lt;%= javascript_include_tag
      &#39;application&#39;, &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&gt;\r\n
      &lt;/head&gt;\r\n &lt;body&gt;\r\n  &lt;p class=&quot;notice&quot;&gt;&lt;%=
      notice %&gt;&lt;/p&gt;\r\n  &lt;p class=&quot;alert&quot;&gt;&lt;%= alert %&gt;&lt;/p&gt;\r\n\r\n
      \ &lt;%= yield %&gt;\r\n\r\n &lt;/body&gt; \r\n&lt;/html&gt;</pre></div><p><strong>4.
      DeviseのViewを生成</strong><br>Deviseの導入で追加されるViewは、以下のコマンドを実行しなければデザインを変更できないので、デザインをカスタマイズするためにも実行します。</p><div
      data-lang=\"bash\"><pre>$ rails g devise:views</pre></div><p>すると以下の様なファイルが生成されます。</p><div
      data-lang=\"bash\"><pre>app/views/devise/shared/_links.html.erb (リンク用パーシャル)\r\napp/views/devise/confirmations/new.html.erb
      (認証メールの再送信画面)\r\napp/views/devise/passwords/edit.html.erb (パスワード変更画面)\r\napp/views/devise/passwords/new.html.erb
      (パスワードを忘れた際、メールを送る画面)\r\napp/views/devise/registrations/edit.html.erb (ユーザー情報変更画面)\r\napp/views/devise/registrations/new.html.erb
      (ユーザー登録画面)\r\napp/views/devise/sessions/new.html.erb (ログイン画面)\r\napp/views/devise/unlocks/new.html.erb
      (ロック解除メール再送信画面)\r\napp/views/devise/mailer/confirmation_instructions.html.erb
      (メール用アカウント認証文)\r\napp/views/devise/mailer/password_change.html.erb （メール用パスワード変更完了文）\r\napp/views/devise/mailer/reset_password_instructions.html.erb
      (メール用パスワードリセット文)\r\napp/views/devise/mailer/unlock_instructions.html.erb (メール用ロック解除文)</pre></div><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#3-user%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E8%A8%AD%E5%AE%9A\"></a>3.
      Userモデルの設定</h2><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-user%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90\"></a>1.
      Userモデルの作成</h3><p>以下を実行。</p><div data-lang=\"bash\"><pre>$ rails g devise User</pre></div><p>マイグレーションファイルができます。<br>デフォルトではこんな感じになってます。</p><div
      data-lang=\"rb\">db/migrate/20161112121754_devise_create_users.rb<pre>class
      DeviseCreateUsers &lt; ActiveRecord::Migration[5.0]\r\n  def change\r\n    create_table
      :users do |t|\r\n      ## Database authenticatable\r\n      t.string :email,
      \             null: false, default: &quot;&quot;\r\n      t.string :encrypted_password,
      null: false, default: &quot;&quot;\r\n\r\n      ## Recoverable\r\n      t.string
      \  :reset_password_token\r\n      t.datetime :reset_password_sent_at\r\n\r\n
      \     ## Rememberable\r\n      t.datetime :remember_created_at\r\n\r\n      ##
      Trackable\r\n      t.integer  :sign_in_count, default: 0, null: false\r\n      t.datetime
      :current_sign_in_at\r\n      t.datetime :last_sign_in_at\r\n      t.string   :current_sign_in_ip\r\n
      \     t.string   :last_sign_in_ip\r\n\r\n      ## Confirmable\r\n      # t.string
      \  :confirmation_token\r\n      # t.datetime :confirmed_at\r\n      # t.datetime
      :confirmation_sent_at\r\n      # t.string   :unconfirmed_email # Only if using
      reconfirmable\r\n\r\n      ## Lockable\r\n      # t.integer  :failed_attempts,
      default: 0, null: false # Only if lock strategy is :failed_attempts\r\n      #
      t.string   :unlock_token # Only if unlock strategy is :email or :both\r\n      #
      t.datetime :locked_at\r\n\r\n\r\n      t.timestamps null: false\r\n    end\r\n\r\n
      \   add_index :users, :email,                unique: true\r\n    add_index :users,
      :reset_password_token, unique: true\r\n    # add_index :users, :confirmation_token,
      \  unique: true\r\n    # add_index :users, :unlock_token,         unique: true\r\n
      \ end\r\nend</pre></div><p>Userモデルはこんな感じになっています。<br>デフォルトでは<code>database_authenticatable</code>、<code>registerable</code>、<code>recoverable</code>、<code>rememberable</code>、<code>trackable</code>、<code>validatable</code>が使えるようになっています。</p><div
      data-lang=\"rb\">app/models/user.rb<pre>class User &lt; ApplicationRecord\r\n
      \ # Include default devise modules. Others available are:\r\n  # :confirmable,
      :lockable, :timeoutable and :omniauthable\r\n  devise :database_authenticatable,
      :registerable,\r\n         :recoverable, :rememberable, :trackable, :validatable\r\nend</pre></div><h3><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-devise%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E6%A6%82%E8%A6%81\"></a>2.
      deviseモジュール概要</h3><p>各モジュールについて以下に紹介します。</p><table><thead><tr><th>機能</th><th>概要</th></tr></thead><tbody><tr><td>database_authenticatable</td><td>サインイン時にユーザーの正当性を検証するためにパスワードを暗号化してDBに登録します。認証方法としてはPOSTリクエストかHTTP
      Basic認証が使えます。</td></tr><tr><td>registerable</td><td>登録処理を通してユーザーをサインアップします。また、ユーザーに自身のアカウントを編集したり削除することを許可します。</td></tr><tr><td>recoverable</td><td>パスワードをリセットし、それを通知します。</td></tr><tr><td>rememberable</td><td>保存されたcookieから、ユーザーを記憶するためのトークンを生成・削除します。</td></tr><tr><td>trackable</td><td>サインイン回数や、サインイン時間、IPアドレスを記録します。</td></tr><tr><td>validatable</td><td>Emailやパスワードのバリデーションを提供します。独自に定義したバリデーションを追加することもできます。</td></tr><tr><td>confirmable</td><td>メールに記載されているURLをクリックして本登録を完了する、といったよくある登録方式を提供します。また、サインイン中にアカウントが認証済みかどうかを検証します。</td></tr><tr><td>lockable</td><td>一定回数サインインを失敗するとアカウントをロックします。ロック解除にはメールによる解除か、一定時間経つと解除するといった方法があります。</td></tr><tr><td>timeoutable</td><td>一定時間活動していないアカウントのセッションを破棄します。</td></tr><tr><td>omniauthable</td><td><a
      href=\"https://github.com/intridea/omniauth\" rel=\"nofollow noopener\" target=\"_blank\"><em>intridea/omniauth</em></a>をサポートします。TwitterやFacebookなどの認証を追加したい場合はこれを使用します。</td></tr></tbody></table><h3><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#3-user%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E7%B7%A8%E9%9B%86\"></a>3.
      Userモデルの編集</h3><p>今回はデフォルトではないものも触ってみたいと思うので全部入れてみます。<br>Twitter認証を使うのでTwitterを指定しています。</p><div
      data-lang=\"rb\">app/models/user.rb<pre>class User &lt; ApplicationRecord\r\n
      \ # Include default devise modules. Others available are:\r\n  # :confirmable,
      :lockable, :timeoutable and :omniauthable\r\n  devise :database_authenticatable,
      :registerable,\r\n         :recoverable, :rememberable, :trackable, :validatable,\r\n
      \        :confirmable, :lockable, :timeoutable, :omniauthable, omniauth_providers:
      [:twitter]\r\nend</pre></div><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#4-%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%B7%A8%E9%9B%86\"></a>4.
      マイグレーションファイルの編集</h3><p>上に合わせて使用モジュールに対応する部分のコメントアウトを外します。今回は全部使うので全部外します。</p><div
      data-lang=\"rb\">db/migrate/20161112121754_devise_create_users.rb<pre>class
      DeviseCreateUsers &lt; ActiveRecord::Migration[5.0]\r\n  def change\r\n    create_table
      :users do |t|\r\n      ## Database authenticatable\r\n      t.string :email,
      \             null: false, default: &quot;&quot;\r\n      t.string :encrypted_password,
      null: false, default: &quot;&quot;\r\n\r\n      ## Recoverable\r\n      t.string
      \  :reset_password_token\r\n      t.datetime :reset_password_sent_at\r\n\r\n
      \     ## Rememberable\r\n      t.datetime :remember_created_at\r\n\r\n      ##
      Trackable\r\n      t.integer  :sign_in_count, default: 0, null: false\r\n      t.datetime
      :current_sign_in_at\r\n      t.datetime :last_sign_in_at\r\n      t.string   :current_sign_in_ip\r\n
      \     t.string   :last_sign_in_ip\r\n\r\n      ## Confirmable\r\n      t.string
      \  :confirmation_token\r\n      t.datetime :confirmed_at\r\n      t.datetime
      :confirmation_sent_at\r\n      t.string   :unconfirmed_email # Only if using
      reconfirmable\r\n\r\n      ## Lockable\r\n      t.integer  :failed_attempts,
      default: 0, null: false # Only if lock strategy is :failed_attempts\r\n      t.string
      \  :unlock_token # Only if unlock strategy is :email or :both\r\n      t.datetime
      :locked_at\r\n\r\n\r\n      t.timestamps null: false\r\n    end\r\n\r\n    add_index
      :users, :email,                unique: true\r\n    add_index :users, :reset_password_token,
      unique: true\r\n    add_index :users, :confirmation_token,   unique: true\r\n
      \   add_index :users, :unlock_token,         unique: true\r\n  end\r\nend</pre></div><h3><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#5-omniauth-twitter%E7%94%A8%E3%82%AB%E3%83%A9%E3%83%A0%E3%81%AE%E8%BF%BD%E5%8A%A0\"></a>5.
      omniauth-twitter用カラムの追加</h3><p>ついでにomniauth-twitterで使う<code>provider</code>と<code>uid</code>、それとTwitter認証の場合はアカウント名を保存しておきたいので<code>username</code>もUserテーブルに追加します。</p><div
      data-lang=\"bash\"><pre>$ rails g migration add_columns_to_users provider uid
      username</pre></div><p>以下のようなマイグレーションファイルができます。</p><div data-lang=\"rb\">db/migrate/20161112122634_add_columns_to_users.rb<pre>class
      AddColumnsToUsers &lt; ActiveRecord::Migration[5.0]\r\n  def change\r\n    add_column
      :users, :provider, :string\r\n    add_column :users, :uid, :string\r\n    add_column
      :users, :username, :string\r\n  end\r\nend</pre></div><p>ここまで出来たら以下を実行します。</p><div
      data-lang=\"bash\"><pre>$ rake db:migrate</pre></div><h2><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#4-view%E3%81%AE%E7%B7%A8%E9%9B%86\"></a>4.
      viewの編集</h2><p>以下のファイルを編集して、ページ上部にメニューが出るようにします。<br><code>user_signed_in?</code>はdeviseのHelperメソッドです。<br>ログインしているかしてないかで上部のメニューの表示が変わるようになります。<br><code>current_user</code>で現在サインインしているユーザーの情報を取得できます。</p><div
      data-lang=\"erb\">app/views/layouts/application.html.erb<pre>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n
      \   &lt;head&gt;\r\n        &lt;title&gt;DeviseRails5&lt;/title&gt;\r\n        &lt;%=
      csrf_meta_tags %&gt;\r\n\r\n        &lt;%= stylesheet_link_tag    &#39;application&#39;,
      media: &#39;all&#39;, &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&gt;\r\n
      \       &lt;%= javascript_include_tag &#39;application&#39;, &#39;data-turbolinks-track&#39;:
      &#39;reload&#39; %&gt;\r\n    &lt;/head&gt;\r\n\r\n    &lt;body&gt;\r\n        &lt;header&gt;\r\n
      \           &lt;nav&gt;\r\n                &lt;% if user_signed_in? %&gt;\r\n
      \               &lt;strong&gt;&lt;%= link_to current_user.username, pages_show_path
      %&gt;&lt;/strong&gt;\r\n                &lt;%= link_to &#39;プロフィール変更&#39;, edit_user_registration_path
      %&gt;\r\n                &lt;%= link_to &#39;ログアウト&#39;, destroy_user_session_path,
      method: :delete %&gt;\r\n            &lt;% else %&gt;\r\n                &lt;%=
      link_to &#39;サインアップ&#39;, new_user_registration_path %&gt;\r\n                &lt;%=
      link_to &#39;ログイン&#39;, new_user_session_path %&gt;\r\n                &lt;%
      end %&gt;\r\n            &lt;/nav&gt;\r\n        &lt;/header&gt;\r\n\r\n        &lt;p
      class=&quot;notice&quot;&gt;&lt;%= notice %&gt;&lt;/p&gt;\r\n        &lt;p class=&quot;alert&quot;&gt;&lt;%=
      alert %&gt;&lt;/p&gt;\r\n\r\n        &lt;%= yield %&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;</pre></div><p>以下の2ページも修正。<br>indexの方がトップページ、showの方がログインしているユーザー用のページになる予定です。</p><div
      data-lang=\"erb\">app/views/pages/index.html.erb<pre>&lt;h1&gt;ようこそ&lt;/h1&gt;\r\n&lt;p&gt;トップページです。&lt;/p&gt;</pre></div><div
      data-lang=\"erb\">app/views/pages/show.html.erb<pre>&lt;h1&gt;こんにちは、&lt;%= current_user.username
      %&gt;さん&lt;/h1&gt;\r\n&lt;p&gt;ユーザー用ページです。&lt;/p&gt;</pre></div><p>サーバーを立ち上げて、「サインアップ」を押下すると、<code>app/models/user.rb</code>で<code>omniauthable</code>を設定しているのに何の設定もしていないので現状ではエラーになります。<br><a
      href=\"https://camo.qiitausercontent.com/f0a05b1c5d323a8c6c63055b81e4588a5e97a189/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f33373132376666352d386433362d323766622d373139382d3530336463636239643761652e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/ec125982-6b52-41d7-ae7c-517ba5f3b5e3\"
      alt=\"エラー.png\" class=\"fr-fic fr-dii\"></a></p><p><code>omniauthable</code>を設定していない場合はサインアップページが表示されます。</p><h1><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#twitter%E3%81%A7%E8%AA%8D%E8%A8%BC%E3%81%99%E3%82%8B\"></a>Twitterで認証する</h1><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-%E8%A8%AD%E5%AE%9A\"></a>1.
      設定</h2><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-twitter-developer%E3%81%AE%E7%99%BB%E9%8C%B2\"></a>1.
      Twitter Developerの登録</h3><p><a href=\"https://apps.twitter.com/\" rel=\"nofollow
      noopener\" target=\"_blank\"><em>Twitter Developer</em></a>にアクセスし、<strong>Create
      New App</strong>をクリックし（ツイッターにログインしてないとボタンが出ません）、情報を適当の入力にします。<br><a href=\"https://camo.qiitausercontent.com/e04815f122b2434eccfb51030ccb4a823705258e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f30353163656138372d313665302d616465322d353962652d3063653063366464613636372e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/64012f67-2b10-4efd-ba83-882d161b7495\"
      alt=\"Twitterアプリ登録.png\" class=\"fr-fic fr-dii\"></a></p><p>作成したプロジェクトを開き、<strong>Settings</strong>タブの下の方の<strong>Allow
      this application to be used to Sign in with Twitter</strong>にチェックが入っていることを確認します。</p><h3><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%B7%A8%E9%9B%86\"></a>2.
      設定ファイルの編集</h3><p><strong>Keys and Access Tokens</strong>タブを開き、<strong>Consumer
      Key (API Key)</strong>と<strong>Consumer Secret (API Secret)</strong>を以下の該当箇所にコピーして貼り付けます。</p><div
      data-lang=\"rb\">config/initializers/devise.rb<pre>Devise.setup do |config|\r\n
      \ # The secret key used by Devise. Devise uses this key to generate\r\n  (省略)...\r\n
      \ config.omniauth :twitter, &quot;API Key&quot;, &quot;API Secret&quot;\r\nend</pre></div><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D\"></a>2.
      動作確認</h2><p>サーバーを立ち上げてサインアップページの下の方にある<strong>Sign in with Twitter</strong>というリンクをクリックします。</p><p>すると以下の様な画面が開くので<strong>連携アプリを認証</strong>をクリックします。<br><a
      href=\"https://camo.qiitausercontent.com/992418565fae30160cdb4cfc713262fc564e6f61/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f61626638336536362d373230302d303832332d616630662d3466626339643233623536662e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/2bd69dee-38e2-451f-a6fe-6cf8e28ce64a\"
      alt=\"連携アプリの認証.png\" class=\"fr-fic fr-dii\"></a></p><p>こんな画面が出るはずです。<br><a
      href=\"https://camo.qiitausercontent.com/9ba32b3144588efd5ef50131c42dc9221a7cc097/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f38393662643532362d333537382d366234352d653837342d3565393363623631376465382e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/18fecc82-e580-42d6-ab01-a6939ab571db\"
      alt=\"スクリーンショット 2015-02-18 23.52.20.png\" class=\"fr-fic fr-dii\"></a></p><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#3-%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF%E7%94%A8%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\"></a>3.
      コールバック用コントローラーの作成</h2><p>Twitter認証後適切に画面が遷移するように以下を実行してコントローラーを作ります。</p><div
      data-lang=\"bash\"><pre>$ rails g controller omniauth_callbacks</pre></div><p>作成したコントローラーの中身を以下のように修正します。<br>継承するのが<strong>Devise::OmniauthCallbacksController</strong>になっていることに注意です。<br><strong>omniauth.
      auth</strong>という環境変数に認証に関する情報が入っています。<br>その情報を使ってユーザーが登録されているかを検証し、登録してる場合はログイン、登録されてない場合は登録用ページに遷移します。</p><div
      data-lang=\"rb\">app/controllers/omniauth_callbacks_controller.rb<pre>class
      OmniauthCallbacksController &lt; Devise::OmniauthCallbacksController\r\n    def
      twitter\r\n        @user = User.from_omniauth(request.env[&quot;omniauth.auth&quot;].except(&quot;extra&quot;))\r\n\r\n
      \       if @user.persisted?\r\n            sign_in_and_redirect @user\r\n        else\r\n
      \           session[&quot;devise.user_attributes&quot;] = @user.attributes\r\n
      \           redirect_to new_user_registration_url\r\n        end\r\n    end\r\nend</pre></div><p>ちなみにomniauth.authの中にはこんなものが入ってます。（一部の値は適当に変えてあります。）</p><div
      data-lang=\"bash\"><pre>{&quot;provider&quot;=&gt;&quot;twitter&quot;, &quot;uid&quot;=&gt;&quot;0123456789&quot;,
      &quot;info&quot;=&gt;{&quot;nickname&quot;=&gt;&quot;manycicadas&quot;, &quot;name&quot;=&gt;&quot;芭蕉&quot;,
      &quot;location&quot;=&gt;&quot;関東&quot;, &quot;image&quot;=&gt;&quot;http://pbs.twimg.com/profile_images/483964583371997185/2ZqzhzKV_normal.png&quot;,
      &quot;description&quot;=&gt;&quot;JavaEE/Ruby(Rails)/HTML/CSS/JavaScript/Raspberry
      Pi などなどが好き。&quot;, &quot;urls&quot;=&gt;{&quot;Website&quot;=&gt;nil, &quot;Twitter&quot;=&gt;&quot;https://twitter.com/manycicadas&quot;}},
      &quot;credentials&quot;=&gt;{&quot;token&quot;=&gt;&quot;0123456789-hQywfs78sQ9NnwpSkwiejf2Ij74sut7hKjEsF9&quot;,
      &quot;secret&quot;=&gt;&quot;sijIYUsiJslOhiwkYukshKKJG6skWbhbXCYji3sabla3O1&quot;}}</pre></div><p>Userモデルに<strong>self.from_omniauth</strong>と<strong>self.new_with_session</strong>を作ります。<br>self.from_omniauthではuidとproviderで検索してあったらそれを、無かったらレコードを作ります。<br>self.new_with_sessionについては、もしこのメソッドを追加しておかなければ、Twitter認証後サインアップページで登録を行っても、認証情報として取ってきたuidやproviderなどが登録されません。それらが登録されないのでTwitterで認証しても登録されてないユーザーとして毎回サインアップページに飛ばされます。</p><div
      data-lang=\"rb\">app/models/user.rb<pre>class User &lt; ApplicationRecord\r\n
      \ # Include default devise modules. Others available are:\r\n  # :confirmable,
      :lockable, :timeoutable and :omniauthable\r\n  devise :database_authenticatable,
      :registerable,\r\n         :recoverable, :rememberable, :trackable, :validatable,\r\n
      \        :confirmable, :lockable, :timeoutable, :omniauthable, omniauth_providers:
      [:twitter]\r\n\r\n  def self.from_omniauth(auth)\r\n    find_or_create_by(provider:
      auth[&quot;provider&quot;], uid: auth[&quot;uid&quot;]) do |user|\r\n      user.provider
      = auth[&quot;provider&quot;]\r\n      user.uid = auth[&quot;uid&quot;]\r\n      user.username
      = auth[&quot;info&quot;][&quot;nickname&quot;]\r\n    end\r\n  end\r\n\r\n  def
      self.new_with_session(params, session)\r\n    if session[&quot;devise.user_attributes&quot;]\r\n
      \     new(session[&quot;devise.user_attributes&quot;]) do |user|\r\n        user.attributes
      = params\r\n      end\r\n    else\r\n      super\r\n    end\r\n  end\r\nend</pre></div><p>以下ファイルを編集して、コールバック用のコントローラーとしてさっき作ったコントローラーが呼ばれるようにします。これを書かないとdevise側のコントローラーが呼ばれます。</p><div
      data-lang=\"rb\">config/routes.rb<pre>Rails.application.routes.draw do\r\n  devise_for
      :users, controllers: { :omniauth_callbacks =&gt; &quot;omniauth_callbacks&quot;
      }\r\n  root &#39;pages#index&#39;\r\n  get &#39;pages/show&#39;\r\n  (省略)...\r\nend</pre></div><p>これでTwitter認証ができるようになりました。<br>初回、Twitter認証を行うと、サインアップページに飛ばされ、そこでメールアドレスやパスワードを入力して登録するとユーザー情報が登録されます。<br>今回はcomfirmable機能を入れているので、登録したら確認メッセージを送ったとのメッセージが出て、そのままログインすることはできません。<br>この機能を入れてなかった場合、登録すると即ログインします。</p><h1><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E7%99%BB%E9%8C%B2%E7%A2%BA%E8%AA%8D%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%92%E9%80%81%E3%82%8B\"></a>アカウント登録確認メールを送る</h1><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-comfirmable%E6%A6%82%E8%A6%81\"></a>1.
      comfirmable概要</h2><p>多くの登録系サイトで採用されている、登録すると仮登録状態になり、届いたメールのリンクをクリックするとログイン可能になるという仕組みを追加できるのがcomfirmableです。<br>今回はGmailのアカウントを使って実際にメールが届くように設定します。</p><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E3%83%AD%E3%82%B0%E3%82%92%E8%A6%8B%E3%82%8B\"></a>2.
      ログを見る</h2><p>サインアップ画面からEmailやパスワードを入力して登録すると、ログに以下のような内容が出力されます。<br>現状何も設定してないので、送信元アドレスなどがデフォルトであることが分かります。</p><div
      data-lang=\"bash\">log/deployments.log<pre>Devise::Mailer#confirmation_instructions:
      processed outbound mail in 715.7ms\r\nSent mail to test@example.com (51.1ms)\r\nDate:
      Sat, 12 Nov 2016 22:26:18 +0900\r\nFrom: please-change-me-at-config-initializers-devise@example.com\r\nReply-To:
      please-change-me-at-config-initializers-devise@example.com\r\nTo: test@example.com\r\nMessage-ID:
      &lt;5827187aa0893_104ff3fcd39297f34991c@YukihonoiMac-8.local.mail&gt;\r\nSubject:
      Confirmation instructions\r\nMime-Version: 1.0\r\nContent-Type: text/html;\r\n
      charset=UTF-8\r\nContent-Transfer-Encoding: 7bit\r\n\r\n&lt;p&gt;Welcome test@example.com!&lt;/p&gt;\r\n\r\n&lt;p&gt;You
      can confirm your account email through the link below:&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;a
      href=&quot;http://localhost:3000/users/confirmation?confirmation_token=ZaPGWtxbTzo_3eJxvzm9&quot;&gt;Confirm
      my account&lt;/a&gt;&lt;/p&gt;</pre></div><h2><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#3-%E3%83%A1%E3%83%BC%E3%83%AB%E3%81%8C%E5%AE%9F%E9%9A%9B%E3%81%AB%E5%B1%8A%E3%81%8F%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\"></a>3.
      メールが実際に届くようにする</h2><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%B7%A8%E9%9B%86\"></a>1.
      設定ファイルの編集</h3><p>今回はgmailを使うのでメールアドレスにはgmailを設定します。</p><div data-lang=\"rb\">config/initializers/devise.rb<pre>Devise.setup
      do |config|\r\n  (省略)...\r\n  # mail setting\r\n  config.mailer_sender = &quot;メールアドレス&quot;\r\nend</pre></div><p>gmailの場合はGメールアドレスとGメールパスワードの部分を自分のアカウントのものに変更します。</p><div
      data-lang=\"rb\">config/environments/development.rb<pre>Rails.application.configure
      do\r\n  # default url\r\n  config.action_mailer.default_url_options = {  host:
      &#39;localhost&#39;, port: 3000 }\r\n  # mail setting\r\n  config.action_mailer.raise_delivery_errors
      = true\r\n  config.action_mailer.delivery_method = :smtp\r\n  config.action_mailer.smtp_settings
      = {\r\n    :address =&gt; &quot;smtp.gmail.com&quot;,\r\n    :port =&gt; 587,\r\n
      \   :user_name =&gt; &quot;Gメールアドレス&quot;,\r\n    :password =&gt; &quot;Gメールパスワード&quot;,\r\n
      \   :authentication =&gt; :plain,\r\n    :enable_starttls_auto =&gt; true\r\n
      \ }\r\nend</pre></div><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-gmail%E3%81%AE%E8%A8%AD%E5%AE%9A\"></a>2.
      Gmailの設定</h3><h4><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E8%A9%A6%E3%81%97%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88\"></a>1.
      とりあえず試したい場合</h4><p>デフォルトでは安全性の低いアプリケーションからGmailへのアクセスが制限されています。<br>よってその制限を解除することで動くようにできます。<br>ただ、安全性の低いアプリからのアクセスを許可するということはセキュリティ的にはいまいちなのであくまで動作確認ように利用することをおすすめします。<br><a
      href=\"https://support.google.com/accounts/answer/6010255\" rel=\"nofollow noopener\"
      target=\"_blank\"><em>安全性の低いアプリがアカウントにアクセスするのを許可する</em></a>の<strong>安全性の低いアプリを許可</strong>というリンクをクリックして、以下のように設定します。<br><a
      href=\"https://camo.qiitausercontent.com/89f52e61941b2903e877209c0408657557a939bc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f31376237316137392d613265392d373730302d336436302d3065353463373762333463632e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/ce39660d-9b00-4c62-962c-b1b5a40486db\"
      alt=\"スクリーンショット 2015-02-21 11.49.19.png\" class=\"fr-fic fr-dii\"></a></p><h4><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-2%E6%AE%B5%E9%9A%8E%E8%AA%8D%E8%A8%BC%E3%81%8C%E3%82%AA%E3%83%B3%E3%81%AE%E5%A0%B4%E5%90%88\"></a>2.
      2段階認証がオンの場合</h4><p>2段階認証をオンにしている場合、1の設定はできないはずなのでこちらをやってください。<br>また、1のセキュリティ的にイマイチな方をやりたくない方もこの際2段階認証をオンにしてこの設定をやってください。</p><p><a
      href=\"https://myaccount.google.com/u/1/security?pli=1\" rel=\"nofollow noopener\"
      target=\"_blank\">アカウントへのアクセスとセキュリティ設定の管理</a>を開きます。<br>2段階認証がオフの場合は<strong>2段階認証プロセス</strong>から2段階認証の設定をしてください。（<a
      href=\"https://support.google.com/accounts/answer/185839\" rel=\"nofollow noopener\"
      target=\"_blank\">2 段階認証プロセスを有効にする</a>)<br>2段階認証設定を行っている場合は<strong>アプリパスワード</strong>を開きます。<br><a
      href=\"https://camo.qiitausercontent.com/66add065b0a91656930d93cb1bf3bd69e5e30a87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f36653462323134662d663436312d646132352d393931362d3066666563386538613931342e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/af030e5c-d97e-4ff1-ace1-3f22318c46d2\"
      alt=\"パスワードとログイン方法.png\" class=\"fr-fic fr-dii\"></a></p><p><strong>端末を選択</strong>と<strong>アプリを選択</strong>で適切なものを選びます。<br>私は端末を選択では<code>Mac</code>を、アプリを選択で<code>その他（名前を入力）</code>を選択して登録しました。<br><a
      href=\"https://camo.qiitausercontent.com/f8dbefb3e604cf37c08d2681c01dc6342c1d6a4a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f36663861353164352d353663632d386132332d313562332d3137303433353133396335652e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/de42f3c8-0d20-4643-a43d-d82c57be6e86\"
      alt=\"アプリパスワード.png\" class=\"fr-fic fr-dii\"></a></p><p>パスワードが生成されます。<br><a
      href=\"https://camo.qiitausercontent.com/43a088df35c49aa9e8c5b16d3e31ed85ac37d641/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f35383033336261322d326338352d396131332d316261652d3163313935393236306232632e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/1d6cd69f-9bb3-4f2e-86a8-b761facb5d8a\"
      alt=\"2段階認証パスワード.png\" class=\"fr-fic fr-dii\"></a></p><p>生成されたパスワードを、1の設定の<code>:password
      =&gt; &quot;Gメールパスワード&quot;,</code>のGメールのパスワードの部分に設定します。</p><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#3-%E5%B1%8A%E3%81%84%E3%81%9F%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%92%E7%A2%BA%E8%AA%8D\"></a>3.
      届いたメールを確認</h3><p>これでアプリ側からサインアップすると、以下の様なメールが届くようになります。<strong>Confirm my account</strong>をクリックするログイン画面からログインが可能になります。<br><a
      href=\"https://camo.qiitausercontent.com/428cefea8293fb194841610c31aacfabfa7807fb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f63636539366665302d636433392d393665372d326335342d6131353638343838346666322e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/004a87fa-0b97-4ae6-96da-cf7beaf8bd0b\"
      alt=\"承認メール.png\" class=\"fr-fic fr-dii\"></a></p><p>メールで送られる文章は以下のファイルを編集することで可能です。<br><code>app/views/devise/confirmation_instructions.html.erb</code></p><h1><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%92%E3%83%AD%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\"></a>アカウントをロックする</h1><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-lockable%E6%A6%82%E8%A6%81\"></a>1.
      lockable概要</h2><p>アカウントの認証を一定回数間違うと、アカウントをロックするようにする機能です。</p><h2><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E8%A8%AD%E5%AE%9A\"></a>2.
      設定</h2><h3><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%B7%A8%E9%9B%86-1\"></a>1.
      設定ファイルの編集</h3><p>以下ファイルを修正して、アカウントの認証を5回失敗します。</p><div data-lang=\"rb\">config/initializers/devise.rb<pre>Devise.setup
      do |config|\r\n    (省略)...\r\n    # lock sessings\r\n    config.unlock_strategy
      = :email\r\n    config.maximum_attempts = 4\r\nend</pre></div><p>するとアカウントがロックされてこのようなメールが届きます。<br><a
      href=\"https://camo.qiitausercontent.com/8efd18a4ff40f3690fabf5ef94c7f67ccb3b760a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34383931322f36363662653965662d653266312d306535362d363364392d6565346235356537353237332e706e67\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/93de0d21-bb37-4a8e-911e-a19bed13a4ea\"
      alt=\"アンロックメール.png\" class=\"fr-fic fr-dii\"></a></p><p>メールの中身は<code>app/views/devise/mailer/unlock_instructions.rb</code>ファイルを修正すれば変わります。</p><h3><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E8%A8%AD%E5%AE%9A%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"></a>2.
      設定値について</h3><ul><li><strong>lock_strategy</strong>（ロック方法）</li></ul><table><thead><tr><th>属性</th><th>説明</th></tr></thead><tbody><tr><td>:failed_attempts</td><td>失敗回数によってロック。</td></tr><tr><td>:none</td><td>ロックしない。</td></tr></tbody></table><ul><li><strong>unlock_strategy</strong>（ロック解除方法）</li></ul><table><thead><tr><th>属性</th><th>説明</th></tr></thead><tbody><tr><td>:time</td><td>指定時間でロックを解除する。</td></tr><tr><td>:email</td><td>メールでロックを解除する。</td></tr><tr><td>:both</td><td>:timeと:emailの両方。</td></tr><tr><td>:none</td><td>解除させない。</td></tr></tbody></table><p>:noneを指定した場合、ユーザーのレコードの<code>locked_at</code>カラムを<code>nil</code>にアップデートしたらロックが解除できます。</p><ul><li><strong>unlock_in</strong>（ロック解除時間）</li></ul><p>2時間で解除するなら<code>config.unlock_in
      = 2.hours</code>といった具合に指定。</p><ul><li><strong>unlock_keys</strong></li></ul><p>アカウントをロックまたは解除するときに使用するキーを定義するらしいです。<br><code>config.unlock_keys
      = [:username]</code>という感じで指定できます。</p><ul><li><strong>maximum_attempts</strong>（失敗可能回数）</li></ul><p>アカウントの認証を失敗して良い回数を指定します。<br><code>config.maximum_attempts
      = 4</code>と指定した場合、4回目までは失敗しても大丈夫ですが、5回目を失敗した時点でアカウントがロックされます。</p><h1><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%99%E3%82%8B\"></a>セッションをタイムアウトする</h1><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-timeoutable%E6%A6%82%E8%A6%81\"></a>1.
      timeoutable概要</h2><p>一定時間活動がない場合にセッションをタイムアウトさせるのがtimeoutableです。</p><h2><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E8%A8%AD%E5%AE%9A-1\"></a>2.
      設定</h2><p>以下ファイルを修正するとタイムアウトまでの時間を指定できます。<br>以下の場合だと3分後にセッションがタイムアウトします。<br>デフォルトは30分だそうです。</p><div
      data-lang=\"rb\">config/initializers/devise.rb<pre>Devise.setup do |config|\r\n
      \   (省略)...\r\n    # timeout setting\r\n    config.timeout_in = 3.minutes\r\nend</pre></div><h1><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E8%A8%AD%E5%AE%9A\"></a>その他の設定</h1><h2><a
      href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#1-%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E5%BE%8C%E3%81%AE%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\"></a>1.
      ログイン後のページを変更する</h2><p>ログインすると、デフォルトではroot_urlに飛ばされます。<br>これを<code>app/views/pages/show.html.erb</code>になるように修正します。<br><strong>after_sign_in_path_for</strong>メソッドを追加します。ここにログイン後に遷移したいページを指定します。<br>あと<strong>sign_in_required</strong>も追加します。showページはログインしているユーザーだけにアクセスさせ、ログインしてない場合はログインページに遷移させます。</p><div
      data-lang=\"rb\">app/controllers/application_controller.rb<pre>class ApplicationController
      &lt; ActionController::Base\r\n  (省略)...\r\n    def after_sign_in_path_for(resource)\r\n
      \       pages_show_path\r\n    end\r\n\r\n    private\r\n        def sign_in_required\r\n
      \           redirect_to new_user_session_url unless user_signed_in?\r\n        end\r\nend</pre></div><p>Pagesコントローラーに<code>before_action</code>を追加します。</p><div
      data-lang=\"rb\">app/controllers/pages_controller.rb<pre>class PagesController
      &lt; ApplicationController\r\n  before_action :sign_in_required, only: [:show]\r\n
      \ (省略)...\r\nend</pre></div><p>これでログイン後showページに遷移するようになります。</p><h2><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#2-%E3%82%B5%E3%82%A4%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%83%BC%E3%82%92%E5%A2%97%E3%82%84%E3%81%99\"></a>2.
      サインアップする際に登録するパラメーターを増やす</h2><p>ユーザーを登録するときにデフォルトではEmailとパスワードだけですが、<br>ユーザー名も登録させたい、などの場合があると思います。</p><p>まずはサインアップページにユーザー名を入力するエリアを追加します。<br>ユーザーのプロフィール変更ページ（<code>views/devise/registrations/edit.html.erb</code>）にも同様に追加しときます。</p><div
      data-lang=\"erb\">views/devise/registrations/new.html.erb<pre>&lt;h2&gt;Sign
      up&lt;/h2&gt;\r\n\r\n&lt;%= form_for(resource, as: resource_name, url: registration_path(resource_name))
      do |f| %&gt;\r\n  &lt;!-- 省略 --&gt;\r\n\r\n  &lt;div class=&quot;field&quot;&gt;\r\n
      \   &lt;%= f.label :username %&gt;&lt;br /&gt;\r\n    &lt;%= f.text_field :username
      %&gt;\r\n  &lt;/div&gt;\r\n\r\n  &lt;!-- 省略 --&gt;\r\n&lt;% end %&gt;\r\n\r\n&lt;%=
      render &quot;devise/shared/links&quot; %&gt;</pre></div><p>次にApplicationControllerに以下を追加します。<br>テンプレートを変えて、ユーザー名を入力するようにしただけでは実際に登録されないからです。<br>詳しくは<code>strong_parameters</code>について調べてください。<br>簡単に言えばよく分からんパラメーターは渡せないようになってるので渡せるようにします。</p><div
      data-lang=\"ruby\">app/controllers/application_controller.rb<pre>class ApplicationController
      &lt; ActionController::Base\r\n  protect_from_forgery with: :exception\r\n  before_action
      :configure_permitted_parameters, if: :devise_controller?\r\n\r\n  # 省略\r\n\r\n
      \ protected\r\n    def configure_permitted_parameters\r\n      devise_parameter_sanitizer.permit(:sign_up,
      keys: [:username])\r\n      devise_parameter_sanitizer.permit(:account_update,
      keys: [:username])\r\n    end\r\nend</pre></div><h1><a href=\"https://qiita.com/cigalecigales/items/f4274088f20832252374#%E6%9C%80%E5%BE%8C%E3%81%AB\"></a>最後に</h1><p>作ったプロジェクト全体は以下です。<br><a
      href=\"https://github.com/cigalecigales/devise_rails5\" rel=\"nofollow noopener\"
      target=\"_blank\">cigalecigales/devise_rails5</a></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p>ユーザ登録後のメールのURLをクリックしたら即ログインしたいということですよね？</p><p><code>devise_token_auth</code>は使ったことがないですが、<br>以下の記事が上記を実現するような方法になるのかなと思います。<br>手元の環境（rails:
      5.2.0, devise: 4.4.3）では以下で即ログインすることはできました。</p><p><a href=\"https://qiita.com/mnishiguchi/items/85df424577326f4207b1\">Deviseのconfirmable
      - 確認メールのリンクをクリックしたら即サインインする</a></p><p>以下のような質問もStackOverFlowに上がっています。<br>昔は上記のような動きができたが今はセキュリティ上の理由で&hellip;という回答がついてたりします。<br><a
      href=\"https://stackoverflow.com/questions/18655334/avoid-sign-in-after-confirmation-link-click-using-devise-gem\"
      rel=\"nofollow noopener\" target=\"_blank\">Avoid sign-in after confirmation
      link click using devise gem?</a></p><p>ユーザーIDやパスワードをブラウザ上に保存してしまうというのは流石に危険なのでやめたほうが良いと思います。</p><p>上記の参考リンクのような方法をとったとしても、<br>メールアドレスのリンクをクリックしたらログインすることにおいて、<br>メールアドレスを絶対に登録時に間違えないという前提で考えると正しく動作するように思えますが<br>以下のようにメールアドレスを間違って入力すると他の人がログインできてしまうのでリスクがあります。</p><p>【メールアドレスを間違った場合】<br>①新規登録でメールアドレスと入力して登録　（本人が行うが間違ったメールアドレスを入力する）<br>②メールが送信される　（知らない人にメールが届く）<br>③クリックして即ログイン　（知らない人がログインしてしまう）</p><p>セキュリティ関連の専門家ではないので思いついたことを書いた感じになってしまってますが、<br>新規登録を行ったらそのまま会員登録が完了して即ログイン状態になるようなサイトもよく見るので、<br>ユーザがログインを一度も行わずにログインできてしまうという事自体が悪いとは思わないものの、<br>メール認証をはさむとややこしいな&hellip;と思います。</p>"
    - '2018-11-13 04:12:33.943486'
    - '2018-11-13 04:12:33.943486'
  - - 13
    - rails_seed
    - "<p><a href=\"https://www.javadrive.jp/rails/model/index10.html\">https://www.javadrive.jp/rails/model/index10.html</a>
      参照</p><p>Railsアプリケーションでテーブルやモデルなどの準備が出来たあと、初期データをテーブルに追加する方法を解説します。テストを行なうためのサンプルデータを追加したり、顧客データなどの既に用意されているデータを事前に追加しておく場合などに使います。</p><p>1.<a
      href=\"https://www.javadrive.jp/rails/model/index10.html#section1\">個別データの追加</a><br>2.<a
      href=\"https://www.javadrive.jp/rails/model/index10.html#section2\">大量のサンプルデータの追加</a><br>3.<a
      href=\"https://www.javadrive.jp/rails/model/index10.html#section3\">CSVを読み込んでデータを追加</a></p><h2><a>個別データの追加</a></h2><p>初期データを追加する方法は直接データベースにアクセスして追加することもできますが、今回はRailsで用意されている仕組みを使います。では「db/seeds.rb」ファイルを見て下さい。</p><p><img
      src=\"blob:http://localhost:3000/86153224-50c1-47fb-ae97-6dca9967556e\" alt=\"p10-1\"
      width=\"542\" height=\"378\" class=\"fr-fic fr-dii\"></p><p>このファイルはRubyを使って記述されたスクリプトファイルです。このファイルの中にデータを追加するためのスクリプトを記述し実行することでデータを追加します。</p><p>ではファイルをテキストエディタで開いて下さい。</p><pre>#
      This file should contain all the record creation needed to seed the database
      with its default values.\r\n# The data can then be loaded with the rake db:seed
      (or created alongside the db with db:setup).\r\n#\r\n# Examples:\r\n#\r\n#   cities
      = City.create([{ name: &#39;Chicago&#39; }, { name: &#39;Copenhagen&#39; }])\r\n#
      \  Mayor.create(name: &#39;Emanuel&#39;, city: cities.first)</pre><p>現在はコメントだけ記載されています。ではスクリプトを記述していきます。</p><p>今回データを追加するテーブルに対応したモデルのクラスであるTitleクラスで、クラスで用意されているクラスメソッドであるcreateメソッドを使ってデータを追加していきます。</p><pre>モデルクラス名.create(:カラム名1
      =&gt; 値1, :カラム名2 =&gt; 値2, ...)</pre><p>今回は次のように「db/seeds.rb」ファイルに次のように記述しました。</p><pre>#
      coding: utf-8\r\n\r\nTitle.create(:name =&gt; &#39;観察日記&#39;, :sales_date =&gt;
      &#39;2011-11-14&#39;, :price =&gt; 1000)\r\nTitle.create(:name =&gt; &#39;Simple
      Life&#39;, :sales_date =&gt; &#39;2012-02-08&#39;, :price =&gt; 2300)\r\nTitle.create(:name
      =&gt; &#39;メガネ入門&#39;, :sales_date =&gt; &#39;2011-10-25&#39;, :price =&gt;
      800)</pre><p>※ 日本語を使用する場合はファイルの先頭に「# coding: utf-8」を忘れないようにして下さい。</p><p>スクリプトファイルを作成したら、次のコマンドを実行して下さい。</p><pre>rake
      db:seed</pre><p>これで先程記述したスクリプトが実行され、テーブルに初期データが追加されます。では実際に行なってみます。</p><p><img
      src=\"blob:http://localhost:3000/bf3be1e8-c468-4727-ae34-cf6e56d7f37a\" alt=\"p10-2\"
      width=\"517\" height=\"286\" class=\"fr-fic fr-dii\"></p><p>スクリプトが実行され3つのデータが追加されました。ではMySQLに接続してテーブルのデータを参照してみます。</p><p><img
      src=\"blob:http://localhost:3000/ab2e7f9b-c345-46fe-92b5-0da831ccb095\" alt=\"p10-3\"
      width=\"517\" height=\"286\" class=\"fr-fic fr-dii\"></p><p>スクリプトに記述したデータがテーブルに追加されちることが確認できます。</p><h2><a>大量のサンプルデータの追加</a></h2><p>先程は追加するデータを1つ1つ追加しましたが、テスト用にサンプルデータをとにかく多く追加したい場合もあります。そのような場合、「db/seeds.rb」ファイルはRubyで記述されたスクリプトですので任意のスクリプトを記述してデータを追加することができます。</p><p>今回は例として「db/seeds.rb」ファイルを次のように書き換えました。</p><pre>#
      coding: utf-8\r\n\r\n5.times do |no|\r\n  Title.create(:name =&gt; &quot;タイトル
      #{no}&quot;)\r\nend</pre><p>ダブルクオーテーションで囲まれた文字列の中で #{変数} と記述すると変数の値が文字列の中で展開されます。</p><p>では先程と同じく次のコマンドを実行して下さい。</p><pre>rake
      db:seed</pre><p><img src=\"blob:http://localhost:3000/d44ed38c-4066-4d0d-b6a8-4973a1264be4\"
      alt=\"p10-4\" width=\"517\" height=\"286\" class=\"fr-fic fr-dii\"></p><p>スクリプトが実行されデータが追加されました。ではMySQLに接続してテーブルのデータを参照してみます。</p><p><img
      src=\"blob:http://localhost:3000/059a9419-7d55-4eba-a182-aae0e0266c66\" alt=\"p10-5\"
      width=\"517\" height=\"286\" class=\"fr-fic fr-dii\"></p><p>新しいデータが5つ追加されていることが確認できます。</p><h2><a>CSVを読み込んでデータを追加</a></h2><p>自動で作成されるデータではなく、顧客一覧のような作成済みのデータや郵便番号一覧などの参照用データなどあらかじめ用意されたデータを読み込みたい場合もあります。例としてCSVで用意されているデータを読み込んでテーブルに追加する場合も試してみます。</p><p>RubyでCSVデータを読み込むには次のような記述を行ないます。</p><pre>require
      &quot;csv&quot;\r\n\r\nCSV.foreach(&#39;db/sample.csv&#39;) do |row|\r\n  Title.create(:name
      =&gt; row[0], :sales_date =&gt; row[1], :price =&gt; row[2])\r\nend</pre><p>上記内容を「db/seeds.rb」ファイルに記述しました。CSVファイルへのパスは、アプリケーションのルートからの相対リンクで記述して下さい。</p><p>また読み込むデータとして次のようなファイルを用意します。</p><pre>火星探検,
      2009-12-01, 1100\r\nMap Fun, 2011-02-24, 700</pre><p>CSVファイルは「db/sample.csv」として保存しました。</p><p><img
      src=\"blob:http://localhost:3000/740feed8-5aee-4cbc-9215-cd80a182c617\" alt=\"p10-6\"
      width=\"542\" height=\"378\" class=\"fr-fic fr-dii\"></p><p>では今までと同じく次のコマンドを実行して下さい。</p><pre>rake
      db:seed</pre><p><img src=\"blob:http://localhost:3000/acc1924c-427d-40e8-944a-0048cae2e12f\"
      alt=\"p10-7\" width=\"517\" height=\"286\" class=\"fr-fic fr-dii\"></p><p>スクリプトが実行されデータが追加されました。ではMySQLに接続してテーブルのデータを参照してみます。</p><p><img
      src=\"blob:http://localhost:3000/513da942-9d65-4304-979f-1be65c061c2e\" alt=\"p10-8\"
      width=\"517\" height=\"286\" class=\"fr-fic fr-dii\"></p><p>CSVに記載された2つのデータが読み込まれテーブルに追加されていることが確認できます。</p>"
    - '2018-11-14 07:31:27.080776'
    - '2018-11-16 08:09:05.354446'
  - - 14
    - airbnbログイン画面UI
    - "<h1>プロジェクト作成</h1><pre><code>$ react-native init Mriver</code></pre><p><span
      style=\"font-size: 30px;\">src直下に</span></p><ul><li><span style=\"font-size:
      30px;\">components(UIフォルダ)</span></li><li><span style=\"font-size: 30px;\">containers(コンテナフォルダ)</span></li><li><span
      style=\"font-size: 30px;\">styles/colors/index.js(レイアウト設定フォルダ)</span></li></ul><hr><p>colors/index.js</p><pre><span
      style=\"color: rgb(209, 72, 65);\">export default</span> {\r\n  black: <span
      style=\"color: rgb(250, 197, 28);\">&#39;#000000&#39;</span>,\r\n  white: <span
      style=\"color: rgb(250, 197, 28);\">&#39;#ffffff&#39;</span>,\r\n  &#39;green01&#39;:
      <span style=\"color: rgb(250, 197, 28);\">&#39;#008338&#39;</span>,\r\n}</pre><hr><h2><span
      style=\"font-size: 30px;\">src/screens/LoggedOut.js作成</span></h2><p>LoggetOut.js</p><pre>import
      React, Component from &#39;react&#39;;\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n
      \ View\r\n} from &#39;react-native&#39;;\r\nexport default class LoggedOut extends
      Component {\r\n  render() {\r\n    return (&lt;Text&gt;HelloWorld!&lt;/Text&gt;);\r\n
      \ }\r\n}</pre><p>Mriver/App.js</p><pre>import React, Component from &#39;react&#39;;\r\nimport
      LoggedOut from &#39;./src/screens/LoggedOut&#39;;\r\nexport default class App
      extends Component {\r\n  render() {\r\n    return (&lt;LoggedOut /&gt;);\r\n
      \ }\r\n}</pre><pre>$ react-native run-ios // 無事にhello,worldが表示されるはず</pre><hr><h2>LoggedOut.jsを編集</h2><ol><li>src配下に
      img/airbnb-logo.png を貼る</li><li>LoggerOut.js</li></ol><pre>import React, Component
      from &#39;react&#39;;\r\nimport colors from &#39;../styles/colors&#39;;\r\nimport
      {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Image,\r\n} from &#39;react-native&#39;;\r\nexport
      default class LoggedOut extends Component {\r\n  render() {\r\n    return (&lt;View
      style = {styles.wrapper}&gt;\r\n             &lt;Image \r\n               source
      = {required(&#39;../img/airbnb-logo.png&#39;)}\r\n               style = {styles.logo}\r\n
      \            /&gt;\r\n           &lt;/View&gt;);\r\n  }\r\n}\r\nconst styles
      = StyleSheet.create({\r\n  wrapper: {\r\n    flex: 1,\r\n    display: &#39;flex&#39;,\r\n
      \   backgroundColor: colors.green01,\r\n  },\r\n  logo: {\r\n    width: 50,\r\n
      \   height: 50,\r\n    marginTop: 50,\r\n    marginBottom: 40,\r\n  },\r\n})</pre><h3><span
      style=\"color: rgb(184, 49, 47);\">きちんとイメージが表示されるはず!</span></h3><hr><p>LoggedOut.jsのimageの位置を変える</p><pre>import
      React, Component from &#39;react&#39;;\r\nimport colors from &#39;../styles/colors&#39;;\r\nimport
      {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Image,\r\n} from &#39;react-native&#39;;\r\nexport
      default class LoggedOut extends Component {\r\n  render() {\r\n    return (&lt;View
      style = {styles.wrapper}&gt;\r\n             <span style=\"color: rgb(209, 72,
      65);\">&lt;View style = {styles.welcomeWrapper}&gt;</span>\r\n               &lt;Image
      \r\n                 source = {required(&#39;../img/airbnb-logo.png&#39;)}\r\n
      \                style = {styles.logo}\r\n               /&gt;\r\n               <span
      style=\"color: rgb(209, 72, 65);\">&lt;Text style {styles.welcomeText}&gt;Mriver
      へ ようこそ&lt;/Text&gt;</span>\r\n             <span style=\"color: rgb(209, 72,
      65);\">&lt;/View&gt;</span>\r\n           &lt;/View&gt;);\r\n  }\r\n}\r\nconst
      styles = StyleSheet.create({\r\n  wrapper: {\r\n    flex: 1,\r\n    display:
      &#39;flex&#39;,\r\n    backgroundColor: colors.green01,\r\n  },\r\n  <span style=\"color:
      rgb(209, 72, 65);\">welcomeWrapper: {\r\n    flex: 1,\r\n    display: &#39;flex&#39;,\r\n
      \   marginTop: 30,\r\n    padding: 20,\r\n  },</span>\r\n  logo: {\r\n    width:
      50,\r\n    height: 50,\r\n    marginTop: 50,\r\n    marginBottom: 40,\r\n  },\r\n<span
      style=\"color: rgb(209, 72, 65);\">  welcomeText: {\r\n    fontSize: 30,</span>\r\n<span
      style=\"color: rgb(209, 72, 65);\">    colors.white,</span>\r\n<span style=\"color:
      rgb(209, 72, 65);\">    fontWeight: &#39;300&#39;,</span>\r\n<span style=\"color:
      rgb(209, 72, 65);\">    marginBottom: 40,\r\n  },</span>\r\n})</pre><hr><h2><span
      style=\"font-size: 30px;\">ボタン作成</span></h2><p>components/buttons/RoundedButton.js</p><pre>import
      React, { Component } from &#39;react&#39;;\r\n<span style=\"color: rgb(44, 130,
      201);\">import PropTypes from &#39;prop-types&#39;;</span>\r\nimport {\r\n  Text,\r\n
      \ View,\r\n  TouchableHighlight,\r\n  StyleSheet,\r\n} from &#39;react-native&#39;;\r\nimport
      colors from &#39;../../styles/colors&#39;;\r\nexport default class RoundedButton
      extends Component {\r\n  render() {\r\n    <span style=\"color: rgb(44, 130,
      201);\">const { text, textColor, background, icon, handleOnPress } = this.props;</span>\r\n<span
      style=\"color: rgb(44, 130, 201);\">    </span><span style=\"color: rgb(97,
      189, 109);\">const backgroundColor = background || &#39;transparent&#39;; </span><span
      style=\"color: rgb(204, 204, 204);\">// backgroundがfalseの時は&#39;transparent&#39;無色が入る</span>\r\n<span
      style=\"color: rgb(97, 189, 109);\">    const color = textColor || colors.black; <span
      style=\"color: rgb(204, 204, 204);\">// textColorがfalseの時は&#39;transparent&#39;無色が入る</span></span>\r\n
      \   return (&lt;TouchableHighlight \r\n             style = {[{backgroundColor}
      ,styles.wrapper]}\r\n             onPress = {handleOnPress}\r\n           &gt;\r\n
      \          &lt;View style = {styles.buttonTextWrapper}&gt;\r\n             {icon}\r\n
      \            &lt;Text style = {[{color}, styles.buttonText]}&gt;<span style=\"color:
      rgb(44, 130, 201);\">{text}</span>&lt;/Text&gt;\r\n           &lt;/View&gt;\r\n
      \          &lt;/TouchableHighlight&gt;);\r\n  }\r\n}\r\n<span style=\"color:
      rgb(204, 204, 204);\">// ボタンのテキスト内容,テキスト色,タッチ領域の背景, 表示アイコン, タッチブルハイライトのプッシュ時のイベント関数を親要素プロパティとする</span>\r\n<span
      style=\"color: rgb(44, 130, 201);\">RoundedButton.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n 
      textColor: PropTypes.string,</span>\r\n<span style=\"color: rgb(44, 130, 201);\"> 
      background: <span style=\"color: rgb(44, 130, 201);\">PropTypes.string,</span> </span>\r\n<span
      style=\"color: rgb(44, 130, 201);\">  icon: PropTypes.object,</span>\r\n<span
      style=\"color: rgb(44, 130, 201);\">  handleOnPress: PropTypes.func.isRequired,\r\n};</span>\r\nconst
      styles = StyleSheet.create({\r\n  wrapper: {\r\n    display: &#39;flex&#39;,\r\n
      \   padding: 15,\r\n    borderRadius: 40,\r\n    borderWidth: 1,\r\n    borderColor:
      colors.white,\r\n    marginBottom: 15,\r\n    alignItems: &#39;center&#39;,\r\n
      \ },\r\n  buttonTextWrapper: {\r\n    flexDirection: &#39;row&#39;,\r\n    justifyContent:
      &#39;center&#39;,\r\n  },\r\n  buttonText: {\r\n    fontSize: 16,\r\n    width:
      &#39;100%&#39;,\r\n    textAlign: &#39;center&#39;,\r\n  },\r\n});</pre><p><br></p><p><br></p><p>LoggedOut.jsでインポートする</p><pre>import
      React, Component from &#39;react&#39;;\r\nimport colors from &#39;../styles/colors&#39;;\r\nimport
      {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Image,\r\n  <span style=\"color:
      rgb(209, 72, 65);\">TouchableHighlight,</span>\r\n} from &#39;react-native&#39;;\r\n<span
      style=\"color: rgb(209, 72, 65);\">import Icon from &#39;react-native-vector-icons/dist/FontAwesome&#39;;</span>\r\n<span
      style=\"color: rgb(209, 72, 65);\">import RoundedButton from &#39;../Components/buttons/RoundedButton&#39;;</span>\r\nexport
      default class LoggedOut extends Component {\r\n  <span style=\"color: rgb(209,
      72, 65);\">onFacebookPress() {</span>\r\n<span style=\"color: rgb(209, 72, 65);\"> 
        alert(&#39;Facebookボタンが押されました&#39;);</span>\r\n<span style=\"color: rgb(209,
      72, 65);\">  }</span>\r\n<span style=\"color: rgb(209, 72, 65);\">  <span style=\"color:
      rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\"><span style=\"color:
      rgb(209, 72, 65);\">this.onCreateAccountPress() {</span></span></span></span>\r\n<span
      style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\"><span
      style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\"> 
        alert(&#39;アカウント作成ボタンが押されました&#39;);</span></span></span></span>\r\n<span style=\"color:
      rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\"><span style=\"color:
      rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\">  }</span></span></span></span>\r\n<span
      style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\"><span
      style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\">
       <span style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72,
      65);\">onMoreOptionsPress() {</span></span></span></span></span></span>\r\n<span
      style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\"><span
      style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\"><span
      style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\"> 
        alert(&#39;概要欄がクリックされました&#39;);</span></span></span></span></span></span>\r\n<span
      style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\"><span
      style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\"><span
      style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\">
      \ }</span></span></span></span></span></span>\r\n  render() {\r\n    return
      (\r\n             &lt;View style = {styles.wrapper}&gt;\r\n               &lt;View
      style = {styles.welcomeWrapper}&gt;\r\n                 &lt;Image \r\n                   source
      = {required(&#39;../img/airbnb-logo.png&#39;)}\r\n                   style =
      {styles.logo}\r\n                 /&gt;\r\n                 &lt;Text style {styles.welcomeText}&gt;Mriver
      へ ようこそ&lt;/Text&gt;\r\n                 <span style=\"color: rgb(209, 72, 65);\">&lt;RoundedButton </span>\r\n<span
      style=\"color: rgb(209, 72, 65);\">                   text = &quot;Facebookでログイン&quot;</span>\r\n<span
      style=\"color: rgb(209, 72, 65);\">                   textColor = {colors.green01}</span>\r\n<span
      style=\"color: rgb(209, 72, 65);\">                   background = {colors.white}</span>\r\n<span
      style=\"color: rgb(209, 72, 65);\">                   icon = {&lt;Icon </span>\r\n<span
      style=\"color: rgb(209, 72, 65);\">                             name = &quot;facebook&quot; </span>\r\n<span
      style=\"color: rgb(209, 72, 65);\">                             size = {20}
      </span>\r\n<span style=\"color: rgb(209, 72, 65);\">                             style
      = {styles.facebookButtonIcon} </span>\r\n<span style=\"color: rgb(209, 72, 65);\"> 
                               /&gt;}</span>\r\n<span style=\"color: rgb(209, 72,
      65);\">                   <span style=\"color: rgb(209, 72, 65);\">handelOnPress
      = {this.onFacebookPress}</span></span>\r\n<span style=\"color: rgb(209, 72,
      65);\">                 /&gt;</span>\r\n<span style=\"color: rgb(209, 72, 65);\">
                      <span style=\"color: rgb(209, 72, 65);\">&lt;RoundedButton </span>\r\n<span
      style=\"color: rgb(209, 72, 65);\">                   text = &quot;カウント作成&quot;</span>\r\n<span
      style=\"color: rgb(209, 72, 65);\">                   textColor = {colors.white}</span></span>\r\n<span
      style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\">
                        <span style=\"color: rgb(209, 72, 65);\">handelOnPress = {this.onCreateAccountPress}</span></span>\r\n<span
      style=\"color: rgb(209, 72, 65);\">                 /&gt;</span></span>\r\n<span
      style=\"color: rgb(209, 72, 65);\"><span style=\"color: rgb(209, 72, 65);\"> 
                     </span></span><span style=\"color: rgb(26, 188, 156);\">&lt;TouchableHighlight </span>\r\n<span
      style=\"color: rgb(26, 188, 156);\">                   style = {styles.moreOptionsButton}\r\n 
                       onPress = {this.onMoreOptionsPress}\r\n                 &gt;\r\n 
                       &lt;Text style = {styles.moreOptionsButtonText}&gt;More options&lt;/Text&gt;\r\n 
                     &lt;/TouchableHighlight&gt;\r\n                 &lt;View style={styles.termsAndConditions}&gt;\r\n
                        &lt;Text style={styles.termsText}&gt;\r\n                     By
      tapping Continue, Create Account or More\r\n                   &lt;/Text&gt;\r\n
                        &lt;Text style={styles.termsText}&gt;\r\n                     {&#39;
      options,&#39;}\r\n                   &lt;/Text&gt;\r\n                   &lt;Text
      style={styles.termsText}&gt;\r\n                     {&quot;I agree to Mriver&#39;s
      &quot;}\r\n                   &lt;/Text&gt;\r\n                   &lt;TouchableHighlight
      style={styles.linkButton}&gt;\r\n                     &lt;Text style={styles.termsText}&gt;\r\n
      \                      Terms of Service\r\n                     &lt;/Text&gt;\r\n 
                       &lt;/TouchableHighlight&gt;\r\n                   &lt;Text
      style={styles.termsText}&gt;\r\n                       ,\r\n               
         &lt;/Text&gt;\r\n                   &lt;TouchableHighlight style={styles.linkButton}&gt;\r\n 
                         &lt;Text style={styles.termsText}&gt;\r\n                       Payments
      Terms of Service\r\n                     &lt;/Text&gt;\r\n                 
       &lt;/TouchableHighlight&gt;\r\n                   &lt;TouchableHighlight style={styles.linkButton}&gt;\r\n 
                         &lt;Text style={styles.termsText}&gt;\r\n                       Privacy
      Policy\r\n                     &lt;/Text&gt;\r\n                   &lt;/TouchableHighlight&gt;\r\n
                        &lt;Text style={styles.termsText}&gt;\r\n                     ,
      and\r\n                   &lt;/Text&gt;\r\n                   &lt;TouchableHighlight
      style={styles.linkButton}&gt;\r\n                     &lt;Text style={styles.termsText}&gt;\r\n
      \                      Nondiscrimination Policy\r\n                     &lt;/Text&gt;\r\n 
                       &lt;/TouchableHighlight&gt;\r\n                   &lt;Text
      style={styles.termsText}&gt;\r\n                     .\r\n                 
       &lt;/Text&gt;\r\n                 &lt;/View&gt;</span>\r\n               &lt;/View&gt;\r\n
      \            &lt;/View&gt;\r\n           );\r\n  }\r\n}\r\nconst styles = StyleSheet.create({\r\n
      \ wrapper: {\r\n    flex: 1,\r\n    display: &#39;flex&#39;,\r\n    backgroundColor:
      colors.green01,\r\n  },\r\n  welcomeWrapper: {\r\n    flex: 1,\r\n    display:
      &#39;flex&#39;,\r\n    marginTop: 30,\r\n    padding: 20,\r\n  },\r\n  logo:
      {\r\n    width: 50,\r\n    height: 50,\r\n    marginTop: 50,\r\n    marginBottom:
      40,\r\n  },\r\n  welcomeText: {\r\n    fontSize: 30,\r\n    colors.white,\r\n
      \   fontWeight: &#39;300&#39;,\r\n    marginBottom: 40,\r\n  },\r\n  facebookButtonIcon:
      {\r\n    color: colors.green01,\r\n    position: &#39;relative&#39;,\r\n    left:
      20,\r\n    zIndex: 8,\r\n  },\r\n moreOptionsButton: {\r\n   marginTop: 10,\r\n
      },\r\n moreOptionsButtonText: {\r\n   color: colors.white,\r\n   fontSize: 16,\r\n },\r\n
      termsAndConditions: {\r\n   flexWrap: &#39;wrap&#39;,\r\n   alignItems: &#39;flex-start&#39;,\r\n
      \  flexDirection: &#39;row&#39;,\r\n   marginTop: 30,\r\n },\r\n termsText:
      {\r\n   color: colors.white,\r\n   fontSize: 12,\r\n   fontWeight: &#39;600&#39;,\r\n
      },\r\n linkButton: {\r\n   borderBottomWidth: 1,\r\n   colors.white: colors.white,\r\n
      }\r\n})</pre><p>これでバッチリfacebookログインボタンが完了!(ただし、まだfacebookアイコンがないのでfontawesomeを使う)</p><pre>$
      npm install react-native-vector-icons --save (React NativeでFontAwesomeやionIconsのiconを使用するのに必要)\r\n$
      react-native link\r\n$ npm start </pre><p>一度, Xcodeでコンパイルするとiconが読み込まれるようになる</p><p>以上でiconツールを使う準備完了</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-11-17 06:04:44.139314'
    - '2018-11-17 09:09:39.599110'
  - - 15
    - simple_formの絶大な威力
    - <p><a href="https://ruby-rails.hatenadiary.com/entry/20140730/1406700205">https://ruby-rails.hatenadiary.com/entry/20140730/1406700205</a></p>
    - '2018-11-19 04:47:47.730877'
    - '2018-11-19 04:47:47.730877'
  - - 18
    - RailsにBootstrap4+Font Awesome 5の導入手順
    - "<p><a href=\"https://qiita.com/shi-ma-da/items/4360920dcd2c01158a81\">https://qiita.com/shi-ma-da/items/4360920dcd2c01158a81</a>&nbsp;参照</p><p><br></p><h1>目的</h1><ul><li>Qiitaに記事に大まかな流れをテンプレート化しておき、作業効率を上げる。</li><li>今後、railsを学ぶ方に向けての参考に役立てる。</li></ul><h1><a
      href=\"https://qiita.com/shi-ma-da/items/4360920dcd2c01158a81#%E6%9D%A1%E4%BB%B6\"></a>条件</h1><ul><li>ruby
      2.5.1</li><li>rails5.2</li><li>Bootstrap : 4.1.3</li><li>Font Awesome : 5.2.0</li></ul><h1><a
      href=\"https://qiita.com/shi-ma-da/items/4360920dcd2c01158a81#%E6%89%8B%E9%A0%86%E3%83%AA%E3%82%B9%E3%83%88\"></a>手順リスト</h1><ol><li>Gemfileに追加する</li><li>application.scssに追加</li><li>application.jsに追加</li></ol><h2><a
      href=\"https://qiita.com/shi-ma-da/items/4360920dcd2c01158a81#1-gemfile%E3%81%AB%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\"></a>1.
      Gemfileに追加する</h2><div data-lang=\"ruby\">Gemfile<pre>gem &#39;bootstrap&#39;,
      &#39;~&gt; 4.1.3&#39; # 記事下の関連URLからバージョンを確認して導入\r\ngem &#39;jquery-rails&#39;\r\ngem
      &#39;font-awesome-sass&#39;, &#39;~&gt; 5.2.0&#39; # 記事下の関連URLからバージョンを確認して導入</pre></div><div
      data-lang=\"bash\">インストール<pre># Gemfileに追記したやつをインストールする\r\nbundle install</pre></div><h2><a
      href=\"https://qiita.com/shi-ma-da/items/4360920dcd2c01158a81#2-applicationscss%E3%81%AB%E8%BF%BD%E5%8A%A0\"></a>2.
      application.scssに追加</h2><p>まず、<code>app/assets/stylesheets/application.css</code>のファイル名(拡張子)を<code>app/assets/stylesheets/application.scs</code>に変更する</p><div
      data-lang=\"bash\">ファイル名を変更<pre># 下記コマンドでファイル名(拡張子:.scss)に変更できます。\r\nmv app/assets/stylesheets/application.css
      app/assets/stylesheets/application.scss</pre></div><p>次に、<code>app/assets/stylesheets/application.scss</code>に読み込み設定を行います。</p><div
      data-lang=\"ruby\">app/assets/stylesheets/application.scss<pre># 以下を追記する\r\n@import
      &quot;bootstrap&quot;;\r\n@import &quot;font-awesome-sprockets&quot;;\r\n@import
      &quot;font-awesome&quot;;</pre></div><h2><a href=\"https://qiita.com/shi-ma-da/items/4360920dcd2c01158a81#3-applicationjs%E3%81%AB%E8%BF%BD%E5%8A%A0\"></a>3.
      application.jsに追加</h2><div data-lang=\"javascript\">app/assets/javascripts/application.js<pre>//=
      require rails-ujs\r\n//= require jquery3\r\n//= require popper\r\n//= require
      bootstrap\r\n//= require turbolinks\r\n//= require_tree .\r\n\r\n//= require
      jquery」が残ったままの方がたまにいるので、ある場合は削除してくだいさい。</pre></div><h1><a href=\"https://qiita.com/shi-ma-da/items/4360920dcd2c01158a81#%E9%96%A2%E9%80%A3url\"></a>関連URL</h1><p><a
      href=\"https://github.com/twbs/bootstrap-rubygem\" rel=\"nofollow noopener\"
      target=\"_blank\">github / bootstrap-rubygem&nbsp;</a><br><a href=\"https://github.com/twbs/bootstrap-rubygem\"
      rel=\"nofollow noopener\" target=\"_blank\">github / font-awesome-sass&nbsp;</a><br><a
      href=\"https://github.com/twbs/bootstrap-rubygem\" rel=\"nofollow noopener\"
      target=\"_blank\">github / jquery-rails&nbsp;</a><br><a href=\"https://fontawesome.com/\"
      rel=\"nofollow noopener\" target=\"_blank\">Font Awesome 5.2</a></p>"
    - '2018-11-19 06:05:23.997136'
    - '2018-11-19 06:06:22.580153'
  - - 20
    - rails[Active Storage]
    - "<p itemprop=\"headline\"><a href=\"https://qiita.com/yatmsu/items/08b95e837ac7f24fb443\">参照先</a></p><h1
      itemprop=\"headline\">【Rails 5.2】 Active Storageの使い方</h1><p><a href=\"https://qiita.com/tags/Rails\">Rails</a><a
      href=\"https://qiita.com/tags/RubyOnRails\">RubyOnRails</a><a href=\"https://qiita.com/tags/%E7%94%BB%E5%83%8F\">画像</a><a
      href=\"https://qiita.com/tags/ActiveStorage\">ActiveStorage</a></p><div data-mount-target=\"mobileArticleActions\"><br></div><section
      itemprop=\"articleBody\"><p>Active Storageについて調べると、「軽く触ってみた」ノリの記事ばかりで、特に複数のファイルを扱う方法などがなかなか見つからなかったので、使い方のまとめ記事を作りました。<img
      alt=\":muscle:\" height=\"20\" src=\"blob:http://localhost:3000/3996f36a-c8f2-44de-bfab-c545bcc8668f\"
      title=\":muscle:\" width=\"20\" class=\"fr-fic fr-dii\"></p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#active-storage-%E3%81%A8%E3%81%AF\"></a>Active
      Storage とは</h1><p>Active Storageは、Rails5.2で追加された、<strong>ファイルアップロード</strong>を行うための機能です。これを使えば、フォームで画像の投稿機能などが簡単に作れます。また、Amazon
      S3, Google Cloud Storage, Microsoft Azure Storageなどの<strong>クラウドストレージサービス</strong>に対するファイルのアップロードを簡単に行うことができます。クラウドストレージの他に、ローカルディスクにファイルを保存することもできます。<br><strong>Paperclip,
      Carrierwave, Dragonflyなどのgemの代わりになる</strong>とされていますが、現時点ではバリデーションとキャッシュ関連の機能は残念ながら備えていません。使うには<strong>Rails
      5.2以上</strong>にアップグレードする必要があります。</p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#active-storage-%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\"></a>Active
      Storage を使えるようにする</h1><div data-lang=\"sh\"><pre>$ rails active_storage:install\r\n$
      rails db:migrate</pre></div><p>ここは気になる方だけ読んでいただければ大丈夫なのですが、このマイグレーションによって<code>active_storage_blobs</code>と<code>active_storage_attachments</code>という名前のテーブルが2つ生成されます。これらのテーブルは<code>Blob</code>と<code>Attachment</code>の2つのモデルが使います。<code>Blob</code>はファイル名、ファイルの種類、バイト数、誤り検出符号などのメタデータを保持するモデルで、<code>Attachment</code>モデルは、BlobオブジェクトとActive
      Recordオブジェクトを紐付けるための中間テーブルです。なお、Active Storageを使う際、直接<code>Blob</code>と<code>Attachment</code>モデルに触れる必要はありません。(時間返せ)</p><h1><a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#active-record-%E3%83%A2%E3%83%87%E3%83%AB%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\"></a>Active
      Record モデルを用意する</h1><p>コメントに1枚、もしくは、複数枚の画像を添付できるようにしたいとしましょう。まずは<code>Comment</code>モデルを用意する必要があります。<code>generate
      resource</code>コマンドで基本的なルートと、モデル、空のコントローラを生成しましょう。</p><div data-lang=\"sh\"><pre>$
      rails g resource comment content:text\r\n$ rails db:migrate</pre></div><p>ここで、画像用のカラムを用意する必要がない点もActive
      Storageの特徴の一つです。</p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#1%E3%81%A4%E3%81%AE%E6%B7%BB%E4%BB%98%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88\"></a>1つの添付ファイルの場合</h1><p><code>Comment</code>モデルに1つの画像を添付するには、<code>has_one_attached</code>を使います。</p><div
      data-lang=\"ruby\"><pre>class Comment &lt; ApplicationRecord\r\n  has_one_attached
      :image\r\nend</pre></div><p><code>:image</code>はファイルの呼び名で、<code>:photo</code>、<code>:avatar</code>、<code>:hoge</code>など、ファイルの用途に合わせて好きなものを指定してください。ここで、Imageモデルなどを作る必要はないです。Active
      Storageは裏側で<code>Blob</code>と<code>Attachment</code>モデルを使って、こそこそと<code>comment.image</code>を使えるようにしてくれます。(有能すぎ)</p><p>では、コントローラとビューの中身を書きましょう。</p><div
      data-lang=\"ruby\">comments_controller.rb<pre>class CommentsController &lt;
      ApplicationController\r\n  def new\r\n    @comment = Comment.new\r\n  end\r\n\r\n
      \ def create\r\n    @comment = Comment.create params.require(:comment).permit(:content,
      :image) # POINT\r\n    redirect_to @comment\r\n  end\r\n\r\n  def show\r\n    @comment
      = Comment.find(params[:id])\r\n  end\r\n\r\n  def edit\r\n    @comment = Comment.find(params[:id])
      \r\n  end\r\n\r\n  def update\r\n    @comment = Comment.find(params[:id])\r\n
      \   @comment.update params.require(:comment).permit(:content, :image) # POINT\r\n
      \   redirect_to @comment\r\n  end\r\nend</pre></div><div data-lang=\"erb\">new.html.erb<pre>&lt;%=
      form_with model: @comment, local: true  do |form| %&gt;\r\n  &lt;%= form.text_area
      :content %&gt;&lt;br&gt;\r\n  &lt;%= form.file_field :image %&gt;&lt;br&gt;\r\n
      \ &lt;%= form.submit %&gt;\r\n&lt;% end %&gt;</pre></div><div data-lang=\"erb\">show.html.erb<pre>&lt;%
      if @comment.image.attached? %&gt;\r\n  &lt;%= image_tag @comment.image %&gt;\r\n&lt;%
      end %&gt;</pre></div><p>ほとんど典型的なコードですね。ポイントは<code>create</code>と<code>update</code>アクションのところで、このようにして、<code>image</code>があたかも<code>Comment</code>のカラムであるかのように扱うことで、フォームの<code>file_field</code>で選択された画像を<code>Comment</code>オブジェクトと紐付けます。これも、Active
      Storageの特徴の一つです。</p><p><code>create</code>と<code>update</code>アクションを使えない場合は、<code>@comment.image.attach(params[:comment][:image])</code>で画像を後から<code>Comment</code>オブジェクトと紐付けることもできます。</p><p>例えば、画像の選択を任意にしたい場合は以下のようなコードになります。</p><div
      data-lang=\"ruby\"><pre>@comment = Comment.create params.require(:comment).permit(:content)\r\nif
      image = params[:comment][:image]\r\n  @comment.image.attach(image)\r\nend</pre></div><p>画像を表示するには<code>image_tag</code>に<code>@comment.image</code>を渡すだけです。</p><p>結果はこのような感じになります。<br><a
      href=\"https://camo.qiitausercontent.com/56fce64cc16c92ffb2f68472fdd61897b590f408/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3232353939372f63373230346465352d663935342d643063662d646637642d3131613932633138356330322e676966\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/b9150983-e512-4fe6-8356-170912749444\"
      alt=\"ezgif-2-b17e951b9f.gif\" class=\"fr-fic fr-dii\"></a></p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#%E8%A4%87%E6%95%B0%E3%81%AE%E6%B7%BB%E4%BB%98%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88\"></a>複数の添付ファイルの場合</h1><p>複数の添付ファイルを使いたい場合は、上記のコードを少しだけ変更します。</p><ul><li><code>has_one_attached</code>の代わりに<code>has_many_attached</code>を使う</li><li><code>comment.image</code>の代わりに<code>comment.images</code>を使う</li><li><code>file_field</code>に<code>multiple:
      true</code>を追記して、複数ファイルの選択を許可</li></ul><div data-lang=\"ruby\">comment.rb<pre>class
      Comment &lt; ApplicationRecord\r\n  has_many_attached :images\r\nend</pre></div><div
      data-lang=\"ruby\">comments_controller.rb<pre>class CommentsController &lt;
      ApplicationController\r\n  def new\r\n    @comment = Comment.new\r\n  end\r\n\r\n
      \ def create\r\n    @comment = Comment.create params.require(:comment).permit(:content,
      :images)\r\n    redirect_to @comment    \r\n  end\r\n\r\n  def show\r\n    @comment
      = Comment.find(paramd[:id])\r\n  end\r\n\r\n  def edit\r\n    @comment = Comment.find(params[:id])
      \r\n  end\r\n\r\n  def update\r\n    @comment = Comment.find(params[:id])\r\n
      \   @comment.update params.require(:comment).permit(:content, :images)\r\n    redirect_to
      @comment\r\n  end\r\nend</pre></div><div data-lang=\"erb\">new.html.erb<pre>&lt;%=
      form_with model: @comment, local: true  do |form| %&gt;\r\n  &lt;%= form.text_area
      :content %&gt;&lt;br&gt;&lt;br&gt;\r\n  &lt;%= form.file_field :images, multiple:
      true %&gt;&lt;br&gt;\r\n  &lt;%= form.submit %&gt;\r\n&lt;% end %&gt;</pre></div><div
      data-lang=\"erb\">show.html.erb<pre>&lt;% if @comment.images.attached? %&gt;\r\n
      \ &lt;% @comment.images.each do |image| %&gt;\r\n    &lt;%= image_tag image
      %&gt; &lt;br&gt;\r\n  &lt;% end %&gt;\r\n&lt;% end %&gt;</pre></div><p>一枚の時同様、<code>@comment.images.attach(params[:comment][:images])</code>も使えます。</p><p>結果はこちら<br><a
      href=\"https://camo.qiitausercontent.com/f5b6f7a06888ce09cac6615ace76272fccb397f2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3232353939372f36363837636364632d313065372d333366312d393434652d6161396137663036343762612e676966\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/5e9e6c8c-3670-4093-849f-7aea2bf156b7\"
      alt=\"ezgif-2-e15b099da1.gif\" class=\"fr-fic fr-dii\"></a></p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BF%9D%E5%AD%98%E5%85%88%E3%81%AE%E5%A4%89%E6%9B%B4\"></a>ファイルの保存先の変更</h1><p>ファイルの保存先は、各環境の設定ファイルに記載します。<br>まずは、
      <code>config/environments/development.rb</code> と <code>production.rb</code>
      の中身を覗いてみましょう。</p><div data-lang=\"ruby\">config/environments/development.rb<pre>
      \ # ...\r\n\r\n  # Store uploaded files on the local file system (see config/storage.yml
      for options)\r\n  config.active_storage.service = :local\r\n\r\n  # ...</pre></div><div
      data-lang=\"ruby\">config/environments/production.rb<pre>  # ...\r\n\r\n  #
      Store uploaded files on the local file system (see config/storage.yml for options)\r\n
      \ config.active_storage.service = :local\r\n\r\n  # ...</pre></div><p>初期状態では、開発環境(development)、本番環境(production)ともに保存先は
      <code>:local</code> に設定されています。<br>この <code>local</code> とは、 <code>config/storage.yml</code>
      で定義された保存先の名前です。<br>これを変更するには、<code>:local</code> のところを <code>:amazon</code>,
      <code>:google</code>, <code>:microsoft</code> のいづれかと置き換え、<code>config/storage.yml</code>の方に、必要な認証情報などの値を入力します。</p><p>今度は、<code>config/storage.yml</code>の中身を覗いてみましょう。</p><div
      data-lang=\"yaml\">config/storage.yml<pre>test:\r\n  service: Disk\r\n  root:
      &lt;%= Rails.root.join(&quot;tmp/storage&quot;) %&gt;\r\n\r\nlocal:\r\n  service:
      Disk\r\n  root: &lt;%= Rails.root.join(&quot;storage&quot;) %&gt;\r\n\r\n# Use
      rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)\r\n#
      amazon:\r\n#   service: S3\r\n#   access_key_id: &lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;\r\n#   secret_access_key: &lt;%= Rails.application.credentials.dig(:aws,
      :secret_access_key) %&gt;\r\n#   region: us-east-1\r\n#   bucket: your_own_bucket\r\n\r\n#
      Remember not to checkin your GCS keyfile to a repository\r\n# google:\r\n#   service:
      GCS\r\n#   project: your_project\r\n#   credentials: &lt;%= Rails.root.join(&quot;path/to/gcs.keyfile&quot;)
      %&gt;\r\n#   bucket: your_own_bucket\r\n\r\n# Use rails credentials:edit to
      set the Azure Storage secret (as azure_storage:storage_access_key)\r\n# microsoft:\r\n#
      \  service: AzureStorage\r\n#   storage_account_name: your_account_name\r\n#
      \  storage_access_key: &lt;%= Rails.application.credentials.dig(:azure_storage,
      :storage_access_key) %&gt;\r\n#   container: your_container_name</pre></div><p>先ほど見た保存先の
      <code>local</code> は、使用するサービスが <code>Disk</code> (ローカルディスク)に設定れていて、railsアプリ直下の<code>/storage</code>ディレクトリがファイルの保存先に指定されています。</p><p>あと、親切に、コメントがたくさんついてますね。この中から適切なところのコメントを解除することで、好きなストレージサービスを使うことができます。</p><p>また、お使いのサービスのgemをGemfileに追記する必要があります。これは、<code>aws-sdk-s3</code>,
      <code>google-cloud-storage</code>, <code>azure-storage</code>のいづれかになります。</p><hr><p>なお、アクセスキーは、セキュリティ上、<strong>Rails
      Credentials</strong>を使って入力するのが好ましいです。<br>これは、<strong>APIキーなどの機密情報を暗号化して保存するための機能</strong>で、実はこれもRails
      5.2で追加された新機能です。これまでの<code>secrets.yml</code>の代わりになります。<br><code>&lt;%= Rails.application.credentials.dig(...)
      %&gt;</code>の部分は、まさにCredentialsに入力されたデータを読み込んでいますのでコメントをそのまま使いましょう。</p><ul><li>Credentialsにデータを入力・編集するには
      <code>$ rails credentials:edit</code> と叩きます。<br>エラーが出た場合は、<code>$ EDITOR=vim
      rails credentials:edit</code>で、お使いのエディターを指定してください。例: <code>vim</code>, <code>emacs</code>,
      <code>atom</code>, <code>code</code>, <code>subl</code></li><li>入力した内容は<code>config/master.key</code>を用いて暗号化され、<code>config/credentials.yml.enc</code>が生成されます。</li><li>復号された中身は
      <code>$ rails credentials:show</code> で確認できます。</li></ul><h2><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#amazon-s3-%E3%82%92%E4%BD%BF%E3%81%86%E5%A0%B4%E5%90%88\"></a>Amazon
      S3 を使う場合</h2><p>S3は基本的に、ファイルをアップロードし、そのURLを取得できる、AWSのストレージサービスです。</p><h3><a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#-amazon-s3%E3%81%A7%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\"></a>\U0001F530
      Amazon S3でバケットを用意する方法</h3><p>バケットは画像などのファイルをアップロードできる入れ物です。<br>AWSコンソール &rarr;
      サービス &rarr; ストレージ &rarr; S3　&rarr; 「バケットを作成する」</p><table><thead><tr><th>項目</th><th>入力・選択</th></tr></thead><tbody><tr><td>パケット名</td><td>例:
      my-rails-app-bucket</td></tr><tr><td>リージョン</td><td>例: ap-northeast-1 (東京)</td></tr><tr><td>パブリックアクセス許可を管理する</td><td>このバケットに読み取りアクセス権限をする</td></tr><tr><td>上記以外</td><td>全部デフォルトのまま</td></tr></tbody></table><h3><a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#-amazon-s3%E3%81%A7%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B%E6%96%B9%E6%B3%95\"></a>\U0001F530
      Amazon S3でアクセスキーを作る方法</h3><p>AWSコンソール &rarr; サービス &rarr; セキュリティ &rarr; IAM &rarr;
      「ユーザー」 &rarr; 「ユーザーを追加」</p><table><thead><tr><th>項目</th><th>入力・選択</th></tr></thead><tbody><tr><td>ユーザー名</td><td>例:
      s3user</td></tr><tr><td>アクセスの種類</td><td>プログラムによるアクセス</td></tr></tbody></table><p>「既存のポリシーを直接アタッチ」
      &rarr; 「S3」で検索 &rarr; 「AmazonS3FullAccess」を選択 &rarr; 「次へ」 &rarr; 「ユーザーの作成」<br>表示された「アクセスキー
      ID」と「シークレットアクセスキー」 をメモ帳などにコピペして保管する。（一度しか表示されません）</p><h3><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#%E4%BF%9D%E5%AD%98%E5%85%88%E3%82%92amazon-s3%E3%81%AB%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B\"></a>保存先をAmazon
      S3に指定する</h3><p>まず最初に必要なAWS S3のGemをインストールします。</p><div data-lang=\"ruby\">Gemfile<pre>gem
      &quot;aws-sdk-s3&quot;, require: false</pre></div><p>Gemfile変更後、<code>$ bundle
      install</code>と叩きます。</p><p>次に、保存先をAmazon S3に指定します。</p><div data-lang=\"ruby\">config/environments/production.rb<pre>#
      本番環境(production)の保存先を:localから:amazonに変更\r\n\r\nconfig.active_storage.service
      = :amazon</pre></div><div data-lang=\"ruby\">config/environments/development.rb<pre>#
      開発環境(development)でAmazon S3の動作を確認したい場合はこちらの方も変更しましょう\r\n\r\nconfig.active_storage.service
      = :amazon</pre></div><div data-lang=\"yaml\">config/storage.yml<pre># 以下の部分をコメント解除する\r\namazon:\r\n
      \ service: S3\r\n  access_key_id: &lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;\r\n  secret_access_key: &lt;%= Rails.application.credentials.dig(:aws,
      :secret_access_key) %&gt;\r\n  # 以下の２行を変更\r\n  region: ap-northeast-1 #東京の場合\r\n
      \ bucket: my-rails-app-bucket #自分で作成したS3のバケットの名前</pre></div><p>前にも述べましたが、<code>&lt;%=
      Rails.application.credentials.dig(...) %&gt;</code>の部分は、<strong>Credentials</strong>の情報を読み込んでいます。早速、CredentialsにAmazon
      S3へのアクセスキーを入力しましょう。</p><div data-lang=\"sh\"><pre>$ EDITOR=vim rails credentials:edit</pre></div><p>上の例ではVimが開きます。Atomをお使いの場合、<code>EDITOR=atom</code>としてください。<br>VSCodeなら、<code>EDITOR=code</code>、SublimeTextなら<code>EDITOR=subl</code>。</p><div
      data-lang=\"yml\"><pre>aws:\r\n access_key_id: 123 #ここに自分のアクセスキーIDをコピペ\r\n secret_access_key:
      456 #ここに自分のシークレットアクセスキーをコピペ</pre></div><p><img alt=\":bulb:\" height=\"20\"
      src=\"blob:http://localhost:3000/14cc7ef6-3069-4bbd-a655-c9e76ab5e197\" title=\":bulb:\"
      width=\"20\" class=\"fr-fic fr-dii\">&nbsp;Vim: <code>i</code>で入力開始、<code>esc</code>
      &rarr; <code>ZZ</code>で終了</p><p>入力した内容は<code>$ rails credentials:show</code>で確認できます。</p><p>以上で保存先をAmazon
      S3に変更できました。<img alt=\":tada:\" height=\"20\" src=\"blob:http://localhost:3000/669a9058-3e6e-42d7-84bf-bfb98735139f\"
      title=\":tada:\" width=\"20\" class=\"fr-fic fr-dii\"></p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#warning-%E9%87%8D%E8%A6%81\"></a><img
      alt=\":warning:\" height=\"20\" src=\"blob:http://localhost:3000/a56a3b0d-bb47-4f6b-8119-6e0725ec5167\"
      title=\":warning:\" width=\"20\" class=\"fr-fic fr-dii\">&nbsp;重要</h1><p><strong>Credentials</strong>をお使いの場合は、<code>config/credentials.yml.enc</code>の中身を復号化するために必要な<code>config/master.key</code>ファイルを本番環境にも配置する必要があります。しかし、<code>master.key</code>はセキュリティ上、Gitで管理してはいけないため、標準で
      .gitignore されてあり、PaaSなどのGitリポジトリをそのままデプロイする本番環境(Herokuなど)の場合は、<code>master.key</code>　の中身をコピーして、環境変数
      <code>RAILS_MASTER_KEY</code> として用意する必要があります。</p><p>ちなみに、Herokuをお使いの場合は <code>$
      heroku config:set RAILS_MASTER_KEY=123</code>で環境変数を用意できます。</p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#%E5%8F%82%E8%80%83\"></a>参考</h1><p><a
      href=\"https://www.engineyard.com/blog/active-storage\" rel=\"nofollow noopener\"
      target=\"_blank\">https://www.engineyard.com/blog/active-storage</a><br><a href=\"https://qiita.com/yatmsu/items/08b95e837ac7f24fb443\">https://qiita.com/yatmsu/items/08b95e837ac7f24fb443</a><br><a
      href=\"https://afreshcup.com/home/2017/07/06/introduction-to-active-storage-part-3-google-cloud-storage\"
      rel=\"nofollow noopener\" target=\"_blank\">https://afreshcup.com/home/2017/07/06/introduction-to-active-storage-part-3-google-cloud-storage</a></p><p><br></p><p><a
      href=\"https://qiita.com/yatmsu/items/08b95e837ac7f24fb443\">https://qiita.com/yatmsu/items/08b95e837ac7f24fb443</a>&nbsp;で問題点を述べてある</p></section>"
    - '2018-11-19 07:22:28.027506'
    - '2018-11-19 07:44:22.174821'
  - - 23
    - active_storage
    - "<p itemprop=\"headline\"><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a\">https://qiita.com/hmmrjn/items/7cc5e5348755c517458a</a>参照</p><h1
      itemprop=\"headline\">【Rails 5.2】 Active Storageの使い方</h1><p><a href=\"https://qiita.com/tags/Rails\">Rails</a><a
      href=\"https://qiita.com/tags/RubyOnRails\">RubyOnRails</a><a href=\"https://qiita.com/tags/%E7%94%BB%E5%83%8F\">画像</a><a
      href=\"https://qiita.com/tags/ActiveStorage\">ActiveStorage</a></p><div data-mount-target=\"mobileArticleActions\"><br></div><section
      itemprop=\"articleBody\"><p>Active Storageについて調べると、「軽く触ってみた」ノリの記事ばかりで、特に複数のファイルを扱う方法などがなかなか見つからなかったので、使い方のまとめ記事を作りました。<img
      alt=\":muscle:\" height=\"20\" src=\"blob:http://localhost:3000/f78af57d-7522-4bcb-86e9-e4f84e0c70d1\"
      title=\":muscle:\" width=\"20\" class=\"fr-fic fr-dii\"></p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#active-storage-%E3%81%A8%E3%81%AF\"></a>Active
      Storage とは</h1><p>Active Storageは、Rails5.2で追加された、<strong>ファイルアップロード</strong>を行うための機能です。これを使えば、フォームで画像の投稿機能などが簡単に作れます。また、Amazon
      S3, Google Cloud Storage, Microsoft Azure Storageなどの<strong>クラウドストレージサービス</strong>に対するファイルのアップロードを簡単に行うことができます。クラウドストレージの他に、ローカルディスクにファイルを保存することもできます。<br><strong>Paperclip,
      Carrierwave, Dragonflyなどのgemの代わりになる</strong>とされていますが、現時点ではバリデーションとキャッシュ関連の機能は残念ながら備えていません。使うには<strong>Rails
      5.2以上</strong>にアップグレードする必要があります。</p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#active-storage-%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\"></a>Active
      Storage を使えるようにする</h1><div data-lang=\"sh\"><pre>$ rails active_storage:install\r\n$
      rails db:migrate</pre></div><p>ここは気になる方だけ読んでいただければ大丈夫なのですが、このマイグレーションによって<code>active_storage_blobs</code>と<code>active_storage_attachments</code>という名前のテーブルが2つ生成されます。これらのテーブルは<code>Blob</code>と<code>Attachment</code>の2つのモデルが使います。<code>Blob</code>はファイル名、ファイルの種類、バイト数、誤り検出符号などのメタデータを保持するモデルで、<code>Attachment</code>モデルは、BlobオブジェクトとActive
      Recordオブジェクトを紐付けるための中間テーブルです。なお、Active Storageを使う際、直接<code>Blob</code>と<code>Attachment</code>モデルに触れる必要はありません。(時間返せ)</p><h1><a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#active-record-%E3%83%A2%E3%83%87%E3%83%AB%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\"></a>Active
      Record モデルを用意する</h1><p>コメントに1枚、もしくは、複数枚の画像を添付できるようにしたいとしましょう。まずは<code>Comment</code>モデルを用意する必要があります。<code>generate
      resource</code>コマンドで基本的なルートと、モデル、空のコントローラを生成しましょう。</p><div data-lang=\"sh\"><pre>$
      rails g resource comment content:text\r\n$ rails db:migrate</pre></div><p>ここで、画像用のカラムを用意する必要がない点もActive
      Storageの特徴の一つです。</p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#1%E3%81%A4%E3%81%AE%E6%B7%BB%E4%BB%98%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88\"></a>1つの添付ファイルの場合</h1><p><code>Comment</code>モデルに1つの画像を添付するには、<code>has_one_attached</code>を使います。</p><div
      data-lang=\"ruby\"><pre>class Comment &lt; ApplicationRecord\r\n  has_one_attached
      :image\r\nend</pre></div><p><code>:image</code>はファイルの呼び名で、<code>:photo</code>、<code>:avatar</code>、<code>:hoge</code>など、ファイルの用途に合わせて好きなものを指定してください。ここで、Imageモデルなどを作る必要はないです。Active
      Storageは裏側で<code>Blob</code>と<code>Attachment</code>モデルを使って、こそこそと<code>comment.image</code>を使えるようにしてくれます。(有能すぎ)</p><p>では、コントローラとビューの中身を書きましょう。</p><div
      data-lang=\"ruby\">comments_controller.rb<pre>class CommentsController &lt;
      ApplicationController\r\n  def new\r\n    @comment = Comment.new\r\n  end\r\n\r\n
      \ def create\r\n    @comment = Comment.create params.require(:comment).permit(:content,
      :image) # POINT\r\n    redirect_to @comment\r\n  end\r\n\r\n  def show\r\n    @comment
      = Comment.find(params[:id])\r\n  end\r\n\r\n  def edit\r\n    @comment = Comment.find(params[:id])
      \r\n  end\r\n\r\n  def update\r\n    @comment = Comment.find(params[:id])\r\n
      \   @comment.update params.require(:comment).permit(:content, :image) # POINT\r\n
      \   redirect_to @comment\r\n  end\r\nend</pre></div><div data-lang=\"erb\">new.html.erb<pre>&lt;%=
      form_with model: @comment, local: true  do |form| %&gt;\r\n  &lt;%= form.text_area
      :content %&gt;&lt;br&gt;\r\n  &lt;%= form.file_field :image %&gt;&lt;br&gt;\r\n
      \ &lt;%= form.submit %&gt;\r\n&lt;% end %&gt;</pre></div><div data-lang=\"erb\">show.html.erb<pre>&lt;%
      if @comment.image.attached? %&gt;\r\n  &lt;%= image_tag @comment.image %&gt;\r\n&lt;%
      end %&gt;</pre></div><p>ほとんど典型的なコードですね。ポイントは<code>create</code>と<code>update</code>アクションのところで、このようにして、<code>image</code>があたかも<code>Comment</code>のカラムであるかのように扱うことで、フォームの<code>file_field</code>で選択された画像を<code>Comment</code>オブジェクトと紐付けます。これも、Active
      Storageの特徴の一つです。</p><p><code>create</code>と<code>update</code>アクションを使えない場合は、<code>@comment.image.attach(params[:comment][:image])</code>で画像を後から<code>Comment</code>オブジェクトと紐付けることもできます。</p><p>例えば、画像の選択を任意にしたい場合は以下のようなコードになります。</p><div
      data-lang=\"ruby\"><pre>@comment = Comment.create params.require(:comment).permit(:content)\r\nif
      image = params[:comment][:image]\r\n  @comment.image.attach(image)\r\nend</pre></div><p>画像を表示するには<code>image_tag</code>に<code>@comment.image</code>を渡すだけです。</p><p>結果はこのような感じになります。<br><a
      href=\"https://camo.qiitausercontent.com/56fce64cc16c92ffb2f68472fdd61897b590f408/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3232353939372f63373230346465352d663935342d643063662d646637642d3131613932633138356330322e676966\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/5f05d0c0-3e6a-44c3-b861-ab5ea5ddda29\"
      alt=\"ezgif-2-b17e951b9f.gif\" class=\"fr-fic fr-dii\"></a></p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#%E8%A4%87%E6%95%B0%E3%81%AE%E6%B7%BB%E4%BB%98%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E5%90%88\"></a>複数の添付ファイルの場合</h1><p>複数の添付ファイルを使いたい場合は、上記のコードを少しだけ変更します。</p><ul><li><code>has_one_attached</code>の代わりに<code>has_many_attached</code>を使う</li><li><code>comment.image</code>の代わりに<code>comment.images</code>を使う</li><li><code>file_field</code>に<code>multiple:
      true</code>を追記して、複数ファイルの選択を許可</li></ul><div data-lang=\"ruby\">comment.rb<pre>class
      Comment &lt; ApplicationRecord\r\n  has_many_attached :images\r\nend</pre></div><div
      data-lang=\"ruby\">comments_controller.rb<pre>class CommentsController &lt;
      ApplicationController\r\n  def new\r\n    @comment = Comment.new\r\n  end\r\n\r\n
      \ def create\r\n    @comment = Comment.create params.require(:comment).permit(:content,
      :images)\r\n    redirect_to @comment    \r\n  end\r\n\r\n  def show\r\n    @comment
      = Comment.find(paramd[:id])\r\n  end\r\n\r\n  def edit\r\n    @comment = Comment.find(params[:id])
      \r\n  end\r\n\r\n  def update\r\n    @comment = Comment.find(params[:id])\r\n
      \   @comment.update params.require(:comment).permit(:content, :images)\r\n    redirect_to
      @comment\r\n  end\r\nend</pre></div><div data-lang=\"erb\">new.html.erb<pre>&lt;%=
      form_with model: @comment, local: true  do |form| %&gt;\r\n  &lt;%= form.text_area
      :content %&gt;&lt;br&gt;&lt;br&gt;\r\n  &lt;%= form.file_field :images, multiple:
      true %&gt;&lt;br&gt;\r\n  &lt;%= form.submit %&gt;\r\n&lt;% end %&gt;</pre></div><div
      data-lang=\"erb\">show.html.erb<pre>&lt;% if @comment.images.attached? %&gt;\r\n
      \ &lt;% @comment.images.each do |image| %&gt;\r\n    &lt;%= image_tag image
      %&gt; &lt;br&gt;\r\n  &lt;% end %&gt;\r\n&lt;% end %&gt;</pre></div><p>一枚の時同様、<code>@comment.images.attach(params[:comment][:images])</code>も使えます。</p><p>結果はこちら<br><a
      href=\"https://camo.qiitausercontent.com/f5b6f7a06888ce09cac6615ace76272fccb397f2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3232353939372f36363837636364632d313065372d333366312d393434652d6161396137663036343762612e676966\"
      rel=\"nofollow noopener\" target=\"_blank\"><img src=\"blob:http://localhost:3000/ffcad72f-2098-470b-8d53-fec7a7993ea9\"
      alt=\"ezgif-2-e15b099da1.gif\" class=\"fr-fic fr-dii\"></a></p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BF%9D%E5%AD%98%E5%85%88%E3%81%AE%E5%A4%89%E6%9B%B4\"></a>ファイルの保存先の変更</h1><p>ファイルの保存先は、各環境の設定ファイルに記載します。<br>まずは、&nbsp;<code>config/environments/development.rb</code>
      と&nbsp;<code>production.rb</code> の中身を覗いてみましょう。</p><div data-lang=\"ruby\">config/environments/development.rb<pre>
      \ # ...\r\n\r\n  # Store uploaded files on the local file system (see config/storage.yml
      for options)\r\n  config.active_storage.service = :local\r\n\r\n  # ...</pre></div><div
      data-lang=\"ruby\">config/environments/production.rb<pre>  # ...\r\n\r\n  #
      Store uploaded files on the local file system (see config/storage.yml for options)\r\n
      \ config.active_storage.service = :local\r\n\r\n  # ...</pre></div><p>初期状態では、開発環境(development)、本番環境(production)ともに保存先は&nbsp;<code>:local</code>
      に設定されています。<br>この&nbsp;<code>local</code> とは、&nbsp;<code>config/storage.yml</code>
      で定義された保存先の名前です。<br>これを変更するには、<code>:local</code> のところを&nbsp;<code>:amazon</code>,&nbsp;<code>:google</code>,&nbsp;<code>:microsoft</code>
      のいづれかと置き換え、<code>config/storage.yml</code>の方に、必要な認証情報などの値を入力します。</p><p>今度は、<code>config/storage.yml</code>の中身を覗いてみましょう。</p><div
      data-lang=\"yaml\">config/storage.yml<pre>test:\r\n  service: Disk\r\n  root:
      &lt;%= Rails.root.join(&quot;tmp/storage&quot;) %&gt;\r\n\r\nlocal:\r\n  service:
      Disk\r\n  root: &lt;%= Rails.root.join(&quot;storage&quot;) %&gt;\r\n\r\n# Use
      rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)\r\n#
      amazon:\r\n#   service: S3\r\n#   access_key_id: &lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;\r\n#   secret_access_key: &lt;%= Rails.application.credentials.dig(:aws,
      :secret_access_key) %&gt;\r\n#   region: us-east-1\r\n#   bucket: your_own_bucket\r\n\r\n#
      Remember not to checkin your GCS keyfile to a repository\r\n# google:\r\n#   service:
      GCS\r\n#   project: your_project\r\n#   credentials: &lt;%= Rails.root.join(&quot;path/to/gcs.keyfile&quot;)
      %&gt;\r\n#   bucket: your_own_bucket\r\n\r\n# Use rails credentials:edit to
      set the Azure Storage secret (as azure_storage:storage_access_key)\r\n# microsoft:\r\n#
      \  service: AzureStorage\r\n#   storage_account_name: your_account_name\r\n#
      \  storage_access_key: &lt;%= Rails.application.credentials.dig(:azure_storage,
      :storage_access_key) %&gt;\r\n#   container: your_container_name</pre></div><p>先ほど見た保存先の&nbsp;<code>local</code>
      は、使用するサービスが&nbsp;<code>Disk</code> (ローカルディスク)に設定れていて、railsアプリ直下の<code>/storage</code>ディレクトリがファイルの保存先に指定されています。</p><p>あと、親切に、コメントがたくさんついてますね。この中から適切なところのコメントを解除することで、好きなストレージサービスを使うことができます。</p><p>また、お使いのサービスのgemをGemfileに追記する必要があります。これは、<code>aws-sdk-s3</code>,&nbsp;<code>google-cloud-storage</code>,&nbsp;<code>azure-storage</code>のいづれかになります。</p><hr><p>なお、アクセスキーは、セキュリティ上、<strong>Rails
      Credentials</strong>を使って入力するのが好ましいです。<br>これは、<strong>APIキーなどの機密情報を暗号化して保存するための機能</strong>で、実はこれもRails
      5.2で追加された新機能です。これまでの<code>secrets.yml</code>の代わりになります。<br><code>&lt;%= Rails.application.credentials.dig(...)
      %&gt;</code>の部分は、まさにCredentialsに入力されたデータを読み込んでいますのでコメントをそのまま使いましょう。</p><ul><li>Credentialsにデータを入力・編集するには&nbsp;<code>$
      rails credentials:edit</code> と叩きます。<br>エラーが出た場合は、<code>$ EDITOR=vim rails credentials:edit</code>で、お使いのエディターを指定してください。例:&nbsp;<code>vim</code>,&nbsp;<code>emacs</code>,&nbsp;<code>atom</code>,&nbsp;<code>code</code>,&nbsp;<code>subl</code></li><li>入力した内容は<code>config/master.key</code>を用いて暗号化され、<code>config/credentials.yml.enc</code>が生成されます。</li><li>復号された中身は&nbsp;<code>$
      rails credentials:show</code> で確認できます。</li></ul><h2><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#amazon-s3-%E3%82%92%E4%BD%BF%E3%81%86%E5%A0%B4%E5%90%88\"></a>Amazon
      S3 を使う場合</h2><p>S3は基本的に、ファイルをアップロードし、そのURLを取得できる、AWSのストレージサービスです。</p><h3><a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#-amazon-s3%E3%81%A7%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\"></a>\U0001F530
      Amazon S3でバケットを用意する方法</h3><p>バケットは画像などのファイルをアップロードできる入れ物です。<br>AWSコンソール &rarr;
      サービス &rarr; ストレージ &rarr; S3　&rarr; 「バケットを作成する」</p><table><thead><tr><th>項目</th><th>入力・選択</th></tr></thead><tbody><tr><td>パケット名</td><td>例:
      my-rails-app-bucket</td></tr><tr><td>リージョン</td><td>例: ap-northeast-1 (東京)</td></tr><tr><td>パブリックアクセス許可を管理する</td><td>このバケットに読み取りアクセス権限をする</td></tr><tr><td>上記以外</td><td>全部デフォルトのまま</td></tr></tbody></table><h3><a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#-amazon-s3%E3%81%A7%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B%E6%96%B9%E6%B3%95\"></a>\U0001F530
      Amazon S3でアクセスキーを作る方法</h3><p>AWSコンソール &rarr; サービス &rarr; セキュリティ &rarr; IAM &rarr;
      「ユーザー」 &rarr; 「ユーザーを追加」</p><table><thead><tr><th>項目</th><th>入力・選択</th></tr></thead><tbody><tr><td>ユーザー名</td><td>例:
      s3user</td></tr><tr><td>アクセスの種類</td><td>プログラムによるアクセス</td></tr></tbody></table><p>「既存のポリシーを直接アタッチ」
      &rarr; 「S3」で検索 &rarr; 「AmazonS3FullAccess」を選択 &rarr; 「次へ」 &rarr; 「ユーザーの作成」<br>表示された「アクセスキー
      ID」と「シークレットアクセスキー」 をメモ帳などにコピペして保管する。（一度しか表示されません）</p><h3><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#%E4%BF%9D%E5%AD%98%E5%85%88%E3%82%92amazon-s3%E3%81%AB%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B\"></a>保存先をAmazon
      S3に指定する</h3><p>まず最初に必要なAWS S3のGemをインストールします。</p><div data-lang=\"ruby\">Gemfile<pre>gem
      &quot;aws-sdk-s3&quot;, require: false</pre></div><p>Gemfile変更後、<code>$ bundle
      install</code>と叩きます。</p><p>次に、保存先をAmazon S3に指定します。</p><div data-lang=\"ruby\">config/environments/production.rb<pre>#
      本番環境(production)の保存先を:localから:amazonに変更\r\n\r\nconfig.active_storage.service
      = :amazon</pre></div><div data-lang=\"ruby\">config/environments/development.rb<pre>#
      開発環境(development)でAmazon S3の動作を確認したい場合はこちらの方も変更しましょう\r\n\r\nconfig.active_storage.service
      = :amazon</pre></div><div data-lang=\"yaml\">config/storage.yml<pre># 以下の部分をコメント解除する\r\namazon:\r\n
      \ service: S3\r\n  access_key_id: &lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;\r\n  secret_access_key: &lt;%= Rails.application.credentials.dig(:aws,
      :secret_access_key) %&gt;\r\n  # 以下の２行を変更\r\n  region: ap-northeast-1 #東京の場合\r\n
      \ bucket: my-rails-app-bucket #自分で作成したS3のバケットの名前</pre></div><p>前にも述べましたが、<code>&lt;%=
      Rails.application.credentials.dig(...) %&gt;</code>の部分は、<strong>Credentials</strong>の情報を読み込んでいます。早速、CredentialsにAmazon
      S3へのアクセスキーを入力しましょう。</p><div data-lang=\"sh\"><pre>$ EDITOR=vim rails credentials:edit</pre></div><p>上の例ではVimが開きます。Atomをお使いの場合、<code>EDITOR=atom</code>としてください。<br>VSCodeなら、<code>EDITOR=code</code>、SublimeTextなら<code>EDITOR=subl</code>。</p><div
      data-lang=\"yml\"><pre>aws:\r\n access_key_id: 123 #ここに自分のアクセスキーIDをコピペ\r\n secret_access_key:
      456 #ここに自分のシークレットアクセスキーをコピペ</pre></div><p><img alt=\":bulb:\" height=\"20\"
      src=\"blob:http://localhost:3000/3a2f92b3-3ae4-49be-9209-ecf374da810a\" title=\":bulb:\"
      width=\"20\" class=\"fr-fic fr-dii\">&nbsp;Vim:&nbsp;<code>i</code>で入力開始、<code>esc</code>
      &rarr;&nbsp;<code>ZZ</code>で終了</p><p>入力した内容は<code>$ rails credentials:show</code>で確認できます。</p><p>以上で保存先をAmazon
      S3に変更できました。<img alt=\":tada:\" height=\"20\" src=\"blob:http://localhost:3000/fd81ac01-1171-48c1-bbdc-c4fa52d45878\"
      title=\":tada:\" width=\"20\" class=\"fr-fic fr-dii\"></p><h1><a href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#warning-%E9%87%8D%E8%A6%81\"></a><img
      alt=\":warning:\" height=\"20\" src=\"blob:http://localhost:3000/6ae4fed1-d394-41d0-a25a-c38a6caf9ca8\"
      title=\":warning:\" width=\"20\" class=\"fr-fic fr-dii\">&nbsp;重要</h1><p><strong>Credentials</strong>をお使いの場合は、<code>config/credentials.yml.enc</code>の中身を復号化するために必要な<code>config/master.key</code>ファイルを本番環境にも配置する必要があります。しかし、<code>master.key</code>はセキュリティ上、Gitで管理してはいけないため、標準で
      .gitignore されてあり、PaaSなどのGitリポジトリをそのままデプロイする本番環境(Herokuなど)の場合は、<code>master.key</code>　の中身をコピーして、環境変数&nbsp;<code>RAILS_MASTER_KEY</code>
      として用意する必要があります。</p><p>ちなみに、Herokuをお使いの場合は&nbsp;<code>$ heroku config:set RAILS_MASTER_KEY=123</code>で環境変数を用意できます。</p><h1><a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a#%E5%8F%82%E8%80%83\"></a>参考</h1><p><a
      href=\"https://www.engineyard.com/blog/active-storage\" rel=\"nofollow noopener\"
      target=\"_blank\">https://www.engineyard.com/blog/active-storage</a><br><a href=\"https://qiita.com/yatmsu/items/08b95e837ac7f24fb443\">https://qiita.com/yatmsu/items/08b95e837ac7f24fb443</a><br><a
      href=\"https://afreshcup.com/home/2017/07/06/introduction-to-active-storage-part-3-google-cloud-storage\"
      rel=\"nofollow noopener\" target=\"_blank\">https://afreshcup.com/home/2017/07/06/introduction-to-active-storage-part-3-google-cloud-storage</a></p></section><div
      data-mount-target=\"articleFooterMenu\"><div data-reactroot=\"\"><a data-effect=\"solid\"
      data-tip=\"投稿者に記事をより良くするための提案ができます \U0001F4AA\" href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a/edit\"></a></div></div>"
    - '2018-11-19 10:08:26.611744'
    - '2018-11-19 10:08:26.611744'
  - - 24
    - twitter api fetch
    - "<h1 itemprop=\"name\">Javascript FetchでTwitterにログインする方法</h1><p>解決済</p><p>回答&nbsp;<span
      itemprop=\"answerCount\">1</span></p><p>投稿&nbsp;<time datetime=\"2016-03-31T16:41\"
      itemprop=\"dateCreated\">2016/03/31 16:41</time> ・<a href=\"https://teratail.com/questions/history-questions/31159\"
      rel=\"nofollow\">編集&nbsp;<time datetime=\"2016-04-01T01:25\" itemprop=\"dateModified\">2016/04/01
      01:25</time></a></p><ul><li>評価&nbsp;0</li><li>クリップ&nbsp;0</li><li>VIEW&nbsp;958</li></ul><p><a
      href=\"https://teratail.com/users/kysk\"><img src=\"blob:http://localhost:3000/d7bc952a-26c9-43e7-ae19-34c9dfdac6a1\"
      width=\"22\" height=\"22\" alt=\"kysk\" class=\"fr-fic fr-dii\"></a></p><p><a
      href=\"https://teratail.com/users/kysk\">kysk</a></p><p>score 2</p><section><div
      itemprop=\"text\"><p>\b下記URLを参考に、JavascriptのFetchでTwitterにログインするプログラムを作成しています。&nbsp;<br>http://qiita.com/tomoyukilabs/items/9b464c53450acc0b9574</p><pre><code>var
      twitter_token;\r\nvar userid=&quot;twitterid&quot;;//自分のTwitterIDを入力しています。\r\nvar
      userpass=&quot;twitterpass&quot;;//自分のTwitterPASSを入力しています。\r\n\r\n    fetch(&quot;https://twitter.com/&quot;).then(function(response)
      {\r\n        return response.text();\r\n    }).then(function(text) {\r\n        var
      getstring =text.match(/redirect_after_login&quot; value=.+\\s.+value=&quot;(\\w+)&quot;/);\r\n
      \       twitter_token=getstring[1];\r\n        alert(twitter_token);//ここでTwitter_Tokenは取得できています。\r\n\r\n//ここからログイン処理\r\n
      \       fetch(&quot;https://twitter.com/sessions&quot;, {\r\n        method:
      &#39;POST&#39;,\r\n        //以下２つはクッキーを使用するとき。書いても状況変わらずなのでコメントアウト中です。\r\n        //mode:
      &#39;cors&#39;,\r\n        //credentials: &#39;include&#39;,\r\n        headers:
      { &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,&#39;Referer&#39;:
      &#39;https://twitter.com/&#39; },\r\n        body: &#39;session[username_or_email]=&#39;+
      userid + &#39;&amp;session[password]=&#39; + userpass+\r\n        &#39;&amp;remember_me=1&amp;return_to_ssl=true&amp;scribe_log=&#39;+\r\n
      \       &#39;&amp;redirect_after_login=/&amp;authenticity_token=&#39;+twitter_token\r\n
      \       }).then(function(response) {\r\n            return response.text();\r\n
      \       }).then(function(text) {\r\n            AddLog_test(text);//出力されたhtmlを画面に表示\r\n
      \       });\r\n    });</code><a></a></pre><p>これで実行すると、&darr;のURLと同じ画面の状態になります。&nbsp;<br>https://twitter.com/login/</p><p>ユーザー名の所には&nbsp;userid&nbsp;の値が入っているのですが、&nbsp;<br>パスワードの所は空欄になっていました。&nbsp;<br>※つまり、パスワードを間違えてログインした時に表示される画面と同じものが出力されています。</p><p>尚、冒頭で入力しているTwitterのIDとPASSは、間違いなく合っていることを確認しています。</p><p>どこが間違っているのか、どうすれば正しくログインできるのかご教授いただけると幸いです。</p><p>また、FetchではTwitterにログインできないよという場合は、&nbsp;<br>Twitterにログインを行える方法をご教授いただけると嬉しいです。&nbsp;<br>※参照URLだけでも大変助かります。</p><p>よろしくお願い致します。m(_&nbsp;_)m</p></div><ul><li><p><button
      data-question-id=\"31159\" value=\"1\"><em>attachment</em>クリップ0</button></p></li><li><p><button><em>thumb_up</em>高評価<span
      itemprop=\"upvoteCount\">0</span></button></p></li><li><button data-limit=\"2\"
      type=\"button\">低評価<span itemprop=\"downvoteCount\">0</span></button></li><li><button
      title=\"通報\"><em>warning</em></button></li></ul><a href=\"javascript%3Avoid(0)\"><em>more_vert</em>0
      件の質問への追記・修正依頼</a></section><section><p>回答&nbsp;1&nbsp;件</p><ul><li><em>sort</em>評価が高い順</li><li><em>sort</em><a
      data-key=\"1\" href=\"javascript%3Avoid(0)\">新着順</a></li><li><em>sort</em><a
      data-key=\"2\" href=\"javascript%3Avoid(0)\">古い順</a></li></ul><section data-id=\"49224\"
      itemprop=\"acceptedAnswer\"><a href=\"https://teratail.com/questions/31159#reply-49224\"
      title=\"https://teratail.com/questions/31159#reply-49224\"><em>link</em></a><p><em>check</em>ベストアンサー</p><button
      data-num=\"1\" type=\"button\" value=\"1\"><em>add</em></button><button data-limit=\"2\"
      data-num=\"-1\" type=\"button\" value=\"-1\"><em>remove</em></button><p title=\"回答の評価\">0</p><div
      itemprop=\"text\"><p>両方の fetch で <code>credentials:&nbsp;&#39;include&#39;</code>
      が必要じゃないですか？</p><p>ブラウザの&nbsp;fetch&nbsp;で試したところ、token取得とheader、bodyの設定は問題ないようでした</p></div><p>投稿&nbsp;<time
      datetime=\"2016-04-01T01:29\" itemprop=\"dateCreated\">2016/04/01 01:29</time></p><div
      data-user-id=\"43088\"><a href=\"https://teratail.com/users/ryls-nmm\"><img
      alt=\"ryls-nmm\" src=\"blob:http://localhost:3000/49b3d8ee-a612-49d3-82cc-eb066ed9bd14\"
      width=\"40\" height=\"40\" class=\"fr-fic fr-dii\"></a><p><a href=\"https://teratail.com/users/ryls-nmm\">ryls-nmm</a></p><p>score
      603</p></div><ul><li><button data-num=\"1\" type=\"button\" value=\"1\"><em>add</em>高評価0</button></li><li><button
      data-limit=\"2\" data-num=\"-1\" type=\"button\" value=\"-1\"><em>remove</em>低評価0</button></li><li><button
      title=\"通報\"><em>warning</em></button><form accept-charset=\"utf-8\" action=\"https://teratail.com/questions/31159\"
      method=\"post\"><br></form></li><li><br><ul><li><br></li></ul></li><li><p><a
      href=\"https://teratail.com/users/kysk\"><img alt=\"kysk\" src=\"blob:http://localhost:3000/b6a8745b-8bdc-4f0f-8da0-c4d92baf681e\"
      width=\"32\" height=\"32\" class=\"fr-fic fr-dii\"></a></p><p><a href=\"https://teratail.com/users/kysk\"></a></p><p><a
      href=\"https://teratail.com/users/kysk\">kysk</a></p><p><br></p><p>2016/04/01
      22:47</p><p>ご回答ありがとうございます！<br><br>両方のfetchに「credentials: &#39;include&#39;」を入れました所、<br>正常にログインを行うことができました。<br><br>\bログイン処理のfetchだけでなく、<br>上のtoken取得の方にも「credentials:
      &#39;include&#39;」が必要だったんですね。<br><br>的確なアドバイスをありがとうございました！m(_ _)m</p></li></ul><img
      src=\"blob:http://localhost:3000/0d8b9f58-e8d7-4432-8757-bbf5afcee7f2\" width=\"32\"
      height=\"32\" alt=\"napojin\" class=\"fr-fic fr-dii\"><form accept-charset=\"utf-8\"
      action=\"https://teratail.com/questions/31159\" method=\"post\" name=\"comment_form\"><textarea
      name=\"data[Comment][comment]\" rows=\"4\" cols=\"30\" placeholder=\"回答に対するコメントを入力してください\"
      value=\"\"></textarea><p><a href=\"https://teratail.com/questions/31159#rv_49224\"><em>add</em>正しい回答は評価しましょう</a></p><p><br></p><p><a
      href=\"https://teratail.com/questions/31283\">https://teratail.com/questions/31283</a>も見てね</p></form></section></section>"
    - '2018-11-22 09:03:50.950825'
    - '2018-11-23 04:19:36.574164'
  - - 70
    - rails5 herokuでs3をしようする時
    - "<h1 itemprop=\"headline\">【Rails】AWS S3を使ってHerokuで画像を投稿できるようにする方法</h1><p><a
      href=\"https://qiita.com/tags/Rails\">Rails</a><a href=\"https://qiita.com/tags/Heroku\">Heroku</a><a
      href=\"https://qiita.com/tags/AWS\">AWS</a><a href=\"https://qiita.com/tags/S3\">S3</a><a
      href=\"https://qiita.com/tags/ActiveStorage\">ActiveStorage</a></p><div data-mount-target=\"mobileArticleActions\"><br></div><section
      itemprop=\"articleBody\"><p>今回は、Rails 5.2で追加されたActiveStorageを使ってHerokuで画像をアップロードできるようにしたいと思います。</p><p>内容</p><ul><li>ActiveStorageって何?</li><li>最初に、Amazon
      S3でやること</li><li>次に、Railsでやること</li><li>最後に、Herokuでやること</li></ul><h1><a href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#activestorage%E3%81%A3%E3%81%A6%E4%BD%95\"></a>ActiveStorageって何?</h1><p>Amazon
      S3, GCS, AzureStorageなどのクラウドストレージに画像などのファイルをアップロードできるRailsの機能。<br>以前使われていた、CarrierWaveやPaperclipなどgemの代わりになる。</p><p><a
      href=\"https://railsguides.jp/active_storage_overview.html\" rel=\"nofollow
      noopener\" target=\"_blank\">Active Storage の概要 | Railsガイド</a>を参照</p><h2><a
      href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#rails-%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AE%E7%A2%BA%E8%AA%8D\"></a>Rails
      バージョンの確認</h2><div data-lang=\"shell\"><pre>$ rails -v\r\nRails 5.2.0</pre></div><p>Active
      Storageを使うにはRails 5.2が必要です。<br>Rails 5.2 未満の場合は<a href=\"https://railsguides.jp/upgrading_ruby_on_rails.html\"
      rel=\"nofollow noopener\" target=\"_blank\">アップグレード</a>してください。</p><h2><a href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#beginner-activestorage%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\"></a><img
      data-fr-image-pasted=\"true\" alt=\":beginner:\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f530.png\"
      title=\":beginner:\" width=\"20\" class=\"fr-fic fr-dii\">&nbsp;ActiveStorageの使い方</h2><p>わからない人のために載せておきます。<br>ここでは手短に、Userのアバター画像を管理する例を載せる。</p><div
      data-lang=\"shell\"><pre>$ rails active_storage:install\r\n$ rails db:migrate</pre></div><div
      data-lang=\"ruby\">user.rb<pre>class User &lt; ApplicationRecord\r\n  has_one_attached
      :avatar\r\nend</pre></div><div data-lang=\"erb\">edit.html.erb<pre>&lt;%= form.file_field
      :avatar %&gt;</pre></div><div data-lang=\"ruby\">users_controller.rb<pre>def
      create\r\n  @user.create(...., avatar: params[:avatar])\r\nend</pre></div><div
      data-lang=\"erb\">show.html.erb<pre>&lt;% if @user.avatar.attached? %&gt;\r\n
      \ &lt;%= image_tag @user.avatar %&gt;\r\n&lt;% end %&gt;</pre></div><p>詳しくは<a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a\">ActiveStorageの使い方まとめ</a>をどうぞ。</p><h1><a
      href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E6%89%8B%E9%A0%86\"></a>手順</h1><h2><a
      href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E6%9C%80%E5%88%9D%E3%81%ABamazon-s3%E3%81%A7%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"></a>最初に、Amazon
      S3でやること</h2><h3><a href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E7%94%BB%E5%83%8F%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E5%A0%B4%E6%89%80%E3%82%92%E7%94%A8%E6%84%8F\"></a>画像をアップロードする場所を用意</h3><ol><li>AWSコンソール
      &rarr; サービス &rarr; ストレージ &rarr; S3</li><li>「<strong>バケットを作成する</strong>」<br>バケット
      = 画像などのファイルをアップロードできるところ</li></ol><table><thead><tr><th>項目</th><th>入力・選択</th></tr></thead><tbody><tr><td>パケット名</td><td>適当
      ex: my-rails-app-first-bucket</td></tr><tr><td>リージョン</td><td><img data-fr-image-pasted=\"true\"
      alt=\":flag_jp:\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f1ef-1f1f5.png\"
      title=\":flag_jp:\" width=\"20\" class=\"fr-fic fr-dii\">　東京</td></tr><tr><td>パブリックアクセス許可を管理する</td><td><strong>このバケットに読み取りアクセス権限をする</strong></td></tr><tr><td>上記以外</td><td>全部デフォルトのままでok</td></tr></tbody></table><h3><a
      href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B\"></a>アクセスキーを作る</h3><ul><li>AWSコンソール
      &rarr; サービス &rarr; セキュリティ &rarr; IAM</li><li>「<strong>個々の IAM ユーザーの作成</strong>」
      &rarr; 「ユーザーの管理」 &rarr; 「ユーザーを追加」</li></ul><table><thead><tr><th>項目</th><th>入力・選択</th></tr></thead><tbody><tr><td>ユーザー名</td><td>適当
      ex: TaroTanaka</td></tr><tr><td>アクセスの種類</td><td>プログラムによるアクセス</td></tr></tbody></table><ul><li>「既存のポリシーを直接アタッチ」
      &rarr; 「S3」で検索 &rarr; 「<strong>AmazonS3FullAccess</strong>」を選択 &rarr; 「次へ」 &rarr;
      「ユーザーの作成」</li><li>表示された「<strong>アクセスキー ID</strong>」と「<strong>シークレットアクセスキー</strong>」
      をメモ帳などにコピペして保管する。</li></ul><h2><a href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E6%AC%A1%E3%81%ABrails%E3%81%A7%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"></a>次に、Railsでやること</h2><h3><a
      href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E5%BF%85%E8%A6%81%E3%81%AAgem%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"></a>必要なGemのインストール</h3><div
      data-lang=\"ruby\">Gemfile<pre>gem &quot;aws-sdk-s3&quot;, require: false #追記</pre></div><div
      data-lang=\"shell\"><pre>$ bundle install</pre></div><h3><a href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#s3%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%92%E5%85%A5%E5%8A%9B\"></a>S3へのアクセスキーを入力</h3><div
      data-lang=\"shell\"><pre>$ EDITOR=vim rails credentials:edit</pre></div><div
      data-lang=\"yml\"><pre>aws:\r\n access_key_id: #ここに自分のアクセスキーIDをコピペ\r\n secret_access_key:
      #ここに自分のシークレットアクセスキーをコピペ</pre></div><p><img data-fr-image-pasted=\"true\" alt=\":bulb:\"
      height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f4a1.png\"
      title=\":bulb:\" width=\"20\" class=\"fr-fic fr-dii\">&nbsp;<code>i</code>キーで編集開始、<code>esc</code>で編集終了
      、&nbsp;<code>ZZ</code>で保存して終了</p><p>後から入力を確認したいときは</p><div data-lang=\"shell\"><pre>$
      rails credentials:show</pre></div><p><img data-fr-image-pasted=\"true\" alt=\":information_source:\"
      height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/2139-fe0f.png\"
      title=\":information_source:\" width=\"20\" class=\"fr-fic fr-dii\">&nbsp;入力内容は
      config/master.key を使って暗号化され、 config/credentials.yml.enc が生成されます。これは中身が暗号化されているのでGitで管理しても大丈夫です。</p><h3><a
      href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#heroku%E3%81%A7%E3%81%AE%E7%94%BB%E5%83%8F%E3%81%AE%E4%BF%9D%E5%AD%98%E5%85%88%E3%82%92amazon-s3%E3%81%AB%E5%A4%89%E6%9B%B4\"></a>Herokuでの画像の保存先をAmazon
      S3に変更</h3><div data-lang=\"yml\">config/storage.yml<pre>amazon:\r\n  # 以下3行はそのまま\r\n
      \ service: S3\r\n  access_key_id: &lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;\r\n  secret_access_key: &lt;%= Rails.application.credentials.dig(:aws,
      :secret_access_key) %&gt;\r\n  # 以下２行は変える\r\n  region: ap-northeast-1 #東京\r\n
      \ bucket: my-rails-app-first-bucket #自分で作成したS3のバケットの名前\r\n\r\n</pre></div><div
      data-lang=\"ruby\">config/environments/production.rb<pre>config.active_storage.service
      = :amazon #amazonに変更</pre></div><h2><a href=\"https://qiita.com/hmmrjn/items/479c9e9ce82771f1b6d7#%E6%9C%80%E5%BE%8C%E3%81%ABheroku%E3%81%A7%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"></a>最後に、Herokuでやること</h2><div
      data-lang=\"shell\"><pre>$ heroku buildpacks:add -i 1 https://github.com/heroku/heroku-buildpack-activestorage-preview\r\n$
      git add .\r\n$ git commit -m &quot;added s3 to production&quot;\r\n$ git push
      heroku master</pre></div><p>Railsプロジェックトのマスターキー(config/master.keyの中身)をコピーします</p><div
      data-lang=\"shell\"><pre>$ heroku config:set RAILS_MASTER_KEY=マスターキーをここに貼り付け\r\n$
      heroku run rails db:migrate\r\n$ heroku open</pre></div><p>これで以上です。<img data-fr-image-pasted=\"true\"
      alt=\":tada:\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f389.png\"
      title=\":tada:\" width=\"20\" class=\"fr-fic fr-dii\">&nbsp;<br>お疲れ様です〜<img
      data-fr-image-pasted=\"true\" alt=\":coffee:\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/2615-fe0f.png\"
      title=\":coffee:\" width=\"20\" class=\"fr-fic fr-dii\"></p></section>"
    - '2018-12-01 08:35:25.349434'
    - '2018-12-01 08:35:25.349434'
  - - 83
    - テスト
    - "<p>cdsvsv</p>"
    - '2018-12-08 08:15:44.877330'
    - '2018-12-08 08:15:44.877330'
  - - 84
    - rails5.2 Bootstrapとclearance 導入
    - "<h1 style=\"text-align: center;\"><span style=\"color: rgb(184, 49, 47);\">認証(クリアランス)
      と bootstrap</span></h1><p><span style=\"font-size: 30px;\">前提 jqueryを入れている(bootstrapはjqueryが必要)</span></p><p><br></p><p><strong>1.gemのインストール</strong></p><pre>Gemfile\r\n...\r\ngem
      &#39;clearance&#39;\r\ngem &#39;bootstrap-sass&#39;\r\n# <span style=\"color:
      rgb(250, 197, 28);\">gem &#39;sass-rails&#39;</span>は入れたらダメ！bootstrap-sassと対立する</pre><p><code>bundle
      install</code></p><p><strong><br></strong></p><p><strong>2. bootstrapのcssを読み込む</strong></p><pre><code>#assets/stylesheets/application.scss\r\n...\r\n@import
      &#39;bootstrap-sprockets&#39;;\r\n@import &#39;bootstrap&#39;;</code></pre><p><strong>bootstrapのjsを読み込む</strong></p><pre>#assetes/javascripts/application.js\r\n...\r\n//=
      require bootstrap-sprockets</pre><p><span style=\"font-family: Impact,Charcoal,sans-serif;\"><span
      style=\"font-size: 30px;\">以上でbootstrapは終了</span><span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style='background: url(\"https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg\");
      font-size: 30px;'>&nbsp;</span></span></p><p><span style=\"font-family: Impact,Charcoal,sans-serif;\">&nbsp;</span></p><p><br></p><p><strong>3.クリアランスの設定ファイルをインストールする(deviseの導入と同じ要領)</strong></p><pre><code>rails
      generate clearance:install</code></pre><p><br></p><p>端末に以下のログが確認できるはず</p><pre><code>create
      \ config/initializers/clearance.rb\r\n      insert  app/controllers/application_controller.rb\r\n
      \     create  app/models/user.rb\r\n      create  db/migrate/20161231132513_create_users.rb\r\n\r\n*******************************************************************************\r\n\r\nNext
      steps:\r\n\r\n1. Configure the mailer to create full URLs in emails:\r\n\r\n
      \   # config/environments/{development,test}.rb\r\n    config.action_mailer.default_url_options
      = { host: &#39;localhost:3000&#39; }\r\n\r\n    In production it should be your
      app&#39;s domain name.\r\n\r\n2. Display user session and flashes. For example,
      in your application layout:\r\n\r\n    &lt;% if signed_in? %&gt;\r\n      Signed
      in as: &lt;%= current_user.email %&gt;\r\n      &lt;%= button_to &#39;Sign out&#39;,
      sign_out_path, method: :delete %&gt;\r\n    &lt;% else %&gt;\r\n      &lt;%=
      link_to &#39;Sign in&#39;, sign_in_path %&gt;\r\n    &lt;% end %&gt;\r\n\r\n
      \   &lt;div id=&quot;flash&quot;&gt;\r\n      &lt;% flash.each do |key, value|
      %&gt;\r\n        &lt;div class=&quot;flash &lt;%= key %&gt;&quot;&gt;&lt;%=
      value %&gt;&lt;/div&gt;\r\n      &lt;% end %&gt;\r\n    &lt;/div&gt;\r\n\r\n3.
      Migrate:\r\n\r\n    rake db:migrate\r\n\r\n*******************************************************************************\r\n</code></pre><p><br></p><p><strong>4.
      step1. environmentの　development.rb / test.rb にて email中にURLを生成するために必要なメイラーの設定を行う(production.rbでは自分のドメインの記載が必要になる)</strong></p><pre><code>#config/environments/development.rb\r\n...\r\n
      \ config.action_mailer.default_url_options = { host: &#39;localhost:3000&#39;
      }</code>\r\n<code>  # config.action_mailer.default_url_options = { host: &#39;localhost&#39;,
      port: 3000 } でも良い\r\n...\r\n</code></pre><p><br></p><p><strong>step2. アプリケーションのレイアウトに,
      セッションとフラッシュの表示機能を実装する</strong></p><p><code>&lt;% if signed_in? %&gt;<br>&nbsp;
      &nbsp; &nbsp; Signed in as: &lt;%= current_user.email %&gt;<br>&nbsp; &nbsp;
      &nbsp; &lt;%= button_to &#39;Sign out&#39;, sign_out_path, method: :delete %&gt;<br>&nbsp;
      &nbsp; &lt;% else %&gt;<br>&nbsp; &nbsp; &nbsp; &lt;%= link_to &#39;Sign in&#39;,
      sign_in_path %&gt;<br>&nbsp; &nbsp; &lt;% end %&gt;<br><br>&nbsp; &nbsp; &lt;div
      id=&quot;flash&quot;&gt;<br>&nbsp; &nbsp; &nbsp; &lt;% flash.each do |key, value|
      %&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &lt;div class=&quot;flash &lt;%= key %&gt;&quot;&gt;&lt;%=
      value %&gt;&lt;/div&gt;<br>&nbsp; &nbsp; &nbsp; &lt;% end %&gt;<br>&nbsp; &nbsp;
      &lt;/div&gt;</code></p><p><br></p><p>セッション表示の例 (bootstrapを使って好きに作ってよし!!)</p><pre><code>#views/layouts/_navigation.html.erb\r\n\r\n&lt;nav
      class=&quot;navbar navbar-default&quot;&gt;\r\n  &lt;div class=&quot;container-fluid&quot;&gt;\r\n
      \   &lt;!-- Brand and toggle get grouped for better mobile display --&gt;\r\n
      \   &lt;div class=&quot;navbar-header&quot;&gt;\r\n      &lt;button type=&quot;button&quot;
      class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbar-collapse&quot;
      aria-expanded=&quot;false&quot;&gt;\r\n        &lt;span class=&quot;sr-only&quot;&gt;Toggle
      navigation&lt;/span&gt;\r\n        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;\r\n
      \       &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;\r\n        &lt;span
      class=&quot;icon-bar&quot;&gt;&lt;/span&gt;\r\n      &lt;/button&gt;\r\n   
        &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;ようこそブログへ!!</code><code>&lt;/a&gt;\r\n
      \   &lt;/div&gt;\r\n    &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbar-collapse&quot;&gt;\r\n
      \   &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;\r\n          &lt;li&gt;&lt;%=
      link_to &#39;Home&#39;, root_path %&gt;&lt;/li&gt;\r\n                <span
      style=\"color: rgb(184, 49, 47);\">&lt;% if signed_in? %&gt;\r\n           
          &lt;li&gt;&lt;%= link_to &#39;新規投稿&#39;, new_article_path %&gt;&lt;/li&gt;\r\n
      \               &lt;li&gt;Signed in as: &lt;%= current_user.email %&gt;&lt;/li&gt;\r\n 
                    &lt;li&gt;&lt;%= link_to &#39;ログアウト&#39;, sign_out_path, method:
      :delete %&gt;&lt;/li&gt;\r\n              &lt;% else %&gt;\r\n             
        &lt;li&gt;&lt;%= link_to &#39;ログイン&#39;, sign_in_path %&gt;&lt;/li&gt;\r\n 
                  &lt;% end %&gt;</span>\r\n    &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n
      \ &lt;/div&gt;\r\n&lt;/nav&gt;\r\n</code></pre><p><br></p><p>フラッシュの例</p><pre><code>#views/layouts/application.html.erb\r\n\r\n&lt;!DOCTYPE
      html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;マイブログ&lt;/title&gt;\r\n
      \   &lt;%= csrf_meta_tags %&gt;\r\n\r\n    &lt;%= stylesheet_link_tag    &#39;application&#39;,
      media: &#39;all&#39;, &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&gt;\r\n
      \   &lt;%= javascript_include_tag &#39;application&#39;, &#39;data-turbolinks-track&#39;:
      &#39;reload&#39; %&gt;\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n    <span
      style=\"color: rgb(44, 130, 201);\">&lt;%= render &quot;layouts/navigation&quot;
      %&gt;</span>\r\n    <span style=\"color: rgb(184, 49, 47);\">&lt;div id=&quot;flash&quot;&gt;\r\n
      \     &lt;% flash.each do |key, value| %&gt;\r\n        &lt;div class=&quot;flash
      &lt;%= key %&gt;&quot;&gt;&lt;%= value %&gt;&lt;/div&gt;\r\n      &lt;% end
      %&gt;\r\n    &lt;/div&gt;</span>\r\n    &lt;div class=&quot;container-fluid&quot;&gt;\r\n
      \     &lt;%= yield %&gt;\r\n    &lt;/div&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre><p><br></p><p><strong>step3
      <code>rails generate clearance:install</code> を行ってuserモデルが生成されたので、マイグレーションファイルを生成する</strong></p><pre>rake
      db:migrate</pre><p><br></p><p>以上でクリアランスの設定終了</p><p>認証のviewをいじったり、認証のルートを変えたり、ボットを入れたりしたい場合は<a
      href=\"https://github.com/thoughtbot/clearance\">こちら</a>で詳しい内容をご確認ください</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-08 15:29:09.337574'
    - '2018-12-08 15:33:59.727341'
  - - 85
    - rails5.2 jqueryとfontawesomeの導入
    - "<h1 style=\"text-align: center;\">Railsにfontawesomeとjqueryを導入</h1><p><strong><span
      style=\"font-size: 24px;\">fontawesome 4.4.0の導入</span></strong></p><pre>#application.html.erb\r\n&lt;head&gt;\r\n&lt;title&gt;my_project&lt;/title&gt;\r\n&lt;%=
      csrf_meta_tags %&gt;\r\n&lt;%= csp_meta_tag %&gt;\r\n...\r\n<span style=\"color:
      rgb(226, 80, 65);\">&lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.4.0/css/font-awesome.min.css&quot;
      rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;</span>\r\n...\r\n&lt;%=
      stylesheet_link_tag    &#39;application&#39;, media: &#39;all&#39;, &#39;data-turbolinks-track&#39;:
      &#39;reload&#39; %&gt;\r\n&lt;%= javascript_include_tag &#39;application&#39;,
      &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&gt;\r\n&lt;/head&gt;\r\n...</pre><p
      style=\"text-align: center;\"><span style=\"font-family: Impact, Charcoal, sans-serif;
      font-size: 30px;\">CNDを一行記述すればfontawesome導入終了！！</span></p><p data-empty=\"true\"><br></p><p
      data-empty=\"true\"><strong><span style=\"font-size: 24px;\">次にjquery導入!!</span></strong></p><p
      data-empty=\"true\"><strong>step1</strong></p><pre>#Gemfile\r\n...\r\n<strong>gem
      &#39;jquery-rails&#39;</strong></pre><pre>$ bundle install</pre><p><br></p><p>step2</p><p><strong>jqueryのjs読み込み</strong></p><pre>#assets/javascripts/application.js\r\n...\r\n//=
      require jquery\r\n//= require jquery_ujs</pre><p><br></p><p>なんと</p><p style=\"text-align:
      center;\"><span style=\"font-family: Impact, Charcoal, sans-serif; font-size:
      30px;\">これだけでjquery読み込み終了！！</span></p><p><span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>&nbsp;</p><p
      style=\"text-align: center;\"><br></p><p><br></p><p><br></p><p><br></p><p>ちなみに...</p><p><br></p><p>gemでfontawesomeを使う人は...</p><p><br></p><pre>#Gemfile\r\n<code>gem
      &#39;font-awesome-rails&#39;</code></pre><p><code>$ bundle install</code></p><p><br></p><p>app/assets/stylesheet/application.scss</p><pre><code>@import
      &#39;font-awesome&#39;;</code></pre><p>これで終了!</p><p><br></p><pre><code>&lt;%=
      fa_icon &#39;star&#39; %&gt;</code></pre><p><i class=\"fa fa-star\"></i></p><p>的な感じで使える</p><p><br></p><p><br></p>"
    - '2018-12-08 15:55:53.848985'
    - '2018-12-08 16:12:26.043535'
  - - 86
    - Rails simple_formの導入
    - "<h1 style=\"text-align: center;\">simple_formを導入して簡単にフォームを作れる様にする</h1><p>1.</p><pre><code>#Gemfile\r\n...\r\ngem
      &#39;simple_form&#39;\r\n</code></pre><pre>$ bundle install</pre><p><br></p><p>step2
      simple_formの設定ファイルをインストール</p><pre>$ rails generate simple_form:install</pre><p><strong>Simple
      Formにbootstrapも適用したいいとはこちら！！</strong></p><pre>$ rails generate simple_form:install
      --bootstrap</pre><p><br></p><p>使い方は<a href=\"https://remonote.jp/rails-simple_form-bootstrap\">こちらの方</a>や<a
      href=\"https://qiita.com/Inp/items/4f72918c2fba0d3a8809\">こちらの方</a>が見やすいです</p><p><br></p><p><strong>formを作る</strong></p><pre><code>#
      _form.html.erb\r\n\r\n&lt;%= simple_form_for (@article) do |f| %&gt;\r\n  &lt;%
      if @article.errors.any? %&gt;\r\n    &lt;div id=&quot;error_explanation&quot;&gt;\r\n
      \     &lt;h2&gt;\r\n        &lt;%= &quot;#{pluralize(@article.errors.count,
      &quot;error&quot;)}個のエラーで保存ができません&quot; %&gt;\r\n      &lt;/h2&gt;\r\n      &lt;ul&gt;\r\n
      \       &lt;% @article.errors.full_messages.each do |msg| %&gt;\r\n          &lt;li&gt;\r\n
      \           &lt;%= msg %&gt;\r\n          &lt;/li&gt;\r\n          &lt;% end
      %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;% end %&gt;\r\n\r\n
      \ &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input :title, label:
      &quot;タイトル&quot; %&gt;\r\n  &lt;/div&gt;</code>\r\n\r\n<code><code>  &lt;div
      class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input :body, label: &quot;内容&quot;
      %&gt;\r\n  &lt;/div&gt;</code>\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n
      \   &lt;%= f.input :image, as: :file, class: &quot;form-control&quot; %&gt;\r\n
      \ &lt;/div&gt;\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.button
      :submit %&gt;\r\n  &lt;/div&gt;\r\n</code></pre><p>&nbsp;</p><p>formのcssを作る(自分の好きなレイアウトに)</p><pre>#stylesheets/form.scss\r\n.simple_form
      {\r\nlabel {\r\nmargin: 2px 10px;\r\n&amp;.radio, &amp;.checkbox {\r\nfloat:
      none;\r\nmargin: 0;\r\nwidth: auto;\r\ntext-align: left;\r\n}\r\n&amp;.checkbox
      {\r\ndisplay: block;\r\n}\r\n&amp;.radio { margin-right: 10px; }\r\n}\r\ndiv.input
      { margin-bottom: 10px;}\r\ninput.radio_buttons, input.check_boxes {\r\nmargin-right:
      5px;\r\n}\r\n.alert-error {\r\ncolor: #D00;\r\nmargin-bottom: 10px;\r\nfont-weight:
      bold;\r\n}\r\n.hint, .error {\r\nclear: left;\r\nfont-size: 12px;\r\ncolor:
      #D00;\r\ndisplay: block;\r\n}\r\n.hint {\r\ncolor: #555;\r\nfont-style: italic;\r\n}\r\n}</pre><p><br></p><p>simple_formを使えば記述は多少少なくなるけど、正直、あまり導入しなくてもいいかなって感じではある...</p><p><br></p><p>こっちの方が個人的には好き</p><p><br></p><pre>#_form.html.erb\r\n\r\n&lt;%=
      form_with(model: post, local: true) do |form| %&gt;\r\n&lt;% if post.errors.any?
      %&gt;\r\n&lt;div id=&quot;error_explanation&quot;&gt;\r\n&lt;h2&gt;&lt;%= pluralize(post.errors.count,
      &quot;error&quot;) %&gt; 保存できません&lt;/h2&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;% post.errors.full_messages.each
      do |message| %&gt;\r\n&lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;\r\n&lt;% end
      %&gt;\r\n&lt;/ul&gt;\r\n&lt;/div&gt;\r\n&lt;% end %&gt;\r\n\r\n&lt;div class=&quot;field&quot;&gt;\r\n&lt;%=
      form.label :title %&gt;\r\n&lt;%= form.text_field :title, class: &#39;form-control&#39;
      %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class=&quot;field&quot;&gt;\r\n&lt;%= form.label
      :body %&gt;\r\n&lt;%= form.text_field :body, class: &#39;form-control&#39; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;field&quot;&gt;\r\n&lt;%= form.label :image %&gt;\r\n&lt;%= form.file_field
      :image, class: &#39;form-control&#39; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class=&quot;actions&quot;&gt;\r\n&lt;%=
      form.submit &#39;更新する&#39;, class: &#39;btn btn-block btn-success&#39; %&gt;\r\n&lt;/div&gt;\r\n&lt;%
      end %&gt;</pre><pre>articles_controller\r\n\r\ndef new\r\n@article = Article.new\r\nend\r\n\r\ndef
      edit\r\n@article = Article.find(params[:id])\r\nend\r\n\r\ndef create\r\n  @article
      = Article.new(article_params)\r\n  if @article.save\r\n  flash[:notice] = &quot;作成に成功しました&quot;\r\n
      \ redirect_to article_path(@article)\r\n  else\r\n  flash[:alert] = &quot;エラーのより保存できませんでした&quot;\r\n
      \ render :new\r\n  end\r\nend\r\n\r\nprivate \r\n\r\ndef article_params\r\n
      \ params.require(:article).permit(:title, :body, :image)\r\nend\r\n\r\n</pre><pre>new.html.erb
      edit.html.erb\r\n&lt;%= render &#39;form&#39;, post: @article %&gt;</pre>"
    - '2018-12-08 16:03:39.791986'
    - '2018-12-08 16:51:33.031940'
  - - 87
    - wysiwyg-rails
    - "<h1 style=\"text-align: center;\">wysiwyg-railsの導入</h1><p><br></p><p><span
      style='font-family: \"Times New Roman\", Times, serif, -webkit-standard; font-size:
      30px;'>前提: bootstrap, &nbsp;fontawesome が入っている</span></p><p><br></p><p>1. gemのインストール</p><pre><code>#Gemfile\r\n...\r\ngem
      &#39;wysiwyg-rails&#39;\r\n</code></pre><p><code>bundle install</code></p><p><br></p><p>2.
      wysiwyg-railsのjsを読み込む</p><p>(最低限)</p><pre><code>#app/assets/javascripts/application.js\r\n...\r\n//=
      require froala_editor.min.js\r\n...\r\n</code></pre><p><br></p><p>他にも自分が使いたい機能に合わせてjsを読み込もう!!
      (それぞれがなのを表すかは<a class=\"fr-strong\" href=\"https://www.froala.com/wysiwyg-editor/docs/framework-plugins/rails\">公式ドキュメント</a>をチェック!!)</p><p><br></p><p>下は私の例</p><pre><code>#app/assets/stylesheets/application.scss\r\n\r\n...\r\n//=
      require froala_editor.min.js\r\n//= require plugins/align.min.js\r\n//= require
      plugins/char_counter.min.js\r\n//= require plugins/code_beautifier.min.js\r\n//=
      require plugins/code_view.min.js\r\n//= require plugins/colors.min.js\r\n//=
      require plugins/emoticons.min.js\r\n//= require plugins/entities.min.js\r\n//=
      require plugins/file.min.js\r\n//= require plugins/font_family.min.js\r\n//=
      require plugins/font_size.min.js\r\n//= require plugins/fullscreen.min.js\r\n//=
      require plugins/help.min.js\r\n//= require plugins/image.min.js\r\n//= require
      plugins/image_manager.min.js\r\n//= require plugins/inline_style.min.js\r\n//=
      require plugins/line_breaker.min.js\r\n//= require plugins/link.min.js\r\n//=
      require plugins/lists.min.js\r\n//= require plugins/paragraph_format.min.js\r\n//=
      require plugins/paragraph_style.min.js\r\n//= require plugins/print.min.js\r\n//=
      require plugins/quick_insert.min.js\r\n//= require plugins/quote.min.js\r\n//=
      require plugins/save.min.js\r\n//= require plugins/table.min.js\r\n//= require
      plugins/special_characters.min.js\r\n//= require plugins/url.min.js\r\n//= require
      plugins/video.min.js\r\n//= require activestorage\r\n//= require third_party/image_aviary.min.js\r\n//=
      require third_party/spell_checker.min.js\r\n//= require languages/ja.js\r\n
      ...\r\n</code></pre><p><br></p><p>3. wysiwyg-railsのcssを読み込む</p><p>(最低限)</p><pre><code>#app/assets/stylesheets/application.scss\r\n\r\n...\r\n
      @import &#39;froala_editor.min.css&#39;;\r\n @import &#39;froala_style.min.css&#39;;\r\n
      ...\r\n</code></pre><p><br></p><p>下は私の例</p><pre>@import &#39;form&#39;;\r\n@import
      &#39;froala_editor.min.css&#39;;\r\n@import &#39;froala_style.min.css&#39;;\r\n@import
      &#39;plugins/char_counter.min.css&#39;;\r\n@import &#39;plugins/code_view.min.css&#39;;\r\n@import
      &#39;plugins/colors.min.css&#39;;\r\n@import &#39;plugins/emoticons.min.css&#39;;\r\n@import
      &#39;plugins/file.min.css&#39;;\r\n@import &#39;plugins/fullscreen.min.css&#39;;\r\n@import
      &#39;plugins/help.min.css&#39;;\r\n@import &#39;plugins/image_manager.min.css&#39;;\r\n@import
      &#39;plugins/image.min.css&#39;;\r\n@import &#39;plugins/line_breaker.min.css&#39;;\r\n@import
      &#39;plugins/quick_insert.min.css&#39;;\r\n@import &#39;plugins/special_characters.min.css&#39;;\r\n@import
      &#39;plugins/table.min.css&#39;;\r\n@import &#39;plugins/video.min.css&#39;;\r\n@import
      &#39;bootstrap-sprockets&#39;;\r\n@import &#39;bootstrap&#39;;\r\n@import &#39;third_party/spell_checker.min.css&#39;;\r\n//
      @import &#39;languages/ja.css&#39;; これを入れるとerrorになったのでコメントしました\r\n// @import
      &#39;third_party/embedly.min.css&#39;; embedlyは最近になってapikeyを有料で取得しなければならなくなったみたい...
      <a href=\"http://embed.ly/pricing\">http://embed.ly/pricing</a>\r\n\r\n</pre><p><br></p><p>4.
      コントローラ作成</p><pre><code>#app/controllers/articles_controller.rb\r\n\r\nclass
      ArticlesController &lt; ApplicationController\r\n  before_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\n  before_action :require_login, except:
      [:index, :show]</code>\r\n\r\n<code>  # 一覧 \r\n  def index\r\n    @articles
      = Article.all\r\n  end\r\n  </code>\r\n<code>  # 新規\r\n  def new\r\n    @article
      = Article.new\r\n  end\r\n\r\n  # 作成\r\n  def create\r\n    @article = Article.new(article_params)\r\n
      \   if @article.save\r\n      flash[:notice] = &quot;作成されました&quot;\r\n      redirect_to
      article_path(@article)\r\n    else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n
      \     render :new\r\n    end\r\n  end\r\n\r\n  # 編集\r\n  def edit\r\n  end\r\n\r\n 
      # 更新\r\n  def update\r\n    if @article.update_attributes(article_params)\r\n 
          flash[:notice] = &quot;更新されました&quot;\r\n      redirect_to article_path(@article)\r\n
      \   else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :edit\r\n
      \   end\r\n  end\r\n\r\n  # 詳細\r\n  def show\r\n  end\r\n\r\n  # 削除\r\n  def
      destroy\r\n    if @article.destroy\r\n      flash[:notice] = &quot;削除されました&quot;\r\n
      \     redirect_to articles_path\r\n    else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n
      \   end\r\n  end\r\n\r\n  private\r\n\r\n  def article_params\r\n    params.require(:article).permit(:title,
      :body)\r\n  end\r\n\r\n  def find_article\r\n    @article = Article.find(params[:id])\r\n
      \ end\r\nend\r\n</code></pre><p>ここで</p><p><code>before_action :require_login</code>
      は, clearanceという認証システムのメソッドです。</p><p>deviseでいう</p><p><code>before_action :authenticate_user!</code>
      と同じです</p><p>認証システムを導入してない方はシカトして結構です</p><p><br></p><p>4. view( <span style=\"color:
      rgb(226, 80, 65);\">index.html.erb, new.html.erb, show.html.erb, _form.html.erb,
      edit.html.erb&nbsp;</span>)を作る</p><p><br></p><p><span style=\"font-size: 24px;\">_form.html.erb</span></p><pre><code>#app/views/articles/_form.html.erb\r\n</code>\r\n<code>#
      simple_formを導入してない方は普通に form_with とか form_for で好きな様に作ってもらってOK!</code>\r\n<code>\r\n&lt;%=
      simple_form_for (@article) do |f| %&gt;\r\n  &lt;% if @article.errors.any? %&gt;\r\n
      \   &lt;div id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;\r\n   
          &lt;%= &quot;#{pluralize(@article.errors.count, &quot;error&quot;)} によりこの投稿は保存されませんでした&quot;
      %&gt;\r\n      &lt;/h2&gt;\r\n      &lt;ul&gt;\r\n        &lt;% @article.errors.full_messages.each
      do |msg| %&gt;\r\n          &lt;li&gt;\r\n            &lt;%= msg %&gt;\r\n          &lt;/li&gt;\r\n
      \         &lt;% end %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;%
      end %&gt;\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input
      :title, class: &quot;form-control&quot; %&gt;\r\n  &lt;/div&gt;\r\n\r\n  &lt;div
      class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.label :body %&gt;\r\n    &lt;%=
      f.text_area :body, <span style=\"color: rgb(250, 197, 28);\">id: &quot;wysiwyg&quot;</span>
      %&gt;\r\n  &lt;/div&gt;\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n
      \   &lt;%= f.button :submit %&gt;\r\n  &lt;/div&gt;\r\n&lt;% end %&gt;\r\n&lt;!--
      script for FROALA-WYSIWYG --&gt;\r\n<span style=\"color: rgb(209, 72, 65);\">&lt;script&gt;\r\n
      \ $(&#39;</span><span style=\"color: rgb(250, 197, 28);\">#wysiwyg</span><span
      style=\"color: rgb(209, 72, 65);\">&#39;).froalaEditor({\r\n    inlineMode:
      false,\r\n    heightMin: &#39;200px&#39;,\r\n    toolbarButtons: [&#39;bold&#39;,
      &#39;italic&#39;, &#39;underline&#39;],</span></code><span style=\"color: rgb(209,
      72, 65);\">\r\n<code>    </code>language: &#39;ja&#39;,</span><code><span style=\"color:
      rgb(209, 72, 65);\">\r\n  })\r\n&lt;/script&gt;</span>\r\n</code></pre><p>ここで,
      私のjs,cssを真似た人は</p><p><code>&lt;script&gt;<br>&nbsp; $(&#39;#wysiwyg&#39;).froalaEditor({<br>&nbsp;
      &nbsp; inlineMode: false,<br>&nbsp; &nbsp; heightMin: &#39;200px&#39;,<br>&nbsp;
      &nbsp; toolbarButtons: [&#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;],<br>&nbsp;
      })<br>&lt;/script&gt;</code> の部分は</p><p><span style=\"color: rgb(84, 172, 210);\">&lt;script&gt;<br>$(function()
      {<br>$(&#39;#wysiwyg&#39;).froalaEditor({<br>language: &#39;ja&#39;,<br>heightMin:
      500,<br>heightMax: 1000,<br>})<br>});<br>&lt;/script&gt;</span></p><p>に置き換えてください(jsとcssで読み込んだボタンと機能が勝手に適用されます!!)</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1544360831786-editor.png\"
      style=\"width: 900px; height: 100px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>ちなみに、</p><p><span
      style=\"color: rgb(235, 107, 86);\">&lt;!-- &lt;script&gt;<br>$(function() {<br>$(&#39;#wysiwyg&#39;).froalaEditor({<br>toolbarButtons:
      [&#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;strikeThrough&#39;,
      &#39;color&#39;, &#39;|&#39;, &#39;paragraphFormat&#39;, &#39;align&#39;, &#39;undo&#39;,
      &#39;redo&#39;, &#39;html&#39;],<br>colorsBackground: [<br>&#39;#15E67F&#39;,
      &#39;#E3DE8C&#39;, &#39;#D8A076&#39;, &#39;#D83762&#39;, &#39;#76B6D8&#39;,
      &#39;REMOVE&#39;,<br>&#39;#1C7A90&#39;, &#39;#249CB8&#39;, &#39;#4ABED9&#39;,
      &#39;#FBD75B&#39;, &#39;#FBE571&#39;, &#39;#FFFFFF&#39;<br>],<br>colorsDefaultTab:
      &#39;background&#39;,<br>colorsStep: 6,<br>colorsText: [<br>&#39;#15E67F&#39;,
      &#39;#E3DE8C&#39;, &#39;#D8A076&#39;, &#39;#D83762&#39;, &#39;#76B6D8&#39;,
      &#39;REMOVE&#39;,<br>&#39;#1C7A90&#39;, &#39;#249CB8&#39;, &#39;#4ABED9&#39;,
      &#39;#FBD75B&#39;, &#39;#FBE571&#39;, &#39;#FFFFFF&#39;<br>]<br>})<br>});<br>&lt;/script&gt;
      --&gt;</span></p><p>みたいに一個一個指定して使いたい方はjsやcssで読み込まなくて良いです</p><p><br></p><p><span
      style=\"font-size: 24px;\">new.html.erb</span></p><pre><code>#app/views/articles/new.html.erb\r\n\r\n&lt;h2&gt;新規投稿&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot; %&gt;\r\n</code></pre><h4><br></h4><p><span
      style=\"font-size: 24px;\">edit.html.erb</span></p><pre><code>#app/views/articles/edit.html.erb\r\n\r\n&lt;h2&gt;編集ページ&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot; %&gt;</code></pre><p><br></p><p><span style=\"font-size:
      24px;\">index.html.erb</span></p><pre><code>#app/views/articles/index.html.erb\r\n\r\n&lt;div
      class=&quot;container&quot;&gt;\r\n  &lt;div class=&quot;col-sm-10 col-sm-offset-2
      col-xs-12&quot;&gt;\r\n    &lt;% @articles.each do |article| %&gt;\r\n    &lt;div
      class=&quot;col-xs-12 text-center&quot;&gt;\r\n      &lt;div class=&quot;text-center&quot;&gt;\r\n
      \       &lt;h2&gt;&lt;%= article.title %&gt;&lt;/h2&gt;\r\n        &lt;h6&gt;&lt;%=
      article.created_at.strftime(&#39;%b %d, %Y&#39;) %&gt;&lt;/h6&gt;\r\n      &lt;/div&gt;\r\n
      \     &lt;div&gt;\r\n        &lt;%= raw(article.body).truncate(300) %&gt;\r\n
      \     &lt;/div&gt;\r\n      &lt;div class=&quot;text-center&quot;&gt;\r\n   
          &lt;%= link_to &quot;詳細へ&quot;, article_path(article) %&gt;\r\n      &lt;/div&gt;\r\n
      \     &lt;!-- This block is available to only signed in users --&gt;\r\n      &lt;%
      if signed_in? %&gt;\r\n        &lt;%= link_to &quot;一覧&quot;, article_path(article),
      class: &quot;btn btn-primary&quot; %&gt;\r\n        &lt;%= link_to &quot;編集&quot;,
      edit_article_path(article), class: &quot;btn btn-default&quot; %&gt;\r\n   
          &lt;%= link_to &quot;削除&quot;, article_path(article), class: &quot;btn btn-danger&quot;,
      data: {:confirm =&gt; &quot;削除してもいいですか?&quot;}, method: :delete %&gt;\r\n      &lt;%
      end %&gt;\r\n      &lt;hr /&gt;\r\n    &lt;/div&gt;\r\n    &lt;% end %&gt;\r\n
      \ &lt;/div&gt;\r\n&lt;/div&gt;\r\n</code></pre><h4><br></h4><p><span style=\"font-size:
      24px;\">show.html.erb</span></p><pre><code>#app/views/articles/show.html.erb\r\n\r\n&lt;div
      class=&quot;col-sm-11 <code>col-sm-offset-1</code> col-xs-12&quot;&gt;\r\n  &lt;h2
      class=&quot;text-center&quot;&gt;&lt;%= @article.title %&gt;&lt;/h2&gt;\r\n
      \ &lt;h5 class=&quot;text-center&quot;&gt;&lt;%= @article.created_at.strftime(&#39;%b
      %d, %Y&#39;) %&gt;&lt;/h5&gt;\r\n  &lt;div class=&quot;<span style=\"color:
      rgb(250, 197, 28);\">fr-view</span>&quot;&gt;&lt;%= raw @article.body %&gt;&lt;/div&gt;\r\n&lt;/div&gt;\r\n</code></pre><p>ここで,
      Froala-WYSIWYG &nbsp;はクラス名に <span style=\"color: rgb(184, 49, 47);\">fr-view</span>
      を付与しないと エディターのビューのUIとして出力されません。</p><p>5. ルートを作る</p><pre><code>#config/routes.rb\r\n\r\nRails.application.routes.draw
      do\r\n  root to: &quot;articles#index&quot;\r\n  resources :articles\r\nend\r\n</code></pre><p><br></p><p>6.
      modelを作る</p><pre>$ rails generate model Article title:string body:text\r\n$
      rake db:migrate</pre><p><br></p><p>導入はこれで終わり！！</p><p>参考url <a href=\"https://www.codementor.io/kingsleysilas/how-to-build-a-blog-using-froala-wysiwyg-v86wyapnb#comments-v86wyapnb\">素晴らしい参考文献</a><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f601.svg);\">&nbsp;</span>&nbsp;</p><p>最高のエディターライフを!!<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60e.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60f.svg);\">&nbsp;</span></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-09 13:39:12.364198'
    - '2018-12-09 13:43:37.114850'
  - - 88
    - rails5.2 Active Storage
    - "<h1 style=\"text-align: center;\">Active Storageの導入</h1><p>今までは画像やファイルを保存したいときは、paperclipを使っていましたが、rails5.2からはactive
      storageが推奨されている様です。</p><p>そして腰抜かすくらい簡単に</p><p>導入できてしまいます<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60f.svg);\">&nbsp;</span>&nbsp;</p><p><br></p><p>早速やっていきます!!</p><p><br></p><p><span
      style=\"font-size: 30px;\">1. active_storageのインストール</span></p><pre>$ rails active_storage:install\r\n$
      rails db:migrate</pre><p>active_storageの設定ファイルをインストールした後、マイグレーションを実行することで<code>active_storage_blobs</code>と<code>active_storage_attachments</code>という名前のテーブルが2つ生成されます。</p><p><code>Blob</code>はファイル名、ファイルの種類、バイト数、誤り検出符号などのメタデータを保持するモデルで、<code>Attachment</code>モデルは、BlobオブジェクトとActive
      Recordオブジェクトを紐付けるための中</p><p>テーブルですが、全くいじる必要のないモデルなので、特に覚えなくても結構です。</p><p><br></p><p><span
      style=\"font-size: 30px;\">2. model生成</span></p><pre>$ rails g model Article
      title:string body: text\r\n$ rails db:migrate</pre><p><br></p><p><span style=\"font-size:
      30px;\">3. 実装</span></p><h2><br>1つの添付ファイルの場合</h2><p><br></p><p><span style=\"font-size:
      18px;\">article.rb</span></p><pre># article.rb\r\nclass Article &lt; ApplicationRecord\r\n
      \ has_one_attached :image \r\nend</pre><p><code>:image</code>はファイルの呼び名で、<code>:photo</code>、<code>:avatar</code>、<code>:profile</code>など、好きなものを指定してください。</p><p>ここで指定した
      image は、<span style=\"font-size: 24px; background-color: rgb(247, 218, 100);\">articlesテーブルのカラムの様な扱いになります</span>が、imageテーブルなどを作る必要はないです。Active
      Storageは裏側で<code>Blob</code>と<code>Attachment</code>モデルを使って、勝手に</p><p><code>article.image</code>を使えるようにしてくれます。</p><p><br></p><p><span
      style=\"font-size: 18px;\">articles_controller.rb</span></p><pre>class CommentsController
      &lt; ApplicationController\r\n  before_action :find_article, only: [:edit, :update,
      :show, :destroy]\r\n\r\n  def new\r\n    @article = Article.new\r\n  end\r\n\r\n
      \ def create\r\n    @article = Article.new(<span style=\"color: rgb(235, 107,
      86);\">article_params</span>)\r\n    if @article.save\r\n      flash[:notice]
      = &quot;保存しました&quot;\r\n      redirect_to article_path(@article)\r\n    else\r\n
      \     flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :new\r\n    end\r\n
      \ end\r\n\r\n  def show\r\n  end\r\n\r\n  def edit\r\n  end\r\n\r\n  def update\r\n
      \   if @article.update(<span style=\"color: rgb(235, 107, 86);\">article_params</span>)\r\n
      \     flash[:notice] = &quot;更新しました&quot;\r\n      redirect_to article_path(@article)\r\n
      \   else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :edit\r\n
      \   end\r\n  end\r\n\r\n  def destroy\r\n    if @article.destroy\r\n      flash[:notice]
      = &quot;削除しました&quot;\r\n      redirect_to articles_path\r\n    else\r\n      flash[:alert]
      = &quot;エラーが発生しました&quot;\r\n    end\r\n  end\r\n\r\n  # imageは、titleフィールドやbodyフィールドと同じ様に、articlesテーブルのカラムの様な扱いをする\r\n
      \ <span style=\"color: rgb(235, 107, 86);\">private\r\n  def article_params\r\n
      \   params.require(:article).permit(:title, :body, </span><span style=\"color:
      rgb(184, 49, 47);\"><span style=\"background-color: rgb(247, 218, 100);\">:image</span></span><span
      style=\"color: rgb(235, 107, 86);\">)\r\n  end</span>\r\n\r\n  def find_article\r\n
      \   @article = Article.find(params[:id])\r\n  end\r\n\r\nend</pre><p><br></p><p><span
      style=\"font-size: 18px;\">articles/_form.html.erb</span></p><pre>&lt;%= form_with
      model: article, local: true  do |f| %&gt;\r\n  &lt;% if @article.errors.any?
      %&gt;\r\n    &lt;div id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;&lt;%=
      &quot;#{pluralize(@article.errors.count, &quot;error&quot;)} により保存できませんでした&quot;
      %&gt;&lt;/h2&gt;\r\n      &lt;ul&gt;\r\n        &lt;% @article.errors.full_messages.each
      do |msg| %&gt;\r\n          &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;\r\n       
      &lt;% end %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;% end %&gt;\r\n\r\n
      \ &lt;%= f.text_area :title %&gt;&lt;br&gt;\r\n  &lt;%= <span style=\"color:
      rgb(243, 121, 52);\">f.file_field</span> <span style=\"color: rgb(243, 121,
      52);\">:image</span> %&gt;&lt;br&gt;\r\n  &lt;%= f.text_area :body %&gt;&lt;br&gt;\r\n
      \ &lt;%= f.submit %&gt;\r\n&lt;% end %&gt;</pre><p><br></p><p><span style=\"font-size:
      18px;\">new.html.erb</span></p><pre>&lt;h2&gt;新規投稿&lt;/h2&gt;\r\n&lt;%= render
      &quot;articles/form&quot;, artilce:@article %&gt;</pre><p><br></p><p><span style=\"font-size:
      18px;\">edit.html.erb</span></p><pre>&lt;h2&gt;編集&lt;/h2&gt;\r\n&lt;%= render
      &quot;articles/form&quot;, artilce:@article %&gt;</pre><p><br></p><p><span style=\"font-size:
      18px;\">show.html.erb</span></p><pre>&lt;div class=&quot;col-sm-11 col-sm-offset-1
      col-xs-12&quot;&gt;\r\n&lt;h2 class=&quot;text-center&quot;&gt;&lt;%= @article.title
      %&gt;&lt;/h2&gt;\r\n&lt;div class=&quot;text-center&quot;&gt;\r\n<span style=\"color:
      rgb(243, 121, 52);\">&lt;% if @article.image.attached? %&gt;\r\n&lt;%= image_tag
      @article.image</span><span style=\"color: rgb(0, 0, 0);\">, :alt =&gt; &quot;イメージ&quot;,
      width: &#39;30%&#39;, height: &#39;30%&#39;</span><span style=\"color: rgb(243,
      121, 52);\"> %&gt;\r\n&lt;% end %&gt;</span>\r\n&lt;/div&gt;\r\n&lt;h5 class=&quot;text-center&quot;&gt;&lt;%=
      @article.created_at.strftime(&#39;%b %d, %Y&#39;) %&gt;&lt;/h5&gt;\r\n&lt;div
      class=&quot;fr-view&quot;&gt;\r\n  &lt;%= raw @article.body %&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;</pre><p><span
      style=\"color: rgb(243, 121, 52);\">&lt;% if @article.image.attached? %&gt;<br>&lt;%=
      image_tag @article.image</span><span style=\"color: rgb(0, 0, 0);\">, :alt =&gt;
      &quot;イメージ&quot;, width: &#39;30%&#39;, height: &#39;30%&#39;</span><span style=\"color:
      rgb(243, 121, 52);\">&nbsp;%&gt;<br>&lt;% end %&gt;</span></p><p>の部分の <span
      style=\"color: rgb(0, 0, 0);\">:alt =&gt; &quot;イメージ&quot;, width: &#39;30%&#39;,
      height: &#39;30%&#39;は好きに変えてください。</span></p><p><span style=\"color: rgb(0, 0,
      0);\">これでactive_storageへの投稿、更新、削除が完成しました<span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><span
      style=\"color: rgb(0, 0, 0);\">しかし...active_storageは複数のファイルを保存することもできますので、そちらも紹介します。</span></p><h2><br>複数の添付ファイルの場合</h2><p><span
      style=\"font-size: 18px;\">article.rb</span></p><pre># article.rb\r\nclass Article
      &lt; ApplicationRecord\r\n  <span style=\"color: rgb(65, 168, 95);\"># has_one_attached
      :image</span>\r\n  <span style=\"color: rgb(41, 105, 176);\">has_many_attached
      :images</span>\r\nend</pre><p><br></p><p><span style=\"font-size: 18px;\">articles_controller.rb</span></p><pre>class
      CommentsController &lt; ApplicationController\r\n  before_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\n\r\n  def new\r\n    @article = Article.new\r\n
      \ end\r\n\r\n  def create\r\n    @article = Article.new(<span style=\"color:
      rgb(235, 107, 86);\">article_params</span>)\r\n    if @article.save\r\n      flash[:notice]
      = &quot;保存しました&quot;\r\n      redirect_to article_path(@article)\r\n    else\r\n
      \     flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :new\r\n    end\r\n
      \ end\r\n\r\n  def show\r\n  end\r\n\r\n  def edit\r\n  end\r\n\r\n  def update\r\n
      \   if @article.update(<span style=\"color: rgb(235, 107, 86);\">article_params</span>)\r\n
      \     flash[:notice] = &quot;更新しました&quot;\r\n      redirect_to article_path(@article)\r\n
      \   else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :edit\r\n
      \   end\r\n  end\r\n\r\n  def destroy\r\n    if @article.destroy\r\n      flash[:notice]
      = &quot;削除しました&quot;\r\n      redirect_to articles_path\r\n    else\r\n      flash[:alert]
      = &quot;エラーが発生しました&quot;\r\n    end\r\n  end\r\n\r\n  # imageは、titleフィールドやbodyフィールドと同じ様に、articlesテーブルのカラムの様な扱いをする\r\n
      \ <span style=\"color: rgb(235, 107, 86);\">private\r\n  def article_params\r\n 
        </span><span style=\"color: rgb(65, 168, 95);\"># params.require(:article).permit(:title,
      :body, :image)</span>\r\n<span style=\"color: rgb(235, 107, 86);\">    </span><span
      style=\"color: rgb(44, 130, 201);\">params.require(:article).permit(:title,
      :body, <span style=\"background-color: rgb(247, 218, 100);\">:images</span>)</span><span
      style=\"color: rgb(235, 107, 86);\">\r\n  end</span>\r\n\r\n  def find_article\r\n
      \   @article = Article.find(params[:id])\r\n  end\r\n\r\nend</pre><p><br></p><p><span
      style=\"font-size: 18px;\">articles/_form.html.erb</span></p><pre>&lt;%= form_with
      model: article, local: true  do |f| %&gt;\r\n  &lt;% if @article.errors.any?
      %&gt;\r\n    &lt;div id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;&lt;%=
      &quot;#{pluralize(@article.errors.count, &quot;error&quot;)} により保存できませんでした&quot;
      %&gt;&lt;/h2&gt;\r\n      &lt;ul&gt;\r\n        &lt;% @article.errors.full_messages.each
      do |msg| %&gt;\r\n          &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;\r\n        &lt;%
      end %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;% end %&gt;\r\n\r\n
      \ &lt;%= f.text_area :title %&gt;&lt;br&gt;\r\n<span style=\"color: rgb(65,
      168, 95);\">  &lt;!-- &lt;%= f.file_field :image %&gt;&lt;br&gt; --&gt;</span>\r\n
      \ <span style=\"color: rgb(44, 130, 201);\">&lt;%= f.file_field :images, multiple:
      true %&gt;&lt;br&gt;</span>\r\n  &lt;%= f.text_area :body %&gt;&lt;br&gt;\r\n
      \ &lt;%= f.submit %&gt;\r\n&lt;% end %&gt;</pre><p><br></p><p><span style=\"font-size:
      18px;\">show.html.erb</span></p><pre>&lt;div class=&quot;col-sm-11 col-sm-offset-1
      col-xs-12&quot;&gt;\r\n&lt;h2 class=&quot;text-center&quot;&gt;&lt;%= @article.title
      %&gt;&lt;/h2&gt;\r\n&lt;div class=&quot;text-center&quot;&gt;\r\n<span style=\"color:
      rgb(65, 168, 95);\">&lt;!-- &lt;% if @article.image.attached? %&gt;\r\n&lt;%=
      image_tag @article.image, :alt =&gt; &quot;イメージ&quot;, width: &#39;30%&#39;,
      height: &#39;30%&#39; %&gt;\r\n&lt;% end %&gt; --&gt;</span>\r\n<span style=\"color:
      rgb(44, 130, 201);\">&lt;% if @article.images.attached? %&gt;\r\n  &lt;% @article.images.each
      do |image| %&gt;\r\n    &lt;%= image_tag image %&gt; &lt;br&gt;\r\n  &lt;% end
      %&gt;\r\n&lt;% end %&gt;</span>\r\n\r\n&lt;/div&gt;\r\n&lt;h5 class=&quot;text-center&quot;&gt;&lt;%=
      @article.created_at.strftime(&#39;%b %d, %Y&#39;) %&gt;&lt;/h5&gt;\r\n&lt;div
      class=&quot;fr-view&quot;&gt;\r\n  &lt;%= raw @article.body %&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;</pre><p><br></p><p><span
      style=\"font-size: 18px;\">new.html.erb(変更なし)</span></p><pre>&lt;h2&gt;新規投稿&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot;, artilce:@article %&gt;</pre><p><br></p><p><span
      style=\"font-size: 18px;\">edit.html.erb<span style=\"font-size: 18px;\">(変更なし)</span></span></p><pre>&lt;h2&gt;編集&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot;, artilce:@article %&gt;</pre><p><br></p><p>THAT&#39;S
      ALL RIGHT!!</p><p><br></p><h1><span style=\"font-size: 30px;\">4.ファイルの保存先の変更</span></h1><p><br></p><p><code>config/environments/development.rb</code></p><pre>
      \ # ...\r\n\r\n  # Store uploaded files on the local file system (see config/storage.yml
      for options)\r\n  <span style=\"color: rgb(184, 49, 47);\">config.active_storage.service
      = :local</span>\r\n\r\n  # ...</pre><p><code>config/environments/production.rb</code></p><pre>
      \ # ...\r\n\r\n  # Store uploaded files on the local file system (see config/storage.yml
      for options)\r\n  <span style=\"color: rgb(184, 49, 47);\">config.active_storage.service
      = :local</span>\r\n\r\n  # ...</pre><p>defaultの <code>local</code> とは、 <code>config/storage.yml</code>
      で定義された保存先の名前</p><p>config.active_storage.service = <code>:local</code>を <code><span
      style=\"color: rgb(41, 105, 176);\">:amazon</span></code><code><span style=\"color:
      rgb(41, 105, 176);\">, :google,&nbsp;:microsoft</span></code> のいづれかと置き換えて、<code>config/storage.yml</code>の方に、必要な認証情報などの値を入力します。</p><p><br></p><p>config/storage.yml</p><pre>test:\r\n
      \ service: Disk\r\n  root: &lt;%= Rails.root.join(&quot;tmp/storage&quot;) %&gt;\r\n\r\nlocal:\r\n
      \ service: Disk\r\n  root: &lt;%= Rails.root.join(&quot;storage&quot;) %&gt;\r\n\r\n#
      Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)\r\n<span
      style=\"color: rgb(41, 105, 176);\"># amazon:\r\n#   service: S3\r\n#   access_key_id:
      &lt;%= Rails.application.credentials.dig(:aws, :access_key_id) %&gt;\r\n#   secret_access_key:
      &lt;%= Rails.application.credentials.dig(:aws, :secret_access_key) %&gt;\r\n#
      \  region: us-east-1\r\n#   bucket: your_own_bucket</span>\r\n\r\n# Remember
      not to checkin your GCS keyfile to a repository\r\n<span style=\"color: rgb(65,
      168, 95);\"># google:\r\n#   service: GCS\r\n#   project: your_project\r\n#
      \  credentials: &lt;%= Rails.root.join(&quot;path/to/gcs.keyfile&quot;) %&gt;\r\n#
        bucket: your_own_bucket</span>\r\n\r\n# Use rails credentials:edit to set
      the Azure Storage secret (as azure_storage:storage_access_key)\r\n<span style=\"color:
      rgb(250, 197, 28);\"># microsoft:\r\n#   service: AzureStorage\r\n#   storage_account_name:
      your_account_name\r\n#   storage_access_key: &lt;%= Rails.application.credentials.dig(:azure_storage,
      :storage_access_key) %&gt;\r\n#   container: your_container_name</span></pre><p><br></p><p>defaultの保存先の
      <code>local</code> は、使用するサービスが <code>Disk</code> (ローカルディスク)に設定れていて、保存先がrailsアプリ直下の<code>/storage</code>ディレクトリに指定されています。</p><p>保存先に応じてコメントを解除してください。</p><p><br></p><p>amazon:
      を使用するあなたは gem <code>aws-sdk-s3</code></p><p>goolge: を使用するあなたは gem <code>google-cloud-storage</code></p><p>microsoft:
      を使用するあなたは gem <code>azure-storage</code> をGemfileに追記</p><p><br></p><p>なお、アクセスキーなどの機密情報は、<strong>Rails
      Credentials(<strong>暗号化して保存するためのRails新機能</strong>)</strong>を使って入力!!</p><pre>$
      EDITOR=vim rails credentials:edit</pre><p>i を押す</p><p>実際の値を入れていく</p><p>escを押す</p><p>ZZ
      を押す</p><p><span style=\"color: rgb(226, 80, 65);\">保存完了</span></p><p>(入力した内容は<code>config/master.key</code>を用いて暗号化され、<code>config/credentials.yml.enc</code>が生成されます)</p><pre><code>$
      rails credentials:show</code> で確認できる</pre><h2><br>Amazon S3 を使う場合</h2><pre>gem
      &quot;aws-sdk-s3&quot;, require: false</pre><p><code>$ bundle install</code>と叩きます。</p><p><br></p><p><span
      style=\"color: rgb(124, 112, 107);\">config/environments/production.rb</span></p><pre>#
      ファイル保存先を:localから:amazonに変更\r\n\r\nconfig.active_storage.service = :amazon</pre><p><span
      style=\"color: rgb(124, 112, 107);\">config/environments/development.rb</span></p><pre>#
      開発環境(development)でAmazon S3の動作を確認したい場合はこちらの方も変更しましょう\r\n\r\nconfig.active_storage.service
      = :amazon</pre><p><span style=\"color: rgb(124, 112, 107);\">config/storage.yml</span></p><pre>#
      以下の部分をコメント解除する\r\namazon:\r\n  service: S3\r\n  access_key_id: &lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;\r\n  secret_access_key: &lt;%= Rails.application.credentials.dig(:aws,
      :secret_access_key) %&gt;\r\n  region: ap-northeast-1 # これは日本の地域コード\r\n  bucket:
      my_bucket_name # 自分で作成したS3のバケットの名前</pre><pre>$ EDITOR=vim rails credentials:edit
      \r\n<span style=\"color: rgb(250, 197, 28);\">(エディタはVim(vim)かAtom(atom)かVSCode(code)かSublimeText(subl))</span></pre><pre>aws:\r\n
      access_key_id: 123 #ここに自分のアクセスキーIDをコピペ\r\n secret_access_key: 456 #ここに自分のシークレットアクセスキーをコピペ</pre><p>&nbsp;Vim:
      <code>i</code>で入力開始、<code>esc</code> &rarr; <code>ZZ</code>で終了</p><p><br></p><pre>$
      rails credentials:show\r\n<span style=\"color: rgb(250, 197, 28);\">で内容を確認できる</span></pre><p><br></p><p>以上でs3にアップロードされるようになりました。s3がこんなに簡単に使えてしまうことが驚き栗の木超ラッキーです！</p><p><br></p><p><strong><span
      style=\"font-size: 48px; font-family: Impact, Charcoal, sans-serif;\">Credentials</span></strong><span
      style=\"font-size: 48px; font-family: Impact, Charcoal, sans-serif;\">を使用する場合</span></p><p><code>config/credentials.yml.enc</code>の中身を復号化するために必要な<code>config/master.key</code>ファイルを本番環境にも配置する必要があります。しかし、<code>master.key</code>はセキュリティ上,
      &nbsp;.gitignore されてあり、<span style=\"color: rgb(41, 105, 176); font-family:
      Impact, Charcoal, sans-serif; font-size: 24px;\">Gitリポジトリをそのままデプロイする本番環境(Herokuなど)の場合</span>は、<code>master.key</code>　の中身をコピーして、環境変数
      <code>RAILS_MASTER_KEY</code> としてセットしなければいけません。ちなみに、Herokuをお使いの場合は <code>$ heroku
      config:set RAILS_MASTER_KEY=123</code>で環境変数を用意できます。</p><p><br></p><p>参考文献 <a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a\">こちらの方</a></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-10 07:09:04.553155'
    - '2018-12-10 07:09:04.560929'
  - - 89
    - wysiwyg-rails imageUploadToS3 / wysiwygエディタからS3にアップロード
    - "<h1 style=\"text-align: center;\">wysiwyg-rails imageUploadToS3</h1><p><br></p><p><span
      style=\"color: rgb(124, 112, 107);\">これは、Rails4の時代までは</span><a href=\"https://rubythursday.com/system/episodes/pdfs/000/000/052/original/Ruby_Snack_23_Froala_WYSIWYG_Saving_Images_on_S3.pdf?1452115365\">こちらの方</a><span
      style=\"color: rgb(124, 112, 107);\">&nbsp;のやり方で良かったみたいですけど、amazonの署名の方法に変更が加わったからなのか、今では正常に動作しないため、何十時間(50~100h)も使ってたどり着いた筆者の苦悩の物語です。</span></p><p><br></p><p>前提:
      すでにwysiwyg-railsを使ってエディターの実装ができている(できないのはファイルのサーバーへのアップロードのみ)</p><pre>$(function()
      {\r\n  $(&#39;#wysiwyg&#39;).froalaEditor({\r\n  language: &#39;ja&#39;,\r\n 
      heightMin: 500,\r\n  heightMax: 1000,\r\n  })\r\n});</pre><p><br></p><p>結論から言って、自作モジュールを作らずに,
      froala-editor-sdkを使って解決することができました。</p><p><br></p><p><span style=\"font-size:
      30px;\">はじめにクライアント側の設定</span></p><p>Gemfile</p><pre>gem &#39;wysiwyg-rails&#39;,
      &#39;~&gt; 2.6.0&#39; (2.6.6をインストール)\r\ngem &quot;froala-editor-sdk&quot; (1.2.0をインストール)</pre><p><br></p><p>articles_controller</p><pre>class
      ArticlesController &lt; ApplicationController\r\nbefore_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\nbefore_action :require_login, except:
      [:index, :show]\r\n<span style=\"color: rgb(243, 121, 52);\">before_action :hash_init,
      only: [:index, :new, :create, :edit]</span>\r\n\r\n\r\ndef index\r\n@articles
      = Article.all\r\nend\r\n\r\ndef new\r\n@article = Article.new\r\nend\r\n\r\ndef
      create\r\n@article = Article.new(article_params)\r\nif @article.save\r\nflash[:notice]
      = &quot;保存されました&quot;\r\nredirect_to article_path(@article)\r\nelse\r\nflash[:alert]
      = &quot;エラーが発生しました&quot;\r\nrender :new\r\nend\r\nend\r\n\r\ndef edit\r\nend\r\n\r\ndef
      update\r\n  if @article.update_attributes(article_params)\r\n    flash[:notice]
      = &quot;更新されました&quot;\r\n    redirect_to article_path(@article)\r\n  else\r\n
      \   flash[:alert] = &quot;エラーが発生しました&quot;\r\n    render :edit\r\n  end\r\nend\r\n\r\ndef
      show\r\nend\r\n\r\ndef destroy\r\n  if @article.destroy\r\n    flash[:notice]
      = &quot;削除されました&quot;\r\n    redirect_to articles_path\r\n  else\r\n    flash[:alert]
      = &quot;エラーが発生しました&quot;\r\n  end\r\nend\r\n\r\nprivate\r\n\r\ndef find_article\r\n@article
      = Article.find(params[:id])\r\nend\r\n\r\n<span style=\"color: rgb(243, 121,
      52);\">def hash_init\r\n  options = {\r\n    bucket: &#39;mybucket&#39;,\r\n
      \   region: &#39;ap-northeast-1&#39;, # japan[Tokyo]\r\n    keyStart: &#39;uploads/&#39;,
      # uploads/filename.png\r\n    acl: &#39;public-read&#39;,\r\n    accessKey:
      ENV[&quot;aws_access_key_id&quot;],\r\n    secretKey: ENV[&quot;aws_secret_access_key&quot;],\r\n
      \ }\r\n    @aws_data = FroalaEditorSDK::S3.data_hash(options)\r\nend</span>\r\n\r\n\r\nend</pre><p><span
      style=\"font-size: 18px;\">自作ライブラリでハッシュするのではなく、FroalaEditorSDKを使って、ハッシュ化を行いました。</span></p><p><span
      style=\"font-size: 18px;\">そして<a href=\"https://www.froala.com/wysiwyg-editor/docs/sdks/ruby/file-s3-upload\">公式ドキュメント</a>を見ればわかるのですが、なんと公式ドキュメントが間違っているという事態が発覚。</span></p><p><span
      style=\"background-color: rgb(247, 218, 100);\">options : {</span></p><p><span
      style=\"background-color: rgb(247, 218, 100);\">&nbsp; bucket: &#39;bucket-name&#39;,</span></p><p><span
      style=\"background-color: rgb(247, 218, 100);\">...</span></p><p><span style=\"background-color:
      rgb(247, 218, 100);\">}</span></p><p>となっていますが、 options : ではなく options = ですので間違いのないようにイコールで書いてください.</p><p><br></p><p>_form.html.erb</p><pre>&lt;%=
      simple_form_for (@article) do |f| %&gt;\r\n&lt;% if @article.errors.any? %&gt;\r\n&lt;div
      id=&quot;error_explanation&quot;&gt;\r\n&lt;h2&gt;\r\n&lt;%= &quot;#{pluralize(@article.errors.count,
      &quot;error&quot;)} このエラーにより保存できませんでした&quot; %&gt;\r\n&lt;/h2&gt;\r\n&lt;ul&gt;\r\n&lt;%
      @article.errors.full_messages.each do |msg| %&gt;\r\n&lt;li&gt;\r\n&lt;%= msg
      %&gt;\r\n&lt;/li&gt;\r\n&lt;% end %&gt;\r\n&lt;/ul&gt;\r\n&lt;/div&gt;\r\n&lt;%
      end %&gt;\r\n\r\n&lt;div class=&quot;form-group&quot;&gt;\r\n&lt;%= f.input
      :title, class: &quot;form-control&quot; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;%= f.input :image, as: :file, class:
      &quot;form-control&quot; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class=&quot;form-group&quot;&gt;\r\n&lt;%=
      f.label :body %&gt;\r\n&lt;%= f.text_area :body, id: &quot;wysiwyg&quot; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;%= f.button :submit, &quot;投稿&quot;,
      :class =&gt; &#39;btn btn-primary&#39; %&gt;\r\n&lt;/div&gt;\r\n&lt;% end %&gt;\r\n\r\n<span
      style=\"background-color: rgb(247, 218, 100);\">&lt;script&gt;\r\n$(function()
      {\r\n$(&#39;#wysiwyg&#39;).froalaEditor({\r\nlanguage: &#39;ja&#39;,\r\nheightMin:
      500,\r\nheightMax: 1000,\r\nimageUploadToS3: &lt;%= @aws_data.to_json.html_safe
      %&gt;,\r\n})\r\n});\r\n&lt;/script&gt;</span></pre><p><br></p><p>new.html.erb</p><pre>&lt;h2&gt;New
      Article&lt;/h2&gt;\r\n&lt;%= render &quot;articles/form&quot;, collection: @aws_data
      %&gt;</pre><p><br></p><p>edit.html.erb</p><pre>&lt;h2&gt;Edit Article&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot;, collection: @aws_data %&gt;</pre><p><br></p><p><span
      style=\"color: rgb(235, 107, 86); font-family: Impact, Charcoal, sans-serif;
      font-size: 30px;\">これでクライアント側は完璧です</span></p><p><br></p><p><span style=\"font-size:
      30px;\">次にサーバー側の設定</span></p><pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\r\n&lt;CORSConfiguration
      xmlns=&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;&gt;\r\n    &lt;CORSRule&gt;\r\n 
            &lt;AllowedOrigin&gt;http://localhost:3000&lt;/AllowedOrigin&gt;\r\n 
            &lt;AllowedMethod&gt;GET&lt;/AllowedMethod&gt;\r\n        &lt;AllowedMethod&gt;POST&lt;/AllowedMethod&gt;\r\n 
            &lt;AllowedMethod&gt;PUT&lt;/AllowedMethod&gt;\r\n        &lt;MaxAgeSeconds&gt;3000&lt;/MaxAgeSeconds&gt;\r\n 
            &lt;AllowedHeader&gt;*&lt;/AllowedHeader&gt;\r\n    &lt;/CORSRule&gt;\r\n&lt;/CORSConfiguration&gt;</pre><p><br></p><p><span
      style=\"color: rgb(235, 107, 86); font-family: Impact, Charcoal, sans-serif;
      font-size: 30px;\">これでサーバ側も完璧です</span></p><p><br></p><p><span style=\"font-family:
      Impact, Charcoal, sans-serif; font-size: 30px;\">以上で無事に投稿できました！！本当にしんどかった...<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f616.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-10 08:11:09.948566'
    - '2018-12-10 08:11:09.953742'
  - - 90
    - Rails ArticleモデルTagモデルで多対多 のテーブルを作る
    - "<h1 style=\"text-align: center;\"><span style=\"font-family: Impact,Charcoal,sans-serif;\">Rails5.2
      多対多</span></h1><p><br></p><p><span style=\"font-size: 18px;\">実現したいこと... articleモデルとtagモデルで多対多を実現したい</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">1. modelの作成</span></p><pre>$ rails g model Article
      title:string body: text\r\n$ rails g model Tag name: string</pre><p>Articleのビュー、コントローラは作成しているものとする</p><pre>$
      rails g migration create_articles_tags</pre><p>以下にmigrationファイルを成形確認</p><pre>#
      db/migrate/xxx_create_articles.rb\r\nclass CreateArticles &lt; ActiveRecord::Migration[5.2]\r\n
      \ def change\r\n    create_table :articles do |t|\r\n      t.string :title\r\n
      \     t.text :body\r\n      t.timestamps\r\n    end\r\n  end\r\nend\r\n\r\n#
      db/migrate/xxx_create_tags.rb\r\nclass CreateTags &lt; ActiveRecord::Migration\r\n
      def change\r\n  create_table :tags do |t|\r\n   t.string :name, null: false\r\n
      \  t.timestamps null: false\r\n  end\r\n end\r\nend\r\n\r\n# db/migrate/xxx_create_articles_tags.rb\r\n#
      主キーは不要なので、:id =&gt; falseとしています。\r\nclass CreateArticlesTagsTable &lt; ActiveRecord::Migration[5.2]\r\n
      \ def change\r\n    create_table :articles_tags<span style=\"color: rgb(243,
      121, 52);\">, :id =&gt; false</span> do |t|\r\n      t.integer <span style=\"color:
      rgb(251, 160, 38);\">:article_id, null: false</span>\r\n      t.integer <span
      style=\"color: rgb(251, 160, 38);\">:tag_id, null: false</span>\r\n    end\r\n
      \ end\r\nend</pre><pre>$ rake db:migrate</pre><p><br></p><p><span style=\"font-size:
      24px;\">2.リレーションの定義</span></p><pre># app/models/article.rb\r\nclass Article
      &lt; ActiveRecord::Base\r\n <span style=\"color: rgb(44, 130, 201);\">has_and_belongs_to_many
      :tags</span>\r\nend</pre><pre># app/models/tag.rb\r\nclass Tag &lt; ActiveRecord::Base\r\n
      <span style=\"color: rgb(44, 130, 201);\">has_and_belongs_to_many :articles</span>\r\nend</pre><p><br></p><p><span
      style=\"font-size: 24px;\">多対多はこれで完成!!</span></p><p><br></p><pre>$ rails console\r\n\r\n&gt;
      article1 = article.find(1)\r\n&gt; tag1 = Tag.create(name: &quot;タグ１&quot;)\r\n&gt;
      tag2 = Tag.create(name: &quot;タグ2&quot;)\r\n&gt; article1.tags &lt;&lt; tag1
      // 挿入される\r\n&gt; article1.tags &lt;&lt; tag2 // 挿入される\r\n&gt; article1.tags.delete
      tag1 // article1からtag1をdelete\r\n&gt; article1.tags.clear // // article1から全タグをdelete</pre><p><br></p><p><span
      style=\"font-size: 30px;\">3.viewに実装</span></p><p>articles_controller.rb</p><pre>class
      ArticlesController &lt; ApplicationController\r\n  before_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\n\r\n\r\n  def index\r\n    @articles
      = Article.all\r\n  end\r\n\r\n  def new\r\n    @article = Article.new\r\n  end\r\n\r\n
      \ def create\r\n    @article = Article.new(<span style=\"color: rgb(184, 49,
      47);\">article_params</span>)\r\n    if @article.save\r\n      flash[:notice]
      = &quot;Successfully created article!&quot;\r\n      redirect_to article_path(@article)\r\n
      \   else\r\n      flash[:alert] = &quot;Error creating new article!&quot;\r\n
      \     render :new\r\n    end\r\n  end\r\n\r\n  def edit\r\n  end\r\n\r\n  def
      update\r\n    if @article.update_attributes(<span style=\"color: rgb(184, 49,
      47);\">article_params</span>)\r\n      flash[:notice] = &quot;Successfully updated
      article!&quot;\r\n      redirect_to article_path(@article)\r\n    else\r\n      flash[:alert]
      = &quot;Error updating article!&quot;\r\n      render :edit\r\n    end\r\n  end\r\n\r\n
      \ def show\r\n  end\r\n\r\n  def destroy\r\n    if @article.destroy\r\n      flash[:notice]
      = &quot;Successfully deleted article!&quot;\r\n      redirect_to articles_path\r\n
      \   else\r\n      flash[:alert] = &quot;Error updating article!&quot;\r\n    end\r\n
      \ end\r\n\r\n<span style=\"color: rgb(184, 49, 47);\">private</span>\r\n\r\ndef
      <span style=\"color: rgb(184, 49, 47);\">article_params</span>\r\nparams.require(:article).permit(:title,
      :body, :image, <span style=\"color: rgb(41, 105, 176);\">tag_ids: []</span>)\r\nend\r\n\r\ndef
      find_article\r\n@article = Article.find(params[:id])\r\nend\r\n\r\nend</pre><p><span
      style=\"color: rgb(41, 105, 176);\"><span style=\"font-size: 24px;\">&nbsp;
      &nbsp;tag_ids: []</span></span>とした理由は&nbsp;tag_idsというパラメータを複数受け取ることのできるように設定するため(checkboxで複数選べる)</p><p><br></p><p>articles/_form.html.erb</p><pre>&lt;%=
      simple_form_for (@article) do |f| %&gt;\r\n  &lt;% if @article.errors.any? %&gt;\r\n
      \   &lt;div id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;\r\n        &lt;%=
      &quot;#{pluralize(@article.errors.count, &quot;error&quot;)} により保存ができませんでした&quot;
      %&gt;\r\n      &lt;/h2&gt;\r\n      &lt;ul&gt;\r\n        &lt;% @article.errors.full_messages.each
      do |msg| %&gt;\r\n          &lt;li&gt;\r\n            &lt;%= msg %&gt;\r\n          &lt;/li&gt;\r\n
      \       &lt;% end %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;%
      end %&gt;\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input
      :title, class: &quot;form-control&quot; %&gt;\r\n  &lt;/div&gt;\r\n\r\n<span
      style=\"color: rgb(243, 121, 52);\">  &lt;div class=&quot;form-group&quot;&gt;\r\n
      \   &lt;%= f.collection_check_boxes(</span><span style=\"color: rgb(41, 105,
      176);\">:tag_ids</span><span style=\"color: rgb(243, 121, 52);\">, </span><span
      style=\"color: rgb(65, 168, 95);\">Tag.all</span><span style=\"color: rgb(243,
      121, 52);\">, </span><span style=\"color: rgb(184, 49, 47);\">:id</span><span
      style=\"color: rgb(243, 121, 52);\">, </span><span style=\"color: rgb(85, 57,
      130);\">:name</span><span style=\"color: rgb(243, 121, 52);\">) do |b| %&gt;\r\n
      \     &lt;%= b.check_box %&gt;\r\n      &lt;%= b.label { b.text } %&gt;\r\n
      \     &lt;/br&gt;\r\n    &lt;% end %&gt;\r\n  &lt;/div&gt;</span>\r\n\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;%= f.input :image, as: :file, class:
      &quot;form-control&quot; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class=&quot;form-group&quot;&gt;\r\n&lt;%=
      f.label :body %&gt;\r\n&lt;%= f.text_area :body %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;%= f.button :submit, &quot;投稿&quot;,
      :class =&gt; &#39;btn btn-primary&#39; %&gt;\r\n&lt;/div&gt;\r\n&lt;% end %&gt;</pre><p><span
      style=\"font-size: 24px;\">ここで、<span style=\"color: rgb(243, 121, 52);\">collection_check_boxes</span>
      において</span></p><ul><li><span style=\"font-size: 24px;\">第一引数 <span style=\"color:
      rgb(41, 105, 176);\">tag_ids</span> は, 送信するパラメータの名前</span></li><li><span style=\"font-size:
      24px;\">第二引数 <span style=\"color: rgb(65, 168, 95);\">Tag.all</span><span style=\"color:
      rgb(243, 121, 52);\">&nbsp;</span>はcheckboxのコレクションデータ</span></li><li><span style=\"font-size:
      24px;\">第三引数 <span style=\"color: rgb(184, 49, 47);\">:id&nbsp;</span>は, <span
      style=\"font-size: 24px;\">checkboxのvalue</span></span></li><li><span style=\"font-size:
      24px;\">第四引数 <span style=\"color: rgb(85, 57, 130);\">:name&nbsp;</span>はcheckboxのラベル名</span></li></ul><p><br></p><p><span
      style=\"font-size: 30px;\">以上で多対多が完璧に実装できました。<span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f601.svg);\">&nbsp;
      &nbsp;</span>&nbsp;</span></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1544432949173-checkbox.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><span
      style=\"font-size: 30px;\">＊＊＊豆知識＊＊＊</span></p><p>以下のやり方でも実装できますが、tagが毎回新しく増えて同じデータがたくさんできてしまいます。</p><p><br></p><p>articles_controller.rb</p><pre>class
      ArticlesController &lt; ApplicationController\r\n  before_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\n\r\n\r\n  def index\r\n    @articles
      = Article.all\r\n  end\r\n\r\n  def new\r\n    @article = Article.new\r\n    <span
      style=\"color: rgb(243, 121, 52);\">@article.tags.build</span>\r\n  end\r\n\r\n
      \ def create\r\n    @article = Article.new(article_params)\r\n    <span style=\"color:
      rgb(243, 121, 52);\">@article.tags.build(tag_params)</span>\r\n    if @article.save\r\n
      \     flash[:notice] = &quot;Successfully created article!&quot;\r\n      redirect_to
      article_path(@article)\r\n    else\r\n      flash[:alert] = &quot;Error creating
      new article!&quot;\r\n      render :new\r\n    end\r\n  end\r\n\r\n  def edit\r\n
      \ end\r\n\r\n  def update\r\n    if @article.update_attributes(article_params)\r\n
      \     flash[:notice] = &quot;Successfully updated article!&quot;\r\n      redirect_to
      article_path(@article)\r\n    else\r\n      flash[:alert] = &quot;Error updating
      article!&quot;\r\n      render :edit\r\n    end\r\n  end\r\n\r\n  def show\r\n
      \ end\r\n\r\n  def destroy\r\n    if @article.destroy\r\n      flash[:notice]
      = &quot;Successfully deleted article!&quot;\r\n      redirect_to articles_path\r\n
      \   else\r\n      flash[:alert] = &quot;Error updating article!&quot;\r\n    end\r\n
      \ end\r\n\r\n<span style=\"color: rgb(184, 49, 47);\">private</span>\r\n<span
      style=\"color: rgb(243, 121, 52);\">  def tag_params\r\n    params.require(:tag).permit(:name)\r\n 
      end</span>\r\n\r\n  def article_params\r\n    params.require(:article).permit(:title,
      :body, :image)\r\n  end\r\n\r\n  def find_article\r\n    @article = Article.find(params[:id])\r\n
      \ end\r\nend</pre><p><br></p><p>articles/_form.html.erb</p><pre>&lt;%= simple_form_for
      (@article) do |f| %&gt;\r\n  &lt;% if @article.errors.any? %&gt;\r\n    &lt;div
      id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;\r\n        &lt;%= &quot;#{pluralize(@article.errors.count,
      &quot;error&quot;)} により保存ができませんでした&quot; %&gt;\r\n      &lt;/h2&gt;\r\n      &lt;ul&gt;\r\n
      \       &lt;% @article.errors.full_messages.each do |msg| %&gt;\r\n          &lt;li&gt;\r\n
      \           &lt;%= msg %&gt;\r\n          &lt;/li&gt;\r\n        &lt;% end %&gt;\r\n
      \     &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;% end %&gt;\r\n\r\n  &lt;div
      class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input :title, class: &quot;form-control&quot;
      %&gt;\r\n  &lt;/div&gt;\r\n\r\n<span style=\"color: rgb(243, 121, 52);\">  &lt;div
      class=&quot;form-group&quot;&gt;\r\n    &lt;%= fields_for :tag do |field| %&gt;\r\n 
          &lt;%= field.label :name %&gt;\r\n      &lt;%= field.text_field :name %&gt;\r\n
      \   &lt;% end %&gt;\r\n  &lt;/div&gt;</span>\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n
      \   &lt;%= f.input :image, as: :file, class: &quot;form-control&quot; %&gt;\r\n
      \ &lt;/div&gt;\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%=
      f.label :body %&gt;\r\n    &lt;%= f.text_area :body %&gt;\r\n  &lt;/div&gt;\r\n\r\n
      \ &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.button :submit, &quot;投稿&quot;,
      :class =&gt; &#39;btn btn-primary&#39; %&gt;\r\n  &lt;/div&gt;\r\n&lt;% end
      %&gt;</pre><h2><br></h2><h2>多対多でクエリ</h2><p>articleモデルとtagモデルで多対多だが、クエリを作るときのやり方</p><pre>routes.rb\r\n...\r\nget
      &#39;articles/<span style=\"color: rgb(243, 121, 52);\">:id</span>/tag&#39;
      =&gt; &#39;articles#tag&#39;, as: &#39;manage_tag&#39; # タグのidが入る形</pre><pre>articles_controller.rb\r\n...\r\ndef
      tag\r\n# INNER JOINするために joinsメソッド\r\n# 以下のように<span style=\"color: rgb(243,
      121, 52);\">joinsテーブルから特定のものを引っこ抜くやり方</span>でも<span style=\"color: rgb(41, 105,
      176);\">クエリーを二つ作ってmergeメソッドで合体させるやり方でも良い</span>\r\n# @articles = <span style=\"color:
      rgb(243, 121, 52);\">Article.joins(:tags).where(tags: {id: </span><span style=\"color:
      rgb(65, 168, 95);\">params[:id]</span><span style=\"color: rgb(243, 121, 52);\">})</span>\r\n@articles
      = <span style=\"color: rgb(44, 130, 201);\">Article.joins(:tags).merge(Tag.where(id:
      params[:id]))</span>\r\nend</pre><pre>viewファイル(今回は_navigation.html.erb)\r\n...\r\n&lt;!--
      タグのリンク付きセレクトボックス, dropdownはBootstrapを使用 --&gt;\r\n&lt;% Tag.all.each do |tag|
      %&gt;\r\n  &lt;a class=&quot;dropdown-item&quot; href=<span style=\"color: rgb(65,
      168, 95);\">&lt;%= manage_tag_path(id: tag.id) %&gt;</span>&gt;\r\n  &lt;%=
      tag.name %&gt;\r\n  &lt;div class=&quot;dropdown-divider&quot;&gt;&lt;/div&gt;\r\n&lt;/a&gt;\r\n&lt;%
      end %&gt;\r\n...</pre><pre>tag.html.erb\r\n...\r\n&lt;% @articles.each do |article|
      %&gt;\r\n  &lt;%= article.title %&gt;\r\n  &lt;%= article.body %&gt;\r\n&lt;%
      end %&gt;\r\n...</pre><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-10 09:21:55.300522'
    - '2019-01-01 07:10:58.289144'
  - - 91
    - rails5.2 'rack-attack' で セキュリティ対策
    - "<h1 style=\"text-align: center;\">gem rack-attack[セキュリティ対策]を実装</h1><p><br></p><p>Gemfileに下記を追加する</p><pre>#
      for security\r\ngem &#39;rack-attack&#39;\r\n\r\n# production環境だけで良い人はこれ\r\n#
      group :production do\r\n#  gem &#39;rack-attack&#39;\r\n# end</pre><p>bundle
      install実施</p><pre>bundle install</pre><p><br></p><p>config/application.rb</p><pre>module
      YourApp\r\n  class Application &lt; Rails::Application\r\n    省略\r\n    # security\r\n
      \   <span style=\"color: rgb(184, 49, 47);\">config.middleware.use Rack::Attack</span>\r\n
      \ end\r\nend</pre><p><br></p><p>productionだけ読み込む場合は config/environments/production.rb</p><pre>Rails.application.configure
      do\r\n  config.middleware.use Rack::Attack\r\nend</pre><p><br></p><h3>rack-attackの設定ファイル</h3><p><code>config/initializers/rack-attack.rb</code>
      を設定ファイルとして作成する</p><pre>class Rack::Attack\r\n# 1.2.3.4からのアクセスを拒否する\r\n# Rack::Attack.blocklist(&#39;block
      1.2.3.4&#39;) do |req|\r\n# &#39;1.2.3.4&#39; == req.ip\r\n# end\r\n# BadUAが含まれたUserAgentからのログイン画面アクセスを拒否する\r\n#
      Rack::Attack.blocklist(&#39;block bad UA logins&#39;) do |req|\r\n# req.path
      == &#39;/login&#39; &amp;&amp; req.post? &amp;&amp; req.user_agent == &#39;BadUA&#39;\r\n#
      end\r\n\r\nRack::Attack.blocklist(&#39;自分以外は認証画面拒否&#39;) do |req|\r\nreq.path
      == &#39;/login_path&#39;\r\nend\r\n# ホワイトリスト設定\r\nRack::Attack.safelist(&#39;ローカルホストと自分を許可&#39;)
      do |req|\r\n&#39;127.0.0.1&#39; == req.ip || &#39;::1&#39; == req.ip || ENV[&quot;ip_address&quot;]
      == req.ip\r\nend\r\n\r\n# 同一IPアドレスからのリクエストを300回/分に制限\r\nRack::Attack.throttle(&#39;req/ip&#39;,
      limit: 300, period: 5.minutes) do |req|\r\n  req.ip\r\nend\r\n\r\n# アタックや過度なクローリングの対策になる
      <a href=\"https://blog.nakamu.life/posts/rails-dos-rack-attack/\">https://blog.nakamu.life/posts/rails-dos-rack-attack/</a>\r\n\r\nend</pre><p><br></p><p>ちなみにgemなしでも実装してみます。</p><p><br></p><p>articles_controller</p><pre><span
      style=\"color: rgb(184, 49, 47);\">class</span> <span style=\"color: rgb(97,
      189, 109);\">ArticlesController</span> &lt; <span style=\"color: rgb(97, 189,
      109);\">ApplicationController</span>\r\nbefore_action <span style=\"color: rgb(147,
      101, 184);\">:restrict_remote_ip</span>, <span style=\"color: rgb(147, 101,
      184);\">only</span>: [:<span style=\"color: rgb(147, 101, 184);\">edit</span>,
      :<span style=\"color: rgb(147, 101, 184);\">create</span>]\r\n...\r\n  <span
      style=\"color: rgb(97, 189, 109);\">PERMIT_ADDRESSES</span> = [&#39;<span style=\"color:
      rgb(250, 197, 28);\">127.0.0.1</span>&#39;, &#39;<span style=\"color: rgb(250,
      197, 28);\">::1</span>&#39;, ENV[&quot;<span style=\"color: rgb(250, 197, 28);\">ip_address</span>&quot;]].freeze\r\n
      \ <span style=\"color: rgb(184, 49, 47);\">def</span> <span style=\"color: rgb(97,
      189, 109);\">restrict_remote_ip</span>\r\n  <span style=\"color: rgb(124, 112,
      107);\"># ローカルか自分のipアドレス</span>\r\n  <span style=\"color: rgb(184, 49, 47);\">unless</span>
      <span style=\"color: rgb(84, 172, 210);\">PERMIT_ADDRESSES</span>.<span style=\"color:
      rgb(84, 172, 210);\">include?</span>(request.remote_ip)\r\n    render <span
      style=\"color: rgb(147, 101, 184);\">text</span>: &#39;<span style=\"color:
      rgb(250, 197, 28);\">サービスが見つかりません</span>&#39;, <span style=\"color: rgb(147,
      101, 184);\">status</span>: <span style=\"color: rgb(147, 101, 184);\">503</span>\r\n
      \ <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n<span style=\"color:
      rgb(184, 49, 47);\">end</span></pre><p>:edit, :createアクションを自分以外ブロックする機能が実装できました。めでたしめでたし。</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-10 09:43:05.656626'
    - '2018-12-10 09:43:05.660215'
  - - 92
    - 'ソケット地獄のmysqlエラー　ERROR 2002 (HY000): Can''t connect to local MySQL server through
      socket ''/tmp/mysql.sock'' (38)'
    - "<h1>エラー内容&nbsp;</h1><pre>$ mysql -u root -p\r\nCan&#39;t connect to local MySQL
      server through socket &#39;/tmp/mysql.sock&#39;</pre><p>となり、サーバーを止めることもできずstartもできず全ての動作がいきなりできなくなりました。</p><p><br></p><p>ググると　</p><p>/usr/local/etc/my.cnfを</p><p>[mysqld]<br>socket=/tmp/mysql.sock<br>[client]<br>socket=/tmp/mysql.sock</p><p>として</p><p>/usr/local/etc/php/php.iniを</p><p>pdo_mysql.default_socket
      = /tmp/mysql.sock</p><p>mysqli.default_socket = /tmp/mysql.sock</p><p>mysql.default_socket
      = /tmp/mysql.sock</p><p><br></p><p>ソケットは　/tmp/mysql.sock &nbsp;か /var/mysql/mysql.sock
      で統一しろと書かれているけど結局ダメ。</p><p><br></p><pre>$ sudo touch /var/lib/mysql/mysql.sock\r\n$
      sudo chown mysql:mysql /var/lib/mysql</pre><p>でファイルと権限を復活させろとか書かれてたけどそれもだめ。</p><p><br></p><p>以下の方法で</p><p>やっと地獄から抜けました。これはメモっとかないと地獄再来はごめん\U0001F4A6</p><p><br></p><pre>$
      cd /usr/local/var\r\n$ ls -ll</pre><pre>drwxr-xr-x    4 nakajitatsuya  admin
         128  9 20 17:03 homebrew\r\ndrwxrwxr-x    3 nakajitatsuya  admin     96  8
      21 11:16 log\r\ndrwxr-xr-x   204 <span style=\"color: rgb(184, 49, 47); background-color:
      rgb(247, 218, 100);\">_mysql</span><span style=\"background-color: rgb(247,
      218, 100);\">         </span><span style=\"color: rgb(184, 49, 47); background-color:
      rgb(247, 218, 100);\">_mysql</span>  6528 12 16 09:21 mysql\r\ndrwx------  
      15 nakajitatsuya  admin    480  9 20 16:52 postgres\r\ndrwxr-xr-x    3 nakajitatsuya
       admin     96  6 15  2018 run</pre><pre>$ sudo chown nakajitatsuya:admin /tmp/mysql.sock</pre><pre>$
      ls -ll</pre><pre>drwxr-xr-x    4 nakajitatsuya  admin   128  9 20 17:03 homebrew\r\ndrwxrwxr-x
         3 nakajitatsuya  admin    96  8 21 11:16 log\r\ndrwxr-xr-x  209 <span style=\"color:
      rgb(44, 130, 201); background-color: rgb(247, 218, 100);\">nakajitatsuya  admin</span>
       6688 12 16 09:22 mysql\r\ndrwx------   15 nakajitatsuya  admin   480  9 20
      16:52 postgres\r\ndrwxr-xr-x    3 nakajitatsuya  admin    96  6 15  2018 run</pre><p><br></p><p>よし</p><pre>$
      sudo mysql.server start\r\nStarting MySQL\r\nSUCCESS! </pre><p>成功!!</p><pre>mysql
      -u root -p\r\nEnter password: \r\nWelcome to the MySQL monitor.  Commands end
      with ; or \\g.\r\nYour MySQL connection id is 8\r\nServer version: 8.0.12 Homebrew\r\n\r\n\r\nCopyright
      (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\r\n\r\n\r\nOracle
      is a registered trademark of Oracle Corporation and/or its\r\naffiliates. Other
      names may be trademarks of their respective\r\nowners.\r\n\r\n\r\nType &#39;help;&#39;
      or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.\r\n\r\n\r\nmysql&gt; </pre><h2>成功！！治ったーーーーーーー！！！<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f602.svg);\">&nbsp;</span></h2><p><br></p><p><br></p>"
    - '2018-12-16 00:55:53.541092'
    - '2018-12-16 01:57:44.433948'
  - - 94
    - ".gitignoreの作り方[node_modulesを取り除きたい]"
    - "<p><span style=\"font-size: 24px;\">目的: node_modulesをgitから取り除き、.ignoreに記載して無視するようにする(package.jsonがあるのでバージョン管理は必要ないからnode_modulesは普通gitにあげない)</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">原因: git作成後 .gitignoreを作成する前に<code>$ npm install</code>をしてしまい、<code>git
      add .</code>でnode_modules以下を全てインデックスに登録してしまった。</span></p><p><br></p><p>1. 作業ディレクトリに移動</p><pre>$
      cd my_dir</pre><p>2. .gitignoreをファイル作成</p><pre>$ touch .gitignore</pre><p>3.
      gitignoreにvimで無視するもの(node_modules/)を書き込む 編集後ZZで保存できる</p><p>拡張子のない隠しファイルは<code>&nbsp;$
      vim(sublとかでもok) ファイル名</code> で編集できる</p><pre>$ vim .gitignore</pre><pre>node_modules/\r\n~\r\n~\r\n~\r\n~</pre><p>4.
      ファイル(node_modules)を残したまま管理対象(git)から外す (<span style=\"color: rgb(184, 49, 47);\">外すだけ</span>)</p><p>(--cached
      オプションつけないと、ファイルごと<span style=\"color: rgb(184, 49, 47);\">削除</span>しちゃう)</p><pre>$
      git rm -r --cached node_modules</pre><pre>$  git status\r\n$ git add .\r\n$
      git commit -m &#39;create .ignore and add node_modules to .ignore, and Remove
      node_modules from git&#39;\r\n$ git push origin master</pre><p><br></p><p><br></p><h4><span
      style=\"font-size: 48px;\">豆知識</span></h4><h3>rmコマンドの使い方</h3><p><span style=\"color:
      rgb(41, 105, 176);\">ファイル削除は rm</span>, <span style=\"color: rgb(184, 49, 47);\">ディレクトリ丸ごと削除は
      rm-r</span></p><pre>$ rm <span style=\"color: rgb(184, 49, 47);\">-r</span>
      test (testディレクトリと配下のファイル、サブディレクトリ全てを削除できる)</pre><pre>$ rm test (testファイルを削除する)</pre><p>削除確認がいらないときは</p><pre>$
      rm -rf test (-fで確認無し)</pre><p><br></p><h3>rmdirコマンドの使い方</h3><p><span style=\"color:
      rgb(184, 49, 47);\">空の</span>ディレクトリを削除できる</p><pre>$ rmdir test (サブディレクトリやファイルを含んでいれば、エラーが出る)</pre><p><br></p><p>削除できません:
      許可がありません とエラーが出るときは<strong>「su」</strong>コマンドで<strong>スーパーユーザー（管理者権限）でログイン</strong>して削除コマンドを実行</p><p><a
      href=\"https://www.sejuku.net/blog/52175\">スーパーユーザーへの切り替え</a></p><p><br></p><p><br></p>"
    - '2018-12-19 06:48:55.143279'
    - '2018-12-19 06:48:55.149109'
  - - 95
    - Node.jsでスプレッドシートのデータ取得
    - "<h1>環境 Node.js v10.11.0&nbsp;</h1><p><br></p><p><br></p><p><span style=\"font-size:
      24px;\">手順 1. 開発者コンソールでapiの設定をおこなう</span></p><p><br></p><p>GoogleDevelopersを使用するので
      <a href=\"https://console.developers.google.com/\">https://console.developers.google.com/</a>
      に新しいプロジェクトを登録する(既存のものに追加しても良い)</p><p>以下はautoTestという新しいプロジェクトを作った</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545377277610-start.png\"
      style=\"width: 900px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p>次にgoogleDriveApiを有効化する(下のやつ)</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545377456537-goofledrive.png\"
      style=\"width: 300px;\" class=\"fr-fic fr-dib\"></p><p>次にキーを作成</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545377736608-api_key.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545378316529-credentials.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p>作成</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545378672461-complete.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p><span style=\"font-size:
      24px; color: rgb(184, 49, 47);\">これでコンソール側の設定はOK</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順 2. スプレッドシートで共有を行う</span></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545379372102-spreadsheet.png\"
      style=\"width: 900px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>手順
      3. 実装</p><p><br></p><p>●ディレクトリを作成して必要なパッケージをインストールします。</p><p><br></p><p>以下を実行</p><pre
      data-lang=\"sh\" data-unlink=\"\">$ mkdir node_spreadsheet\r\n$ cd node_spreadsheet\r\n$
      npm init\r\n$ npm install google-spreadsheet async</pre><p>または</p><pre><span
      style=\"color: rgb(250, 197, 28);\">node_spreadsheet/package.json</span>\r\n{\r\n&quot;scripts&quot;:
      {\r\n&quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp;
      exit 1&quot;\r\n},\r\n<span style=\"color: rgb(184, 49, 47);\">&quot;dependencies&quot;:
      {\r\n&quot;async&quot;: &quot;^2.6.1&quot;,\r\n&quot;google-spreadsheet&quot;:
      &quot;^2.0.6&quot;\r\n}</span>\r\n}\r\n\r\n$ npm install</pre><p><br></p><p>●node_spreadsheet/index.jsを作成してコードを貼る</p><pre>var
      GoogleSpreadsheet = require(&quot;google-spreadsheet&quot;);\r\nvar async =
      require(&quot;async&quot;);\r\n\r\n// https://docs.google.com/spreadsheets/d/XXXXXXXXXXXXXXXXXXXXX/edit#gid=0\r\nvar
      doc = new GoogleSpreadsheet(&quot;XXXXXXXXXXXXXXXXXXXXX&quot;); // スプレッドシートのurlから確認して入れる\r\nvar
      sheet;\r\n\r\nasync.series(\r\n[\r\nfunction setAuth(step) {\r\nvar creds =
      require(&quot;./YYYYYYYYY.json&quot;); // コンソールで設定して自動作成されたファイルを読み込む\r\ndoc.useServiceAccountAuth(creds,
      step);\r\n},\r\nfunction getInfoAndWorksheets(step) {\r\ndoc.getInfo(function(err,
      info) {\r\nsheet = info.worksheets[0];\r\nstep();\r\n});\r\n},\r\nfunction workingWithCells(step)
      {\r\nconst COLUMNS = {\r\n<span style=\"color: rgb(251, 160, 38);\">firstColumn</span>:
      1,\r\n<span style=\"color: rgb(226, 80, 65);\">secondColumn</span>: 2,\r\n};\r\nsheet.getCells(\r\n{\r\n&quot;min-row&quot;:
      2,\r\n&quot;max-row&quot;: 5,\r\n&quot;return-empty&quot;: true\r\n},\r\nfunction(err,
      cells) {\r\n// <span style=\"color: rgb(124, 112, 107);\">cells.length/sheet.colCount=(2~5行の全セル)/(1行あたりのセル)=</span><span
      style=\"color: rgb(243, 121, 52);\">説取得を行う範囲の行数 </span><span style=\"color:
      rgb(124, 112, 107);\">を表す </span><span style=\"color: rgb(41, 105, 176);\">数列的にいうと,An=(sheet.colCount)n+A0
      [n=0,1,2,...sheet.colCount]</span>\r\nfor (let i = 0; i &lt; cells.length /
      sheet.colCount; i += 1) {\r\nconst name = cells[i * sheet.colCount + COLUMNS.<span
      style=\"color: rgb(251, 160, 38);\">firstColumn</span>].value;\r\nconst gender
      = cells[i * sheet.colCount + COLUMNS.<span style=\"color: rgb(226, 80, 65);\">secondColumn</span>].value;\r\nconsole.log(name
      + &quot; &quot; + price);\r\n}\r\n}\r\n);\r\n}\r\n],\r\nfunction(err) {\r\nif
      (err) {\r\nconsole.log(&quot;Error: &quot; + err);\r\n}\r\n}\r\n);</pre><p>出力結果</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545379719122-output.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h1>good!!<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f600.svg);\">&nbsp;</span>&nbsp;</h1><p><br></p><p>参考URL
      <a href=\"https://techblog.lclco.com/entry/2018/11/30/120000\">https://techblog.lclco.com/entry/2018/11/30/120000</a></p><p>参考にさせていただいた、この方のやり方以外にも</p><p><a
      href=\"https://dotstud.io/blog/google-spreadsheets-from-nodejs/​​​​\">https://dotstud.io/blog/google-spreadsheets-from-nodejs/</a>\r\n<a
      href=\"https://dotstud.io/blog/google-spreadsheets-from-nodejs/　のように\"></a></p><p>Google
      Drive Apiではなく Google Sheets Api を有効化してクライアントキーからアクセスする方法もあるみたいです</p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-21 08:19:35.917091'
    - '2018-12-24 12:48:18.685196'
  - - 96
    - gem geocoder で 地名と座標を自由に変換
    - "<h1>rails で住所から緯度経度を取得</h1><p><br></p><p><span style=\"background-color: rgb(247,
      218, 100); font-family: Impact, Charcoal, sans-serif; font-size: 18px; color:
      rgb(65, 168, 95);\">＊＊＊クライアント側は2018年の夏頃までは設定しなくても動いてたんですが、現在はgoogleのgeocodingAPIを有効化しないと使えないので、急に使えなくなっていてびっくりした方も多いと思います！！自分もその1人です！！</span></p><h2><span
      style=\"color: rgb(41, 105, 176);\">クライアント側</span></h2><p>1. GeocodingAPI を有効化してAPIキーを作成</p><p>GoogleDevelopersから<span
      style=\"color: rgb(184, 49, 47); font-size: 18px; background-color: rgb(247,
      218, 100);\">Geocoding API</span>を有効化し、認証情報を作成してAPIキー作成(すでにAPIを持っている場合は新たに作る必要はない)</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545720666699-geocoding.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib\"></p><h2><span style=\"color:
      rgb(41, 105, 176);\">サーバー側</span></h2><h2><span style=\"font-size: 18px;\">1.
      gemのインストール</span></h2><pre>Gemfile\r\n...\r\ngem &#39;geocoder&#39;</pre><pre>$
      bundle install</pre><p><br></p><p><br></p><p><span style=\"font-size: 18px;\">2.
      geocoder設定ファイルを作成、編集</span></p><pre><code>$ rails generate geocoder</code><code>:config
      <span style=\"color: rgb(41, 105, 176);\">(設定ファイルがconfig/initializers/geocoder.rbとしてできる)</span></code></pre><pre><code><span
      style=\"color: rgb(41, 105, 176);\">config/initializers/geocoder.rb</span></code>\r\nGeocoder.configure(\r\n#
      Geocoding options\r\n# timeout: 3,                 # geocoding service timeout
      (secs)\r\n# lookup: :google,            # name of geocoding service (symbol)\r\n#
      ip_lookup: :ipinfo_io,      # name of IP address geocoding service (symbol)\r\n<span
      style=\"color: rgb(250, 197, 28);\">language: :ja,</span>                <span
      style=\"color: rgb(247, 218, 100);\"># :enから:jaに変えた</span>\r\n# use_https: false,
                # use HTTPS for lookup requests? (if supported)\r\n# http_proxy: nil,
                 # HTTP proxy server (user:pass@host:port)\r\n# https_proxy: nil,
                # HTTPS proxy server (user:pass@host:port)\r\n<span style=\"color:
      rgb(250, 197, 28);\">api_key: &quot;あなたのAPI_KEY&quot;,</span>              
      <span style=\"color: rgb(247, 218, 100);\"># APIキーを設定しないと動きません</span>\r\n# cache:
      nil,                 # cache object (must respond to #[], #[]=, and #del)\r\n#
      cache_prefix: &#39;geocoder:&#39;,  # prefix (string) to use for all cache keys\r\n#
      Exceptions that should not be rescued by default\r\n# (if you want to implement
      custom error handling);\r\n# supports SocketError and Timeout::Error\r\n# always_raise:
      [],\r\n# Calculation options\r\n# units: :mi,                 # :km for kilometers
      or :mi for miles 1mi=1.6km\r\n# distances: :linear          # :spherical or
      :linear\r\n)</pre><p><br></p><p><span style=\"font-size: 18px;\">2. Modelにフィールドを作成</span></p><pre>$
      rails generate migration AddLatitudeAndLongitudeToModel latitude:float longitude:float
      address:string\r\n$ rake db:migrate</pre><pre>moder.rb\r\ngeocoded_by :address
      # addressカラムにジオコーディングを実装\r\nafter_validation :geocode, :if =&gt; :address_changed?
      # addressカラムが変更(保存や更新)されたらジオコーディングが行われる</pre><p><br></p><p><span style=\"font-size:
      18px;\">3. Viewを作成</span></p><pre>&lt;%= form_for @listing do |f| %&gt;\r\n\r\n&lt;div
      class=&quot;row&quot;&gt;\r\n&lt;div class=&quot;col-md-12&quot;&gt;\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;label&gt;住所&lt;/label&gt;\r\n&lt;%=
      f.text_field :address, placeholder: &quot;例: 東京都港区六本木６丁目１１&minus;１&quot;, class:
      &quot;form-control&quot;,\r\nrequired: &quot;true&quot; %&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;actions&quot;&gt;\r\n&lt;%= f.submit &quot;更新&quot;, class: &quot;btn
      btn-danger&quot; %&gt;\r\n&lt;/div&gt;\r\n&lt;% end %&gt;</pre><p><br></p>"
    - '2018-12-25 04:57:14.991951'
    - '2018-12-25 07:10:13.698932'

---
articles_tags:
  columns:
  - article_id
  - tag_id
  records: 
  - - 83
    - 12
  - - 83
    - 13
  - - 84
    - 14
  - - 84
    - 18
  - - 85
    - 14
  - - 85
    - 18
  - - 86
    - 14
  - - 86
    - 18
  - - 87
    - 14
  - - 87
    - 18
  - - 88
    - 14
  - - 88
    - 18
  - - 89
    - 14
  - - 89
    - 18
  - - 90
    - 14
  - - 90
    - 18
  - - 91
    - 14
  - - 91
    - 18
  - - 92
    - 19
  - - 94
    - 20
  - - 95
    - 21
  - - 96
    - 14

---
tags:
  columns:
  - id
  - name
  - created_at
  - updated_at
  records: 
  - - 12
    - React Native
    - '2018-12-08 08:14:52.514427'
    - '2018-12-08 08:14:52.514427'
  - - 13
    - Swift
    - '2018-12-08 08:15:07.708535'
    - '2018-12-08 08:15:07.708535'
  - - 14
    - Ruby On Rails
    - '2018-12-08 08:15:17.474542'
    - '2018-12-08 08:15:17.474542'
  - - 18
    - ブログ(開発者用)
    - '2018-12-08 09:20:04.353576'
    - '2018-12-08 09:20:04.353576'
  - - 19
    - MySQL
    - '2018-12-16 01:57:26.462599'
    - '2018-12-16 01:57:26.462599'
  - - 20
    - github
    - '2018-12-19 05:42:07.344252'
    - '2018-12-19 05:42:07.344252'
  - - 21
    - Node.js
    - '2018-12-21 07:22:16.500838'
    - '2018-12-21 07:22:16.500838'

---
users:
  columns:
  - id
  - created_at
  - updated_at
  - email
  - encrypted_password
  - confirmation_token
  - remember_token
  - admin
  records: 
  - - 1
    - '2018-11-12 10:31:29.632268'
    - '2019-01-12 18:02:16.380010'
    - 111@gmail.com
    - "$2a$10$F9JN21m7DcxU73zigAUZ/uK/D.R/0I.jnNOR8cLlMPqo1dNdH8yy6"
    - 
    - d78ce50ad07095b11e03efa585599dd20abb43bd
    - false
  - - 2
    - '2018-11-14 07:16:52.497383'
    - '2018-11-14 07:35:57.745442'
    - 222@gmail.com
    - "$2a$10$FIWAqJ3VTvDV64ucUL5MJOmyDqeN2Rs97EXMqhLRG8K/zm4zPR.hG"
    - 
    - 33743a78da3fa331ec60e72cc4bac8ccb1d5d04a
    - false
  - - 3
    - '2018-11-14 07:42:24.351138'
    - '2018-11-14 07:48:31.792020'
    - 333@gmail.com
    - "$2a$10$OUjBg1SQqtDKKbmrIDGFs.S5cumvKHIEHMq4lDLHmc8IGRwbYWk/O"
    - 
    - d3a2b6b7840a812552bf25667fd0afc42a45d977
    - false
  - - 4
    - '2019-01-12 17:45:23.913503'
    - '2019-01-12 17:52:45.887912'
    - p111027t@mail.kyutech.jp
    - "$2a$10$xtKG.vRRZtbCUUvo558.7.L6hapgkeYLhZVp.iKcT69bHBKfS.P5O"
    - 
    - e5bcd00ef35b3811e2f4ffffda99fe5156cd952f
    - true
