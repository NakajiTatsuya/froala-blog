
---
active_storage_attachments:
  columns:
  - id
  - name
  - record_type
  - record_id
  - blob_id
  - created_at
  records: 
  - - 4
    - image
    - Article
    - 21
    - 4
    - '2018-11-19 09:08:13.34892'
  - - 13
    - image
    - Article
    - 84
    - 13
    - '2018-12-08 15:33:59.726349'
  - - 14
    - image
    - Article
    - 85
    - 14
    - '2018-12-08 15:56:28.165118'
  - - 15
    - image
    - Article
    - 86
    - 15
    - '2018-12-08 16:51:33.030346'
  - - 16
    - image
    - Article
    - 87
    - 16
    - '2018-12-09 13:39:12.37256'
  - - 17
    - image
    - Article
    - 88
    - 17
    - '2018-12-10 07:09:04.559264'
  - - 18
    - image
    - Article
    - 89
    - 18
    - '2018-12-10 08:11:09.951922'
  - - 19
    - image
    - Article
    - 90
    - 19
    - '2018-12-10 09:21:55.306621'
  - - 20
    - image
    - Article
    - 91
    - 20
    - '2018-12-10 09:43:05.658789'
  - - 21
    - image
    - Article
    - 92
    - 21
    - '2018-12-16 00:55:53.543776'
  - - 23
    - image
    - Article
    - 94
    - 23
    - '2018-12-19 06:48:55.146533'
  - - 24
    - image
    - Article
    - 95
    - 24
    - '2018-12-24 12:48:18.683708'
  - - 25
    - image
    - Article
    - 97
    - 25
    - '2019-01-13 12:29:07.25193'
  - - 26
    - image
    - Article
    - 98
    - 26
    - '2019-01-13 13:41:28.699046'
  - - 27
    - image
    - Article
    - 99
    - 27
    - '2019-01-14 06:12:12.053736'
  - - 28
    - image
    - Article
    - 103
    - 28
    - '2019-01-21 08:08:26.638382'
  - - 30
    - image
    - Article
    - 104
    - 30
    - '2019-01-21 10:28:35.34994'
  - - 32
    - image
    - Article
    - 106
    - 32
    - '2019-02-03 08:56:12.795112'
  - - 33
    - image
    - Article
    - 108
    - 33
    - '2019-02-04 10:55:24.112926'
  - - 34
    - image
    - Article
    - 107
    - 34
    - '2019-02-04 10:56:55.759829'
  - - 35
    - image
    - Article
    - 111
    - 35
    - '2019-03-04 07:12:52.483581'
  - - 36
    - image
    - Article
    - 116
    - 36
    - '2019-03-08 04:14:28.115557'
  - - 37
    - image
    - Article
    - 115
    - 37
    - '2019-03-08 04:15:11.413596'
  - - 38
    - image
    - Article
    - 118
    - 38
    - '2019-03-08 07:56:22.623438'
  - - 40
    - image
    - Article
    - 123
    - 40
    - '2019-03-19 03:38:59.068355'
  - - 41
    - image
    - Article
    - 124
    - 41
    - '2019-03-21 13:45:27.250542'
  - - 42
    - image
    - Article
    - 129
    - 42
    - '2019-04-03 10:10:52.495'
  - - 43
    - image
    - Article
    - 130
    - 43
    - '2019-04-04 08:57:26.481541'
  - - 44
    - image
    - Article
    - 131
    - 44
    - '2019-04-04 08:59:06.297398'
  - - 45
    - image
    - Article
    - 132
    - 45
    - '2019-04-05 06:41:32.167993'
  - - 46
    - image
    - Article
    - 133
    - 46
    - '2019-04-05 09:48:24.395224'
  - - 47
    - image
    - Article
    - 134
    - 47
    - '2019-04-07 12:11:32.538646'
  - - 48
    - image
    - Article
    - 135
    - 48
    - '2019-04-07 15:15:35.758472'
  - - 49
    - image
    - Article
    - 140
    - 49
    - '2019-04-17 09:50:12.591248'
  - - 51
    - image
    - Article
    - 142
    - 51
    - '2019-04-20 13:51:23.627937'
  - - 52
    - image
    - Article
    - 144
    - 52
    - '2019-04-26 06:39:36.481066'
  - - 53
    - image
    - Article
    - 145
    - 53
    - '2019-05-07 06:22:14.886209'
  - - 54
    - image
    - Article
    - 146
    - 54
    - '2019-05-07 07:59:20.215279'
  - - 55
    - image
    - Article
    - 147
    - 55
    - '2019-05-07 09:04:53.549433'
  - - 56
    - image
    - Article
    - 151
    - 56
    - '2019-05-13 09:59:35.219956'
  - - 57
    - image
    - Article
    - 155
    - 57
    - '2019-05-16 08:38:50.589596'
  - - 58
    - image
    - Article
    - 161
    - 58
    - '2019-06-03 08:25:35.743828'
  - - 59
    - image
    - Article
    - 148
    - 59
    - '2019-06-08 08:44:22.05736'
  - - 60
    - image
    - Article
    - 149
    - 60
    - '2019-06-08 08:44:43.001913'
  - - 61
    - image
    - Article
    - 150
    - 61
    - '2019-06-08 08:44:59.483484'
  - - 62
    - image
    - Article
    - 156
    - 62
    - '2019-06-08 08:45:16.254665'
  - - 63
    - image
    - Article
    - 162
    - 63
    - '2019-06-08 08:45:32.375332'
  - - 64
    - image
    - Article
    - 169
    - 64
    - '2019-06-17 02:09:16.22708'
  - - 65
    - image
    - Article
    - 170
    - 65
    - '2019-06-25 10:29:07.846561'
  - - 66
    - image
    - Article
    - 171
    - 66
    - '2019-07-01 01:59:46.289833'
  - - 67
    - image
    - Article
    - 173
    - 67
    - '2019-07-09 06:38:35.577353'
  - - 68
    - image
    - Article
    - 174
    - 68
    - '2019-07-09 07:13:54.455472'
  - - 69
    - image
    - Article
    - 176
    - 69
    - '2019-07-14 10:00:58.918631'
  - - 70
    - image
    - Article
    - 178
    - 70
    - '2019-07-25 14:29:17.028285'
  - - 71
    - image
    - Article
    - 179
    - 71
    - '2019-07-26 17:06:31.223526'
  - - 72
    - image
    - Article
    - 180
    - 72
    - '2019-07-26 20:20:06.378384'
  - - 73
    - image
    - Article
    - 181
    - 73
    - '2019-07-28 14:35:29.224011'
  - - 74
    - image
    - Article
    - 182
    - 74
    - '2019-07-28 17:26:42.43784'
  - - 75
    - image
    - Article
    - 183
    - 75
    - '2019-07-29 13:24:30.25273'
  - - 76
    - image
    - Article
    - 184
    - 76
    - '2019-07-30 15:23:49.100028'
  - - 77
    - image
    - Article
    - 185
    - 77
    - '2019-07-30 15:51:08.775669'
  - - 78
    - image
    - Article
    - 187
    - 78
    - '2019-08-01 19:20:17.514473'
  - - 79
    - image
    - Article
    - 188
    - 79
    - '2019-08-02 16:33:32.663389'
  - - 80
    - image
    - Article
    - 189
    - 80
    - '2019-08-04 13:38:16.490381'
  - - 81
    - image
    - Article
    - 190
    - 81
    - '2019-08-05 18:19:24.400696'
  - - 83
    - image
    - Article
    - 192
    - 83
    - '2019-08-05 18:57:44.949117'
  - - 84
    - image
    - Article
    - 193
    - 84
    - '2019-08-05 20:36:04.329281'
  - - 85
    - image
    - Article
    - 194
    - 85
    - '2019-08-06 14:47:54.391808'
  - - 86
    - image
    - Article
    - 195
    - 86
    - '2019-08-12 18:04:36.124391'
  - - 87
    - image
    - Article
    - 196
    - 87
    - '2019-08-13 18:27:22.020693'
  - - 88
    - image
    - Article
    - 197
    - 88
    - '2019-08-18 14:49:33.697623'
  - - 89
    - image
    - Article
    - 198
    - 89
    - '2019-08-25 13:05:59.954529'
  - - 90
    - image
    - Article
    - 199
    - 90
    - '2019-08-25 14:15:47.081593'
  - - 91
    - image
    - Article
    - 201
    - 91
    - '2019-09-09 14:05:04.679678'
  - - 92
    - image
    - Article
    - 202
    - 92
    - '2019-09-22 19:55:23.820398'
  - - 93
    - image
    - Article
    - 203
    - 93
    - '2019-09-22 20:30:04.123278'
  - - 94
    - image
    - Article
    - 204
    - 94
    - '2019-09-23 18:42:01.282077'
  - - 95
    - image
    - Article
    - 205
    - 95
    - '2019-09-24 15:31:37.2392'
  - - 96
    - image
    - Article
    - 219
    - 96
    - '2020-01-24 23:32:15.409006'
  - - 98
    - image
    - Article
    - 220
    - 98
    - '2020-01-27 21:35:26.889813'
  - - 99
    - image
    - Article
    - 226
    - 99
    - '2020-04-05 14:05:45.500335'
  - - 100
    - image
    - Article
    - 227
    - 100
    - '2020-04-05 14:12:34.724991'
  - - 101
    - image
    - Article
    - 229
    - 101
    - '2020-06-20 19:25:06.777561'
  - - 102
    - image
    - Article
    - 228
    - 102
    - '2020-06-20 19:27:04.984483'
  - - 103
    - image
    - Article
    - 230
    - 103
    - '2020-06-20 19:59:30.169589'

---
active_storage_blobs:
  columns:
  - id
  - key
  - filename
  - content_type
  - metadata
  - byte_size
  - checksum
  - created_at
  records: 
  - - 4
    - TapyRDfz3Co9bo9R45tMdKFj
    - CCC9V9A9997_TP_V.jpg
    - image/jpeg
    - '{"identified":true,"analyzed":true}'
    - 227312
    - IqSt3hW6+mYWxd9FocGSUQ==
    - '2018-11-19 09:08:13.333818'
  - - 13
    - kQeLTznXwBs1NmdxDhupjgsj
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-08 15:33:59.720368'
  - - 14
    - H54bGnG6nSsVzonkysZfM6E8
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-08 15:56:28.162019'
  - - 15
    - VuYhCmHVFSfgRDHUrf9YnGY7
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-08 16:51:33.025516'
  - - 16
    - ckUV4nEWfnXvaL9JyHgfEgfD
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-09 13:39:12.341112'
  - - 17
    - 8eaN1c4UbyMZz5x5r3WJuvMw
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-10 07:09:04.53332'
  - - 18
    - CKzZZJHNLvtHjEwmSwkBFAVM
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-10 08:11:09.900255'
  - - 19
    - Txg1f3T7M7Q3oyDk8zjtNHd3
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-10 09:21:55.283572'
  - - 20
    - wwRc7tXpaQyM1bbpGiMffxqa
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2018-12-10 09:43:05.632922'
  - - 21
    - RLntuge8F8DnCXUnpPxfi9L7
    - mysql_Fotor.png
    - image/png
    - '{"identified":true,"width":394,"height":315,"analyzed":true}'
    - 129601
    - W25NCPKs85gtnmflbd5xvA==
    - '2018-12-16 00:55:53.523744'
  - - 23
    - GD3iZwsguvvuAjj3WdqNE4Mf
    - is_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":300,"height":200,"analyzed":true}'
    - 36992
    - oXlXcUkjusFrnCAGa5bbfA==
    - '2018-12-19 06:48:55.117847'
  - - 24
    - 697CD2S2Gqc5Y6vUZxY24j2N
    - spreadsheet.png
    - image/png
    - '{"identified":true,"width":1490,"height":848,"analyzed":true}'
    - 120187
    - I8ikInjefnPc8NZrLP+1Ow==
    - '2018-12-24 12:48:18.67815'
  - - 25
    - 8iU1vWQK21hpzNEBVtNb55YF
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2019-01-13 12:29:06.457391'
  - - 26
    - meyaBHsmmt79ST3QobgPQfVH
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2019-01-13 13:41:28.488422'
  - - 27
    - AD8B7AwhNXjqJ1aPZCM9WC67
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2019-01-14 06:12:11.255232'
  - - 28
    - XfgE4ZARYhPKntfK1k1i7T5d
    - スクリーンショット 2019-01-21 17.04.33.png
    - image/png
    - '{"identified":true,"width":1144,"height":730,"analyzed":true}'
    - 78135
    - "+Y6yTmxuC397nQbmMdZQfg=="
    - '2019-01-21 08:08:26.628031'
  - - 30
    - r9Bd9dm65w6KmimUD3xYr6Np
    - スクリーンショット 2019-01-21 19.27.59.png
    - image/png
    - '{"identified":true,"width":1140,"height":688,"analyzed":true}'
    - 48988
    - 6KZx16NrqIr/hRG12NVGdw==
    - '2019-01-21 10:28:35.340075'
  - - 32
    - 35Kfaqhtow9dXdxbuUfv9EpV
    - スクリーンショット 2019-02-03 17.55.41.png
    - image/png
    - '{"identified":true,"width":1140,"height":476,"analyzed":true}'
    - 115178
    - 3J4/A2HHyOQqODbl2xyATg==
    - '2019-02-03 08:56:12.752475'
  - - 33
    - DqBXqDD6KWF9kjXRiyW5M695
    - スクリーンショット 2019-02-04 19.50.50.png
    - image/png
    - '{"identified":true,"width":1140,"height":674,"analyzed":true}'
    - 75806
    - cfu6pxHPRGGFREjG8tBovA==
    - '2019-02-04 10:55:24.034099'
  - - 34
    - jn6pG1XbRPuXEvJhg6K4rTyy
    - スクリーンショット 2019-02-04 19.02.20.png
    - image/png
    - '{"identified":true,"width":1142,"height":478,"analyzed":true}'
    - 61724
    - mMoXsyq05kc5sK3+3Mh3PQ==
    - '2019-02-04 10:56:55.752125'
  - - 35
    - 6t6Xgj62TdwYM6qhRyBQEnLy
    - is_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":300,"height":200,"analyzed":true}'
    - 36992
    - oXlXcUkjusFrnCAGa5bbfA==
    - '2019-03-04 07:12:48.677165'
  - - 36
    - AWoi1cWPBWTwdEzQeWrEJURZ
    - pg.png
    - image/png
    - '{"identified":true,"width":335,"height":283,"analyzed":true}'
    - 5374
    - 6ZBCKPidiEUY1XIZPqJXQQ==
    - '2019-03-08 04:14:28.108038'
  - - 37
    - LXs2sdY7mYmayxnqt2YyZU9G
    - pg.png
    - image/png
    - '{"identified":true,"width":335,"height":283,"analyzed":true}'
    - 5374
    - 6ZBCKPidiEUY1XIZPqJXQQ==
    - '2019-03-08 04:15:11.410184'
  - - 38
    - MpgHLniVwdLbmQ66gqBGz8vx
    - is_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":300,"height":200,"analyzed":true}'
    - 36992
    - oXlXcUkjusFrnCAGa5bbfA==
    - '2019-03-08 07:56:22.57014'
  - - 40
    - U3F5ojBS7mNJ5dLw6QDc3g3Q
    - pwa.png
    - image/png
    - '{"identified":true,"width":1558,"height":1030,"analyzed":true}'
    - 110483
    - tKe4dn9qshAnVlFcvlXOlw==
    - '2019-03-19 03:38:59.033678'
  - - 41
    - ivbWDR9Gdv2NwzZJ3ezCf5T1
    - pg.png
    - image/png
    - '{"identified":true,"width":335,"height":283,"analyzed":true}'
    - 5374
    - 6ZBCKPidiEUY1XIZPqJXQQ==
    - '2019-03-21 13:45:27.222214'
  - - 42
    - MjqJ952BLtXZWhcn42nkqQYY
    - スクリーンショット 2019-04-03 19.04.55.png
    - image/png
    - '{"identified":true,"width":2556,"height":1236,"analyzed":true}'
    - 482084
    - WVy9HOnFijZKinMPxNVoDg==
    - '2019-04-03 10:10:52.487264'
  - - 43
    - ZVegeFSNaTgYAYinrNTqBYC2
    - スクリーンショット 2019-04-04 17.55.56.png
    - image/png
    - '{"identified":true,"width":2560,"height":1228,"analyzed":true}'
    - 254722
    - ReUvF9fLPm175z0vsVyYRA==
    - '2019-04-04 08:57:26.459849'
  - - 44
    - D3HFp6VfA6pF5sQHoG16fZPW
    - スクリーンショット 2019-04-04 17.57.58.png
    - image/png
    - '{"identified":true,"width":2560,"height":1278,"analyzed":true}'
    - 286264
    - N2BXWEH8bc7Tt9arbRHbeQ==
    - '2019-04-04 08:59:06.291847'
  - - 45
    - ZuwRVzFxwVi5c6XHfRMxDszZ
    - スクリーンショット 2019-04-05 15.39.49.png
    - image/png
    - '{"identified":true,"width":2560,"height":1232,"analyzed":true}'
    - 253139
    - L13MAOlC2lj36/FJTz0szA==
    - '2019-04-05 06:41:32.120805'
  - - 46
    - X9BG7dhwRXy4waPecYSLeqdF
    - スクリーンショット 2019-04-05 18.47.46.png
    - image/png
    - '{"identified":true,"width":2554,"height":1292,"analyzed":true}'
    - 485808
    - DMHeLBfU3NINzFx7WY/91w==
    - '2019-04-05 09:48:24.384339'
  - - 47
    - HzBr96h8cS5uT8o8wY4u5BTr
    - スクリーンショット 2019-04-07 21.06.38.png
    - image/png
    - '{"identified":true,"width":2560,"height":1224,"analyzed":true}'
    - 286051
    - tuZFIYTR1ixWMDoHg91SjQ==
    - '2019-04-07 12:11:32.467781'
  - - 48
    - Jb3DNJvyhJVSbWJhH4zNu4ST
    - スクリーンショット 2019-04-08 0.15.07.png
    - image/png
    - '{"identified":true,"width":2560,"height":1216,"analyzed":true}'
    - 565179
    - RhGI1/DefR6AI0w9282k/Q==
    - '2019-04-07 15:15:35.752539'
  - - 49
    - okFh36d1JAEvoLEJFTJtwfR7
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2019-04-17 09:50:12.58416'
  - - 50
    - u4udcQyXs2UMEEgmnM7Dvz3r
    - mysql_image.jpg
    - image/jpeg
    - '{"identified":true,"width":1920,"height":1080,"analyzed":true}'
    - 53937
    - jfL911UL5eB+ZljTuviMIg==
    - '2019-04-20 13:43:49.464073'
  - - 51
    - zc65ATKmpghtYfKqr38q8dP1
    - mysql.png
    - image/png
    - '{"identified":true,"width":394,"height":315,"analyzed":true}'
    - 129601
    - W25NCPKs85gtnmflbd5xvA==
    - '2019-04-20 13:51:23.613763'
  - - 52
    - SfwkE3KFszi183FnCvghEsjM
    - con-VPC-sec-grp.png
    - image/png
    - '{"identified":true,"width":448,"height":394,"analyzed":true}'
    - 31664
    - 5Y32eAvVo/CUtzS/KyPd8A==
    - '2019-04-26 06:39:36.471388'
  - - 53
    - Cw9Cuor5DM5yaHKGYAUb61H8
    - python.png
    - image/png
    - '{"identified":true,"width":900,"height":506,"analyzed":true}'
    - 61881
    - W5Tm6quiHlm0po50wi1ULQ==
    - '2019-05-07 06:22:14.879098'
  - - 54
    - FKMiAuTGWdW5bMBApHTuMWH3
    - python.png
    - image/png
    - '{"identified":true,"width":900,"height":506,"analyzed":true}'
    - 61881
    - W5Tm6quiHlm0po50wi1ULQ==
    - '2019-05-07 07:59:20.19928'
  - - 55
    - wR6dafQvUVix3TUGiLXz7enw
    - python.png
    - image/png
    - '{"identified":true,"width":900,"height":506,"analyzed":true}'
    - 61881
    - W5Tm6quiHlm0po50wi1ULQ==
    - '2019-05-07 09:04:53.534643'
  - - 56
    - AYh8JSfhXG465zYXvYMrWbr2
    - rds.png
    - image/png
    - '{"identified":true,"width":1420,"height":1152,"analyzed":true}'
    - 96007
    - 2tC5xC+cO1jqXkViXbxzSQ==
    - '2019-05-13 09:59:35.212103'
  - - 57
    - nqmYTQdcRcXN3mz3VCgMKV6b
    - スクリーンショット 2019-05-16 17.30.02.png
    - image/png
    - '{"identified":true,"width":2560,"height":1218,"analyzed":true}'
    - 334767
    - Qd6IbJoR1C5ut+kiIMtUvA==
    - '2019-05-16 08:38:50.57529'
  - - 58
    - gW5GXTLK5oTQEpigoDEbe796
    - server.png
    - image/png
    - '{"identified":true,"width":671,"height":321,"analyzed":true}'
    - 39587
    - WiY9qhluqW0e6yZa8IgOmA==
    - '2019-06-03 08:25:35.736718'
  - - 59
    - bMmSvS1LMW5SgaYiD4iFMyQe
    - スクリーンショット 2019-06-08 17.43.43.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-06-08 08:44:22.04963'
  - - 60
    - t652M8Fh8PDprJyW9akdczEy
    - スクリーンショット 2019-06-08 17.43.43.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-06-08 08:44:42.998933'
  - - 61
    - SHUW5BpR7VKsPudF91rhnrYN
    - スクリーンショット 2019-06-08 17.43.43.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-06-08 08:44:59.480707'
  - - 62
    - kXmxQhRTg8ZeT2HiP51STBGT
    - スクリーンショット 2019-06-08 17.43.43.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-06-08 08:45:16.251574'
  - - 63
    - t6Cb4bjEr9UjKmRnrJWWbbyP
    - スクリーンショット 2019-06-08 17.43.43.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-06-08 08:45:32.37088'
  - - 64
    - unSmYX5zuoQRMtPevTtG7r2Z
    - python.png
    - image/png
    - '{"identified":true,"width":900,"height":506,"analyzed":true}'
    - 61881
    - W5Tm6quiHlm0po50wi1ULQ==
    - '2019-06-17 02:09:16.221039'
  - - 65
    - LTbMkmLYoWcp5ReUw5zhvniK
    - スクリーンショット 2019-06-08 17.43.43.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-06-25 10:29:07.837637'
  - - 66
    - DCiXiGSiUJhU8AFpNtzVWVcb
    - froala_Fotor.jpg
    - image/jpeg
    - '{"identified":true,"width":850,"height":400,"analyzed":true}'
    - 202908
    - UpJRC1QR7FLgXehCuPLi4Q==
    - '2019-07-01 01:59:46.283548'
  - - 67
    - 2VWJz3YTP6NJgCDfGXghfjua
    - certbot_ec2.jpg
    - image/jpeg
    - '{"identified":true,"width":540,"height":411,"analyzed":true}'
    - 23381
    - T8wNIVMisld1LYGb4Sa3Lg==
    - '2019-07-09 06:38:35.5303'
  - - 68
    - WiUGn1DcgpnrjwwYGp8oAp6t
    - sampleinfra.png
    - image/png
    - '{"identified":true,"width":2560,"height":1292,"analyzed":true}'
    - 351619
    - bNlaXv16LuGyxBWiKeQq2g==
    - '2019-07-09 07:13:54.446461'
  - - 69
    - x1NLSLiRZPkQ73ds4Mc9zQo6
    - ML.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-07-14 10:00:58.884072'
  - - 70
    - R8S6cFZSck4SULPAQbDUHdHw
    - domein_redirect.png
    - image/png
    - '{"identified":true,"width":725,"height":357,"analyzed":true}'
    - 30800
    - ZX42b4fFj88T1Q8sokU0wg==
    - '2019-07-25 14:29:17.022261'
  - - 71
    - QK8ddSKzSmMExzsmYA4TKeUV
    - page.png
    - image/png
    - '{"identified":true,"width":596,"height":74,"analyzed":true}'
    - 13511
    - VtOmtdjbgkqaNfZ3Qy+r7A==
    - '2019-07-26 17:06:31.209069'
  - - 72
    - AGowFtcajaTV9h2k6ahBLVpW
    - search_input.png
    - image/png
    - '{"identified":true,"width":448,"height":68,"analyzed":true}'
    - 12068
    - LsBVfyZJkAsWyLvQpNa2AQ==
    - '2019-07-26 20:20:06.375063'
  - - 73
    - doYUKhbXdwLcU8QnAnLYceVN
    - ads_pic.png
    - image/png
    - '{"identified":true,"width":2560,"height":1298,"analyzed":true}'
    - 320867
    - hfF4wm0P2fMosYtVb1ZZ/A==
    - '2019-07-28 14:35:29.22132'
  - - 74
    - 9EGiMC1cyi4TR6qHAcyRJHfo
    - Route53_maindomain.png
    - image/png
    - '{"identified":true,"width":2560,"height":1238,"analyzed":true}'
    - 685278
    - iJQ2Nb5HA+k4QuAVAK7zAw==
    - '2019-07-28 17:26:42.43385'
  - - 75
    - FSGveronnLVNEoKn5hbgTexv
    - サイトマップ結果.png
    - image/png
    - '{"identified":true,"width":2560,"height":1298,"analyzed":true}'
    - 246240
    - F61Do9I8goFcusFvVYzuTg==
    - '2019-07-29 13:24:30.247818'
  - - 76
    - ecsPzrPi92usAcWaLnBYbsGc
    - sidebar_codepen.png
    - image/png
    - '{"identified":true,"width":2560,"height":806,"analyzed":true}'
    - 115693
    - SWXGayJKcyL2IVdzMdBeOg==
    - '2019-07-30 15:23:49.090608'
  - - 77
    - Q6iemSjhq8kcLsydki1peaJY
    - make_code.png
    - image/png
    - '{"identified":true,"width":2560,"height":1180,"analyzed":true}'
    - 601578
    - rPtkLSq2kVRwTMrl8yt3Zg==
    - '2019-07-30 15:51:08.773271'
  - - 78
    - rVaTCrKYzPhjKxASySfLfAxn
    - onamae_search.png
    - image/png
    - '{"identified":true,"width":2560,"height":1232,"analyzed":true}'
    - 428670
    - 3asD7VsY7Kchnb8iRayH0g==
    - '2019-08-01 19:20:17.511592'
  - - 79
    - dJwaiq2UBdqnckwKK3KNiv9w
    - a8.net_asp.png
    - image/png
    - '{"identified":true,"width":381,"height":301,"analyzed":true}'
    - 11465
    - eGUEZlaruPTQvAt8/wCapg==
    - '2019-08-02 16:33:32.659837'
  - - 80
    - 2EzwHj8A7mN3Gr3ebzMTa2mo
    - page_title.png
    - image/png
    - '{"identified":true,"width":501,"height":341,"analyzed":true}'
    - 28824
    - WvH7y6VEfIyOUCj5Qn/U9w==
    - '2019-08-04 13:38:16.486756'
  - - 81
    - HGgKaY11iJGKVJVB26x6SQfg
    - wysiwyg-rails2.9.png
    - image/png
    - '{"identified":true,"width":1874,"height":172,"analyzed":true}'
    - 31480
    - bhUtqLKWTGpYiKMWrBFpvg==
    - '2019-08-05 18:19:24.3974'
  - - 83
    - THpRFueZMqW5E53fYxbAndtW
    - mathjax.png
    - image/png
    - '{"identified":true,"width":2422,"height":724,"analyzed":true}'
    - 133321
    - nRWh1hLAIhOqkwCpTredYQ==
    - '2019-08-05 18:57:44.945445'
  - - 84
    - ztvG2JGtyyf4yhUWawz4woSE
    - mathjax.png
    - image/png
    - '{"identified":true,"width":2422,"height":724,"analyzed":true}'
    - 133321
    - nRWh1hLAIhOqkwCpTredYQ==
    - '2019-08-05 20:36:04.314821'
  - - 85
    - ptw2R6sczSGhQu1by9cttdzY
    - scp_move_file.png
    - image/png
    - '{"identified":true,"width":751,"height":451,"analyzed":true}'
    - 40653
    - TI7StdfFzbAbrBxFhJc4qg==
    - '2019-08-06 14:47:54.357316'
  - - 86
    - n8ZXUXFP31tAc1F85QUbr8QX
    - ML.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-08-12 18:04:36.115839'
  - - 87
    - NpsgGYpc3NSbKXxWwHqGBYmH
    - ML.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-08-13 18:27:21.981458'
  - - 88
    - LofevjkMt8sPNzrnXcBvJfv8
    - ML.png
    - image/png
    - '{"identified":true,"width":822,"height":1164,"analyzed":true}'
    - 448221
    - x2IQoB2Oenrs/Ql1gp1UtQ==
    - '2019-08-18 14:49:33.652726'
  - - 89
    - oao8WZq2ZgdKjQVuKdjKJGNh
    - R_image.png
    - image/png
    - '{"identified":true,"width":2000,"height":1550,"analyzed":true}'
    - 194963
    - BgoeftOFRdO7g8F3O1eXSQ==
    - '2019-08-25 13:05:59.946686'
  - - 90
    - cCi5A8ADdZtfzeHGgT5tQcEo
    - R_image.png
    - image/png
    - '{"identified":true,"width":2000,"height":1550,"analyzed":true}'
    - 194963
    - BgoeftOFRdO7g8F3O1eXSQ==
    - '2019-08-25 14:15:47.069003'
  - - 91
    - 6Nrx5BW2V5cd9bPszFK1mcgX
    - python_image.png
    - image/png
    - '{"identified":true,"width":900,"height":506,"analyzed":true}'
    - 61881
    - W5Tm6quiHlm0po50wi1ULQ==
    - '2019-09-09 14:05:04.605589'
  - - 92
    - vAirLbAM4qi6L4MqPEk4L8cW
    - pandas.jpg
    - image/jpeg
    - '{"identified":true,"width":1600,"height":1066,"analyzed":true}'
    - 510297
    - 1GizwBygfAfFh9vqHeTbZg==
    - '2019-09-22 19:55:23.737378'
  - - 93
    - JUm78uwYKThWi52gRGdo1KUN
    - pandas.jpg
    - image/jpeg
    - '{"identified":true,"width":1600,"height":1066,"analyzed":true}'
    - 510297
    - 1GizwBygfAfFh9vqHeTbZg==
    - '2019-09-22 20:30:04.09103'
  - - 94
    - rjnDmywa79UFMGsmEf6CFjpH
    - pandas.jpg
    - image/jpeg
    - '{"identified":true,"width":1600,"height":1066,"analyzed":true}'
    - 510297
    - 1GizwBygfAfFh9vqHeTbZg==
    - '2019-09-23 18:42:01.24147'
  - - 95
    - VVYmhMG8Bs3WBCsv6Kh5WYVc
    - pandas.jpg
    - image/jpeg
    - '{"identified":true,"width":1600,"height":1066,"analyzed":true}'
    - 510297
    - 1GizwBygfAfFh9vqHeTbZg==
    - '2019-09-24 15:31:37.197935'
  - - 96
    - DFMYjZDP6DK4bVPn6GGiEpD4
    - deep_learning_vm2.png
    - image/png
    - '{"identified":true,"width":2560,"height":1282,"analyzed":true}'
    - 455134
    - IEFhCWrzdK+Vc6VqXbaonQ==
    - '2020-01-24 23:32:15.373788'
  - - 97
    - gsrNTZmaLmnw61kxVrrE37L2
    - send_with_stamp.png
    - image/png
    - '{"identified":true,"width":1814,"height":1028,"analyzed":true}'
    - 215377
    - DNtPdsUVLGGTcaT23UrdfA==
    - '2020-01-27 21:32:39.31724'
  - - 98
    - 2s8g5uakmH3iW7eaQP6i9zoJ
    - send_with_stamp.png
    - image/png
    - '{"identified":true,"width":1814,"height":1028,"analyzed":true}'
    - 194274
    - "/5X4b1sQI8VyjpYfLleI8w=="
    - '2020-01-27 21:35:26.884405'
  - - 99
    - gJgzPU33w42ufoJjk47c6u8q
    - coursera.png
    - image/png
    - '{"identified":true,"width":646,"height":217,"analyzed":true}'
    - 15124
    - JmTJ4+U8FAGkbVBjHhJdqQ==
    - '2020-04-05 14:05:45.482476'
  - - 100
    - GMatk4THbrcsR4zrZbNgwWpk
    - coursera.png
    - image/png
    - '{"identified":true,"width":646,"height":217,"analyzed":true}'
    - 15124
    - JmTJ4+U8FAGkbVBjHhJdqQ==
    - '2020-04-05 14:12:34.684395'
  - - 101
    - 2J2Wm473PNtMTtXRK7WJpa2e
    - coursera.png
    - image/png
    - '{"identified":true,"width":646,"height":217,"analyzed":true}'
    - 15124
    - JmTJ4+U8FAGkbVBjHhJdqQ==
    - '2020-06-20 19:25:06.765638'
  - - 102
    - HzM7dFQT9jDmCWadQeYDJTPF
    - coursera.png
    - image/png
    - '{"identified":true,"width":646,"height":217,"analyzed":true}'
    - 15124
    - JmTJ4+U8FAGkbVBjHhJdqQ==
    - '2020-06-20 19:27:04.974863'
  - - 103
    - hPswPjGi5rKrecEm7chevZJU
    - coursera.png
    - image/png
    - '{"identified":true,"width":646,"height":217,"analyzed":true}'
    - 15124
    - JmTJ4+U8FAGkbVBjHhJdqQ==
    - '2020-06-20 19:59:30.139072'

---
ar_internal_metadata:
  columns:
  - key
  - value
  - created_at
  - updated_at
  records: 
  - - environment
    - production
    - '2018-11-12 10:16:28.781674'
    - '2019-03-21 07:29:42.146279'

---
articles:
  columns:
  - id
  - title
  - body
  - created_at
  - updated_at
  records: 
  - - 24
    - Javascript FetchでTwitterにログイン
    - "<h1 itemprop=\"name\" style=\"text-align: center;\">Cypressで非同期</h1><p><span
      style=\"color: rgb(184, 49, 47);\">Cypressはクロスドメインでの非同期処理のテストが行えないため、fetchで補うのが一般的</span></p><h2>Javascript
      FetchでTwitterにログインするのを例にする</h2><pre>describe(&#39;Login&#39;, function () {\r\nit(&#39;サインイン&#39;,
      function () {\r\nvar twitter_token;\r\nvar userid=&quot;id&quot;;//自分のTwitterIDを入力しています。\r\nvar
      userpass=&quot;pass&quot;;//自分のTwitterPASSを入力しています。\r\n\r\n// GETにアクセスして,responseのうちのtokenをもらい、次にPOSTにアクセスしてtokenとともにusernameやpasswordをresponseに送る\r\nfetch(&quot;https://twitter.com/&quot;,
      {\r\n    mode: &#39;cors&#39;,\r\n    credentials: &#39;include&#39;\r\n}).then(function(response)
      {\r\n    return response.text();\r\n}).then(function(text) {\r\n//   &lt;input
      type=&quot;hidden&quot; name=&quot;(ここから)redirect_after_login&quot; value=&quot;/&quot;&gt;\r\n//
      &lt;input type=&quot;hidden&quot; value=&quot;3f569fb396b8b03a229c3f569fb396b8b03a229c&quot;
      name=&quot;authenticity_token&quot;&gt;\r\n// \\w 英数文字([A-Za-z0-9_]と同じ） \\w+
      1文字以上の英数字 \\s 1文字の区切り文字([ \\f\\n\\r\\t\\v]）. 任意の1文字 .+ 1文字以上\r\n    var getstring
      = text.match(/redirect_after_login&quot; value=.+\\s.+value=&quot;(\\w+)&quot;/);\r\n 
        twitter_token = getstring[1];\r\nconsole.log(text);//ここでTwitter_Tokenは取得できています。\r\n\r\n//ここからログイン処理\r\n 
      fetch(&quot;https://twitter.com/sessions&quot;, {\r\n  mode: &#39;cors&#39;,\r\n 
      credentials: &#39;include&#39;,\r\n  method: &#39;POST&#39;,\r\n  headers: {
      &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,&#39;Referer&#39;:
      &#39;https://twitter.com/&#39; },\r\n  body: &#39;session[username_or_email]=&#39;+
      userid + &#39;&amp;session[password]=&#39; + userpass +\r\n  &#39;&amp;remember_me=1&amp;return_to_ssl=true&amp;scribe_log=&#39;+\r\n 
      &#39;&amp;redirect_after_login=/&amp;authenticity_token=&#39;+twitter_token\r\n 
        }).then(function(response) {\r\n    return response.text();\r\n    }).then(function(text)
      {\r\n    console.log(text);//出力されたhtmlを画面に表示\r\n    cy.visit(&#39;https://twitter.com/?lang=ja&#39;)\r\n 
        });\r\n  });\r\n  // Cypress.Cookies.debug(true)\r\n})\r\n})</pre><section><section
      data-id=\"49224\" itemprop=\"acceptedAnswer\"><p><br></p></section></section>"
    - '2018-11-22 09:03:50.950825'
    - '2019-07-22 17:14:36.513759'
  - - 84
    - Rails5.2 bootstrapとclearanceで認証機能をサクッと実装
    - "<h1 style=\"text-align: center;\"><span style=\"color: rgb(184, 49, 47);\">認証(クリアランス)
      と bootstrap</span></h1><p><span style=\"font-size: 30px;\">前提 jqueryを入れている(bootstrapはjqueryが必要)</span></p><p><br></p><p><strong>1.gemのインストール</strong></p><pre>Gemfile\r\n...\r\ngem
      &#39;clearance&#39;\r\ngem &#39;bootstrap-sass&#39;\r\ngem &#39;sass-rails&#39;</pre><p><code>bundle
      install</code></p><p><strong><br></strong></p><p><strong>2. bootstrapのcssを読み込む</strong></p><pre><code>#assets/stylesheets/application.scss\r\n...\r\n@import
      &#39;bootstrap-sprockets&#39;;\r\n@import &#39;bootstrap&#39;;</code></pre><p><strong>bootstrapのjsを読み込む</strong></p><pre>#assetes/javascripts/application.js\r\n...\r\n//=
      require bootstrap-sprockets</pre><p><span style=\"font-family: Impact,Charcoal,sans-serif;\"><span
      style=\"font-size: 30px;\">以上でbootstrapは終了</span><span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style='background: url(\"https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg\");
      font-size: 30px;'>&nbsp;</span></span></p><p><span style=\"font-family: Impact,Charcoal,sans-serif;\">&nbsp;</span></p><p><br></p><p><strong>3.クリアランスの設定ファイルをインストールする(deviseの導入と同じ要領)</strong></p><pre><code>rails
      generate clearance:install</code></pre><p><br></p><p>端末に以下のログが確認できるはず</p><pre><code>create
      \ config/initializers/clearance.rb\r\n      insert  app/controllers/application_controller.rb\r\n
      \     create  app/models/user.rb\r\n      create  db/migrate/20161231132513_create_users.rb\r\n\r\n*******************************************************************************\r\n\r\nNext
      steps:\r\n\r\n1. Configure the mailer to create full URLs in emails:\r\n\r\n
      \   # config/environments/{development,test}.rb\r\n    config.action_mailer.default_url_options
      = { host: &#39;localhost:3000&#39; }\r\n\r\n    In production it should be your
      app&#39;s domain name.\r\n\r\n2. Display user session and flashes. For example,
      in your application layout:\r\n\r\n    &lt;% if signed_in? %&gt;\r\n      Signed
      in as: &lt;%= current_user.email %&gt;\r\n      &lt;%= button_to &#39;Sign out&#39;,
      sign_out_path, method: :delete %&gt;\r\n    &lt;% else %&gt;\r\n      &lt;%=
      link_to &#39;Sign in&#39;, sign_in_path %&gt;\r\n    &lt;% end %&gt;\r\n\r\n
      \   &lt;div id=&quot;flash&quot;&gt;\r\n      &lt;% flash.each do |key, value|
      %&gt;\r\n        &lt;div class=&quot;flash &lt;%= key %&gt;&quot;&gt;&lt;%=
      value %&gt;&lt;/div&gt;\r\n      &lt;% end %&gt;\r\n    &lt;/div&gt;\r\n\r\n3.
      Migrate:\r\n\r\n    rake db:migrate\r\n\r\n*******************************************************************************\r\n</code></pre><p><br></p><p><strong>4.
      step1. environmentの　development.rb / test.rb にて email中にURLを生成するために必要なメイラーの設定を行う(production.rbでは自分のドメインの記載が必要になる)</strong></p><pre><code>#config/environments/development.rb\r\n...\r\n
      \ config.action_mailer.default_url_options = { host: &#39;localhost:3000&#39;
      }</code>\r\n<code>  # config.action_mailer.default_url_options = { host: &#39;localhost&#39;,
      port: 3000 } でも良い\r\n...\r\n</code></pre><p><br></p><p><strong>step2. アプリケーションのレイアウトに,
      セッションとフラッシュの表示機能を実装する</strong></p><p><code>&lt;% if signed_in? %&gt;<br>&nbsp;
      &nbsp; &nbsp; Signed in as: &lt;%= current_user.email %&gt;<br>&nbsp; &nbsp;
      &nbsp; &lt;%= button_to &#39;Sign out&#39;, sign_out_path, method: :delete %&gt;<br>&nbsp;
      &nbsp; &lt;% else %&gt;<br>&nbsp; &nbsp; &nbsp; &lt;%= link_to &#39;Sign in&#39;,
      sign_in_path %&gt;<br>&nbsp; &nbsp; &lt;% end %&gt;<br><br>&nbsp; &nbsp; &lt;div
      id=&quot;flash&quot;&gt;<br>&nbsp; &nbsp; &nbsp; &lt;% flash.each do |key, value|
      %&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &lt;div class=&quot;flash &lt;%= key %&gt;&quot;&gt;&lt;%=
      value %&gt;&lt;/div&gt;<br>&nbsp; &nbsp; &nbsp; &lt;% end %&gt;<br>&nbsp; &nbsp;
      &lt;/div&gt;</code></p><p><br></p><p>セッション表示の例 (bootstrapを使って好きに作ってよし!!)</p><pre><code>#views/layouts/_navigation.html.erb\r\n\r\n&lt;nav
      class=&quot;navbar navbar-default&quot;&gt;\r\n  &lt;div class=&quot;container-fluid&quot;&gt;\r\n
      \   &lt;!-- Brand and toggle get grouped for better mobile display --&gt;\r\n
      \   &lt;div class=&quot;navbar-header&quot;&gt;\r\n      &lt;button type=&quot;button&quot;
      class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbar-collapse&quot;
      aria-expanded=&quot;false&quot;&gt;\r\n        &lt;span class=&quot;sr-only&quot;&gt;Toggle
      navigation&lt;/span&gt;\r\n        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;\r\n
      \       &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;\r\n        &lt;span
      class=&quot;icon-bar&quot;&gt;&lt;/span&gt;\r\n      &lt;/button&gt;\r\n   
        &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;ようこそブログへ!!</code><code>&lt;/a&gt;\r\n
      \   &lt;/div&gt;\r\n    &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbar-collapse&quot;&gt;\r\n
      \   &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;\r\n          &lt;li&gt;&lt;%=
      link_to &#39;Home&#39;, root_path %&gt;&lt;/li&gt;\r\n                <span
      style=\"color: rgb(184, 49, 47);\">&lt;% if signed_in? %&gt;\r\n           
          &lt;li&gt;&lt;%= link_to &#39;新規投稿&#39;, new_article_path %&gt;&lt;/li&gt;\r\n
      \               &lt;li&gt;Signed in as: &lt;%= current_user.email %&gt;&lt;/li&gt;\r\n 
                    &lt;li&gt;&lt;%= link_to &#39;ログアウト&#39;, sign_out_path, method:
      :delete %&gt;&lt;/li&gt;\r\n              &lt;% else %&gt;\r\n             
        &lt;li&gt;&lt;%= link_to &#39;ログイン&#39;, sign_in_path %&gt;&lt;/li&gt;\r\n 
                  &lt;% end %&gt;</span>\r\n    &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n
      \ &lt;/div&gt;\r\n&lt;/nav&gt;\r\n</code></pre><p><br></p><p>フラッシュの例</p><pre><code>#views/layouts/application.html.erb\r\n\r\n&lt;!DOCTYPE
      html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;マイブログ&lt;/title&gt;\r\n
      \   &lt;%= csrf_meta_tags %&gt;\r\n\r\n    &lt;%= stylesheet_link_tag    &#39;application&#39;,
      media: &#39;all&#39;, &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&gt;\r\n
      \   &lt;%= javascript_include_tag &#39;application&#39;, &#39;data-turbolinks-track&#39;:
      &#39;reload&#39; %&gt;\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n    <span
      style=\"color: rgb(44, 130, 201);\">&lt;%= render &quot;layouts/navigation&quot;
      %&gt;</span>\r\n    <span style=\"color: rgb(184, 49, 47);\">&lt;div id=&quot;flash&quot;&gt;\r\n
      \     &lt;% flash.each do |key, value| %&gt;\r\n        &lt;div class=&quot;flash
      &lt;%= key %&gt;&quot;&gt;&lt;%= value %&gt;&lt;/div&gt;\r\n      &lt;% end
      %&gt;\r\n    &lt;/div&gt;</span>\r\n    &lt;div class=&quot;container-fluid&quot;&gt;\r\n
      \     &lt;%= yield %&gt;\r\n    &lt;/div&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre><p><br></p><p><strong>step3
      <code>rails generate clearance:install</code> を行ってuserモデルが生成されたので、マイグレーションファイルを生成する</strong></p><pre>rake
      db:migrate</pre><p><br></p><p>以上でクリアランスの設定終了</p><p>認証のviewをいじったり、認証のルートを変えたり、ボットを入れたりしたい場合は<a
      href=\"https://github.com/thoughtbot/clearance\">こちら</a>で詳しい内容をご確認ください</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-08 15:29:09.337574'
    - '2019-07-25 17:08:51.205588'
  - - 85
    - rails5.2 jqueryとfontawesomeの導入
    - "<h1 style=\"text-align: center;\">Railsにfontawesomeとjqueryを導入</h1><p><strong><span
      style=\"font-size: 24px;\">fontawesome 4.4.0の導入</span></strong></p><pre>#application.html.erb\r\n&lt;head&gt;\r\n&lt;title&gt;my_project&lt;/title&gt;\r\n&lt;%=
      csrf_meta_tags %&gt;\r\n&lt;%= csp_meta_tag %&gt;\r\n...\r\n<span style=\"color:
      rgb(226, 80, 65);\">&lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.4.0/css/font-awesome.min.css&quot;
      rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;</span>\r\n...\r\n&lt;%=
      stylesheet_link_tag    &#39;application&#39;, media: &#39;all&#39;, &#39;data-turbolinks-track&#39;:
      &#39;reload&#39; %&gt;\r\n&lt;%= javascript_include_tag &#39;application&#39;,
      &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&gt;\r\n&lt;/head&gt;\r\n...</pre><p
      style=\"text-align: center;\"><span style=\"font-family: Impact, Charcoal, sans-serif;
      font-size: 30px;\">CDNを一行記述すればfontawesome導入終了！！</span></p><p data-empty=\"true\"><br></p><p
      data-empty=\"true\"><strong><span style=\"font-size: 24px;\">次にjquery導入!!</span></strong></p><p
      data-empty=\"true\"><strong>step1</strong></p><pre>#Gemfile\r\n...\r\n<strong>gem
      &#39;jquery-rails&#39;</strong></pre><pre>$ bundle install</pre><p><br></p><p>step2</p><p><strong>jqueryのjs読み込み</strong></p><pre>#assets/javascripts/application.js\r\n...\r\n//=
      require jquery\r\n//= require jquery_ujs</pre><p><br></p><p>なんと</p><p style=\"text-align:
      center;\"><span style=\"font-family: Impact, Charcoal, sans-serif; font-size:
      30px;\">これだけでjquery読み込み終了！！</span></p><p><span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>&nbsp;</p><p
      style=\"text-align: center;\"><br></p><p><br></p><p><br></p><p><br></p><p>ちなみに...</p><p><br></p><p>gemでfontawesomeを使う人は...</p><p><br></p><pre>#Gemfile\r\n<code>gem
      &#39;font-awesome-rails&#39;</code></pre><p><code>$ bundle install</code></p><p><br></p><p>app/assets/stylesheet/application.scss</p><pre><code>@import
      &#39;font-awesome&#39;;</code></pre><p>これで終了!</p><p><br></p><pre><code>&lt;%=
      fa_icon &#39;star&#39; %&gt;</code></pre><p><i class=\"fa fa-star\"></i></p><p>的な感じで使える</p><p><br></p><p><br></p>"
    - '2018-12-08 15:55:53.848985'
    - '2019-07-20 04:42:28.062261'
  - - 86
    - Rails simple_formの導入
    - "<h1 style=\"text-align: center;\">simple_formを導入して簡単にフォームを作れる様にする</h1><p>1.</p><pre><code>#Gemfile\r\n...\r\ngem
      &#39;simple_form&#39;\r\n</code></pre><pre>$ bundle install</pre><p><br></p><p>step2
      simple_formの設定ファイルをインストール</p><pre>$ rails generate simple_form:install</pre><p><strong>Simple
      Formにbootstrapも適用したいいとはこちら！！</strong></p><pre>$ rails generate simple_form:install
      --bootstrap</pre><p><br></p><p>使い方は<a href=\"https://remonote.jp/rails-simple_form-bootstrap\">こちらの方</a>や<a
      href=\"https://qiita.com/Inp/items/4f72918c2fba0d3a8809\">こちらの方</a>が見やすいです</p><p><br></p><p><strong>formを作る</strong></p><pre><code>#
      _form.html.erb\r\n\r\n&lt;%= simple_form_for (@article) do |f| %&gt;\r\n  &lt;%
      if @article.errors.any? %&gt;\r\n    &lt;div id=&quot;error_explanation&quot;&gt;\r\n
      \     &lt;h2&gt;\r\n        &lt;%= &quot;#{pluralize(@article.errors.count,
      &quot;error&quot;)}個のエラーで保存ができません&quot; %&gt;\r\n      &lt;/h2&gt;\r\n      &lt;ul&gt;\r\n
      \       &lt;% @article.errors.full_messages.each do |msg| %&gt;\r\n          &lt;li&gt;\r\n
      \           &lt;%= msg %&gt;\r\n          &lt;/li&gt;\r\n          &lt;% end
      %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;% end %&gt;\r\n\r\n
      \ &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input :title, label:
      &quot;タイトル&quot; %&gt;\r\n  &lt;/div&gt;</code>\r\n\r\n<code><code>  &lt;div
      class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input :body, label: &quot;内容&quot;
      %&gt;\r\n  &lt;/div&gt;</code>\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n
      \   &lt;%= f.input :image, as: :file, class: &quot;form-control&quot; %&gt;\r\n
      \ &lt;/div&gt;\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.button
      :submit %&gt;\r\n  &lt;/div&gt;\r\n</code></pre><p>&nbsp;</p><p>formのcssを作る(自分の好きなレイアウトに)</p><pre>#stylesheets/form.scss\r\n.simple_form
      {\r\nlabel {\r\nmargin: 2px 10px;\r\n&amp;.radio, &amp;.checkbox {\r\nfloat:
      none;\r\nmargin: 0;\r\nwidth: auto;\r\ntext-align: left;\r\n}\r\n&amp;.checkbox
      {\r\ndisplay: block;\r\n}\r\n&amp;.radio { margin-right: 10px; }\r\n}\r\ndiv.input
      { margin-bottom: 10px;}\r\ninput.radio_buttons, input.check_boxes {\r\nmargin-right:
      5px;\r\n}\r\n.alert-error {\r\ncolor: #D00;\r\nmargin-bottom: 10px;\r\nfont-weight:
      bold;\r\n}\r\n.hint, .error {\r\nclear: left;\r\nfont-size: 12px;\r\ncolor:
      #D00;\r\ndisplay: block;\r\n}\r\n.hint {\r\ncolor: #555;\r\nfont-style: italic;\r\n}\r\n}</pre><p><br></p><p>simple_formを使えば記述は多少少なくなるけど、正直、あまり導入しなくてもいいかなって感じではある...</p><p><br></p><p>こっちの方が個人的には好き</p><p><br></p><pre>#_form.html.erb\r\n\r\n&lt;%=
      form_with(model: post, local: true) do |form| %&gt;\r\n&lt;% if post.errors.any?
      %&gt;\r\n&lt;div id=&quot;error_explanation&quot;&gt;\r\n&lt;h2&gt;&lt;%= pluralize(post.errors.count,
      &quot;error&quot;) %&gt; 保存できません&lt;/h2&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;% post.errors.full_messages.each
      do |message| %&gt;\r\n&lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;\r\n&lt;% end
      %&gt;\r\n&lt;/ul&gt;\r\n&lt;/div&gt;\r\n&lt;% end %&gt;\r\n\r\n&lt;div class=&quot;field&quot;&gt;\r\n&lt;%=
      form.label :title %&gt;\r\n&lt;%= form.text_field :title, class: &#39;form-control&#39;
      %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class=&quot;field&quot;&gt;\r\n&lt;%= form.label
      :body %&gt;\r\n&lt;%= form.text_field :body, class: &#39;form-control&#39; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;field&quot;&gt;\r\n&lt;%= form.label :image %&gt;\r\n&lt;%= form.file_field
      :image, class: &#39;form-control&#39; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class=&quot;actions&quot;&gt;\r\n&lt;%=
      form.submit &#39;更新する&#39;, class: &#39;btn btn-block btn-success&#39; %&gt;\r\n&lt;/div&gt;\r\n&lt;%
      end %&gt;</pre><pre>articles_controller\r\n\r\ndef new\r\n@article = Article.new\r\nend\r\n\r\ndef
      edit\r\n@article = Article.find(params[:id])\r\nend\r\n\r\ndef create\r\n  @article
      = Article.new(article_params)\r\n  if @article.save\r\n  flash[:notice] = &quot;作成に成功しました&quot;\r\n
      \ redirect_to article_path(@article)\r\n  else\r\n  flash[:alert] = &quot;エラーのより保存できませんでした&quot;\r\n
      \ render :new\r\n  end\r\nend\r\n\r\nprivate \r\n\r\ndef article_params\r\n
      \ params.require(:article).permit(:title, :body, :image)\r\nend\r\n\r\n</pre><pre>new.html.erb
      edit.html.erb\r\n&lt;%= render &#39;form&#39;, post: @article %&gt;</pre>"
    - '2018-12-08 16:03:39.791986'
    - '2018-12-08 16:51:33.03194'
  - - 87
    - wysiwyg-rails
    - "<h1 style=\"text-align: center;\">wysiwyg-railsの導入</h1><p><br></p><p><span
      style='font-family: \"Times New Roman\", Times, serif, -webkit-standard; font-size:
      30px;'>前提: bootstrap, &nbsp;fontawesome が入っている</span></p><p><br></p><p>1. gemのインストール</p><pre><code>#Gemfile\r\n...\r\ngem
      &#39;wysiwyg-rails&#39;\r\n</code></pre><p><code>bundle install</code></p><p><br></p><p>2.
      wysiwyg-railsのjsを読み込む</p><p>(最低限)</p><pre><code>#app/assets/javascripts/application.js\r\n...\r\n//=
      require froala_editor.min.js\r\n...\r\n</code></pre><p><br></p><p>他にも自分が使いたい機能に合わせてjsを読み込もう!!
      (それぞれがなのを表すかは<a class=\"fr-strong\" href=\"https://www.froala.com/wysiwyg-editor/docs/framework-plugins/rails\">公式ドキュメント</a>をチェック!!)</p><p><br></p><p>下は私の例</p><pre><code>#app/assets/stylesheets/application.scss\r\n\r\n...\r\n//=
      require froala_editor.min.js\r\n//= require plugins/align.min.js\r\n//= require
      plugins/char_counter.min.js\r\n//= require plugins/code_beautifier.min.js\r\n//=
      require plugins/code_view.min.js\r\n//= require plugins/colors.min.js\r\n//=
      require plugins/emoticons.min.js\r\n//= require plugins/entities.min.js\r\n//=
      require plugins/file.min.js\r\n//= require plugins/font_family.min.js\r\n//=
      require plugins/font_size.min.js\r\n//= require plugins/fullscreen.min.js\r\n//=
      require plugins/help.min.js\r\n//= require plugins/image.min.js\r\n//= require
      plugins/image_manager.min.js\r\n//= require plugins/inline_style.min.js\r\n//=
      require plugins/line_breaker.min.js\r\n//= require plugins/link.min.js\r\n//=
      require plugins/lists.min.js\r\n//= require plugins/paragraph_format.min.js\r\n//=
      require plugins/paragraph_style.min.js\r\n//= require plugins/print.min.js\r\n//=
      require plugins/quick_insert.min.js\r\n//= require plugins/quote.min.js\r\n//=
      require plugins/save.min.js\r\n//= require plugins/table.min.js\r\n//= require
      plugins/special_characters.min.js\r\n//= require plugins/url.min.js\r\n//= require
      plugins/video.min.js\r\n//= require activestorage\r\n//= require third_party/image_aviary.min.js\r\n//=
      require third_party/spell_checker.min.js\r\n//= require languages/ja.js\r\n
      ...\r\n</code></pre><p><br></p><p>3. wysiwyg-railsのcssを読み込む</p><p>(最低限)</p><pre><code>#app/assets/stylesheets/application.scss\r\n\r\n...\r\n
      @import &#39;froala_editor.min.css&#39;;\r\n @import &#39;froala_style.min.css&#39;;\r\n
      ...\r\n</code></pre><p><br></p><p>下は私の例</p><pre>@import &#39;form&#39;;\r\n@import
      &#39;froala_editor.min.css&#39;;\r\n@import &#39;froala_style.min.css&#39;;\r\n@import
      &#39;plugins/char_counter.min.css&#39;;\r\n@import &#39;plugins/code_view.min.css&#39;;\r\n@import
      &#39;plugins/colors.min.css&#39;;\r\n@import &#39;plugins/emoticons.min.css&#39;;\r\n@import
      &#39;plugins/file.min.css&#39;;\r\n@import &#39;plugins/fullscreen.min.css&#39;;\r\n@import
      &#39;plugins/help.min.css&#39;;\r\n@import &#39;plugins/image_manager.min.css&#39;;\r\n@import
      &#39;plugins/image.min.css&#39;;\r\n@import &#39;plugins/line_breaker.min.css&#39;;\r\n@import
      &#39;plugins/quick_insert.min.css&#39;;\r\n@import &#39;plugins/special_characters.min.css&#39;;\r\n@import
      &#39;plugins/table.min.css&#39;;\r\n@import &#39;plugins/video.min.css&#39;;\r\n@import
      &#39;bootstrap-sprockets&#39;;\r\n@import &#39;bootstrap&#39;;\r\n@import &#39;third_party/spell_checker.min.css&#39;;\r\n//
      @import &#39;languages/ja.css&#39;; これを入れるとerrorになったのでコメントしました\r\n// @import
      &#39;third_party/embedly.min.css&#39;; embedlyは最近になってapikeyを有料で取得しなければならなくなったみたい...
      <a href=\"http://embed.ly/pricing\">http://embed.ly/pricing</a>\r\n\r\n</pre><p><br></p><p>4.
      コントローラ作成</p><pre><code>#app/controllers/articles_controller.rb\r\n\r\nclass
      ArticlesController &lt; ApplicationController\r\n  before_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\n  before_action :require_login, except:
      [:index, :show]</code>\r\n\r\n<code>  # 一覧 \r\n  def index\r\n    @articles
      = Article.all\r\n  end\r\n  </code>\r\n<code>  # 新規\r\n  def new\r\n    @article
      = Article.new\r\n  end\r\n\r\n  # 作成\r\n  def create\r\n    @article = Article.new(article_params)\r\n
      \   if @article.save\r\n      flash[:notice] = &quot;作成されました&quot;\r\n      redirect_to
      article_path(@article)\r\n    else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n
      \     render :new\r\n    end\r\n  end\r\n\r\n  # 編集\r\n  def edit\r\n  end\r\n\r\n 
      # 更新\r\n  def update\r\n    if @article.update_attributes(article_params)\r\n 
          flash[:notice] = &quot;更新されました&quot;\r\n      redirect_to article_path(@article)\r\n
      \   else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :edit\r\n
      \   end\r\n  end\r\n\r\n  # 詳細\r\n  def show\r\n  end\r\n\r\n  # 削除\r\n  def
      destroy\r\n    if @article.destroy\r\n      flash[:notice] = &quot;削除されました&quot;\r\n
      \     redirect_to articles_path\r\n    else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n
      \   end\r\n  end\r\n\r\n  private\r\n\r\n  def article_params\r\n    params.require(:article).permit(:title,
      :body)\r\n  end\r\n\r\n  def find_article\r\n    @article = Article.find(params[:id])\r\n
      \ end\r\nend\r\n</code></pre><p>ここで</p><p><code>before_action :require_login</code>
      は, clearanceという認証システムのメソッドです。</p><p>deviseでいう</p><p><code>before_action :authenticate_user!</code>
      と同じです</p><p>認証システムを導入してない方はシカトして結構です</p><p><br></p><p>4. view( <span style=\"color:
      rgb(226, 80, 65);\">index.html.erb, new.html.erb, show.html.erb, _form.html.erb,
      edit.html.erb&nbsp;</span>)を作る</p><p><br></p><p><span style=\"font-size: 24px;\">_form.html.erb</span></p><pre><code>#app/views/articles/_form.html.erb\r\n</code>\r\n<code>#
      simple_formを導入してない方は普通に form_with とか form_for で好きな様に作ってもらってOK!</code>\r\n<code>\r\n&lt;%=
      simple_form_for (@article) do |f| %&gt;\r\n  &lt;% if @article.errors.any? %&gt;\r\n
      \   &lt;div id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;\r\n   
          &lt;%= &quot;#{pluralize(@article.errors.count, &quot;error&quot;)} によりこの投稿は保存されませんでした&quot;
      %&gt;\r\n      &lt;/h2&gt;\r\n      &lt;ul&gt;\r\n        &lt;% @article.errors.full_messages.each
      do |msg| %&gt;\r\n          &lt;li&gt;\r\n            &lt;%= msg %&gt;\r\n          &lt;/li&gt;\r\n
      \         &lt;% end %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;%
      end %&gt;\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input
      :title, class: &quot;form-control&quot; %&gt;\r\n  &lt;/div&gt;\r\n\r\n  &lt;div
      class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.label :body %&gt;\r\n    &lt;%=
      f.text_area :body, <span style=\"color: rgb(250, 197, 28);\">id: &quot;wysiwyg&quot;</span>
      %&gt;\r\n  &lt;/div&gt;\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n
      \   &lt;%= f.button :submit %&gt;\r\n  &lt;/div&gt;\r\n&lt;% end %&gt;\r\n&lt;!--
      script for FROALA-WYSIWYG --&gt;\r\n<span style=\"color: rgb(209, 72, 65);\">&lt;script&gt;\r\n
      \ $(&#39;</span><span style=\"color: rgb(250, 197, 28);\">#wysiwyg</span><span
      style=\"color: rgb(209, 72, 65);\">&#39;).froalaEditor({\r\n    inlineMode:
      false,\r\n    heightMin: &#39;200px&#39;,\r\n    toolbarButtons: [&#39;bold&#39;,
      &#39;italic&#39;, &#39;underline&#39;],</span></code><span style=\"color: rgb(209,
      72, 65);\">\r\n<code>    </code>language: &#39;ja&#39;,</span><code><span style=\"color:
      rgb(209, 72, 65);\">\r\n  })\r\n&lt;/script&gt;</span>\r\n</code></pre><p>ここで,
      私のjs,cssを真似た人は</p><p><code>&lt;script&gt;<br>&nbsp; $(&#39;#wysiwyg&#39;).froalaEditor({<br>&nbsp;
      &nbsp; inlineMode: false,<br>&nbsp; &nbsp; heightMin: &#39;200px&#39;,<br>&nbsp;
      &nbsp; toolbarButtons: [&#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;],<br>&nbsp;
      })<br>&lt;/script&gt;</code> の部分は</p><p><span style=\"color: rgb(84, 172, 210);\">&lt;script&gt;<br>$(function()
      {<br>$(&#39;#wysiwyg&#39;).froalaEditor({<br>language: &#39;ja&#39;,<br>heightMin:
      500,<br>heightMax: 1000,<br>})<br>});<br>&lt;/script&gt;</span></p><p>に置き換えてください(jsとcssで読み込んだボタンと機能が勝手に適用されます!!)</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1544360831786-editor.png\"
      style=\"width: 900px; height: 100px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>ちなみに、</p><p><span
      style=\"color: rgb(235, 107, 86);\">&lt;!-- &lt;script&gt;<br>$(function() {<br>$(&#39;#wysiwyg&#39;).froalaEditor({<br>toolbarButtons:
      [&#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;strikeThrough&#39;,
      &#39;color&#39;, &#39;|&#39;, &#39;paragraphFormat&#39;, &#39;align&#39;, &#39;undo&#39;,
      &#39;redo&#39;, &#39;html&#39;],<br>colorsBackground: [<br>&#39;#15E67F&#39;,
      &#39;#E3DE8C&#39;, &#39;#D8A076&#39;, &#39;#D83762&#39;, &#39;#76B6D8&#39;,
      &#39;REMOVE&#39;,<br>&#39;#1C7A90&#39;, &#39;#249CB8&#39;, &#39;#4ABED9&#39;,
      &#39;#FBD75B&#39;, &#39;#FBE571&#39;, &#39;#FFFFFF&#39;<br>],<br>colorsDefaultTab:
      &#39;background&#39;,<br>colorsStep: 6,<br>colorsText: [<br>&#39;#15E67F&#39;,
      &#39;#E3DE8C&#39;, &#39;#D8A076&#39;, &#39;#D83762&#39;, &#39;#76B6D8&#39;,
      &#39;REMOVE&#39;,<br>&#39;#1C7A90&#39;, &#39;#249CB8&#39;, &#39;#4ABED9&#39;,
      &#39;#FBD75B&#39;, &#39;#FBE571&#39;, &#39;#FFFFFF&#39;<br>]<br>})<br>});<br>&lt;/script&gt;
      --&gt;</span></p><p>みたいに一個一個指定して使いたい方はjsやcssで読み込まなくて良いです</p><p><br></p><p><span
      style=\"font-size: 24px;\">new.html.erb</span></p><pre><code>#app/views/articles/new.html.erb\r\n\r\n&lt;h2&gt;新規投稿&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot; %&gt;\r\n</code></pre><h4><br></h4><p><span
      style=\"font-size: 24px;\">edit.html.erb</span></p><pre><code>#app/views/articles/edit.html.erb\r\n\r\n&lt;h2&gt;編集ページ&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot; %&gt;</code></pre><p><br></p><p><span style=\"font-size:
      24px;\">index.html.erb</span></p><pre><code>#app/views/articles/index.html.erb\r\n\r\n&lt;div
      class=&quot;container&quot;&gt;\r\n  &lt;div class=&quot;col-sm-10 col-sm-offset-2
      col-xs-12&quot;&gt;\r\n    &lt;% @articles.each do |article| %&gt;\r\n    &lt;div
      class=&quot;col-xs-12 text-center&quot;&gt;\r\n      &lt;div class=&quot;text-center&quot;&gt;\r\n
      \       &lt;h2&gt;&lt;%= article.title %&gt;&lt;/h2&gt;\r\n        &lt;h6&gt;&lt;%=
      article.created_at.strftime(&#39;%b %d, %Y&#39;) %&gt;&lt;/h6&gt;\r\n      &lt;/div&gt;\r\n
      \     &lt;div&gt;\r\n        &lt;%= raw(article.body).truncate(300) %&gt;\r\n
      \     &lt;/div&gt;\r\n      &lt;div class=&quot;text-center&quot;&gt;\r\n   
          &lt;%= link_to &quot;詳細へ&quot;, article_path(article) %&gt;\r\n      &lt;/div&gt;\r\n
      \     &lt;!-- This block is available to only signed in users --&gt;\r\n      &lt;%
      if signed_in? %&gt;\r\n        &lt;%= link_to &quot;一覧&quot;, article_path(article),
      class: &quot;btn btn-primary&quot; %&gt;\r\n        &lt;%= link_to &quot;編集&quot;,
      edit_article_path(article), class: &quot;btn btn-default&quot; %&gt;\r\n   
          &lt;%= link_to &quot;削除&quot;, article_path(article), class: &quot;btn btn-danger&quot;,
      data: {:confirm =&gt; &quot;削除してもいいですか?&quot;}, method: :delete %&gt;\r\n      &lt;%
      end %&gt;\r\n      &lt;hr /&gt;\r\n    &lt;/div&gt;\r\n    &lt;% end %&gt;\r\n
      \ &lt;/div&gt;\r\n&lt;/div&gt;\r\n</code></pre><h4><br></h4><p><span style=\"font-size:
      24px;\">show.html.erb</span></p><pre><code>#app/views/articles/show.html.erb\r\n\r\n&lt;div
      class=&quot;col-sm-11 <code>col-sm-offset-1</code> col-xs-12&quot;&gt;\r\n  &lt;h2
      class=&quot;text-center&quot;&gt;&lt;%= @article.title %&gt;&lt;/h2&gt;\r\n
      \ &lt;h5 class=&quot;text-center&quot;&gt;&lt;%= @article.created_at.strftime(&#39;%b
      %d, %Y&#39;) %&gt;&lt;/h5&gt;\r\n  &lt;div class=&quot;<span style=\"color:
      rgb(250, 197, 28);\">fr-view</span>&quot;&gt;&lt;%= raw @article.body %&gt;&lt;/div&gt;\r\n&lt;/div&gt;\r\n</code></pre><p>ここで,
      Froala-WYSIWYG &nbsp;はクラス名に <span style=\"color: rgb(184, 49, 47);\">fr-view</span>
      を付与しないと エディターのビューのUIとして出力されません。</p><p>5. ルートを作る</p><pre><code>#config/routes.rb\r\n\r\nRails.application.routes.draw
      do\r\n  root to: &quot;articles#index&quot;\r\n  resources :articles\r\nend\r\n</code></pre><p><br></p><p>6.
      modelを作る</p><pre>$ rails generate model Article title:string body:text\r\n$
      rake db:migrate</pre><p><br></p><p>導入はこれで終わり！！</p><p>参考url <a href=\"https://www.codementor.io/kingsleysilas/how-to-build-a-blog-using-froala-wysiwyg-v86wyapnb#comments-v86wyapnb\">素晴らしい参考文献</a><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f601.svg);\">&nbsp;</span>&nbsp;</p><p>最高のエディターライフを!!<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60e.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60f.svg);\">&nbsp;</span></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-09 13:39:12.364198'
    - '2018-12-09 13:43:37.11485'
  - - 88
    - rails5.2 Active Storage
    - "<h1 style=\"text-align: center;\">Active Storageの導入</h1><p>今までは画像やファイルを保存したいときは、paperclipを使っていましたが、rails5.2からはactive
      storageが推奨されている様です。</p><p>そして腰抜かすくらい簡単に</p><p>導入できてしまいます<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60f.svg);\">&nbsp;</span>&nbsp;</p><p><br></p><p>早速やっていきます!!</p><p><br></p><p><span
      style=\"font-size: 30px;\">1. active_storageのインストール</span></p><pre>$ rails active_storage:install\r\n$
      rails db:migrate</pre><p>active_storageの設定ファイルをインストールした後、マイグレーションを実行することで<code>active_storage_blobs</code>と<code>active_storage_attachments</code>という名前のテーブルが2つ生成されます。</p><p><code>Blob</code>はファイル名、ファイルの種類、バイト数、誤り検出符号などのメタデータを保持するモデルで、<code>Attachment</code>モデルは、BlobオブジェクトとActive
      Recordオブジェクトを紐付けるための中</p><p>テーブルですが、全くいじる必要のないモデルなので、特に覚えなくても結構です。</p><p><br></p><p><span
      style=\"font-size: 30px;\">2. model生成</span></p><pre>$ rails g model Article
      title:string body: text\r\n$ rails db:migrate</pre><p><br></p><p><span style=\"font-size:
      30px;\">3. 実装</span></p><h2><br>1つの添付ファイルの場合</h2><p><br></p><p><span style=\"font-size:
      18px;\">article.rb</span></p><pre># article.rb\r\nclass Article &lt; ApplicationRecord\r\n
      \ has_one_attached :image \r\nend</pre><p><code>:image</code>はファイルの呼び名で、<code>:photo</code>、<code>:avatar</code>、<code>:profile</code>など、好きなものを指定してください。</p><p>ここで指定した
      image は、<span style=\"font-size: 24px; background-color: rgb(247, 218, 100);\">articlesテーブルのカラムの様な扱いになります</span>が、imageテーブルなどを作る必要はないです。Active
      Storageは裏側で<code>Blob</code>と<code>Attachment</code>モデルを使って、勝手に</p><p><code>article.image</code>を使えるようにしてくれます。</p><p><br></p><p><span
      style=\"font-size: 18px;\">articles_controller.rb</span></p><pre>class CommentsController
      &lt; ApplicationController\r\n  before_action :find_article, only: [:edit, :update,
      :show, :destroy]\r\n\r\n  def new\r\n    @article = Article.new\r\n  end\r\n\r\n
      \ def create\r\n    @article = Article.new(<span style=\"color: rgb(235, 107,
      86);\">article_params</span>)\r\n    if @article.save\r\n      flash[:notice]
      = &quot;保存しました&quot;\r\n      redirect_to article_path(@article)\r\n    else\r\n
      \     flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :new\r\n    end\r\n
      \ end\r\n\r\n  def show\r\n  end\r\n\r\n  def edit\r\n  end\r\n\r\n  def update\r\n
      \   if @article.update(<span style=\"color: rgb(235, 107, 86);\">article_params</span>)\r\n
      \     flash[:notice] = &quot;更新しました&quot;\r\n      redirect_to article_path(@article)\r\n
      \   else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :edit\r\n
      \   end\r\n  end\r\n\r\n  def destroy\r\n    if @article.destroy\r\n      flash[:notice]
      = &quot;削除しました&quot;\r\n      redirect_to articles_path\r\n    else\r\n      flash[:alert]
      = &quot;エラーが発生しました&quot;\r\n    end\r\n  end\r\n\r\n  # imageは、titleフィールドやbodyフィールドと同じ様に、articlesテーブルのカラムの様な扱いをする\r\n
      \ <span style=\"color: rgb(235, 107, 86);\">private\r\n  def article_params\r\n
      \   params.require(:article).permit(:title, :body, </span><span style=\"color:
      rgb(184, 49, 47);\"><span style=\"background-color: rgb(247, 218, 100);\">:image</span></span><span
      style=\"color: rgb(235, 107, 86);\">)\r\n  end</span>\r\n\r\n  def find_article\r\n
      \   @article = Article.find(params[:id])\r\n  end\r\n\r\nend</pre><p><br></p><p><span
      style=\"font-size: 18px;\">articles/_form.html.erb</span></p><pre>&lt;%= form_with
      model: article, local: true  do |f| %&gt;\r\n  &lt;% if @article.errors.any?
      %&gt;\r\n    &lt;div id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;&lt;%=
      &quot;#{pluralize(@article.errors.count, &quot;error&quot;)} により保存できませんでした&quot;
      %&gt;&lt;/h2&gt;\r\n      &lt;ul&gt;\r\n        &lt;% @article.errors.full_messages.each
      do |msg| %&gt;\r\n          &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;\r\n       
      &lt;% end %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;% end %&gt;\r\n\r\n
      \ &lt;%= f.text_area :title %&gt;&lt;br&gt;\r\n  &lt;%= <span style=\"color:
      rgb(243, 121, 52);\">f.file_field</span> <span style=\"color: rgb(243, 121,
      52);\">:image</span> %&gt;&lt;br&gt;\r\n  &lt;%= f.text_area :body %&gt;&lt;br&gt;\r\n
      \ &lt;%= f.submit %&gt;\r\n&lt;% end %&gt;</pre><p><br></p><p><span style=\"font-size:
      18px;\">new.html.erb</span></p><pre>&lt;h2&gt;新規投稿&lt;/h2&gt;\r\n&lt;%= render
      &quot;articles/form&quot;, artilce:@article %&gt;</pre><p><br></p><p><span style=\"font-size:
      18px;\">edit.html.erb</span></p><pre>&lt;h2&gt;編集&lt;/h2&gt;\r\n&lt;%= render
      &quot;articles/form&quot;, artilce:@article %&gt;</pre><p><br></p><p><span style=\"font-size:
      18px;\">show.html.erb</span></p><pre>&lt;div class=&quot;col-sm-11 col-sm-offset-1
      col-xs-12&quot;&gt;\r\n&lt;h2 class=&quot;text-center&quot;&gt;&lt;%= @article.title
      %&gt;&lt;/h2&gt;\r\n&lt;div class=&quot;text-center&quot;&gt;\r\n<span style=\"color:
      rgb(243, 121, 52);\">&lt;% if @article.image.attached? %&gt;\r\n&lt;%= image_tag
      @article.image</span><span style=\"color: rgb(0, 0, 0);\">, :alt =&gt; &quot;イメージ&quot;,
      width: &#39;30%&#39;, height: &#39;30%&#39;</span><span style=\"color: rgb(243,
      121, 52);\"> %&gt;\r\n&lt;% end %&gt;</span>\r\n&lt;/div&gt;\r\n&lt;h5 class=&quot;text-center&quot;&gt;&lt;%=
      @article.created_at.strftime(&#39;%b %d, %Y&#39;) %&gt;&lt;/h5&gt;\r\n&lt;div
      class=&quot;fr-view&quot;&gt;\r\n  &lt;%= raw @article.body %&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;</pre><p><span
      style=\"color: rgb(243, 121, 52);\">&lt;% if @article.image.attached? %&gt;<br>&lt;%=
      image_tag @article.image</span><span style=\"color: rgb(0, 0, 0);\">, :alt =&gt;
      &quot;イメージ&quot;, width: &#39;30%&#39;, height: &#39;30%&#39;</span><span style=\"color:
      rgb(243, 121, 52);\">&nbsp;%&gt;<br>&lt;% end %&gt;</span></p><p>の部分の <span
      style=\"color: rgb(0, 0, 0);\">:alt =&gt; &quot;イメージ&quot;, width: &#39;30%&#39;,
      height: &#39;30%&#39;は好きに変えてください。</span></p><p><span style=\"color: rgb(0, 0,
      0);\">これでactive_storageへの投稿、更新、削除が完成しました<span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><span
      style=\"color: rgb(0, 0, 0);\">しかし...active_storageは複数のファイルを保存することもできますので、そちらも紹介します。</span></p><h2><br>複数の添付ファイルの場合</h2><p><span
      style=\"font-size: 18px;\">article.rb</span></p><pre># article.rb\r\nclass Article
      &lt; ApplicationRecord\r\n  <span style=\"color: rgb(65, 168, 95);\"># has_one_attached
      :image</span>\r\n  <span style=\"color: rgb(41, 105, 176);\">has_many_attached
      :images</span>\r\nend</pre><p><br></p><p><span style=\"font-size: 18px;\">articles_controller.rb</span></p><pre>class
      CommentsController &lt; ApplicationController\r\n  before_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\n\r\n  def new\r\n    @article = Article.new\r\n
      \ end\r\n\r\n  def create\r\n    @article = Article.new(<span style=\"color:
      rgb(235, 107, 86);\">article_params</span>)\r\n    if @article.save\r\n      flash[:notice]
      = &quot;保存しました&quot;\r\n      redirect_to article_path(@article)\r\n    else\r\n
      \     flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :new\r\n    end\r\n
      \ end\r\n\r\n  def show\r\n  end\r\n\r\n  def edit\r\n  end\r\n\r\n  def update\r\n
      \   if @article.update(<span style=\"color: rgb(235, 107, 86);\">article_params</span>)\r\n
      \     flash[:notice] = &quot;更新しました&quot;\r\n      redirect_to article_path(@article)\r\n
      \   else\r\n      flash[:alert] = &quot;エラーが発生しました&quot;\r\n      render :edit\r\n
      \   end\r\n  end\r\n\r\n  def destroy\r\n    if @article.destroy\r\n      flash[:notice]
      = &quot;削除しました&quot;\r\n      redirect_to articles_path\r\n    else\r\n      flash[:alert]
      = &quot;エラーが発生しました&quot;\r\n    end\r\n  end\r\n\r\n  # imageは、titleフィールドやbodyフィールドと同じ様に、articlesテーブルのカラムの様な扱いをする\r\n
      \ <span style=\"color: rgb(235, 107, 86);\">private\r\n  def article_params\r\n 
        </span><span style=\"color: rgb(65, 168, 95);\"># params.require(:article).permit(:title,
      :body, :image)</span>\r\n<span style=\"color: rgb(235, 107, 86);\">    </span><span
      style=\"color: rgb(44, 130, 201);\">params.require(:article).permit(:title,
      :body, <span style=\"background-color: rgb(247, 218, 100);\">:images</span>)</span><span
      style=\"color: rgb(235, 107, 86);\">\r\n  end</span>\r\n\r\n  def find_article\r\n
      \   @article = Article.find(params[:id])\r\n  end\r\n\r\nend</pre><p><br></p><p><span
      style=\"font-size: 18px;\">articles/_form.html.erb</span></p><pre>&lt;%= form_with
      model: article, local: true  do |f| %&gt;\r\n  &lt;% if @article.errors.any?
      %&gt;\r\n    &lt;div id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;&lt;%=
      &quot;#{pluralize(@article.errors.count, &quot;error&quot;)} により保存できませんでした&quot;
      %&gt;&lt;/h2&gt;\r\n      &lt;ul&gt;\r\n        &lt;% @article.errors.full_messages.each
      do |msg| %&gt;\r\n          &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;\r\n        &lt;%
      end %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;% end %&gt;\r\n\r\n
      \ &lt;%= f.text_area :title %&gt;&lt;br&gt;\r\n<span style=\"color: rgb(65,
      168, 95);\">  &lt;!-- &lt;%= f.file_field :image %&gt;&lt;br&gt; --&gt;</span>\r\n
      \ <span style=\"color: rgb(44, 130, 201);\">&lt;%= f.file_field :images, multiple:
      true %&gt;&lt;br&gt;</span>\r\n  &lt;%= f.text_area :body %&gt;&lt;br&gt;\r\n
      \ &lt;%= f.submit %&gt;\r\n&lt;% end %&gt;</pre><p><br></p><p><span style=\"font-size:
      18px;\">show.html.erb</span></p><pre>&lt;div class=&quot;col-sm-11 col-sm-offset-1
      col-xs-12&quot;&gt;\r\n&lt;h2 class=&quot;text-center&quot;&gt;&lt;%= @article.title
      %&gt;&lt;/h2&gt;\r\n&lt;div class=&quot;text-center&quot;&gt;\r\n<span style=\"color:
      rgb(65, 168, 95);\">&lt;!-- &lt;% if @article.image.attached? %&gt;\r\n&lt;%=
      image_tag @article.image, :alt =&gt; &quot;イメージ&quot;, width: &#39;30%&#39;,
      height: &#39;30%&#39; %&gt;\r\n&lt;% end %&gt; --&gt;</span>\r\n<span style=\"color:
      rgb(44, 130, 201);\">&lt;% if @article.images.attached? %&gt;\r\n  &lt;% @article.images.each
      do |image| %&gt;\r\n    &lt;%= image_tag image %&gt; &lt;br&gt;\r\n  &lt;% end
      %&gt;\r\n&lt;% end %&gt;</span>\r\n\r\n&lt;/div&gt;\r\n&lt;h5 class=&quot;text-center&quot;&gt;&lt;%=
      @article.created_at.strftime(&#39;%b %d, %Y&#39;) %&gt;&lt;/h5&gt;\r\n&lt;div
      class=&quot;fr-view&quot;&gt;\r\n  &lt;%= raw @article.body %&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;</pre><p><br></p><p><span
      style=\"font-size: 18px;\">new.html.erb(変更なし)</span></p><pre>&lt;h2&gt;新規投稿&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot;, artilce:@article %&gt;</pre><p><br></p><p><span
      style=\"font-size: 18px;\">edit.html.erb<span style=\"font-size: 18px;\">(変更なし)</span></span></p><pre>&lt;h2&gt;編集&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot;, artilce:@article %&gt;</pre><p><br></p><p><span
      style=\"font-size: 18px;\">THAT&#39;S ALL RIGHT!!</span></p><p><span style=\"color:
      rgb(226, 80, 65);\"><br></span></p><p><br></p><p><span style=\"color: rgb(226,
      80, 65);\"><span style=\"font-size: 18px;\">ちなみに、今回は使わなかったものの、urlを生成したりプレビュー、ダウンロードリンクをするときは以下を使用</span></span></p><ul><li><pre><span
      style=\"font-size: 18px;\"><code>&lt;%= link_to &#39;プレビュー&#39;, rails_blob_path(article.image,
      disposition: &#39;preview&#39;) %&gt;</code></span></pre></li><li><pre><span
      style=\"font-size: 18px;\">&lt;%= link_to &#39;ダウンロード&#39;, rails_blob_path(article.image,
      disposition: &quot;preview&quot;) %&gt;</span></pre></li><li><span style=\"color:
      rgb(226, 80, 65);\"><span style=\"font-size: 18px;\">view以外でコンソールとかでrails_blob_pathを使うときは</span></span></li><li><span
      style=\"color: rgb(226, 80, 65);\"><span style=\"font-size: 18px;\">Rails.application.routes.url_helpers.rails_blob_path
      で使う</span></span></li><li><pre><span style=\"font-size: 18px;\">例) Rails.application.routes.url_helpers.url_for(Article.find(145).image)
      ＊　url_for も rails_blob_path と同じ!</span></pre></li></ul><p><br></p><h1><span
      style=\"font-size: 30px;\">4.ファイルの保存先の変更</span></h1><p><br></p><p><code>config/environments/development.rb</code></p><pre>
      \ # ...\r\n\r\n  # Store uploaded files on the local file system (see config/storage.yml
      for options)\r\n  <span style=\"color: rgb(184, 49, 47);\">config.active_storage.service
      = :local</span>\r\n\r\n  # ...</pre><p><code>config/environments/production.rb</code></p><pre>
      \ # ...\r\n\r\n  # Store uploaded files on the local file system (see config/storage.yml
      for options)\r\n  <span style=\"color: rgb(184, 49, 47);\">config.active_storage.service
      = :local</span>\r\n\r\n  # ...</pre><p>defaultの <code>local</code> とは、 <code>config/storage.yml</code>
      で定義された保存先の名前</p><p>config.active_storage.service = <code>:local</code>を <code><span
      style=\"color: rgb(41, 105, 176);\">:amazon</span></code><code><span style=\"color:
      rgb(41, 105, 176);\">, :google,&nbsp;:microsoft</span></code> のいづれかと置き換えて、<code>config/storage.yml</code>の方に、必要な認証情報などの値を入力します。</p><p><br></p><p>config/storage.yml</p><pre>test:\r\n
      \ service: Disk\r\n  root: &lt;%= Rails.root.join(&quot;tmp/storage&quot;) %&gt;\r\n\r\nlocal:\r\n
      \ service: Disk\r\n  root: &lt;%= Rails.root.join(&quot;storage&quot;) %&gt;\r\n\r\n#
      Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)\r\n<span
      style=\"color: rgb(41, 105, 176);\"># amazon:\r\n#   service: S3\r\n#   access_key_id:
      &lt;%= Rails.application.credentials.dig(:aws, :access_key_id) %&gt;\r\n#   secret_access_key:
      &lt;%= Rails.application.credentials.dig(:aws, :secret_access_key) %&gt;\r\n#
      \  region: us-east-1\r\n#   bucket: your_own_bucket</span>\r\n\r\n# Remember
      not to checkin your GCS keyfile to a repository\r\n<span style=\"color: rgb(65,
      168, 95);\"># google:\r\n#   service: GCS\r\n#   project: your_project\r\n#
      \  credentials: &lt;%= Rails.root.join(&quot;path/to/gcs.keyfile&quot;) %&gt;\r\n#
        bucket: your_own_bucket</span>\r\n\r\n# Use rails credentials:edit to set
      the Azure Storage secret (as azure_storage:storage_access_key)\r\n<span style=\"color:
      rgb(250, 197, 28);\"># microsoft:\r\n#   service: AzureStorage\r\n#   storage_account_name:
      your_account_name\r\n#   storage_access_key: &lt;%= Rails.application.credentials.dig(:azure_storage,
      :storage_access_key) %&gt;\r\n#   container: your_container_name</span></pre><p><br></p><p>defaultの保存先の
      <code>local</code> は、使用するサービスが <code>Disk</code> (ローカルディスク)に設定れていて、保存先がrailsアプリ直下の<code>/storage</code>ディレクトリに指定されています。</p><p>保存先に応じてコメントを解除してください。</p><p><br></p><p>amazon:
      を使用するあなたは gem <code>aws-sdk-s3</code></p><p>goolge: を使用するあなたは gem <code>google-cloud-storage</code></p><p>microsoft:
      を使用するあなたは gem <code>azure-storage</code> をGemfileに追記</p><p><br></p><p>なお、アクセスキーなどの機密情報は、<strong>Rails
      Credentials(<strong>暗号化して保存するためのRails新機能</strong>)</strong>を使って入力!!</p><pre>$
      EDITOR=vim rails credentials:edit</pre><p>i を押す</p><p>実際の値を入れていく</p><p>escを押す</p><p>ZZ
      を押す</p><p><span style=\"color: rgb(226, 80, 65);\">保存完了</span></p><p>(入力した内容は<code>config/master.key</code>を用いて暗号化され、<code>config/credentials.yml.enc</code>が生成されます)</p><pre><code>$
      rails credentials:show</code> で確認できる</pre><h2><br>Amazon S3 を使う場合</h2><pre>gem
      &quot;aws-sdk-s3&quot;, require: false</pre><p><code>$ bundle install</code>と叩きます。</p><p><br></p><p><span
      style=\"color: rgb(124, 112, 107);\">config/environments/production.rb</span></p><pre>#
      ファイル保存先を:localから:amazonに変更\r\n\r\nconfig.active_storage.service = :amazon</pre><p><span
      style=\"color: rgb(124, 112, 107);\">config/environments/development.rb</span></p><pre>#
      開発環境(development)でAmazon S3の動作を確認したい場合はこちらの方も変更しましょう\r\n\r\nconfig.active_storage.service
      = :amazon</pre><p><span style=\"color: rgb(124, 112, 107);\">config/storage.yml</span></p><pre>#
      以下の部分をコメント解除する\r\namazon:\r\n  service: S3\r\n  access_key_id: &lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;\r\n  secret_access_key: &lt;%= Rails.application.credentials.dig(:aws,
      :secret_access_key) %&gt;\r\n  region: ap-northeast-1 # これは日本の地域コード\r\n  bucket:
      my_bucket_name # 自分で作成したS3のバケットの名前</pre><pre>$ EDITOR=vim rails credentials:edit
      \r\n<span style=\"color: rgb(250, 197, 28);\">(エディタはVim(vim)かAtom(atom)かVSCode(code)かSublimeText(subl))</span></pre><pre>aws:\r\n
      access_key_id: 123 #ここに自分のアクセスキーIDをコピペ\r\n secret_access_key: 456 #ここに自分のシークレットアクセスキーをコピペ</pre><p>&nbsp;Vim:
      <code>i</code>で入力開始、<code>esc</code> &rarr; <code>ZZ</code>で終了</p><p><br></p><pre>$
      rails credentials:show\r\n<span style=\"color: rgb(250, 197, 28);\">で内容を確認できる</span></pre><p><br></p><p>以上でs3にアップロードされるようになりました。s3がこんなに簡単に使えてしまうことが驚き栗の木超ラッキーです！</p><p><br></p><p><strong><span
      style=\"font-size: 48px; font-family: Impact, Charcoal, sans-serif;\">Credentials</span></strong><span
      style=\"font-size: 48px; font-family: Impact, Charcoal, sans-serif;\">を使用する場合</span></p><p><code>config/credentials.yml.enc</code>の中身を復号化するために必要な<code>config/master.key</code>ファイルを本番環境にも配置する必要があります。しかし、<code>master.key</code>はセキュリティ上,
      &nbsp;.gitignore されてあり、<span style=\"color: rgb(41, 105, 176); font-family:
      Impact, Charcoal, sans-serif; font-size: 24px;\">Gitリポジトリをそのままデプロイする本番環境(Herokuなど)の場合</span>は、<code>master.key</code>　の中身をコピーして、環境変数
      <code>RAILS_MASTER_KEY</code> としてセットしなければいけません。ちなみに、Herokuをお使いの場合は <code>$ heroku
      config:set RAILS_MASTER_KEY=123</code>で環境変数を用意できます。</p><p><br></p><p>参考文献 <a
      href=\"https://qiita.com/hmmrjn/items/7cc5e5348755c517458a\">こちらの方</a></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-10 07:09:04.553155'
    - '2019-07-11 05:33:01.395561'
  - - 89
    - wysiwyg-rails imageUploadToS3 / wysiwygエディタからS3にアップロード
    - "<h1 style=\"text-align: center;\">wysiwyg-rails imageUploadToS3</h1><p><br></p><p><span
      style=\"color: rgb(124, 112, 107);\">これは、Rails4の時代までは</span><a href=\"https://rubythursday.com/system/episodes/pdfs/000/000/052/original/Ruby_Snack_23_Froala_WYSIWYG_Saving_Images_on_S3.pdf?1452115365\">こちらの方</a><span
      style=\"color: rgb(124, 112, 107);\">&nbsp;のやり方で良かったみたいですけど、amazonの署名の方法に変更が加わったからなのか、今では正常に動作しないため、何十時間(50~100h)も使ってたどり着いた筆者の苦悩の物語です。</span></p><p><br></p><p>前提:
      すでにwysiwyg-railsを使ってエディターの実装ができている(できないのはファイルのサーバーへのアップロードのみ)</p><pre>$(function()
      {\r\n  $(&#39;#wysiwyg&#39;).froalaEditor({\r\n  language: &#39;ja&#39;,\r\n 
      heightMin: 500,\r\n  heightMax: 1000,\r\n  })\r\n});</pre><p><br></p><p>結論から言って、自作モジュールを作らずに,
      froala-editor-sdkを使って解決することができました。</p><p><br></p><p><span style=\"font-size:
      30px;\">はじめにクライアント側の設定</span></p><p>Gemfile</p><pre>gem &#39;wysiwyg-rails&#39;,
      &#39;~&gt; 2.6.0&#39; (2.6.6をインストール)\r\ngem &quot;froala-editor-sdk&quot; (1.2.0をインストール)</pre><p><br></p><p>articles_controller</p><pre>class
      ArticlesController &lt; ApplicationController\r\nbefore_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\nbefore_action :require_login, except:
      [:index, :show]\r\n<span style=\"color: rgb(243, 121, 52);\">before_action :hash_init,
      only: [:index, :new, :create, :edit]</span>\r\n\r\n\r\ndef index\r\n@articles
      = Article.all\r\nend\r\n\r\ndef new\r\n@article = Article.new\r\nend\r\n\r\ndef
      create\r\n@article = Article.new(article_params)\r\nif @article.save\r\nflash[:notice]
      = &quot;保存されました&quot;\r\nredirect_to article_path(@article)\r\nelse\r\nflash[:alert]
      = &quot;エラーが発生しました&quot;\r\nrender :new\r\nend\r\nend\r\n\r\ndef edit\r\nend\r\n\r\ndef
      update\r\n  if @article.update_attributes(article_params)\r\n    flash[:notice]
      = &quot;更新されました&quot;\r\n    redirect_to article_path(@article)\r\n  else\r\n
      \   flash[:alert] = &quot;エラーが発生しました&quot;\r\n    render :edit\r\n  end\r\nend\r\n\r\ndef
      show\r\nend\r\n\r\ndef destroy\r\n  if @article.destroy\r\n    flash[:notice]
      = &quot;削除されました&quot;\r\n    redirect_to articles_path\r\n  else\r\n    flash[:alert]
      = &quot;エラーが発生しました&quot;\r\n  end\r\nend\r\n\r\nprivate\r\n\r\ndef find_article\r\n@article
      = Article.find(params[:id])\r\nend\r\n\r\n<span style=\"color: rgb(243, 121,
      52);\">def hash_init\r\n  options = {\r\n    bucket: &#39;mybucket&#39;,\r\n
      \   region: &#39;ap-northeast-1&#39;, # japan[Tokyo]\r\n    keyStart: &#39;uploads/&#39;,
      # uploads/filename.png\r\n    acl: &#39;public-read&#39;,\r\n    accessKey:
      ENV[&quot;aws_access_key_id&quot;],\r\n    secretKey: ENV[&quot;aws_secret_access_key&quot;],\r\n
      \ }\r\n    @aws_data = FroalaEditorSDK::S3.data_hash(options)\r\nend</span>\r\n\r\n\r\nend</pre><p><span
      style=\"font-size: 18px;\">自作ライブラリでハッシュするのではなく、FroalaEditorSDKを使って、ハッシュ化を行いました。</span></p><p><span
      style=\"font-size: 18px;\">そして<a href=\"https://www.froala.com/wysiwyg-editor/docs/sdks/ruby/file-s3-upload\">公式ドキュメント</a>を見ればわかるのですが、なんと公式ドキュメントが間違っているという事態が発覚。</span></p><p><span
      style=\"background-color: rgb(247, 218, 100);\">options : {</span></p><p><span
      style=\"background-color: rgb(247, 218, 100);\">&nbsp; bucket: &#39;bucket-name&#39;,</span></p><p><span
      style=\"background-color: rgb(247, 218, 100);\">...</span></p><p><span style=\"background-color:
      rgb(247, 218, 100);\">}</span></p><p>となっていますが、 options : ではなく options = ですので間違いのないようにイコールで書いてください.</p><p><br></p><p>_form.html.erb</p><pre>&lt;%=
      simple_form_for (@article) do |f| %&gt;\r\n&lt;% if @article.errors.any? %&gt;\r\n&lt;div
      id=&quot;error_explanation&quot;&gt;\r\n&lt;h2&gt;\r\n&lt;%= &quot;#{pluralize(@article.errors.count,
      &quot;error&quot;)} このエラーにより保存できませんでした&quot; %&gt;\r\n&lt;/h2&gt;\r\n&lt;ul&gt;\r\n&lt;%
      @article.errors.full_messages.each do |msg| %&gt;\r\n&lt;li&gt;\r\n&lt;%= msg
      %&gt;\r\n&lt;/li&gt;\r\n&lt;% end %&gt;\r\n&lt;/ul&gt;\r\n&lt;/div&gt;\r\n&lt;%
      end %&gt;\r\n\r\n&lt;div class=&quot;form-group&quot;&gt;\r\n&lt;%= f.input
      :title, class: &quot;form-control&quot; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;%= f.input :image, as: :file, class:
      &quot;form-control&quot; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class=&quot;form-group&quot;&gt;\r\n&lt;%=
      f.label :body %&gt;\r\n&lt;%= f.text_area :body, id: &quot;wysiwyg&quot; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;%= f.button :submit, &quot;投稿&quot;,
      :class =&gt; &#39;btn btn-primary&#39; %&gt;\r\n&lt;/div&gt;\r\n&lt;% end %&gt;\r\n\r\n<span
      style=\"background-color: rgb(247, 218, 100);\">&lt;script&gt;\r\n$(function()
      {\r\n$(&#39;#wysiwyg&#39;).froalaEditor({\r\nlanguage: &#39;ja&#39;,\r\nheightMin:
      500,\r\nheightMax: 1000,\r\nimageUploadToS3: &lt;%= @aws_data.to_json.html_safe
      %&gt;,\r\n})\r\n});\r\n&lt;/script&gt;</span></pre><p><br></p><p>new.html.erb</p><pre>&lt;h2&gt;New
      Article&lt;/h2&gt;\r\n&lt;%= render &quot;articles/form&quot;, collection: @aws_data
      %&gt;</pre><p><br></p><p>edit.html.erb</p><pre>&lt;h2&gt;Edit Article&lt;/h2&gt;\r\n&lt;%=
      render &quot;articles/form&quot;, collection: @aws_data %&gt;</pre><p><br></p><p><span
      style=\"color: rgb(235, 107, 86); font-family: Impact, Charcoal, sans-serif;
      font-size: 30px;\">これでクライアント側は完璧です</span></p><p><br></p><p><span style=\"font-size:
      30px;\">次にサーバー側の設定</span></p><pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\r\n&lt;CORSConfiguration
      xmlns=&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;&gt;\r\n    &lt;CORSRule&gt;\r\n 
            &lt;AllowedOrigin&gt;http://localhost:3000&lt;/AllowedOrigin&gt;\r\n 
            &lt;AllowedMethod&gt;GET&lt;/AllowedMethod&gt;\r\n        &lt;AllowedMethod&gt;POST&lt;/AllowedMethod&gt;\r\n 
            &lt;AllowedMethod&gt;PUT&lt;/AllowedMethod&gt;\r\n        &lt;MaxAgeSeconds&gt;3000&lt;/MaxAgeSeconds&gt;\r\n 
            &lt;AllowedHeader&gt;*&lt;/AllowedHeader&gt;\r\n    &lt;/CORSRule&gt;\r\n&lt;/CORSConfiguration&gt;</pre><p><br></p><p><span
      style=\"color: rgb(235, 107, 86); font-family: Impact, Charcoal, sans-serif;
      font-size: 30px;\">これでサーバ側も完璧です</span></p><p><br></p><p><span style=\"font-family:
      Impact, Charcoal, sans-serif; font-size: 30px;\">以上で無事に投稿できました！！本当にしんどかった...<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f616.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-10 08:11:09.948566'
    - '2018-12-10 08:11:09.953742'
  - - 90
    - Rails ArticleモデルTagモデルで多対多 のテーブルを作る
    - "<h1 style=\"text-align: center;\"><span style=\"font-family: Impact,Charcoal,sans-serif;\">Rails5.2
      多対多</span></h1><p><br></p><p><span style=\"font-size: 18px;\">実現したいこと... articleモデルとtagモデルで多対多を実現したい</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">1. modelの作成</span></p><pre>$ rails g model Article
      title:string body: text\r\n$ rails g model Tag name: string</pre><p>Articleのビュー、コントローラは作成しているものとする</p><pre>$
      rails g migration create_articles_tags</pre><p>以下にmigrationファイルを成形確認</p><pre>#
      db/migrate/xxx_create_articles.rb\r\nclass CreateArticles &lt; ActiveRecord::Migration[5.2]\r\n
      \ def change\r\n    create_table :articles do |t|\r\n      t.string :title\r\n
      \     t.text :body\r\n      t.timestamps\r\n    end\r\n  end\r\nend\r\n\r\n#
      db/migrate/xxx_create_tags.rb\r\nclass CreateTags &lt; ActiveRecord::Migration\r\n
      def change\r\n  create_table :tags do |t|\r\n   t.string :name, null: false\r\n
      \  t.timestamps null: false\r\n  end\r\n end\r\nend\r\n\r\n# db/migrate/xxx_create_articles_tags.rb\r\n#
      主キーは不要なので、:id =&gt; falseとしています。\r\nclass CreateArticlesTagsTable &lt; ActiveRecord::Migration[5.2]\r\n
      \ def change\r\n    create_table :articles_tags<span style=\"color: rgb(243,
      121, 52);\">, :id =&gt; false</span> do |t|\r\n      t.integer <span style=\"color:
      rgb(251, 160, 38);\">:article_id, null: false</span>\r\n      t.integer <span
      style=\"color: rgb(251, 160, 38);\">:tag_id, null: false</span>\r\n    end\r\n
      \ end\r\nend</pre><pre>$ rake db:migrate</pre><p><br></p><p><span style=\"font-size:
      24px;\">2.リレーションの定義</span></p><pre># app/models/article.rb\r\nclass Article
      &lt; ActiveRecord::Base\r\n <span style=\"color: rgb(44, 130, 201);\">has_and_belongs_to_many
      :tags</span>\r\nend</pre><pre># app/models/tag.rb\r\nclass Tag &lt; ActiveRecord::Base\r\n
      <span style=\"color: rgb(44, 130, 201);\">has_and_belongs_to_many :articles</span>\r\nend</pre><p><br></p><p><span
      style=\"font-size: 24px;\">多対多はこれで完成!!</span></p><p><br></p><pre>$ rails console\r\n\r\n&gt;
      article1 = article.find(1)\r\n&gt; tag1 = Tag.create(name: &quot;タグ１&quot;)\r\n&gt;
      tag2 = Tag.create(name: &quot;タグ2&quot;)\r\n&gt; article1.tags &lt;&lt; tag1
      // 挿入される\r\n&gt; article1.tags &lt;&lt; tag2 // 挿入される\r\n&gt; article1.tags.delete
      tag1 // article1からtag1をdelete\r\n&gt; article1.tags.clear // // article1から全タグをdelete</pre><p><br></p><p><span
      style=\"font-size: 30px;\">3.viewに実装</span></p><p>articles_controller.rb</p><pre>class
      ArticlesController &lt; ApplicationController\r\n  before_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\n\r\n\r\n  def index\r\n    @articles
      = Article.all\r\n  end\r\n\r\n  def new\r\n    @article = Article.new\r\n  end\r\n\r\n
      \ def create\r\n    @article = Article.new(<span style=\"color: rgb(184, 49,
      47);\">article_params</span>)\r\n    if @article.save\r\n      flash[:notice]
      = &quot;Successfully created article!&quot;\r\n      redirect_to article_path(@article)\r\n
      \   else\r\n      flash[:alert] = &quot;Error creating new article!&quot;\r\n
      \     render :new\r\n    end\r\n  end\r\n\r\n  def edit\r\n  end\r\n\r\n  def
      update\r\n    if @article.update_attributes(<span style=\"color: rgb(184, 49,
      47);\">article_params</span>)\r\n      flash[:notice] = &quot;Successfully updated
      article!&quot;\r\n      redirect_to article_path(@article)\r\n    else\r\n      flash[:alert]
      = &quot;Error updating article!&quot;\r\n      render :edit\r\n    end\r\n  end\r\n\r\n
      \ def show\r\n  end\r\n\r\n  def destroy\r\n    if @article.destroy\r\n      flash[:notice]
      = &quot;Successfully deleted article!&quot;\r\n      redirect_to articles_path\r\n
      \   else\r\n      flash[:alert] = &quot;Error updating article!&quot;\r\n    end\r\n
      \ end\r\n\r\n<span style=\"color: rgb(184, 49, 47);\">private</span>\r\n\r\ndef
      <span style=\"color: rgb(184, 49, 47);\">article_params</span>\r\nparams.require(:article).permit(:title,
      :body, :image, <span style=\"color: rgb(41, 105, 176);\">tag_ids: []</span>)\r\nend\r\n\r\ndef
      find_article\r\n@article = Article.find(params[:id])\r\nend\r\n\r\nend</pre><p><span
      style=\"color: rgb(41, 105, 176);\"><span style=\"font-size: 24px;\">&nbsp;
      &nbsp;tag_ids: []</span></span>とした理由は&nbsp;tag_idsというパラメータを複数受け取ることのできるように設定するため(checkboxで複数選べる)</p><p><br></p><p>articles/_form.html.erb</p><pre>&lt;%=
      simple_form_for (@article) do |f| %&gt;\r\n  &lt;% if @article.errors.any? %&gt;\r\n
      \   &lt;div id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;\r\n        &lt;%=
      &quot;#{pluralize(@article.errors.count, &quot;error&quot;)} により保存ができませんでした&quot;
      %&gt;\r\n      &lt;/h2&gt;\r\n      &lt;ul&gt;\r\n        &lt;% @article.errors.full_messages.each
      do |msg| %&gt;\r\n          &lt;li&gt;\r\n            &lt;%= msg %&gt;\r\n          &lt;/li&gt;\r\n
      \       &lt;% end %&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;%
      end %&gt;\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input
      :title, class: &quot;form-control&quot; %&gt;\r\n  &lt;/div&gt;\r\n\r\n<span
      style=\"color: rgb(243, 121, 52);\">  &lt;div class=&quot;form-group&quot;&gt;\r\n
      \   &lt;%= f.collection_check_boxes(</span><span style=\"color: rgb(41, 105,
      176);\">:tag_ids</span><span style=\"color: rgb(243, 121, 52);\">, </span><span
      style=\"color: rgb(65, 168, 95);\">Tag.all</span><span style=\"color: rgb(243,
      121, 52);\">, </span><span style=\"color: rgb(184, 49, 47);\">:id</span><span
      style=\"color: rgb(243, 121, 52);\">, </span><span style=\"color: rgb(85, 57,
      130);\">:name</span><span style=\"color: rgb(243, 121, 52);\">) do |b| %&gt;\r\n
      \     &lt;%= b.check_box %&gt;\r\n      &lt;%= b.label { b.text } %&gt;\r\n
      \     &lt;/br&gt;\r\n    &lt;% end %&gt;\r\n  &lt;/div&gt;</span>\r\n\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;%= f.input :image, as: :file, class:
      &quot;form-control&quot; %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class=&quot;form-group&quot;&gt;\r\n&lt;%=
      f.label :body %&gt;\r\n&lt;%= f.text_area :body %&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;%= f.button :submit, &quot;投稿&quot;,
      :class =&gt; &#39;btn btn-primary&#39; %&gt;\r\n&lt;/div&gt;\r\n&lt;% end %&gt;</pre><p><span
      style=\"font-size: 24px;\">ここで、<span style=\"color: rgb(243, 121, 52);\">collection_check_boxes</span>
      において</span></p><ul><li><span style=\"font-size: 24px;\">第一引数 <span style=\"color:
      rgb(41, 105, 176);\">tag_ids</span> は, 送信するパラメータの名前</span></li><li><span style=\"font-size:
      24px;\">第二引数 <span style=\"color: rgb(65, 168, 95);\">Tag.all</span><span style=\"color:
      rgb(243, 121, 52);\">&nbsp;</span>はcheckboxのコレクションデータ</span></li><li><span style=\"font-size:
      24px;\">第三引数 <span style=\"color: rgb(184, 49, 47);\">:id&nbsp;</span>は, <span
      style=\"font-size: 24px;\">checkboxのvalue</span></span></li><li><span style=\"font-size:
      24px;\">第四引数 <span style=\"color: rgb(85, 57, 130);\">:name&nbsp;</span>はcheckboxのラベル名</span></li></ul><p><br></p><p><span
      style=\"font-size: 30px;\">以上で多対多が完璧に実装できました。<span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f601.svg);\">&nbsp;
      &nbsp;</span>&nbsp;</span></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1544432949173-checkbox.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><span
      style=\"font-size: 30px;\">＊＊＊豆知識＊＊＊</span></p><p>以下のやり方でも実装できますが、tagが毎回新しく増えて同じデータがたくさんできてしまいます。</p><p><br></p><p>articles_controller.rb</p><pre>class
      ArticlesController &lt; ApplicationController\r\n  before_action :find_article,
      only: [:edit, :update, :show, :destroy]\r\n\r\n\r\n  def index\r\n    @articles
      = Article.all\r\n  end\r\n\r\n  def new\r\n    @article = Article.new\r\n    <span
      style=\"color: rgb(243, 121, 52);\">@article.tags.build</span>\r\n  end\r\n\r\n
      \ def create\r\n    @article = Article.new(article_params)\r\n    <span style=\"color:
      rgb(243, 121, 52);\">@article.tags.build(tag_params)</span>\r\n    if @article.save\r\n
      \     flash[:notice] = &quot;Successfully created article!&quot;\r\n      redirect_to
      article_path(@article)\r\n    else\r\n      flash[:alert] = &quot;Error creating
      new article!&quot;\r\n      render :new\r\n    end\r\n  end\r\n\r\n  def edit\r\n
      \ end\r\n\r\n  def update\r\n    if @article.update_attributes(article_params)\r\n
      \     flash[:notice] = &quot;Successfully updated article!&quot;\r\n      redirect_to
      article_path(@article)\r\n    else\r\n      flash[:alert] = &quot;Error updating
      article!&quot;\r\n      render :edit\r\n    end\r\n  end\r\n\r\n  def show\r\n
      \ end\r\n\r\n  def destroy\r\n    if @article.destroy\r\n      flash[:notice]
      = &quot;Successfully deleted article!&quot;\r\n      redirect_to articles_path\r\n
      \   else\r\n      flash[:alert] = &quot;Error updating article!&quot;\r\n    end\r\n
      \ end\r\n\r\n<span style=\"color: rgb(184, 49, 47);\">private</span>\r\n<span
      style=\"color: rgb(243, 121, 52);\">  def tag_params\r\n    params.require(:tag).permit(:name)\r\n 
      end</span>\r\n\r\n  def article_params\r\n    params.require(:article).permit(:title,
      :body, :image)\r\n  end\r\n\r\n  def find_article\r\n    @article = Article.find(params[:id])\r\n
      \ end\r\nend</pre><p><br></p><p>articles/_form.html.erb</p><pre>&lt;%= simple_form_for
      (@article) do |f| %&gt;\r\n  &lt;% if @article.errors.any? %&gt;\r\n    &lt;div
      id=&quot;error_explanation&quot;&gt;\r\n      &lt;h2&gt;\r\n        &lt;%= &quot;#{pluralize(@article.errors.count,
      &quot;error&quot;)} により保存ができませんでした&quot; %&gt;\r\n      &lt;/h2&gt;\r\n      &lt;ul&gt;\r\n
      \       &lt;% @article.errors.full_messages.each do |msg| %&gt;\r\n          &lt;li&gt;\r\n
      \           &lt;%= msg %&gt;\r\n          &lt;/li&gt;\r\n        &lt;% end %&gt;\r\n
      \     &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  &lt;% end %&gt;\r\n\r\n  &lt;div
      class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.input :title, class: &quot;form-control&quot;
      %&gt;\r\n  &lt;/div&gt;\r\n\r\n<span style=\"color: rgb(243, 121, 52);\">  &lt;div
      class=&quot;form-group&quot;&gt;\r\n    &lt;%= fields_for :tag do |field| %&gt;\r\n 
          &lt;%= field.label :name %&gt;\r\n      &lt;%= field.text_field :name %&gt;\r\n
      \   &lt;% end %&gt;\r\n  &lt;/div&gt;</span>\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n
      \   &lt;%= f.input :image, as: :file, class: &quot;form-control&quot; %&gt;\r\n
      \ &lt;/div&gt;\r\n\r\n  &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%=
      f.label :body %&gt;\r\n    &lt;%= f.text_area :body %&gt;\r\n  &lt;/div&gt;\r\n\r\n
      \ &lt;div class=&quot;form-group&quot;&gt;\r\n    &lt;%= f.button :submit, &quot;投稿&quot;,
      :class =&gt; &#39;btn btn-primary&#39; %&gt;\r\n  &lt;/div&gt;\r\n&lt;% end
      %&gt;</pre><h2><br></h2><h2>多対多でクエリ</h2><p>articleモデルとtagモデルで多対多だが、クエリを作るときのやり方</p><pre>routes.rb\r\n...\r\nget
      &#39;articles/<span style=\"color: rgb(243, 121, 52);\">:id</span>/tag&#39;
      =&gt; &#39;articles#tag&#39;, as: &#39;manage_tag&#39; # タグのidが入る形</pre><pre>articles_controller.rb\r\n...\r\ndef
      tag\r\n# INNER JOINするために joinsメソッド\r\n# 以下のように<span style=\"color: rgb(243,
      121, 52);\">joinsテーブルから特定のものを引っこ抜くやり方</span>でも<span style=\"color: rgb(41, 105,
      176);\">クエリーを二つ作ってmergeメソッドで合体させるやり方でも良い</span>\r\n# @articles = <span style=\"color:
      rgb(243, 121, 52);\">Article.joins(:tags).where(tags: {id: </span><span style=\"color:
      rgb(65, 168, 95);\">params[:id]</span><span style=\"color: rgb(243, 121, 52);\">})</span>\r\n@articles
      = <span style=\"color: rgb(44, 130, 201);\">Article.joins(:tags).merge(Tag.where(id:
      params[:id]))</span>\r\nend</pre><pre>viewファイル(今回は_navigation.html.erb)\r\n...\r\n&lt;!--
      タグのリンク付きセレクトボックス, dropdownはBootstrapを使用 --&gt;\r\n&lt;% Tag.all.each do |tag|
      %&gt;\r\n  &lt;a class=&quot;dropdown-item&quot; href=<span style=\"color: rgb(65,
      168, 95);\">&lt;%= manage_tag_path(id: tag.id) %&gt;</span>&gt;\r\n  &lt;%=
      tag.name %&gt;\r\n  &lt;div class=&quot;dropdown-divider&quot;&gt;&lt;/div&gt;\r\n&lt;/a&gt;\r\n&lt;%
      end %&gt;\r\n...</pre><pre>tag.html.erb\r\n...\r\n&lt;% @articles.each do |article|
      %&gt;\r\n  &lt;%= article.title %&gt;\r\n  &lt;%= article.body %&gt;\r\n&lt;%
      end %&gt;\r\n...</pre><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-10 09:21:55.300522'
    - '2019-01-01 07:10:58.289144'
  - - 91
    - rails5.2 'rack-attack' で セキュリティ対策
    - "<h1 style=\"text-align: center;\">gem rack-attack[セキュリティ対策]を実装</h1><p><br></p><p>Gemfileに下記を追加する</p><pre>#
      for security\r\ngem &#39;rack-attack&#39;\r\n\r\n# production環境だけで良い人はこれ\r\n#
      group :production do\r\n#  gem &#39;rack-attack&#39;\r\n# end</pre><p>bundle
      install実施</p><pre>bundle install</pre><p><br></p><p>config/application.rb</p><pre>module
      YourApp\r\n  class Application &lt; Rails::Application\r\n    省略\r\n    # security\r\n
      \   <span style=\"color: rgb(184, 49, 47);\">config.middleware.use Rack::Attack</span>\r\n
      \ end\r\nend</pre><p><br></p><p>productionだけ読み込む場合は config/environments/production.rb</p><pre>Rails.application.configure
      do\r\n  config.middleware.use Rack::Attack\r\nend</pre><p><br></p><h3>rack-attackの設定ファイル</h3><p><code>config/initializers/rack-attack.rb</code>
      を設定ファイルとして作成する</p><pre>class Rack::Attack\r\n# 1.2.3.4からのアクセスを拒否する\r\n# Rack::Attack.blocklist(&#39;block
      1.2.3.4&#39;) do |req|\r\n# &#39;1.2.3.4&#39; == req.ip\r\n# end\r\n# BadUAが含まれたUserAgentからのログイン画面アクセスを拒否する\r\n#
      Rack::Attack.blocklist(&#39;block bad UA logins&#39;) do |req|\r\n# req.path
      == &#39;/login&#39; &amp;&amp; req.post? &amp;&amp; req.user_agent == &#39;BadUA&#39;\r\n#
      end\r\n\r\nRack::Attack.blocklist(&#39;自分以外は認証画面拒否&#39;) do |req|\r\nreq.path
      == &#39;/login_path&#39;\r\nend\r\n# ホワイトリスト設定\r\nRack::Attack.safelist(&#39;ローカルホストと自分を許可&#39;)
      do |req|\r\n&#39;127.0.0.1&#39; == req.ip || &#39;::1&#39; == req.ip || ENV[&quot;ip_address&quot;]
      == req.ip\r\nend\r\n\r\n# 同一IPアドレスからのリクエストを300回/分に制限\r\nRack::Attack.throttle(&#39;req/ip&#39;,
      limit: 300, period: 5.minutes) do |req|\r\n  req.ip\r\nend\r\n\r\n# アタックや過度なクローリングの対策になる
      <a href=\"https://blog.nakamu.life/posts/rails-dos-rack-attack/\">https://blog.nakamu.life/posts/rails-dos-rack-attack/</a>\r\n\r\nend</pre><p><br></p><p>ちなみにgemなしでも実装してみます。</p><p><br></p><p>articles_controller</p><pre><span
      style=\"color: rgb(184, 49, 47);\">class</span> <span style=\"color: rgb(97,
      189, 109);\">ArticlesController</span> &lt; <span style=\"color: rgb(97, 189,
      109);\">ApplicationController</span>\r\nbefore_action <span style=\"color: rgb(147,
      101, 184);\">:restrict_remote_ip</span>, <span style=\"color: rgb(147, 101,
      184);\">only</span>: [:<span style=\"color: rgb(147, 101, 184);\">edit</span>,
      :<span style=\"color: rgb(147, 101, 184);\">create</span>]\r\n...\r\n  <span
      style=\"color: rgb(97, 189, 109);\">PERMIT_ADDRESSES</span> = [&#39;<span style=\"color:
      rgb(250, 197, 28);\">127.0.0.1</span>&#39;, &#39;<span style=\"color: rgb(250,
      197, 28);\">::1</span>&#39;, ENV[&quot;<span style=\"color: rgb(250, 197, 28);\">ip_address</span>&quot;]].freeze\r\n
      \ <span style=\"color: rgb(184, 49, 47);\">def</span> <span style=\"color: rgb(97,
      189, 109);\">restrict_remote_ip</span>\r\n  <span style=\"color: rgb(124, 112,
      107);\"># ローカルか自分のipアドレス</span>\r\n  <span style=\"color: rgb(184, 49, 47);\">unless</span>
      <span style=\"color: rgb(84, 172, 210);\">PERMIT_ADDRESSES</span>.<span style=\"color:
      rgb(84, 172, 210);\">include?</span>(request.remote_ip)\r\n    render <span
      style=\"color: rgb(147, 101, 184);\">text</span>: &#39;<span style=\"color:
      rgb(250, 197, 28);\">サービスが見つかりません</span>&#39;, <span style=\"color: rgb(147,
      101, 184);\">status</span>: <span style=\"color: rgb(147, 101, 184);\">503</span>\r\n
      \ <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n<span style=\"color:
      rgb(184, 49, 47);\">end</span></pre><p>:edit, :createアクションを自分以外ブロックする機能が実装できました。めでたしめでたし。</p><p><br></p><p>ちなみに...</p><p><a
      href=\"https://www.cman.jp/network/support/go_access.cgi\">アクセス情報【使用中のIPアドレス確認】</a></p><p>や&nbsp;</p><p><a
      href=\"http://www.cman.jp/network/support/go_access.cgi\" rel=\"nofollow\">CMAN：【使用中のIPアドレス確認】</a></p><p>でグローバルIPを調べて、そのネットワークでアクセス制限をかけることができます(プライベートIPとグローバル
      IPは違うので注意！！)</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-10 09:43:05.656626'
    - '2019-03-21 13:38:35.365434'
  - - 92
    - 'ソケット地獄のmysqlエラー　ERROR 2002 (HY000): Can''t connect to local MySQL server through
      socket ''/tmp/mysql.sock'' (38)'
    - "<h1>エラー内容&nbsp;</h1><pre>$ mysql -u root -p\r\nCan&#39;t connect to local MySQL
      server through socket &#39;/tmp/mysql.sock&#39;</pre><p>となり、サーバーを止めることもできずstartもできず全ての動作がいきなりできなくなりました。</p><p><br></p><p>ググると　</p><p>/usr/local/etc/my.cnfを</p><p>[mysqld]<br>socket=/tmp/mysql.sock<br>[client]<br>socket=/tmp/mysql.sock</p><p>として</p><p>/usr/local/etc/php/php.iniを</p><p>pdo_mysql.default_socket
      = /tmp/mysql.sock</p><p>mysqli.default_socket = /tmp/mysql.sock</p><p>mysql.default_socket
      = /tmp/mysql.sock</p><p><br></p><p>ソケットは　/tmp/mysql.sock &nbsp;か /var/mysql/mysql.sock
      で統一しろと書かれているけど結局ダメ。</p><p><br></p><pre>$ sudo touch /var/lib/mysql/mysql.sock\r\n$
      sudo chown mysql:mysql /var/lib/mysql</pre><p>でファイルと権限を復活させろとか書かれてたけどそれもだめ。</p><p><br></p><p>以下の方法で</p><p>やっと地獄から抜けました。これはメモっとかないと地獄再来はごめん\U0001F4A6</p><p><br></p><pre>$
      cd /usr/local/var\r\n$ ls -ll</pre><pre>drwxr-xr-x    4 nakajitatsuya  admin
         128  9 20 17:03 homebrew\r\ndrwxrwxr-x    3 nakajitatsuya  admin     96  8
      21 11:16 log\r\ndrwxr-xr-x   204 <span style=\"color: rgb(184, 49, 47); background-color:
      rgb(247, 218, 100);\">_mysql</span><span style=\"background-color: rgb(247,
      218, 100);\">         </span><span style=\"color: rgb(184, 49, 47); background-color:
      rgb(247, 218, 100);\">_mysql</span>  6528 12 16 09:21 mysql\r\ndrwx------  
      15 nakajitatsuya  admin    480  9 20 16:52 postgres\r\ndrwxr-xr-x    3 nakajitatsuya
       admin     96  6 15  2018 run</pre><pre>$ sudo chown nakajitatsuya:admin /tmp/mysql.sock</pre><pre>$
      ls -ll</pre><pre>drwxr-xr-x    4 nakajitatsuya  admin   128  9 20 17:03 homebrew\r\ndrwxrwxr-x
         3 nakajitatsuya  admin    96  8 21 11:16 log\r\ndrwxr-xr-x  209 <span style=\"color:
      rgb(44, 130, 201); background-color: rgb(247, 218, 100);\">nakajitatsuya  admin</span>
       6688 12 16 09:22 mysql\r\ndrwx------   15 nakajitatsuya  admin   480  9 20
      16:52 postgres\r\ndrwxr-xr-x    3 nakajitatsuya  admin    96  6 15  2018 run</pre><p><br></p><p>よし</p><pre>$
      sudo mysql.server start\r\nStarting MySQL\r\nSUCCESS! </pre><p>成功!!</p><pre>mysql
      -u root -p\r\nEnter password: \r\nWelcome to the MySQL monitor.  Commands end
      with ; or \\g.\r\nYour MySQL connection id is 8\r\nServer version: 8.0.12 Homebrew\r\n\r\n\r\nCopyright
      (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\r\n\r\n\r\nOracle
      is a registered trademark of Oracle Corporation and/or its\r\naffiliates. Other
      names may be trademarks of their respective\r\nowners.\r\n\r\n\r\nType &#39;help;&#39;
      or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.\r\n\r\n\r\nmysql&gt; </pre><h2>成功！！治ったーーーーーーー！！！<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f602.svg);\">&nbsp;</span></h2><p><br></p><p><br></p>"
    - '2018-12-16 00:55:53.541092'
    - '2018-12-16 01:57:44.433948'
  - - 94
    - ".gitignoreの作り方[node_modulesを取り除きたい]"
    - "<p><span style=\"font-size: 24px;\">目的: node_modulesをgitから取り除き、.ignoreに記載して無視するようにする(package.jsonがあるのでバージョン管理は必要ないからnode_modulesは普通gitにあげない)</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">原因: git作成後 .gitignoreを作成する前に<code>$ npm install</code>をしてしまい、<code>git
      add .</code>でnode_modules以下を全てインデックスに登録してしまった。</span></p><p><br></p><p>1. 作業ディレクトリに移動</p><pre>$
      cd my_dir</pre><p>2. .gitignoreをファイル作成</p><pre>$ touch .gitignore</pre><p>3.
      gitignoreにvimで無視するもの(node_modules/)を書き込む 編集後ZZで保存できる</p><p>拡張子のない隠しファイルは<code>&nbsp;$
      vim(sublとかでもok) ファイル名</code> で編集できる</p><pre>$ vim .gitignore</pre><pre>node_modules/\r\n~\r\n~\r\n~\r\n~</pre><p>4.
      ファイル(node_modules)を残したまま管理対象(git)から外す (<span style=\"color: rgb(184, 49, 47);\">外すだけ</span>)</p><p>(--cached
      オプションつけないと、ファイルごと<span style=\"color: rgb(184, 49, 47);\">削除</span>しちゃう)</p><pre>$
      git rm -r --cached node_modules</pre><pre>$  git status\r\n$ git add .\r\n$
      git commit -m &#39;create .ignore and add node_modules to .ignore, and Remove
      node_modules from git&#39;\r\n$ git push origin master</pre><p><br></p><p><br></p><h4><span
      style=\"font-size: 48px;\">豆知識</span></h4><h3>rmコマンドの使い方</h3><p><span style=\"color:
      rgb(41, 105, 176);\">ファイル削除は rm</span>, <span style=\"color: rgb(184, 49, 47);\">ディレクトリ丸ごと削除は
      rm-r</span></p><pre>$ rm <span style=\"color: rgb(184, 49, 47);\">-r</span>
      test (testディレクトリと配下のファイル、サブディレクトリ全てを削除できる)</pre><pre>$ rm test (testファイルを削除する)</pre><p>削除確認がいらないときは</p><pre>$
      rm -rf test (-fで確認無し)</pre><p><br></p><h3>rmdirコマンドの使い方</h3><p><span style=\"color:
      rgb(184, 49, 47);\">空の</span>ディレクトリを削除できる</p><pre>$ rmdir test (サブディレクトリやファイルを含んでいれば、エラーが出る)</pre><p><br></p><p>削除できません:
      許可がありません とエラーが出るときは<strong>「su」</strong>コマンドで<strong>スーパーユーザー（管理者権限）でログイン</strong>して削除コマンドを実行</p><p><a
      href=\"https://www.sejuku.net/blog/52175\">スーパーユーザーへの切り替え</a></p><p><br></p><p><br></p>"
    - '2018-12-19 06:48:55.143279'
    - '2018-12-19 06:48:55.149109'
  - - 95
    - Node.jsでスプレッドシートのデータ取得
    - "<h1>環境 Node.js v10.11.0&nbsp;</h1><p><br></p><p><br></p><p><span style=\"font-size:
      24px;\">手順 1. 開発者コンソールでapiの設定をおこなう</span></p><p><br></p><p>GoogleDevelopersを使用するので
      <a href=\"https://console.developers.google.com/\">https://console.developers.google.com/</a>
      に新しいプロジェクトを登録する(既存のものに追加しても良い)</p><p>以下はautoTestという新しいプロジェクトを作った</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545377277610-start.png\"
      style=\"width: 900px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p>次にgoogleDriveApiを有効化する(下のやつ)</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545377456537-goofledrive.png\"
      style=\"width: 300px;\" class=\"fr-fic fr-dib\"></p><p>次にキーを作成</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545377736608-api_key.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545378316529-credentials.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p>作成</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545378672461-complete.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p><span style=\"font-size:
      24px; color: rgb(184, 49, 47);\">これでコンソール側の設定はOK</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順 2. スプレッドシートで共有を行う</span></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545379372102-spreadsheet.png\"
      style=\"width: 900px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>手順
      3. 実装</p><p><br></p><p>●ディレクトリを作成して必要なパッケージをインストールします。</p><p><br></p><p>以下を実行</p><pre
      data-lang=\"sh\" data-unlink=\"\">$ mkdir node_spreadsheet\r\n$ cd node_spreadsheet\r\n$
      npm init\r\n$ npm install google-spreadsheet async</pre><p>または</p><pre><span
      style=\"color: rgb(250, 197, 28);\">node_spreadsheet/package.json</span>\r\n{\r\n&quot;scripts&quot;:
      {\r\n&quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp;
      exit 1&quot;\r\n},\r\n<span style=\"color: rgb(184, 49, 47);\">&quot;dependencies&quot;:
      {\r\n&quot;async&quot;: &quot;^2.6.1&quot;,\r\n&quot;google-spreadsheet&quot;:
      &quot;^2.0.6&quot;\r\n}</span>\r\n}\r\n\r\n$ npm install</pre><p><br></p><p>●node_spreadsheet/index.jsを作成してコードを貼る</p><pre>var
      GoogleSpreadsheet = require(&quot;google-spreadsheet&quot;);\r\nvar async =
      require(&quot;async&quot;);\r\n\r\n// https://docs.google.com/spreadsheets/d/XXXXXXXXXXXXXXXXXXXXX/edit#gid=0\r\nvar
      doc = new GoogleSpreadsheet(&quot;XXXXXXXXXXXXXXXXXXXXX&quot;); // スプレッドシートのurlから確認して入れる\r\nvar
      sheet;\r\n\r\nasync.series(\r\n[\r\nfunction setAuth(step) {\r\nvar creds =
      require(&quot;./YYYYYYYYY.json&quot;); // コンソールで設定して自動作成されたファイルを読み込む\r\ndoc.useServiceAccountAuth(creds,
      step);\r\n},\r\nfunction getInfoAndWorksheets(step) {\r\ndoc.getInfo(function(err,
      info) {\r\nsheet = info.worksheets[0];\r\nstep();\r\n});\r\n},\r\nfunction workingWithCells(step)
      {\r\nconst COLUMNS = {\r\n<span style=\"color: rgb(251, 160, 38);\">firstColumn</span>:
      1,\r\n<span style=\"color: rgb(226, 80, 65);\">secondColumn</span>: 2,\r\n};\r\nsheet.getCells(\r\n{\r\n&quot;min-row&quot;:
      2,\r\n&quot;max-row&quot;: 5,\r\n&quot;return-empty&quot;: true\r\n},\r\nfunction(err,
      cells) {\r\n// <span style=\"color: rgb(124, 112, 107);\">cells.length/sheet.colCount=(2~5行の全セル)/(1行あたりのセル)=</span><span
      style=\"color: rgb(243, 121, 52);\">説取得を行う範囲の行数 </span><span style=\"color:
      rgb(124, 112, 107);\">を表す </span><span style=\"color: rgb(41, 105, 176);\">数列的にいうと,An=(sheet.colCount)n+A0
      [n=0,1,2,...sheet.colCount]</span>\r\nfor (let i = 0; i &lt; cells.length /
      sheet.colCount; i += 1) {\r\nconst name = cells[i * sheet.colCount + COLUMNS.<span
      style=\"color: rgb(251, 160, 38);\">firstColumn</span>].value;\r\nconst gender
      = cells[i * sheet.colCount + COLUMNS.<span style=\"color: rgb(226, 80, 65);\">secondColumn</span>].value;\r\nconsole.log(name
      + &quot; &quot; + price);\r\n}\r\n}\r\n);\r\n}\r\n],\r\nfunction(err) {\r\nif
      (err) {\r\nconsole.log(&quot;Error: &quot; + err);\r\n}\r\n}\r\n);</pre><p>出力結果</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545379719122-output.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h1>good!!<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f600.svg);\">&nbsp;</span>&nbsp;</h1><p><br></p><p>参考URL
      <a href=\"https://techblog.lclco.com/entry/2018/11/30/120000\">https://techblog.lclco.com/entry/2018/11/30/120000</a></p><p>参考にさせていただいた、この方のやり方以外にも</p><p><a
      href=\"https://dotstud.io/blog/google-spreadsheets-from-nodejs/​​​​\">https://dotstud.io/blog/google-spreadsheets-from-nodejs/</a>\r\n<a
      href=\"https://dotstud.io/blog/google-spreadsheets-from-nodejs/　のように\"></a></p><p>Google
      Drive Apiではなく Google Sheets Api を有効化してクライアントキーからアクセスする方法もあるみたいです</p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2018-12-21 08:19:35.917091'
    - '2018-12-24 12:48:18.685196'
  - - 96
    - gem geocoder で 地名と座標を自由に変換
    - "<h1>rails で住所から緯度経度を取得</h1><p><br></p><p><span style=\"background-color: rgb(247,
      218, 100); font-family: Impact, Charcoal, sans-serif; font-size: 18px; color:
      rgb(65, 168, 95);\">＊＊＊クライアント側は2018年の夏頃までは設定しなくても動いてたんですが、現在はgoogleのgeocodingAPIを有効化しないと使えないので、急に使えなくなっていてびっくりした方も多いと思います！！自分もその1人です！！</span></p><h2><span
      style=\"color: rgb(41, 105, 176);\">Geocoding API</span></h2><p>1. GeocodingAPI
      を有効化してAPIキーを作成</p><p>GoogleDevelopersから<span style=\"color: rgb(184, 49, 47);
      font-size: 18px; background-color: rgb(247, 218, 100);\">Geocoding API</span>を有効化し、認証情報を作成してAPIキー作成(すでにAPIを持っている場合は新たに作る必要はない)</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1545720666699-geocoding.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib\"></p><h2><span style=\"color:
      rgb(41, 105, 176);\">Geocoder</span></h2><h2><span style=\"font-size: 18px;\">1.
      gemのインストール</span></h2><pre>Gemfile\r\n...\r\ngem &#39;geocoder&#39;</pre><pre>$
      bundle install</pre><p><br></p><p><br></p><p><span style=\"font-size: 18px;\">2.
      geocoder設定ファイルを作成、編集</span></p><pre><code>$ rails generate geocoder</code><code>:config
      <span style=\"color: rgb(41, 105, 176);\">(設定ファイルがconfig/initializers/geocoder.rbとしてできる)</span></code></pre><pre><code><span
      style=\"color: rgb(41, 105, 176);\">config/initializers/geocoder.rb</span></code>\r\nGeocoder.configure(\r\n#
      Geocoding options\r\n# timeout: 3,                 # geocoding service timeout
      (secs)\r\n# lookup: :google,            # name of geocoding service (symbol)\r\n#
      ip_lookup: :ipinfo_io,      # name of IP address geocoding service (symbol)\r\n<span
      style=\"color: rgb(250, 197, 28);\">language: :ja,</span>                <span
      style=\"color: rgb(247, 218, 100);\"># :enから:jaに変えた</span>\r\n# use_https: false,
                # use HTTPS for lookup requests? (if supported)\r\n# http_proxy: nil,
                 # HTTP proxy server (user:pass@host:port)\r\n# https_proxy: nil,
                # HTTPS proxy server (user:pass@host:port)\r\n<span style=\"color:
      rgb(250, 197, 28);\">api_key: &quot;あなたのAPI_KEY&quot;,</span>              
      <span style=\"color: rgb(247, 218, 100);\"># APIキーを設定しないと動きません</span>\r\n# cache:
      nil,                 # cache object (must respond to #[], #[]=, and #del)\r\n#
      cache_prefix: &#39;geocoder:&#39;,  # prefix (string) to use for all cache keys\r\n#
      Exceptions that should not be rescued by default\r\n# (if you want to implement
      custom error handling);\r\n# supports SocketError and Timeout::Error\r\n# always_raise:
      [],\r\n# Calculation options\r\n# units: :mi,                 # :km for kilometers
      or :mi for miles 1mi=1.6km\r\n# distances: :linear          # :spherical or
      :linear\r\n)</pre><p><br></p><p><span style=\"font-size: 18px;\">2. Modelにフィールドを作成</span></p><pre>$
      rails generate migration AddLatitudeAndLongitudeToModel latitude:float longitude:float
      address:string\r\n$ rake db:migrate</pre><pre>moder.rb\r\ngeocoded_by :address
      # addressカラムにジオコーディングを実装\r\nafter_validation :geocode, :if =&gt; :address_changed?
      # addressカラムが変更(保存や更新)されたらジオコーディングが行われる</pre><p><br></p><p><span style=\"font-size:
      18px;\">3. Viewを作成</span></p><pre>&lt;%= form_for @listing do |f| %&gt;\r\n\r\n&lt;div
      class=&quot;row&quot;&gt;\r\n&lt;div class=&quot;col-md-12&quot;&gt;\r\n&lt;div
      class=&quot;form-group&quot;&gt;\r\n&lt;label&gt;住所&lt;/label&gt;\r\n&lt;%=
      f.text_field :address, placeholder: &quot;例: 東京都港区六本木６丁目１１&minus;１&quot;, class:
      &quot;form-control&quot;,\r\nrequired: &quot;true&quot; %&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div
      class=&quot;actions&quot;&gt;\r\n&lt;%= f.submit &quot;更新&quot;, class: &quot;btn
      btn-danger&quot; %&gt;\r\n&lt;/div&gt;\r\n&lt;% end %&gt;</pre><p><br></p>"
    - '2018-12-25 04:57:14.991951'
    - '2019-07-26 12:29:32.211333'
  - - 97
    - Rails5.2 Herokuにデプロイ
    - "<p style=\"text-align: center;\"><span style=\"font-size: 30px;\">Rails5.2
      Herokuにデプロイ</span></p><pre>Gemfileを編集\r\ngroup :production do\r\n　gem &#39;pg&#39;\r\nend\r\ngroup
      :development, :test do\r\n　gem &#39;sqlite3&#39;\r\nend</pre><pre>$ bundle install</pre><p>database.ymlは変更なし(Herokuが勝手にPostgreSQLで読み替えてくれる)</p><pre>default:
      &amp;default\r\nadapter: sqlite3\r\npool: &lt;%= ENV.fetch(&quot;RAILS_MAX_THREADS&quot;)
      { 5 } %&gt;\r\ntimeout: 5000\r\n\r\ndevelopment:\r\n&lt;&lt;: *default\r\ndatabase:
      db/development.sqlite3\r\n\r\n# Warning: The database defined as &quot;test&quot;
      will be erased and\r\n# re-generated from your development database when you
      run &quot;rake&quot;.\r\n# Do not set this db to the same as development or
      production.\r\ntest:\r\n&lt;&lt;: *default\r\ndatabase: db/test.sqlite3\r\n\r\nproduction:\r\n&lt;&lt;:
      *default\r\ndatabase: db/production.sqlite3</pre><p><br></p><p><span style=\"color:
      rgb(226, 80, 65);\">herokuの環境変数にmaster_keyを設定(rails5.2以降ならconfig/master.keyに生成されている。これをコピペして設定)<br>heroku
      config:set RAILS_MASTER_KEY=xxxxxxxxxxxxxxxxxxxxxxx</span></p><p><br></p><p>あとはHerokuのコンソールの指示に従ってコマンドを実行</p><pre>$
      git push heroku master</pre><p>までやったら</p><pre>$ heroku run rake db:schema:load\r\n$
      heroku run rake db:migrate</pre><h2><span style=\"color: rgb(243, 121, 52);\">&nbsp;完了</span></h2><p><br></p><p><span
      style=\"font-size: 24px;\"><span style=\"color: rgb(226, 80, 65);\">本番環境のみ画像が表示されないとき</span></span><br>(error
      not found 404)</p><pre># config/environments/roduction.rb\r\nconfig.assets.compile
      = true</pre><p>に設定し</p><pre>$ bundle exec rake assets:precompile RAILS_ENV=production</pre><p>を実行</p><p><br></p><p><br></p>"
    - '2019-01-13 12:29:06.871181'
    - '2019-01-13 13:17:42.725892'
  - - 98
    - Rails5.2 ローカルのDBデータをHerokuに渡す
    - "<p><span style=\"font-size: 30px; color: rgb(184, 49, 47);\">トラブル</span><br>herokuにデプロイしたあと、テーブルにデータがなく空状態である<br>(After
      deploy to heroku, there are no data in tables)<br><br><span style=\"font-size:
      30px; color: rgb(184, 49, 47);\">実現したいこと</span><br>localのデータを本番環境(heroku)に移したい<br>(I
      would like to dump local data to heroku)</p><h3><br>手順1 yaml_dbを導入</h3><pre>#
      Gemfile\r\ngem &#39;yaml_db&#39;\r\n$ bundle install</pre><h3><br>手順2 コピーしたいデータをダンプ</h3><pre>$
      rake db:dump RAILS_ENV=&quot;development&quot;\r\n(config/db/data.yml will be
      created!)\r\n\r\n$ rake db:data:load RAILS_ENV=&quot;production&quot;\r\n(production.sqlite3
      will be created!)</pre><p><br></p><h3>手順3 HerokuのPostgreSQLでダンプデータを読み込む</h3><pre>$
      heroku run pg:reset\r\n$ heroku run rake db:create RAILS_ENV=&quot;production&quot;\r\n$
      heroku run rake db:schema:load RAILS_ENV=&quot;production&quot;\r\n$ heroku
      run rake db:migrate RAILS_ENV=&quot;production&quot;\r\n$ heorku run rake db:data:load
      RAILS_ENV=&quot;production&quot;\r\n(content of data.yml has been dumped to
      Heroku now!)</pre>"
    - '2019-01-13 13:41:28.65589'
    - '2019-06-14 06:46:45.89785'
  - - 99
    - Rails5.2 管理者権限の作成
    - "<header><h1 style=\"text-align: center;\">railsで管理者権限を持たせる</h1></header><h2>実現したいこと</h2><p><br>管理者しか入れたくないページがあるので、権限を管理者だけにする</p><p>(make
      access impossible except admin.)</p><h2><br>行ったこと</h2><p><br>usersテーブルに権限カラムを追加して、特定のユーザーにのみtrueを与える</p><p>(add
      admin column in users table.)<br><br>手順1. usersテーブルにadminカラムの追加</p><pre>$ rails
      generate migration add_admin_to_users admin:boolean\r\n(db/migrate/[timestamp]_add_admin_to_users.rb
      will be created!)</pre><p><br></p><p>手順2. 生成されたマイグレーションファイルを編集<br>(Edit [timestamp]_add_admin_to_users.rb)</p><pre>#[timestamp]_add_admin_to_users.rb\r\nclass
      AddAdminToUsers &lt;ActiveRecord::Migration\r\ndef change\r\nadd_column :users,
      :admin, :boolean, default: false\r\nend\r\nend</pre><p><br></p><p>手順3. マイグレーションファイルを読み込む<br>(run
      migrate command)</p><pre>$ rake db:migrate</pre><p>これでusersテーブルにadminカラムが追加されました。<br><br>手順4.
      開発者ユーザーにadmin:trueを入れる<br>(add admin:true in column)</p><p><br></p><pre>方法A)
      seedデータを作成\r\n# db/seeds.rb\r\nUser.create!(name: &quot;ADmin User&quot;,\r\nemail:
      &quot;admin@example.com&quot;,\r\npassword: &quot;foobar&quot;,\r\npassword_confirmation:
      &quot;foobar&quot;,\r\nadmin: true)\r\n\r\n$ rake db:seed</pre><p><br>または</p><p><br></p><pre>方法B)コンソールから作成\r\n$
      rails console\r\n&gt;&gt; user = User.find(name: &quot;adminUserName&quot;)\r\n&gt;&gt;
      user.admin?\r\n=&gt; false\r\n&gt;&gt; user.toggle!(:admin)\r\n=&gt; true\r\n&gt;&gt;
      user.admin?\r\n=&gt; true</pre><h3><br>viewに実装例</h3><pre>&lt;% if current_user.admin?
      %&gt;\r\n&lt;%= link_to &quot;Delete&quot;, article_path(article), class: &quot;btn
      btn-danger&quot;, data: {:confirm =&gt; &quot;削除してもよろしいですか?&quot;}, method:
      :delete %&gt;\r\n&lt;% end %&gt;</pre><h3>コントローラに実装例</h3><pre>before_action
      :admin_user,　only: :destroy\r\nprivate\r\ndef admin_user\r\nredirect_to(root_url)
      unless current_user.admin?\r\nend</pre><p><br></p><p><span style=\"font-family:
      Impact, Charcoal, sans-serif; font-size: 30px;\">完了!!<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f601.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p>"
    - '2019-01-14 06:12:11.77056'
    - '2019-01-14 06:56:19.22122'
  - - 103
    - コマンドライン引数
    - "<pre>&lt;?php\r\n  // $argcにはコマンドライン引数の数\r\nif( $argc != 3 ){\r\n  echo &quot;数を２つ指定して下さい&quot;.PHP_EOL;\r\n//
      正常終了\r\n  exit(0);\r\n}\r\n\r\n$num1 = $argv[1];\r\n$num2 = $argv[2];\r\necho
      $num1+$num2.PHP_EOL;\r\n?&gt;</pre><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1548057904612-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-01-21+17.04.33.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p>"
    - '2019-01-21 08:03:23.491288'
    - '2019-08-06 14:06:25.256904'
  - - 104
    - パリティチェック
    - "<p>あなたはデータ入力の作業を行っています。<br>この入力するデータは &quot;0000&quot; から &quot;1111&quot;
      までの 2 進数です。</p><p>このデータ入力の作業は単調でミスを起こしやすく困っています。<br>このため、入力するデータに対してある計算をし検証をすることにしました。</p><p>ここでは排他的論理和(xor)
      と呼ばれる計算を使って入力データのミスを検出しようとしました。<br>排他的論理和(xor) は各桁において、1 が奇数個あれば 1、そうでないならば
      0 を出力します。</p><p>入力する N 個のデータに対して、排他的論理和(xor) を取って出力をしてください。<br>入力例 1 の場合は、各桁に対して以下のように計算されます。</p><p><img
      alt=\"img\" src=\"http://paiza.s3.amazonaws.com/problem/img/287/xor3.png\" class=\"fr-fic
      fr-dii\"></p><p>入力例2</p><pre><code>4\r\n0001\r\n0010\r\n0100\r\n1000</code></pre><p><br></p><p>解答</p><pre>&lt;?php\r\n$input_lines
      = trim(fgets(STDIN));\r\nif (strlen($input_lines)!=4) {\r\n  for ($i = 0; $i
      &lt; $input_lines; $i++) {\r\n    $num = trim(fgets(STDIN));\r\n    $num = str_replace(array(&quot;\\r\\n&quot;,&quot;\\r&quot;,&quot;\\n&quot;),
      &#39;&#39;, $num); // 改行文字の除去\r\n    $num1[] = substr($num, -1, 1);\r\n    $num2[]
      = substr($num, -2, 1);\r\n    $num3[] = substr($num, -3, 1);\r\n    $num4[]
      = substr($num, -4, 1);\r\n  }\r\n  $num1Sum=$num2Sum=$num3Sum=$num4Sum=0;\r\n
      \ foreach($num4 as $num4) {\r\n    $num4Sum += $num4; // 4桁目の合計\r\n  }\r\n$sum[]
      = $num4Sum;\r\nforeach($num3 as $num3) {\r\n    $num3Sum += $num3; // 3桁目の合計\r\n
      \ }\r\n  $sum[] = $num3Sum;\r\n  foreach($num2 as $num2) {\r\n    $num2Sum +=
      $num2; // 2桁目の合計\r\n  }\r\n  $sum[] = $num2Sum;\r\n  foreach($num1 as $num1)
      {\r\n    $num1Sum += $num1; // 1桁目の合計\r\n  }\r\n  $sum[] = $num1Sum;\r\n  foreach
      ($sum as $key =&gt; $value) {\r\n    if($value%2==0) {\r\n      echo 0;\r\n
      \   }else{\r\n      echo 1;\r\n    }\r\n  }\r\n} else if (strlen($input_lines)==4){\r\necho
      $input_lines;\r\n}\r\n\r\n</pre>"
    - '2019-01-21 10:21:16.596649'
    - '2019-02-04 10:07:51.154638'
  - - 106
    - ログファイル出力
    - "<p><br></p><p><br></p><pre>&lt;?php\r\n\r\n$ip = explode(&quot;.&quot;, trim(fgets(STDIN)));
      // 入力IPの配列\r\n$ip_ary = array();\r\nfor($i=2; $i&lt;4; $i++){\r\n<span style=\"color:
      rgb(204, 204, 204);\">// 第3と第4オクテットの[]を外してIPアドレス配列に入れる</span>\r\n$ip_ary[$i]
      = trim($ip[$i], &quot;[]&quot;);\r\n<span style=\"color: rgb(204, 204, 204);\">//
      第3と第4オクテットの*を0-255に読み替える</span>\r\n$ip_ary[$i] = str_replace(&quot;*&quot;,
      &quot;0-255&quot;, $ip_ary[$i]);\r\n}\r\n\r\n$ip_3 = array();\r\n$ip_3 = explode(&quot;-&quot;,
      $ip_ary[2]);<span style=\"color: rgb(204, 204, 204);\">//第３オクテット配列</span>\r\n$ip_4
      = array();\r\n$ip_4 = explode(&quot;-&quot;, $ip_ary[3]);<span style=\"color:
      rgb(204, 204, 204);\">//第４オクテット配列</span>\r\n$N = trim(fgets(STDIN)); // ログの行\r\n$info
      = array();\r\nfor($j=0; $j&lt;$N; $j++){\r\n  <span style=\"color: rgb(204,
      204, 204);\">// ログの行と情報別の多次元配列</span>\r\n  $info[$j] = explode(&quot; &quot;,
      fgets(STDIN));\r\n}\r\n$info_ip = array();\r\nfor($k=0; $k&lt;$N; $k++){\r\n
      \ <span style=\"color: rgb(204, 204, 204);\">// 多次元配列の二層目のインデックス0がIPアドレスであり,それをオクテットごとに区切って$info_ip配列に渡す</span>\r\n
      \ $info_ip[$k] = explode(&quot;.&quot;, $info[$k][0]);\r\n}\r\n\r\n<span style=\"color:
      rgb(204, 204, 204);\">// ログのIPアドレス配列のマッピング</span>\r\nforeach($info_ip as $key
      =&gt; $info_ip_v){\r\n<span style=\"color: rgb(204, 204, 204);\">// ログの第一オクテットと検索するIPアドレスの第一オクテットが一致したら</span>\r\n
      \ if($info_ip_v[0] == $ip[0]){\r\n<span style=\"color: rgb(204, 204, 204);\">//
      第二オクテットが一致したら</span>\r\n    if($info_ip_v[1] == $ip[1]){\r\n<span style=\"color:
      rgb(204, 204, 204);\">// 第三オクテットが一致したら</span>\r\n      if($info_ip_v[2] == $ip[2]){\r\n<span
      style=\"color: rgb(204, 204, 204);\">// 第四オクテットが一致もしくは第四オクテット配列の範囲内であったら</span>\r\n
      \       if($info_ip_v[3] == $ip[3]){\r\n<span style=\"color: rgb(204, 204, 204);\">//
      IPアドレス アクセス日 ファイル名</span>\r\n          echo $info[$key][0]. &quot; &quot;. trim($info[$key][3],
      &#39;[&#39;). &quot; &quot;. $info[$key][6]. &quot;\\n&quot;;\r\n        }elseif($ip_4[0]
      &lt;= $info_ip_v[3] &amp;&amp; $info_ip_v[3] &lt;= $ip_4[1]){\r\n          echo
      $info[$key][0]. &quot; &quot;. trim($info[$key][3], &#39;[&#39;). &quot; &quot;.
      $info[$key][6]. &quot;\\n&quot;;\r\n        }\r\n<span style=\"color: rgb(204,
      204, 204);\">// 第三オクテット配列の範囲内であったら</span>\r\n      }elseif($ip_3[0] &lt;= $info_ip_v[2]
      &amp;&amp; $info_ip_v[2] &lt;= $ip_3[1]){\r\n        if($ip_4[0] &lt;= $info_ip_v[3]
      &amp;&amp; $info_ip_v[3] &lt;= $ip_4[1]){\r\n          echo $info[$key][0].
      &quot; &quot;. trim($info[$key][3], &#39;[&#39;). &quot; &quot;. $info[$key][6].
      &quot;\\n&quot;;\r\n        }elseif($info_ip_v[3] == $ip[3]){\r\n          echo
      $info[$key][0]. &quot; &quot;. trim($info[$key][3], &#39;[&#39;). &quot; &quot;.
      $info[$key][6]. &quot;\\n&quot;;\r\n        }\r\n      \r\n}\r\n    }\r\n  }\r\n}\r\n?&gt;</pre>"
    - '2019-02-03 08:46:43.991494'
    - '2019-02-03 08:56:12.803924'
  - - 107
    - ダーツゲーム
    - "<pre>&lt;?php\r\n$first_line=explode(&quot; &quot;,fgets(STDIN));\r\n$first_line=filter_var_array($first_line,FILTER_SANITIZE_NUMBER_INT);\r\n$o_y=$first_line[0];\r\n$s=$first_line[1];\r\n$&theta;=$first_line[2];\r\n$&theta;=deg2rad($&theta;);
      <span style=\"color: rgb(204, 204, 204);\">// 角度をrad変換</span>\r\n\r\n$second_line=explode(&quot;
      &quot;,fgets(STDIN));\r\n$second_line=filter_var_array($second_line,FILTER_SANITIZE_NUMBER_INT);\r\n$x=$second_line[0];\r\n$y=$second_line[1];\r\n$a=$second_line[2];\r\n\r\n//
      矢の軌道\r\n$f1 = $o_y+$x*tan($&theta;);\r\n$f2 = (9.8*pow($x, 2))/(2*pow($s, 2)*pow(cos($&theta;),
      2));\r\n<span style=\"color: rgb(226, 80, 65);\">$x_y</span> = $f1 - $f2;\r\n\r\nif
      ($y-$a/2+0.05&lt;=<span style=\"color: rgb(226, 80, 65);\">$x_y</span> &amp;&amp;
      $y+$a/2-0.05&gt;=<span style=\"color: rgb(226, 80, 65);\">$x_y</span>) {\r\necho
      &quot;Hit &quot;.abs(round(<span style=\"color: rgb(226, 80, 65);\">$x_y</span>-$y,
      1)).&quot;\\n&quot;;\r\n}else{\r\necho &quot;Miss\\n&quot;;\r\n}\r\n?&gt;</pre>"
    - '2019-02-04 10:05:40.707885'
    - '2019-02-04 10:56:55.763026'
  - - 108
    - 地下アイドルの夢
    - "<pre>&lt;?php\r\n<span style=\"color: rgb(204, 204, 204);\">// ファンクラブの会員数N、ライブイベントの数M,ライブごとの利益情報\r\n//
      利益の最大値</span>\r\n$arr = explode(&quot; &quot;, trim(fgets(STDIN)));\r\n$arr
      = filter_var_array($arr,FILTER_SANITIZE_NUMBER_INT);\r\n$N = $arr[0];\r\n$M
      = $arr[1];\r\n<span style=\"color: rgb(204, 204, 204);\">// ライブごとの各メンバーのお金使う量を保存</span>\r\n$members
      = [];\r\nfor($i=0; $i&lt;$M; $i++){\r\n  $member = explode(&quot; &quot;, trim(fgets(STDIN)));\r\n
      \ $member = filter_var_array($member,FILTER_SANITIZE_NUMBER_INT);\r\n  $members[]
      = $member;\r\n}\r\n<span style=\"color: rgb(204, 204, 204);\">// ライブごとの会員たちが落としていくお金</span>\r\n<span
      style=\"color: rgb(226, 80, 65);\">$sum</span> = 0;\r\nforeach ($members as
      $key =&gt; $member) {\r\n  $count=0;\r\n  foreach ($member as $key =&gt; $money)
      {\r\n<span style=\"color: rgb(204, 204, 204);\">    // 会員が落としていくお金を足す</span>\r\n
      \   $count+=$money;\r\n  }\r\n  if ($count&gt;0){\r\n    <span style=\"color:
      rgb(226, 80, 65);\">$sum</span>+=$count;\r\n  }\r\n}\r\necho <span style=\"color:
      rgb(226, 80, 65);\">$sum</span>.PHP_EOL;\r\n?&gt;</pre>"
    - '2019-02-04 10:52:30.832563'
    - '2019-02-04 10:55:24.179776'
  - - 109
    - ビームの反射
    - "<h1>ビームの反射</h1><pre>&lt;?php \r\n$array=explode(&quot; &quot;,fgets(STDIN));\r\n$array=filter_var_array($array,FILTER_SANITIZE_NUMBER_INT);\r\n$height=$array[0];\r\n$width=$array[1];\r\nfor
      ($i=0; $i &lt; $height; $i++) { \r\n  $line[$i]=str_split(fgets(STDIN));\r\n}\r\n\r\n$x
      = 0;\r\n$y = 0;\r\n$count = 0;\r\n<span style=\"color: rgb(226, 80, 65);\">$beam</span>
      = &#39;x_go&#39;;\r\n\r\nwhile( 0&lt;= $x &amp;&amp; $x &lt; $width &amp;&amp;
      0 &lt;= $y &amp;&amp; $y &lt; $height){\r\n<span style=\"color: rgb(209, 213,
      216);\">// マスが\\の時 \\の時　_の時で場合分け</span>\r\nif($line[$y][$x] === &quot;\\\\&quot;){\r\n
      \ if(<span style=\"color: rgb(226, 80, 65);\">$beam</span> === &#39;x_go&#39;){\r\n
      \   <span style=\"color: rgb(226, 80, 65);\">$beam</span> = &#39;y_back&#39;;\r\n
      \ } elseif(<span style=\"color: rgb(226, 80, 65);\">$beam</span> === &#39;x_back&#39;){\r\n
      \   <span style=\"color: rgb(226, 80, 65);\">$beam</span> = &#39;y_go&#39;;\r\n
      \ } elseif(<span style=\"color: rgb(226, 80, 65);\">$beam</span> === &#39;y_go&#39;){\r\n
      \   <span style=\"color: rgb(226, 80, 65);\">$beam</span> = &#39;x_back&#39;;\r\n
      \ } elseif(<span style=\"color: rgb(226, 80, 65);\">$beam</span> === &#39;y_back&#39;){\r\n
      \   <span style=\"color: rgb(226, 80, 65);\">$beam</span> = &#39;x_go&#39;;\r\n
      \ }\r\n} elseif($line[$y][$x] === &#39;/&#39;){\r\n  if(<span style=\"color:
      rgb(226, 80, 65);\">$beam</span> === &#39;x_go&#39;){\r\n    <span style=\"color:
      rgb(226, 80, 65);\">$beam</span> = &#39;y_go&#39;;\r\n  } elseif(<span style=\"color:
      rgb(226, 80, 65);\">$beam</span> === &#39;x_back&#39;){ \r\n    <span style=\"color:
      rgb(226, 80, 65);\">$beam</span> = &#39;y_back&#39;;\r\n  } elseif(<span style=\"color:
      rgb(226, 80, 65);\">$beam</span> === &#39;y_go&#39;){\r\n    <span style=\"color:
      rgb(226, 80, 65);\">$beam</span> = &#39;x_go&#39;;\r\n  } elseif(<span style=\"color:
      rgb(226, 80, 65);\">$beam</span> === &#39;y_back&#39;){\r\n    <span style=\"color:
      rgb(226, 80, 65);\">$beam</span> = &#39;x_back&#39;;\r\n  }\r\n}\r\n\r\nswitch
      (<span style=\"color: rgb(226, 80, 65);\">$beam</span>) {\r\n  case &#39;x_go&#39;:\r\n
      \   $x++;\r\n    break;\r\n  case &#39;x_back&#39;:\r\n    $x--;\r\n    break;\r\n
      \ case &#39;y_go&#39;:\r\n    $y--;\r\n    break;\r\n  case &#39;y_back&#39;:\r\n
      \   $y++;\r\n    break;\r\n  default:\r\n    echo &quot;no test case!&quot;;\r\n
      \   break;\r\n}\r\n$count++;\r\n}\r\n\r\necho $count.PHP_EOL;\r\n\r\n</pre>"
    - '2019-02-07 12:12:08.528044'
    - '2019-03-07 05:07:10.201356'
  - - 110
    - Rails5.2 postgresqlを使う
    - "<p style=\"text-align: center;\"><span style=\"font-size: 30px;\">Rails5.2
      postgresqlを使う</span></p><p><span style=\"font-size: 24px;\">1.DB作成</span></p><pre><code>$
      pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
      </code></pre><pre>$ createdb AppName_production\r\n$ createdb AppName_development\r\n$
      createdb AppName_test\r\n$ createuser user</pre><p><br></p><p><span style=\"font-size:
      24px;\">2.アプリ作成</span></p><pre>$ rails new AppName --database=postgresql</pre><p><br></p><h1><span
      style=\"color: rgb(226, 80, 65); font-size: 30px; font-family: Impact, Charcoal,
      sans-serif;\">Finished!!</span></h1><p><br></p><pre>$ rails db\r\n  or\r\n$
      psql -d hoge_development</pre><p>で確認!</p>"
    - '2019-03-04 06:20:58.518483'
    - '2019-03-04 06:53:29.499209'
  - - 111
    - branchでの作業(1人)
    - "<pre>$ git checkout -b &quot;styles&quot; (masterからテェックアウト)</pre><p>作業終了したら</p><pre>$
      git branch (ブランチ一覧を確認)</pre><p>ブランチ一覧を確認</p><pre>$ git checkout master</pre><p>masterにチェックアウト</p><pre>$
      git merge styles</pre><p>stylesブランチの修正内容をマージする</p><pre>$ git branch -D styles</pre><p><code>style</code>ブランチが不要になったので、以下を実行して削除します。</p>"
    - '2019-03-04 07:11:43.78395'
    - '2019-03-04 07:20:12.561296'
  - - 112
    - デバイスごとのレスポンシブWebデザインの作成
    - "<h1>Railsにてスマホ、パソコン用でスタイルを使い分ける方法!!</h1><p><br></p><p>479px以下 =&gt; スマホのみ</p><p>480~767px
      =&gt; スマホもタブレットもある</p><p>768~979px =&gt; タブレットのみ</p><p>980px以上 =&gt; PCのみ</p><p><br></p><p>よって...</p><pre>@media
      screen and (min-width: 980px) {\r\n<span style=\"color: rgb(235, 107, 86);\">/*
      980px以上用（PC用）の記述 */</span>\r\n@media screen and (min-width: 768px) and (max-width:
      979px) {\r\n<span style=\"color: rgb(235, 107, 86);\">/* 768px - 979px用（タブレット用）の記述
      */</span>\r\n}\r\n@media screen and (min-width: 480px) and (max-width: 767px)
       {\r\n<span style=\"color: rgb(235, 107, 86);\">/* 480px - 767px用（タブレット／スマートフォン用）の記述
      */</span>\r\n}\r\n@media screen and (max-width: 479px) {\r\n<span style=\"color:
      rgb(235, 107, 86);\">/* 479px以下用（スマートフォン用）の記述 */</span>\r\n}</pre><p><br></p><p><br></p>"
    - '2019-03-04 10:02:01.111313'
    - '2019-03-04 10:21:15.581725'
  - - 113
    - Railsでメール送信
    - "<h1>WEBアプリにメールメール送信機能を実装する時に必要なSMTPの設定</h1><h2><br></h2><h2><span style=\"color:
      rgb(184, 49, 47);\">SMTPを設定(例</span><span style=\"color: rgb(184, 49, 47);\">)</span></h2><pre>config.action_mailer.smtp_settings
      = {\r\n  :enable_starttls_auto =&gt; true,\r\n  :address =&gt; &quot;smtp.gmail.com&quot;,\r\n
      \ :port =&gt; 587,\r\n  :domain =&gt; &#39;smtp.gmail.com&#39;,\r\n  :user_name
      =&gt; &quot;xxxxxxx@gmail.com&quot;, #gmailアドレス 環境変数\r\n  :password =&gt; &quot;xxxxxxxxxxx&quot;,
      #gmailパスワード 環境変数\r\n  :authentication =&gt; &#39;login&#39;,\r\n}</pre><p><br></p><ul><li>こちらの方のやり方で</li><li>https://qiita.com/cigalecigales/items/f4274088f20832252374</li></ul><h4><br></h4><h4>フリーメールアドレスがないとき</h4><h4>下のサービスを利用して動作確認できる</h4><h4><a
      href=\"https://mailtrap.io/\" rel=\"nofollow noopener\" target=\"_blank\">Mailtrap.io
      - Fake smtp testing server.Dummy smtp email testing</a></h4><h4>こちらの方のやり方で</h4><h4><a
      href=\"https://qiita.com/aiyu427/items/241e2feed06c15e1dcec\">https://qiita.com/aiyu427/items/241e2feed06c15e1dcec</a></h4><h4><br></h4><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-03-05 10:49:12.711405'
    - '2019-03-05 11:30:43.564661'
  - - 114
    - SublimeText3 cliを使用
    - <p>CLIインストール&nbsp;</p><pre>$ ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl
      /usr/local/bin/subl</pre><p><br></p><p>使用方法</p><p><a class="fr-strong" href="https://www.sublimetext.com/docs/3/osx_command_line.html">Document</a></p><p><br></p><p>よく使う</p><pre>$
      subl -n Path (パスをサブライムで新規ウィンドウで開く)</pre>
    - '2019-03-06 02:44:31.375515'
    - '2019-03-06 03:03:12.239212'
  - - 115
    - postgreSQL コマンド
    - '<h1 itemprop="headline">PostgreSQLコマンドチートシート</h1><p><br></p><section itemprop="articleBody"><p>よく使うPostgreSQLで利用可能なコマンドのチートシートです。<br>環境：psql
      (PostgreSQL) 9.5.0</p><h2>端末上で使うコマンド</h2><h4>サーバの起動</h4><p><code>$ pg_ctl start
      -D /usr/local/var/postgres</code></p><h4>サーバの終了</h4><p><code>$ pg_ctl stop -D
      /usr/local/var/postgres</code></p><h4>サーバが起動しているかの確認</h4><p><code>$ ps aux |
      grep postgres</code></p><h4>データベース接続</h4><p><code>$ psql -d database -U user
      -h host</code></p><ul><li>-d: データベース名(未指定だと、ログインユーザー名のデータベースに接続する)</li><li>-U:
      ユーザ名(未指定だと、ログインユーザー名になる)</li><li>-h: ホスト名(未指定だと、localhostになる)</li></ul><h4>データベース一覧表示</h4><p><code>$
      psql -l</code></p><h4>PostgreSqlバージョン表示</h4><p><code>$ psql -V</code></p><h4>PostgreSqlに関するヘルプ</h4><p><code>$
      psql -help</code></p><h2>psql上で使うコマンド</h2><p>postgresの部分には接続中のDB名が入る。</p><h4>psqlの終了</h4><p><code>postgres=#
      &yen;q</code></p><h4>ユーザ一覧を表示</h4><p><code>postgres=# \du</code></p><h4>データベース一覧を表示</h4><p><code>postgres=#
      \l</code></p><h4>他のデータベースに接続</h4><p><code>postgres=# \c dbname</code></p><h4>データベース作成</h4><p><code>postgres=#
      create database dbname;</code></p><h4>接続中のデータベースの情報を表示</h4><p><code>postgres=#
      \conninfo</code></p><h4>テーブル一覧を表示</h4><p><code>postgres=# \z</code></p><h4>テーブル定義を確認</h4><p><code>postgres=#
      \d tablename</code><br><em>tablename</em>には任意のテーブル名を入れる。</p><h4>カレントディレクトリ変更</h4><p><code>postgres=#
      \cd directory</code><br>カレントディレクトリをdirectoryに変更する。</p><h4>CSV形式のファイルをテーブルに挿入</h4><p><code>postgres=#
      \copy tablename from filename DELIMITER AS &#39;,&#39;</code></p><h4>ファイルからコマンドを実行</h4><p><code>postgres=#
      \i filename.sql</code><br>ファイルから入力を読み取り、実行する。</p><h4>コマンドラインの履歴の表示</h4><p><code>postgres=#
      \s</code><br>\sの後にファイル名を入力すると、そのファイル名に結果を出力する。</p><h4>&#39;\&#39;に関するヘルプの表示</h4><p><code>postgres=#
      \?</code></p><h4>シェル上のコマンドを使いたい場合</h4><p><code>postgres=# \! command</code><br><em>command</em>の部分にlsやpwdを入れるとpsql上でもシェル上のコマンドが実行できる。</p></section>'
    - '2019-03-07 05:06:44.065442'
    - '2019-03-08 04:15:11.415337'
  - - 116
    - Heroku PostgresのDBをローカルにコピーする方法
    - "<h1>Heroku PostgresのDBをローカルにコピーする方法</h1><p><br></p><p><br></p><p><code>heroku
      pg:backups</code>コマンドでバックアップを取ってダウンロードし、<code>pg_restore</code>コマンドでローカルにレストアすればよいです。</p><h3>1.
      バックアップ取得</h3><p><br></p><pre>$ heroku pg:backups capture --app sushi(アプリ名)</pre><p>ログが出る</p><pre>Use
      Ctrl-C at any time to stop monitoring progress; the backup\r\nwill continue
      running. Use heroku pg:backups info to check progress.\r\nStop a running backup
      with heroku pg:backups cancel.\r\n\r\nDATABASE ---backup---&gt; <span style=\"color:
      rgb(184, 49, 47);\">b001</span>\r\n\r\nRunning... 7.30MB</pre><ul><li><code>DATABASE
      ---backup---&gt; b001</code> この場合バックアップのIDは b001</li><li>Hobby Dev(無料プラン)は2個しか取れない(古い方から消える)ので、チームメイトに一言断ってからにしましょう</li><li>Hobby
      Devの場合,バックアップのIDは b001かb002</li><li>Standard 0以上のプランならスケジュールバックアップがあるのでそれを使ってもいいです。チームメイトがキャプチャしたバックアップがあるならそれを使ってもいいです<ul><li>その場合、<code>heroku
      pg:backups</code>でバックアップの一覧を出せるので、最新のバックアップのIDを覚えておきます</li></ul></li></ul><h3>2.
      バックアップのダウンロード</h3><p>アプリ名がsushiでバックアップIDがb001の場合</p><pre>curl -o latest.dump
      $(heroku pg:backups public-url b001 --app sushi)</pre><p>ダンプファイル名は任意のファイル名(production.dumpとかlatest.dumpとかmydb.dumpとかなんでも良い)</p><ul><li><code>heroku
      pg:backups public-url b001 --app sushi</code>でURLを表示できます。10分間有効です</li><li>上のコマンドはcurlに渡してすぐにダウンロードするようにしています。production.dumpというファイル名で保存されます</li></ul><h3>3-A.
      ローカルのDBにレストア(全てのテーブルをコピーするパターン)</h3><p>データベース名が<code>hoge_development</code>で、認証なしの場合(Railsならそうなってるはず)</p><pre>$
      pg_restore --verbose --clean --no-acl --no-owner -h localhost -d hoge_development
      latest.dump</pre><p>option内容詳細　<a href=\"https://www.postgresql.org/docs/9.4/app-pgrestore.html\">pg_restoreドキュメント</a></p><ul><li>DBのスキーマとレコードがまるごとレストアされます。<code>rake
      db:migrate</code>などは必要ないです</li><li><code>--verbose</code>オプションでログ表示</li><li><code>--clean</code>オプションで、元々あったデータを全部消してからレストアする</li><li><code>--no-acl</code>と<code>--no-owner</code>は権限設定をスキップする。ローカルなのでこれでいいと思う</li><li><code>-h
      localhost</code>はレストア先のホストの指定</li><li><code>-d hoge_development</code>はレストア先のデータベース名の指定</li></ul><h4>注意点</h4><p>Heroku
      Connectを使っている場合、Heroku Connectが使うトリガーや管理テーブル(<code>_trigger_log</code>など)、管理カラム(<code>_hc_lastop</code>など)も全部レストアされます。Heroku
      Connectのテーブルを<code>ridgepole</code>でローカルに再現している場合、管理テーブル、管理カラムも再現するようにしないと、次に<code>ridgepole
      --apply</code>した時にその辺が消えてトリガーが落ちるようになります。</p><p>よーするに<code>ridgepole --export</code>する時に<code>--ignore-tables
      &#39;\\\\A_&#39;</code>を付けたり、エクスポートされたSchemafileをいじったりするなということです。</p><p><br></p><h3>3-B.
      ローカルのDBにレストア(特定のテーブルをコピーするパターン)</h3><p><br></p><h4>リストアされる内容の一覧を出力 content_listは単なるファイル名なので任意</h4><pre>$
      pg_restore -l dump_file_name &gt; content_list</pre><p><br></p><h4>リストアされる内容の一覧の確認と修正</h4><pre>$
      vim content_list</pre><p><br></p><h4>リストアされる予定のテーブル定義やレコードが確認できるので、除外したい部分をコメントアウトする</h4><pre>;いらんテーブル\r\n;208;
      1259 15400752 TABLE public users ...\r\n...\r\n;いらんデータ\r\n;207; 1259 15400750
      SEQUENCE public users_id_seq ...</pre><p><span style=\"color: rgb(124, 112,
      107);\">僕の場合はusersテーブル以外をダンプしたかったのでusersが含まれる全ての行をコメントにしました</span></p><p><br></p><h4>いざリストアする</h4><pre>$
      pg_restore -L content_list dump_file_name</pre><pre>$ pg_restore --verbose --clean
      --no-acl --no-owner -h localhost -d hoge_development dump_file_name</pre><p><br></p><h1>完璧！！<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span></h1><p><br></p><p><br></p><h1>こちらも参照！！</h1><h1><a
      href=\"https://dragonarrow.herokuapp.com/articles/124\">ローカルDBをHerokuに移行</a></h1><h1><br></h1>"
    - '2019-03-08 03:33:36.69422'
    - '2019-05-13 10:13:40.905442'
  - - 117
    - Rails5.2 PosrgreSQL テーブルのダブり
    - "<h1><span style=\"color: rgb(184, 49, 47);\">エラー内容: テーブルダブり</span></h1><p><br></p><pre>PG::DuplicateTable:
      ERROR:  relation &quot;users&quot; already exists\r\nActiveRecord::StatementInvalid:
      PG::DuplicateTable: ERROR:  relation &quot;users&quot; already exists</pre><p><br></p><h2><span
      style=\"color: rgb(209, 72, 65);\">解決策</span></h2><p>DB接続</p><pre>$ psql -d
      mymemo_development</pre><p>ダブりテーブルを削除する</p><pre>mymemo_development=&gt; drop
      table users;\r\n\\q</pre><p>マイグレート</p><pre>$ rake db:migrate</pre><p><br></p><p><br></p><h1>完!<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f624.svg);\">&nbsp;</span>
      <span class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background:
      url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f624.svg);\">&nbsp;</span>&nbsp;</h1><p><br></p>"
    - '2019-03-08 05:46:16.643583'
    - '2019-03-08 05:53:18.016236'
  - - 118
    - github 間違って大事なファイルを削除した時
    - "<h1>リセットコマンド</h1><p><br></p><p>ステージングと作業ディレクトリをリセットして直前のコミット状態と一致させる。ローカルの作業も破棄されるので注意して使用する。</p><pre><code>$
      git reset --hard</code></pre><p><br></p><p>ステージング(のみ)をリセットして直前のコミット状態と一致させる</p><pre><code>$
      git reset</code></pre><p><br></p><p>特定ファイルをステージングから削除する</p><pre><code>$ git
      reset &lt;file&gt;</code></pre><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-03-08 07:56:22.616074'
    - '2019-03-08 07:59:51.992411'
  - - 119
    - SMTP
    - <p itemprop="headline">Rails5でdeviseをAmazon SES SMTPサーバーを使って動かす</p><p><a href="http://blog.naoshihoshi.com/entry/2018/07/17/113000">http://blog.naoshihoshi.com/entry/2018/07/17/113000</a></p><p><br></p><p>aws_sesから配信</p><p><a
      href="http://blog.naoshihoshi.com/entry/2018/07/17/113000">http://blog.naoshihoshi.com/entry/2018/07/17/113000</a></p>
    - '2019-03-08 08:01:52.645631'
    - '2019-03-08 08:01:52.645631'
  - - 121
    - "【パズル２】ほとんどのエンジニアには解けるが、下位20％のダメなエンジニアにだけ解けないパズル？"
    - "<p>こちらの問題 <a href=\"https://www.jabba.cloud/20151228212010/\">https://www.jabba.cloud/20151228212010/</a></p><p><br></p><pre>$
      curl <a href=\"http://challenge-your-limits2.herokuapp.com/call/my/APIs\">http://challenge-your-limits2.herokuapp.com/call/my/APIs</a>\r\n{&quot;error&quot;:&quot;Ok.
      Let&#39;s get started! End Point is correct. But HTTP Method should be...&quot;}</pre><p>エンドポイントはOK
      httpメソッドが違う(GETじゃない)</p><p><br></p><pre>$ curl -x POST <a href=\"https://challenge-your-limits2.herokuapp.com/call/my/APIs\">https://challenge-your-limits2.herokuapp.com/call/my/APIs</a>\r\n0curl:
      (5) Could not resolve proxy: POST</pre><p>POSTでは解決できないと。</p><p><br></p><pre
      data-lang=\"\" data-unlink=\"\">$ curl -X DELETE <a href=\"http://challenge-your-limits2.herokuapp.com/call/my/APIs\">http://challenge-your-limits2.herokuapp.com/call/my/APIs</a>\r\n{&quot;message&quot;:&quot;Well
      done! haha! Surprised? Yeah, the answer was DELETE. Ok. Next === /c2_users/:id/hacker_apply&quot;}</pre><p>DELETEでした。次は&quot;/c2_users/:id/hacker_apply&quot;とさ</p><p><br></p><pre>$
      curl <a href=\"http://challenge-your-limits2.herokuapp.com/c2_users/:id/hacker_apply\">http://challenge-your-limits2.herokuapp.com/c2_users/:id/hacker_apply</a>\r\n{&quot;error&quot;:&quot;Please
      authenticate using Basic Auth with your username and password. You want a clue?
      Shout out &#39;help/me/out&#39;&quot;}</pre><p><br></p><p>ユーザ名とパスワードを認証してきて。ヒントが欲しいなら<code>help/me/out</code>
      を呼べとさ</p><p><br></p><pre data-lang=\"\" data-unlink=\"\">$ curl <a href=\"http://challenge-your-limits2.herokuapp.com/help/me/out\">http://challenge-your-limits2.herokuapp.com/help/me/out</a>\r\n{&quot;message&quot;:&quot;By
      the way, Have you already registered? This is the clue only for REGISTERED user.
      You should have your id before you check the clue. If you don&#39;t, go to /c2_users/
      and register. Hey, Registered users! Here you go. === bit.ly/1T8gVdG === You
      don&#39;t know about &#39;bit.ly&#39;? Google it!&quot;}</pre><p>ところで登録済みのユーザーなの？違うなら
      &quot;/c2_users/&quot; にいけ。登録済みのユーザーよ、bit.ly/1T8gVdG に行け、&#39;bit.ly&#39;を知らない？
      バァたれ!</p><p><br></p><pre data-lang=\"\" data-unlink=\"\">$ curl <a href=\"http://challenge-your-limits2.herokuapp.com/c2_users\">http://challenge-your-limits2.herokuapp.com/c2_users</a>\r\n{&quot;error&quot;:&quot;GET?
      No. No.&quot;}</pre><p>GET？違う違う。</p><p><br></p><pre data-lang=\"\" data-unlink=\"\">$
      curl -X POST <a href=\"http://challenge-your-limits2.herokuapp.com/c2_users\">http://challenge-your-limits2.herokuapp.com/c2_users</a>\r\n{&quot;error&quot;:&quot;Validation
      Error - [:username, \\&quot;can&#39;t be blank\\&quot;]&quot;}</pre><p>ユーザーネームが空だぞ</p><p><br></p><pre
      data-lang=\"\" data-unlink=\"\">$ curl -X POST -d &quot;username=twinko&quot;
      <a href=\"http://challenge-your-limits2.herokuapp.com/c2_users\">http://challenge-your-limits2.herokuapp.com/c2_users</a>\r\n{&quot;error&quot;:&quot;Validation
      Error - [:email, \\&quot;can&#39;t be blank\\&quot;]&quot;}</pre><p>emailが空だぞ</p><p><br></p><pre>$
      curl -X POST -d &quot;username=twinko&amp;email=twinko@bn.com&amp;password=twinko&quot;
      <a href=\"http://challenge-your-limits2.herokuapp.com/c2_users\">http://challenge-your-limits2.herokuapp.com/c2_users</a>\r\n{&quot;id&quot;:3370,&quot;username&quot;:&quot;twinko&quot;,&quot;email&quot;:&quot;twinko@bn.com&quot;,&quot;password&quot;:&quot;RN2y6JQikEhEheEA&quot;,&quot;comment&quot;:null,&quot;created_at&quot;:&quot;2019-03-15T07:39:26.861Z&quot;,&quot;updated_at&quot;:&quot;2019-03-15T07:39:26.861Z&quot;}</pre><p>アカウントできた</p><p><br></p><pre>$
      curl --user twinko:RN2y6JQikEhEheEA <a href=\"http://challenge-your-limits2.herokuapp.com/c2_users/:id/hacker_apply\">http://challenge-your-limits2.herokuapp.com/c2_users/:id/hacker_apply</a>\r\n{&quot;error&quot;:&quot;Your
      id is a bit weird. Can you check it?&quot;}</pre><p>奇妙な IDだな、確認したか？</p><p><br></p><pre>$
      curl --user twinko:RN2y6JQikEhEheEA http://challenge-your-limits2.herokuapp.com/c2_users/3370/hacker_apply\r\n{&quot;message&quot;:&quot;Awesome!
      Can you come over here? === R29vZCBqb2IhISBQbGVhc2UgYWNjZXNzIHRvIHRoZSB1cmwgZnJvbSB5b3VyIHdlYiBicm93c2VyLiA9PT0gXApodHRwOi8vY2hhbGxlbmdlLXlvdXItbGltaXRzMi5oZXJva3VhcHAuY29tL3dpbm5lcl9jb21tZW50cy9xUWVwYWQtZDBXMHp0cVpY
           You want a clue? Shout out &#39;give me a clue&#39;&quot;}</pre><p>素晴らしい
      &quot;base64<strong>変換</strong>後の文字列&quot; まで来てくれるかい？</p><p><br></p><pre>$ echo
      -n &quot;R29vZCBqb2IhISBQbGVhc2UgYWNjZXNzIHRvIHRoZSB1cmwgZnJvbSB5b3VyIHdlYiBicm93c2VyLiA9PT0gXApodHRwOi8vY2hhbGxlbmdlLXlvdXItbGltaXRzMi5oZXJva3VhcHAuY29tL3dpbm5lcl9jb21tZW50cy9xUWVwYWQtZDBXMHp0cVpY&quot;
      | base64 -D(--decodeでも可)\r\nGood job!! Please access to the url from your web
      browser. === \\<a href=\"http://challenge-your-limits2.herokuapp.com/winner_comments/qQepad-d0W0ztqZX\"></a>\r\n<a
      href=\"http://challenge-your-limits2.herokuapp.com/winner_comments/qQepad-d0W0ztqZX\">http://challenge-your-limits2.herokuapp.com/winner_comments/qQepad-d0W0ztqZX</a></pre><p>Basic認証では、ユーザ名とパスワードの組みをコロン
      &quot;:&quot; でつなぎ、<span style=\"color: rgb(184, 49, 47);\">Base64でエンコードして送信する</span>。<a
      href=\"http://d.hatena.ne.jp/keyword/Basic%C7%A7%BE%DA\">Basic認証</a>と<a href=\"http://d.hatena.ne.jp/keyword/base64\">base64</a>変換はもうセット</p><h1>完！！！</h1><p><br></p><p>＊＊＊豆知識<br>エンコード</p><pre>$
      echo -n &quot;デコード後&quot; | base64\r\nエンコード</pre><p>デコード</p><pre>$ echo -n &quot;エンコード後&quot;
      | base64 -D\r\nデコード後</pre><p><br></p><p><br></p>"
    - '2019-03-15 08:11:13.867158'
    - '2019-03-15 09:16:20.419319'
  - - 122
    - "【下位10％のダメなエンジニアにだけ解けないパズル】"
    - "<h1>【下位10％のダメなエンジニアにだけ解けないパズル】</h1><p><br></p><p><br></p><pre>$ curl <a href=\"http://challenge-your-limits.herokuapp.com/call/me\">http://challenge-your-limits.herokuapp.com/call/me</a>\r\n{&quot;message&quot;:&quot;Almost!
      It&#39;s not GET. Keep trying.&quot;}</pre><p>近い！GETじゃないよ、続けて！</p><p><br></p><pre>$
      curl -X PUT <a href=\"http://challenge-your-limits.herokuapp.com/call/me\">http://challenge-your-limits.herokuapp.com/call/me</a>\r\n{&quot;message&quot;:&quot;No
      No. Not this way&quot;}</pre><p>違う違う、その方法じゃないよ。</p><p><br></p><pre>$ curl -X
      DELETE <a href=\"http://challenge-your-limits.herokuapp.com\">http://challenge-your-limits.herokuapp.com</a>\r\n{&quot;message&quot;:&quot;No
      No. Not this way&quot;}</pre><p>違う違う、その方法じゃないよ。</p><p><br></p><pre>$ curl -X
      POST <a href=\"http://challenge-your-limits.herokuapp.com/call/me\"></a><a href=\"http://challenge-your-limits.herokuapp.com/call/me\">http://challenge-your-limits.herokuapp.com/call/me</a>\r\n{&quot;message&quot;:&quot;Great!
      Please register as /challenge_users&quot;}</pre><p>素晴らしい、&rdquo;/challenge_users&rdquo;として登録してね。</p><p><br></p><pre>$
      curl <a href=\"http://challenge-your-limits.herokuapp.com/challenge_users\">http://challenge-your-limits.herokuapp.com/challenge_users</a>\r\n{&quot;message&quot;:&quot;GET?
      No. No.&quot;}</pre><p>GET?違う違う。</p><p><br></p><pre>$ curl -X POST <a href=\"http://challenge-your-limits.herokuapp.com/challenge_users\">http://challenge-your-limits.herokuapp.com/challenge_users</a>\r\n{&quot;message&quot;:&quot;Validation
      Error, [:name, \\&quot;can&#39;t be blank\\&quot;]&quot;}</pre><p>バリデーションエラー。nameパラメータは空にはできません</p><p><br></p><pre>$
      curl -X PUT -d &quot;name=twinko&quot; <a href=\"http://challenge-your-limits.herokuapp.com/challenge_users\">http://challenge-your-limits.herokuapp.com/challenge_users</a>\r\n{&quot;message&quot;:&quot;No
      No. Not this way&quot;</pre><p>違う違う、その方法じゃないよ。</p><p><br></p><pre>$ curl -X
      POST -d &quot;name=twinko&amp;email=twinko@email.com&quot; <a href=\"http://challenge-your-limits.herokuapp.com/challenge_users\">http://challenge-your-limits.herokuapp.com/challenge_users</a>\r\n{&quot;message&quot;:&quot;Thanks!
      Please access to http://challenge-your-limits.herokuapp.com/challenge_users/token/hBu3uvLtGio</pre><p>ありがとう、http://challenge-your-limits.herokuapp.com/challenge_users/token/hBu3uvLtGioにブラウザでアクセスしてください。</p><p><br></p><p>あれ、もうできた...<span
      style=\"font-size: 48px;\">完<span class=\"fr-emoticon fr-deletable fr-emoticon-img\"
      style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f604.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-03-18 03:43:29.890167'
    - '2019-03-18 03:57:19.888'
  - - 123
    - 初めてのPWA実装
    - "<h1 style=\"text-align: center;\">PWA実装のメモ</h1><p><span style=\"font-size:
      24px;\">環境 Ruby On Rails(5.2)</span></p><p><br></p><h3>PWAに必要なもの</h3><p>PWAを導入するには以下が必要になります。</p><ul><li>レスポンシブ対応</li><li>HTTPS対応していること</li><li>Serviceworkerの導入</li><li>Manifestの設定</li></ul><h3>レスポンシブ対応</h3><p>色々な方法がありますが、CSSで</p><p>hogehoge.scss</p><pre>@media
      all and (min-width: 769px){\r\n  // 769px 以上の画面用の CSS\r\n}\r\n@media all and
      (max-width: 768px){\r\n  // 768px 以下の画面用の CSS\r\n}\r\n@media all and (max-width:
      640px){\r\n  // 640px 以下の画面用の CSS\r\n}</pre><p>のようにしてサイズを指定して切り分けることができます。</p><h3>HTTPS対応</h3><p><br></p><p>config/environments/production.rb</p><pre>Rails.application.configure
      do\r\n  # ...\r\n\r\n  # Force all access to the app over SSL, use Strict-Transport-Security,
      and use secure cookies.\r\n  <span style=\"color: rgb(235, 107, 86);\">config.force_ssl
      = true</span>\r\n\r\n  # ...\r\nend</pre><p><br></p><h3>Serviceworkerの導入</h3><p>そもそもServiceworkerってなんぞやというと「クライアント側でユーザーが見ている画面とは別にバックグラウンドで動かせるスクリプト」です。<br>ややこしい説明はここではしませんが、こいつのおかげでPWAの機能である、PUSH通知やオフラインでも画面を見せたりすることができます。</p><p>今回は
      <a href=\"https://github.com/rossta/serviceworker-rails\"><span style=\"font-size:
      24px;\">gem serviceworker-rails</span></a> という gem を使って実装しました。</p><p>まずはgemをインストールします。</p><pre>gem
      &#39;serviceworker-rails&#39;</pre><pre>$ bundle install</pre><p>そして初期ファイルを作成します。<br>手で作ることもできますが、面倒くさいので今回はコマンドを叩いて作成します。</p><pre>$
      rails g serviceworker:install\r\n      create  app/assets/javascripts/manifest.json.erb\r\n
      \     create  app/assets/javascripts/serviceworker.js.erb\r\n      create  app/assets/javascripts/serviceworker-companion.js\r\n
      \     create  config/initializers/serviceworker.rb\r\n      append  app/assets/javascripts/application.js\r\n
      \     append  config/initializers/assets.rb\r\n      insert  app/views/layouts/application.html.haml\r\n
      \     create  public/offline.html</pre><p>上記が初期ファイルになります。この初期ファイルの中でさまざまな設定が書かれています。</p><h4>設定</h4><p>config/initializers/assets.rb</p><pre>Rails.configuration.assets.precompile
      += %w[serviceworker.js manifest.json]</pre><p>config/initializers/serviceworker.rb</p><pre>Rails.application.configure
      do\r\n  config.serviceworker.routes.draw do\r\n    # map to assets implicitly\r\n
      \   match &quot;/serviceworker.js&quot;\r\n    match &quot;/manifest.json&quot;\r\n\r\n
      \   # Examples\r\n    #\r\n    # map to a named asset explicitly\r\n    # match
      &quot;/proxied-serviceworker.js&quot; =&gt; &quot;nested/asset/serviceworker.js&quot;\r\n
      \   # match &quot;/nested/serviceworker.js&quot; =&gt; &quot;another/serviceworker.js&quot;\r\n
      \   #\r\n    # capture named path segments and interpolate to asset name\r\n
      \   # match &quot;/captures/*segments/serviceworker.js&quot; =&gt; &quot;%{segments}/serviceworker.js&quot;\r\n
      \   #\r\n    # capture named parameter and interpolate to asset name\r\n    #
      match &quot;/parameter/:id/serviceworker.js&quot; =&gt; &quot;project/%{id}/serviceworker.js&quot;\r\n
      \   #\r\n    # insert custom headers\r\n    # match &quot;/header-serviceworker.js&quot;
      =&gt; &quot;another/serviceworker.js&quot;,\r\n    #   headers: { &quot;X-Resource-Header&quot;
      =&gt; &quot;A resource&quot; }\r\n    #\r\n    # anonymous glob exposes `paths`
      variable for interpolation\r\n    # match &quot;/*/serviceworker.js&quot; =&gt;
      &quot;%{paths}/serviceworker.js&quot;\r\n  end\r\nend</pre><p>ここで serviceworker.js
      と manifest.json の2ファイルを読み込み、パスを指定しています。<br><br></p><p>app/assets/javascripts/serviceworker-companion.js</p><pre>if
      (navigator.serviceWorker) {\r\n  navigator.serviceWorker.register(&#39;/serviceworker.js&#39;,
      { scope: &#39;./&#39; })\r\n    .then(function(reg) {\r\n      console.log(&#39;[Companion]&#39;,
      &#39;Service worker registered!&#39;);\r\n    });\r\n}</pre><p>app/assets/javascripts/serviceworker.js.erb</p><pre>var
      CACHE_VERSION = &#39;v1&#39;;\r\nvar CACHE_NAME = CACHE_VERSION + &#39;:sw-cache-&#39;;\r\n\r\nfunction
      onInstall(event) {\r\n  console.log(&#39;[Serviceworker]&#39;, &quot;Installing!&quot;,
      event);\r\n  event.waitUntil(\r\n    caches.open(CACHE_NAME).then(function prefill(cache)
      {\r\n      return cache.addAll([\r\n\r\n        // make sure serviceworker.js
      is not required by application.js\r\n        // if you want to reference application.js
      from here\r\n        &#39;&lt;%#= asset_path &quot;www_domain/application.js&quot;
      %&gt;&#39;,\r\n\r\n        &#39;&lt;%= asset_path &quot;www_domain/application.css&quot;
      %&gt;&#39;,\r\n\r\n        &#39;/offline.html&#39;,\r\n\r\n      ]);\r\n    })\r\n
      \ );\r\n}\r\n\r\nfunction onActivate(event) {\r\n  console.log(&#39;[Serviceworker]&#39;,
      &quot;Activating!&quot;, event);\r\n  event.waitUntil(\r\n    caches.keys().then(function(cacheNames)
      {\r\n      return Promise.all(\r\n        cacheNames.filter(function(cacheName)
      {\r\n          // Return true if you want to remove this cache,\r\n          //
      but remember that caches are shared across\r\n          // the whole origin\r\n
      \         return cacheName.indexOf(CACHE_VERSION) !== 0;\r\n        }).map(function(cacheName)
      {\r\n          return caches.delete(cacheName);\r\n        })\r\n      );\r\n
      \   })\r\n  );\r\n}\r\n\r\n// Borrowed from <a href=\"https://github.com/TalAter/UpUp\">https://github.com/TalAter/UpUp</a>\r\nfunction
      onFetch(event) {\r\n  event.respondWith(\r\n    // try to return untouched request
      from network first\r\n    fetch(event.request).catch(function() {\r\n      //
      if it fails, try to return request from the cache\r\n      return caches.match(event.request).then(function(response)
      {\r\n        if (response) {\r\n          return response;\r\n        }\r\n
      \       // if not found in cache, return default offline content for navigate
      requests\r\n        if (event.request.mode === &#39;navigate&#39; ||\r\n          (event.request.method
      === &#39;GET&#39; &amp;&amp; event.request.headers.get(&#39;accept&#39;).includes(&#39;text/html&#39;)))
      {\r\n          console.log(&#39;[Serviceworker]&#39;, &quot;Fetching offline
      content&quot;, event);\r\n          return caches.match(&#39;/offline.html&#39;);\r\n
      \       }\r\n      })\r\n    })\r\n  );\r\n}\r\n\r\nself.addEventListener(&#39;install&#39;,
      onInstall);\r\nself.addEventListener(&#39;activate&#39;, onActivate);\r\nself.addEventListener(&#39;fetch&#39;,
      onFetch);</pre><p><code>app/assets/javascripts/serviceworker-companion.js</code>
      と <code>app/assets/javascripts/serviceworker.js.erb</code> では</p><ul><li>register</li><li>install</li><li>activate</li><li>fetch</li></ul><p>のそれぞれの
      Serviceworker のイベントごとの挙動を設定しています。<br><br><br>続いて application.js に serviceworker-companion.js
      を読み込ませます。</p><p>app/assets/javascripts/application.js</p><pre>//= require serviceworker-companion</pre><p>最後に
      Serviceworker の目玉機能の1つでもある、オフラインページです。<br>ユーザーがオフライン時に表示される画面の設定です。Rails のデフォルトの
      404ページや 500ページと同様、public 配下にデフォルトのファイルができているので、文言やデザインを変えたい方はこちらをいじると変えることができます。<br>また、404等と同様、public
      配下ではなく、<a href=\"https://mattbrictson.com/dynamic-rails-error-pages\" rel=\"nofollow
      noopener\" target=\"_blank\">動的に作り直すこともできるようです</a>。<br>ちなみにオフライン用のファイルとして <code>public/offline.html</code>
      が使われるのは、<code>app/assets/javascripts/serviceworker.js.erb</code> 内の <code>onInstall</code>
      関数で設定されているからなので、設定すれば、offline.html 以外のファイルもオフラインファイルとして設定できると思います。<br>デフォルトの
      offline.html は以下。</p><p>public/offline.html</p><pre>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n
      \ &lt;title&gt;You are not connected to the Internet&lt;/title&gt;\r\n  &lt;meta
      name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;\r\n
      \ &lt;style&gt;\r\n  body {\r\n    background-color: #EFEFEF;\r\n    color:
      #2E2F30;\r\n    text-align: center;\r\n    font-family: arial, sans-serif;\r\n
      \   margin: 0;\r\n  }\r\n\r\n  div.dialog {\r\n    width: 95%;\r\n    max-width:
      33em;\r\n    margin: 4em auto 0;\r\n  }\r\n\r\n  div.dialog &gt; div {\r\n    border:
      1px solid #CCC;\r\n    border-right-color: #999;\r\n    border-left-color: #999;\r\n
      \   border-bottom-color: #BBB;\r\n    border-top: #B00100 solid 4px;\r\n    border-top-left-radius:
      9px;\r\n    border-top-right-radius: 9px;\r\n    background-color: white;\r\n
      \   padding: 7px 12% 0;\r\n    box-shadow: 0 3px 8px rgba(50, 50, 50, 0.17);\r\n
      \ }\r\n\r\n  h1 {\r\n    font-size: 100%;\r\n    color: #730E15;\r\n    line-height:
      1.5em;\r\n  }\r\n\r\n  div.dialog &gt; p {\r\n    margin: 0 0 1em;\r\n    padding:
      1em;\r\n    background-color: #F7F7F7;\r\n    border: 1px solid #CCC;\r\n    border-right-color:
      #999;\r\n    border-left-color: #999;\r\n    border-bottom-color: #999;\r\n
      \   border-bottom-left-radius: 4px;\r\n    border-bottom-right-radius: 4px;\r\n
      \   border-top-color: #DADADA;\r\n    color: #666;\r\n    box-shadow: 0 3px
      8px rgba(50, 50, 50, 0.17);\r\n  }\r\n  &lt;/style&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n
      \ &lt;!-- This file lives in public/offline.html --&gt;\r\n  &lt;div class=&quot;dialog&quot;&gt;\r\n
      \   &lt;div&gt;\r\n      &lt;h1&gt;It looks like you&#39;ve lost your Internet
      connection&lt;/h1&gt;\r\n      &lt;p&gt;You may need to reconnect to Wi-Fi.&lt;/p&gt;\r\n
      \   &lt;/div&gt;\r\n  &lt;/div&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</pre><p>Serviceworker
      の導入は以上です。</p><p><br></p><p><code>rails s</code> で確認</p><p><br></p><h3>Manifest
      の導入</h3><p>最後に Manifest の導入をします。<br>Manifest は簡単にいうとホーム画面に追加したときの設定です。</p><h4>設定</h4><p>設定は上で作られた
      <code>app/assets/javascripts/manifest.json.erb</code> 内で行います。</p><p>以下がデフォルトでできたファイルです。</p><p>app/assets/javascripts/manifest.json.erb</p><pre>&lt;%
      icon_sizes = Rails.configuration.serviceworker.icon_sizes %&gt;\r\n{\r\n  &quot;name&quot;:
      &quot;app name&quot;,\r\n  &quot;short_name&quot;: &quot;app short name&quot;,\r\n
      \ &quot;start_url&quot;: &quot;/&quot;,\r\n  &quot;icons&quot;: [\r\n  &lt;%
      icon_sizes.map { |s| &quot;#{s}x#{s}&quot; }.each.with_index do |dim, i| %&gt;\r\n
      \   {\r\n      &quot;src&quot;: &quot;&lt;%= image_path &quot;serviceworker-rails/heart-#{dim}.png&quot;
      %&gt;&quot;,\r\n      &quot;sizes&quot;: &quot;&lt;%= dim %&gt;&quot;,\r\n      &quot;type&quot;:
      &quot;image/png&quot;\r\n    }&lt;%= i == (icon_sizes.length - 1) ? &#39;&#39;
      : &#39;,&#39; %&gt;\r\n  &lt;% end %&gt;\r\n  ],\r\n  &quot;theme_color&quot;:
      &quot;#000000&quot;,\r\n  &quot;background_color&quot;: &quot;#FFFFFF&quot;,\r\n
      \ &quot;display&quot;: &quot;fullscreen&quot;,\r\n  &quot;orientation&quot;:
      &quot;portrait&quot;\r\n}</pre><p>JSONでさまざまな設定がされているようですが、それぞれの意味と値はこんな感じです。</p><table><thead><tr><th>キー<br></th><th>内容<br></th></tr></thead><tbody><tr><td>name<br></td><td>アイコンのラベルとして使われる名前<br></td></tr><tr><td>short_name<br></td><td><code>name</code>
      が入り切らないときなどに表示される名前<br></td></tr><tr><td>start_url<br></td><td>ユーザーがアプリケーションを起動したときに最初にロードされるURL<br></td></tr><tr><td>icons<br></td><td>Serviceworkerでさまざまな場所で使われるアイコン。<br>それぞれの用途の推奨サイズに一番近い画像が使われます。<br>ただし、iOSの場合、<code>app_touch_icon</code>
      がアイコンに使われてしまうのでそちらをちゃんと設定しないといけない模様。<br>・src(画像のパス)<br>・sizes(画像のサイズ。例：&quot;128x128&quot;)<br>・type(例：&quot;image/png&quot;)<br>の3つを指定します。<br>デフォルトでは
      <code>Rails.configuration.serviceworker.icon_sizes</code> のサイズでループ処理で設定していますが、サイズの中身は
      <code>36 48 60 72 76 96 120 152 180 192 512</code> です。<br></td></tr><tr><td>theme_color<br></td><td>テーマカラー。アンドロイドのタスクスイッチャーではこの色で囲まれるらしい。<br></td></tr><tr><td>background_color<br></td><td>アプリの背景色。そもそもCSSで各々のサイトは背景色をつけていることも多いと思いますが、アプリの起動からコンテンツをロードするまでの間などにこの色が使われます。<br></td></tr><tr><td>display<br></td><td>アプリの表示の仕方を設定。<br>・fullscreen(デバイスのメニューバー含めて非表示)<br>・standalone(ブラウザのUIを非表示。ネイティブアプリと同じ感じ。)<br>・browser(通常のブラウザ表示)<br></td></tr><tr><td>orientation<br></td><td>ページの最初の向きを設定。<br>・landscape
      にするとデフォルトで横向きになるので、横表示のみで表示するゲームなどには便利。他にも以下の値を指定できます。<br>any・natural・landscape-primary・landscape-secondary・portrait・portrait-primary・portrait-secondary<br></td></tr></tbody></table><h4>確認</h4><p>先程と同様、検証ツール内の
      Application の中の <code>Manifest</code> というところを開くと、<br>Manifest の設定が反映されているか確認することができます。</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1552968456488-demo.png\"
      style=\"width: 900px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>rails sをしたまま Xcode
      の Simulator を使ってすることもできます。</p><p><br></p><h1>アイコン設定</h1><p><br>さて、アイコンはデフォルトだとハートアイコンになってると思います。後、IOSアイコンは個別に作成しなければならないので、手順メモを載せます</p><p><br></p><h2>iconフォルダ作成</h2><p>favicon.icoはブラウザで開くと上部でページタイトルの左に小さく表示されているアイコンのことです。</p><p>はじめに以下のiconフォルダ作成</p><pre
      data-lang=\"\" data-unlink=\"\">/app/assets/images/favicons(このフォルダの中にiosアイコンを入れる)</pre><p>＊faviconsでなくても好きな名前でいい</p><p><br></p><pre>/app/assets/images/serviceworker-rails(このフォルダの中にアンドロイドアイコンを入れる)</pre><p>＊serviceworker-railsでなくても好きな名前でいい</p><p><br></p><h2>iconリサイズ<br><iframe
      src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Frealfavicongenerator.net%2F\"
      title=\"Favicon Generator for all platforms: iOS, Android, PC/Mac...\" class=\"embed-card
      embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"max-width: 500px;
      color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, Arial, Helvetica,
      &quot;ヒラギノ角ゴ Pro W3&quot;, &quot;Hiragino Kaku Gothic Pro&quot;, メイリオ, Meiryo,
      &quot;ＭＳ Ｐゴシック&quot;, &quot;MS PGothic&quot;, sans-serif; font-size: 15.04px;
      font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal;
      font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent:
      0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;
      -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style:
      initial; text-decoration-color: initial; display: block; width: 500px; height:
      155px; margin: 10px 0px;\"></iframe></h2><p><span style=\"font-size: 24px;\">&lt;Android用&gt;</span></p><p>/app/assets/images/serviceworker-rails配下に</p><ul><li>icon-36x36.png</li><li>icon-48x48.png</li><li>icon-60x60.png</li><li>icon-72x72.png</li><li>icon-76x76.png</li><li>icon-96x96.png</li><li>icon-120x120.png</li><li>icon-152x152.png</li><li>icon-180x180.png</li><li>icon-192x192.png</li><li>icon-512x512.png
      を作成</li></ul><p><br></p><p><span style=\"font-size: 24px;\">&lt;ios用&gt;</span></p><p>/app/assets/images/favicons配下に</p><ul><li>apple-touch-icon57.png</li><li>apple-touch-icon60.png</li><li>apple-touch-icon72.png</li><li>apple-touch-icon76.png</li><li>apple-touch-icon114.png</li><li>apple-touch-icon144.png</li><li>apple-touch-icon152.png</li><li>apple-touch-icon180.png
      を作成</li></ul><p><span style=\"font-size: 24px;\">&lt;favicon.ico&gt;</span></p><p>/app/assets/images配下に</p><p>favicon.ico
      を作成</p><p><br></p><p><span style=\"font-size: 24px;\">読み込み</span></p><pre>app/views/layouts/application.html.erb
      の&lt;head&gt;タグ内に以下を追記\r\n\r\n&lt;%= favicon_link_tag(&#39;favicon.ico&#39;)
      %&gt;\r\n&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;57x57&quot; href=&quot;/assets/favicons/apple-touch-icon57.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;60x60&quot; href=&quot;/assets/favicons/apple-touch-icon60.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;72x72&quot; href=&quot;/assets/favicons/apple-touch-icon72.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;76x76&quot; href=&quot;/assets/favicons/apple-touch-icon76.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;114x114&quot; href=&quot;/assets/favicons/apple-touch-icon114.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;120x120&quot; href=&quot;/assets/favicons/apple-touch-icon120.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;144x144&quot; href=&quot;/assets/favicons/apple-touch-icon144.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;152x152&quot; href=&quot;/assets/favicons/apple-touch-icon152.png&quot;&gt;\r\n&lt;link
      rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;/assets/favicons/apple-touch-icon180.png&quot;&gt;\r\n\r\nこれでfaviconおよびiosのアイコン設定完了</pre><p><br></p><pre>app/assets/javascripts/manifest.json.erbのパスをデフォルトから変更\r\n&lt;%
      icon_sizes = Rails.configuration.serviceworker.icon_sizes %&gt;\r\n{\r\n&quot;name&quot;:
      &quot;My App Name&quot;,\r\n&quot;short_name&quot;: &quot;Short Name&quot;,\r\n&quot;start_url&quot;:
      &quot;/&quot;,\r\n&quot;icons&quot;: [\r\n&lt;% icon_sizes.map { |s| &quot;#{s}x#{s}&quot;
      }.each.with_index do |dim, i| %&gt;\r\n{\r\n&quot;src&quot;: &quot;&lt;%= <span
      style=\"color: rgb(44, 130, 201);\">asset_path</span> &quot;serviceworker-rails/icon-#{dim}.png&quot;
      %&gt;&quot;, <span style=\"color: rgb(124, 112, 107);\"># image_pathからasset_pathに変更</span>\r\n&quot;sizes&quot;:
      &quot;&lt;%= dim %&gt;&quot;,\r\n&quot;type&quot;: &quot;image/png&quot;\r\n}&lt;%=
      i == (icon_sizes.length - 1) ? &#39;&#39; : &#39;,&#39; %&gt;\r\n&lt;% end %&gt;\r\n],\r\n&quot;theme_color&quot;:
      &quot;#F83E26&quot;,\r\n&quot;background_color&quot;: &quot;#000000&quot;,\r\n&quot;display&quot;:
      &quot;standalone&quot;,\r\n&quot;orientation&quot;: &quot;portrait&quot;\r\n}\r\nこれでAndroidアイコン設定も完了</pre><p><br></p><p>次回起動アイコンやプッシュ通知も書きたい</p><p><br></p><h1>完！<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60d.svg);\">&nbsp;</span></h1><p><br></p><p><a
      href=\"https://qiita.com/shiinoaya/items/e8cf25244419b317beae\">起動アイコン</a></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-03-19 03:38:59.061773'
    - '2019-03-19 05:24:22.156955'
  - - 124
    - PostgreSQL ローカルデータをHerokuに移行
    - '<p>まず、Heroku上のDBを空っぽにしなきゃいけないので、</p><pre>$ heroku pg:reset</pre><p>でDBを消す。<br>次にローカルのDBをpushする。引数を２つ取る。</p><pre>heroku
      pg:push ローカルのDB名 heorokuのDB名</pre><p>パスワードを聞かれるので、ローカルのDBのパスワードを入力する。</p><p><br></p><p><br></p><h1>例</h1><pre>$
      heroku pg:reset</pre><pre>$ heroku pg:push localdb_development postgresql-sbdfb-86542
      --app sushi</pre><h1>migrateと化しなくてOK楽チン<span class="fr-emoticon fr-deletable
      fr-emoticon-img" style="background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f601.svg);">&nbsp;</span></h1><p><br></p><p><br></p><h1>こちらも参照!!!</h1><h1><a
      href="https://www.dragonarrow.work/articles/116">HerokuからLocalに移行</a></h1>'
    - '2019-03-21 13:45:27.246746'
    - '2019-08-02 11:40:06.793873'
  - - 125
    - curl コマンド使い方
    - '<h1 style="text-align: center;">curlコマンドでURLにアクセスするとき</h1><h2>GETにアクセス(ビュー)</h2><pre>$
      curl get_url</pre><p><br></p><h2>POSTにアクセス(投稿)</h2><pre>$ curl -X POST -H &#39;<span
      style="color: rgb(226, 80, 65);">Content-Type:application/json</span>&#39; -d
      &#39;{ &quot;name&quot;: &quot;username&quot;, &quot;pwd&quot;: &quot;password&quot;
      }&#39; post_url</pre><p><br></p><h2>DELETEにアクセス(削除)</h2><pre>$ curl -X DELETE
      delete_url</pre><p><br></p><h2>PUTにアクセス(新規作成or更新)</h2><pre>$ curl -X PUT -H
      &quot;<span style="color: rgb(226, 80, 65);">Content-Type: application/json</span>&quot;
      -d &#39;{&quot;user&quot;: {&quot;name&quot;:&quot;update_name&quot;, &quot;age&quot;:
      &quot;12345&quot;}}&#39; put_url</pre><p><br></p><h2>PATCHにアクセス(部分更新)</h2><pre>$
      curl -X PATCH -H &quot;<span style="color: rgb(226, 80, 65);">Content-Type:
      application/json</span>&quot; -d &#39;{&quot;user&quot;: {&quot;name&quot;:&quot;update_name&quot;,
      &quot;age&quot;: &quot;12345&quot;}}&#39; patch_url</pre><p><br></p><p><br></p><p><br></p><p><br></p>'
    - '2019-03-22 01:42:42.176643'
    - '2019-03-22 02:05:32.335877'
  - - 126
    - Rails5.2でAPIを作る
    - "<h1 itemprop=\"headline\">Rails5.2 APIで認証付きのWebAPIを作ってみる</h1><section itemprop=\"articleBody\"><h1>はじめに</h1><p>Rails5.2</p><h1>使用ソフトウェアのバージョン情報</h1><p>Rails5.2</p><p><br></p><p>こちらの記事がかなり助かりました。</p><p><a
      href=\"https://qiita.com/ochiochi/items/966b884eb17045dfb929\">https://qiita.com/ochiochi/items/966b884eb17045dfb929</a></p><p><br></p><h2>APIの応答はrenderをいじれば良い</h2><pre>class
      LoginController &lt; ApplicationController\r\ndef login\r\n  login_user = User.find_by(user_id:params[:user_id],
      password:params[:password])\r\n  if login_user != nil\r\n    <span style=\"color:
      rgb(226, 80, 65);\">render json: {&quot;message&quot;: &quot;User details by
      user_id&quot;, &quot;user&quot;: {\r\n      <span style=\"color: rgb(226, 80,
      65);\">&quot;id&quot;: login_user.id, </span>&quot;user_id&quot;: login_user.user_id,
      &quot;nickname&quot;: login_user.nickname, &quot;comment&quot;: login_user.comment}\r\n 
        }</span>\r\n  else\r\n    <span style=\"color: rgb(226, 80, 65);\">render
      plain: &#39;no auth&#39;</span>\r\n  end\r\nend\r\nend</pre><pre>class UsersController
      &lt; ApplicationController\r\nbefore_action :set_user, only: [:show, :update,
      :destroy]\r\n\r\n# GET /users\r\ndef index\r\n@users = User.all\r\n\r\nrender
      json: @users\r\nend\r\n\r\n# GET /users/1\r\ndef show\r\nrender json: @user\r\nend\r\n\r\n#
      POST /users\r\ndef create\r\n@user = User.new(user_params)\r\n\r\nif @user.save\r\nrender
      json: {&quot;message&quot;: &quot;Account successfully created&quot;, &quot;user&quot;:
      {\r\n&quot;user_id&quot;: @user.user_id}\r\n}, status: :created, location: @user\r\nelse\r\nrender
      json: @user.errors, status: :unprocessable_entity\r\nend\r\nend\r\n\r\n# PATCH/PUT
      /users/1\r\ndef update\r\nif @user.update(user_params)\r\nrender json: @user\r\nelse\r\nrender
      json: @user.errors, status: :unprocessable_entity\r\nend\r\nend\r\n\r\n# DELETE
      /users/1\r\ndef destroy\r\n@user.destroy\r\nend\r\n\r\nprivate\r\n# Use callbacks
      to share common setup or constraints between actions.\r\ndef set_user\r\n@user
      = User.find(params[:id])\r\nend\r\n\r\n# Only allow a trusted parameter &quot;white
      list&quot; through.\r\n<span style=\"color: rgb(226, 80, 65);\">def user_params\r\nparams.require(:user).permit(:user_id,
      :password, :token, :comment, :nickname)\r\nend</span>\r\nend</pre><p><br></p><h2>ROUTEは好きに変更</h2><pre>Rails.application.routes.draw
      do\r\npost &#39;/login&#39; =&gt; &#39;login#login&#39;\r\npost &#39;/signup&#39;
      =&gt; &#39;users#create&#39;\r\ndelete &#39;/users/:id&#39; =&gt; &#39;users#destroy&#39;\r\npost
      &#39;/users/:id/closed&#39; =&gt; &#39;users#destroy&#39;\r\nresources :users\r\n#
      For details on the DSL available within this file, see <a href=\"http://guides.rubyonrails.org/routing.html\">http://guides.rubyonrails.org/routing.html</a>\r\nend</pre><p><br></p><h2>モデルのバリデーション</h2><pre>class
      User &lt; ApplicationRecord\r\nhas_secure_token\r\n\r\nvalidates :user_id, length:
      { in: 6..20 } # 「8文字以上20文字以下」\r\nvalidates :password, length: { in: 8..20 }
      # 「8文字以上20文字以下」\r\n\r\nend</pre><p><br></p><p><span style=\"font-size: 30px;\">that&#39;s
      all.<span class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background:
      url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f618.svg);\">&nbsp;</span></span></p><p><br></p><p><br></p><p><br></p><p><br></p></section>"
    - '2019-03-22 03:49:44.606947'
    - '2019-03-22 04:11:47.213616'
  - - 129
    - AWS IAM ユーザーを作成
    - '<h2 style="text-align: center;">AWSでIAM(Identity and Access Management) ユーザーを作成する例</h2><p><br></p><h2>目的:
      AWS のサービスとリソースに対するアクセスと許可をユーザーで管理できる</h2><p><br></p><h2><span style="font-size:
      24px;">手順1 <a href="https://console.aws.amazon.com/iam/" target="_blank"></a><a
      href="https://console.aws.amazon.com/iam/">https://console.aws.amazon.com/iam/</a>
      にルートユーザーでサインイン</span></h2><p><br></p><p><span style="font-size: 24px;">手順2 <a
      href="https://console.aws.amazon.com/iam/" target="_blank"></a><a href="https://console.aws.amazon.com/iam/"></a>コンソールのナビゲーションペインで、[<strong>Users</strong>]
      を選択後、[<strong>Add user</strong>]</span></p><p><br></p><p><span style="font-size:
      24px;">手順3 [<strong>User name</strong>] に、<strong><code>Administrator(例)</code></strong>
      と入力します。</span></p><p><br></p><p><span style="font-size: 24px;">手順4&nbsp;[<strong>AWS
      マネジメントコンソール によるアクセス</strong>] の横のチェックボックスをオンにし、[<strong>Custom password (カスタムパスワード)</strong>]
      を選択して、新しいユーザーのパスワードをテキストボックスに入力します。任意でオプションとして [<strong>Require password reset</strong>]
      (パスワードのリセットの強制) を選択し、ユーザーが次回サインインしたときに新しいパスワードを作成することを強制できます。(自由)</span></p><p><br></p><p><span
      style="font-size: 24px;">手順5 [<strong>Next: Permissions (次へ: アクセス許可)</strong>]
      を選択します。</span></p><p><br></p><p><span style="font-size: 24px;">手順6 [<strong>アクセス許可の設定</strong>]
      ページで、[<strong>ユーザーをグループに追加</strong>] を選択します。</span></p><p><br></p><p><span style="font-size:
      24px;">手順7 [<strong>Create group</strong>] を選択します。</span></p><p><br></p><p><span
      style="font-size: 24px;">手順8&nbsp;[<strong>グループの作成</strong>] ダイアログボックスで、[<strong>グループ名</strong>]
      に「<strong><code>Administrators(例)</code></strong>」と入力します。</span></p><p><br></p><p><span
      style="font-size: 24px;">手順9 [<strong>ポリシーのフィルタ</strong>] で、[<strong>AWS 管理のジョブ機能</strong>]
      チェックボックスをオンにします。</span></p><p><br></p><p><span style="font-size: 24px;">手順10&nbsp;ポリシーリストで、[<strong>AdministratorAccess</strong>]
      のチェックボックスをオンにします。次に、[<strong>Create group</strong>] を選択します。</span></p><p><br></p><p><span
      style="font-size: 24px;">手順11&nbsp;グループのリストに戻り、新しいグループのチェックボックスをオンにします。必要に応じて
      [<strong>Refresh</strong>] を選択し、リスト内のグループを表示します。</span></p><p><br></p><p><span
      style="font-size: 24px;">手順12 [<strong>Next: Tags</strong>] を選択し、タグをキーと値のペアとしてアタッチして、メタデータをユーザーに追加します。</span></p><p><br></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;">手順13&nbsp;[<strong>Next:
      Review</strong>] を選択して、新しいユーザーに追加するグループメンバーシップのリストを表示します。続行する準備ができたら、[<strong>Create
      user</strong>] を選択します。</span></span></p><p><br></p><p><span style="font-size:
      24px;"><strong><a href="https://094384258734.signin.aws.amazon.com/console">https://<em><code>your_aws_account_id</code></em>.signin.aws.amazon.com/console</a>にアクセスし、
      IAM ユーザー名（E メールアドレスではない）とパスワードでログインできる</strong><br></span></p><p><br><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554286225120-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-03+19.09.59.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554286364812-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-03+19.04.26.png"
      style="width: 900px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><br></p><p><a
      href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#sign-up-for-aws">ドキュメント</a></p>'
    - '2019-04-03 09:31:30.25511'
    - '2019-04-05 06:42:01.175991'
  - - 130
    - AWSのVPCの作成
    - '<h2 style="text-align: center;">Virtual Private Cloud (VPC) の作成</h2><p><br></p><p><span
      style="font-size: 24px;">目的: 新しいEC2インスタンスタイプでは、VPC でインスタンスを起動が必要だから</span></p><p><br></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;">概要:&nbsp;</span>VPCの役割は
      ファイヤーウォール(不正侵入ブロック)+L3スイッチ(ネットワークへのデータ転送)+VPNルータ(LANとLANを接続してひとつのネットワークを形成)</span></p><p><br></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;">手順: 1 <a href="https://console.aws.amazon.com/vpc/"
      target="_blank"></a><a href="https://console.aws.amazon.com/vpc/">https://console.aws.amazon.com/vpc/</a>にある
      Amazon VPC コンソールを開く</span></span></p><p><br></p><p><span style="font-size: 24px;"><span
      style="font-size: 24px;">手順: 2 ナビゲーションバーで、VPC のリージョンを選択する。(例: 東京)</span></span></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554364529469-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-04+16.53.59.png"
      style="width: 1012px;" class="fr-fic fr-dib"></span></span></p><p><br></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;">手順: 3&nbsp;VPC ダッシュボードで、[<strong>Launch
      VPC Wizard (VPC ウィザードの起動)</strong>] を選択する</span></span></p><p><br></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;">手順: 4&nbsp;[<strong>Step
      1: Select a VPC Configuration</strong>] ページで、[<strong>VPC with a Single Public
      Subnet</strong>] が選択されていることを確認したら、[<strong>Select</strong>] を選択する。</span></span></p><p><br></p><p><span
      style="font-size: 24px;"><span style="font-size: 24px;"><span style="font-size:
      24px;"><span style="font-size: 24px;">手順: 5&nbsp;</span></span>[<strong>Step
      2: VPC with a Single Public Subnet</strong>] ページで、[<strong>VPC name</strong>]
      フィールドに、わかりやすい VPC 名を入力する。他のデフォルトの設定はそのままにしておき、[<strong>Create VPC</strong>]
      を選択し、確認ページで、[OK] を選択する。</span></span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><a
      href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#sign-up-for-aws">ドキュメント</a></p>'
    - '2019-04-04 07:30:28.003616'
    - '2019-04-04 08:57:26.485031'
  - - 131
    - AWS セキュリティグループの作成
    - '<h2 style="text-align: center;"><span style="font-size: 30px;">セキュリティグループの作成</span></h2><p><br></p><h2>目的:
      関連付けられたインスタンスのファイアウォールとして機能させる</h2><p><br></p><h2><span style="font-size: 24px;">手順1
      <a href="https://console.aws.amazon.com/iam/"></a><a href="https://console.aws.amazon.com/ec2/"
      target="_blank"></a><a href="https://console.aws.amazon.com/ec2/">EC2コンソール</a></span></h2><h2><span
      style="font-size: 24px;">Amazon EC2 コンソールを開く。(Amazon VPC コンソールからでもセキュリティグループを作成できるが今回は違うやり方)</span></h2><p><br></p><p><span
      style="font-size: 24px;">手順2 ナビゲーションバーで、セキュリティグループのリージョンを選択します。(例　東京)</span></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554366782013-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-04+16.53.59.png"
      style="width: 1028px;" class="fr-fic fr-dib"></p><p><br></p><p><span style="font-size:
      24px;">手順3&nbsp;ナビゲーションペインで、[<strong>Security Groups</strong>] を選択する。</span></p><p><br></p><p><span
      style="font-size: 24px;">手順4&nbsp;[<strong>Create Security Group</strong>] を選択します</span></p><p><br></p><p><span
      style="font-size: 24px;">手順5 新しいセキュリティグループの名前と説明を入力する。覚えやすい名前 (IAM ユーザー名など)
      を使用し、その後に _SG_ を続け、さらにリージョン名を続ける。</span></p><p><span style="-webkit-tap-highlight-color:
      transparent; font-size: 18px; -webkit-text-size-adjust: 100%;">administrator_SG_apnortheast1
      など。</span></p><table class="fr-alternate-rows" style="margin-right: calc(0%);
      width: 100%;"><thead><tr><th style="width: 51.0569%;">地域コード</th><th style="width:
      48.8618%;">名前</th></tr></thead><tbody><tr><td style="width: 51.0569%;">us-east-1</td><td
      style="width: 48.8618%;">米国東部（バージニア北部）</td></tr><tr><td style="width: 51.0569%;">us-east-2</td><td
      style="width: 48.8618%;">米国東部 (オハイオ)</td></tr><tr><td style="width: 51.0569%;">us-west-1</td><td
      style="width: 48.8618%;">米国西部 (北カリフォルニア)</td></tr><tr><td style="width: 51.0569%;">us-west-2</td><td
      style="width: 48.8618%;">米国西部 (オレゴン)</td></tr><tr><td style="width: 51.0569%;">ca-central-1</td><td
      style="width: 48.8618%;">カナダ (中部)</td></tr><tr><td style="width: 51.0569%;">eu-central-1</td><td
      style="width: 48.8618%;">欧州 (フランクフルト)</td></tr><tr><td style="width: 51.0569%;">eu-west-1</td><td
      style="width: 48.8618%;">欧州 (アイルランド)</td></tr><tr><td style="width: 51.0569%;">eu-west-2</td><td
      style="width: 48.8618%;">欧州 (ロンドン)</td></tr><tr><td style="width: 51.0569%;">eu-west-3</td><td
      style="width: 48.8618%;">EU (パリ)</td></tr><tr><td style="width: 51.0569%;">ap-northeast-1</td><td
      style="width: 48.8618%;">アジアパシフィック (東京)</td></tr><tr><td style="width: 51.0569%;">ap-northeast-2</td><td
      style="width: 48.8618%;">アジアパシフィック (ソウル)</td></tr><tr><td style="width: 51.0569%;">ap-northeast-3</td><td
      style="width: 48.8618%;">アジアパシフィック (大阪: ローカル)</td></tr><tr><td style="width:
      51.0569%;">ap-southeast-1</td><td style="width: 48.8618%;">アジアパシフィック (シンガポール)</td></tr><tr><td
      style="width: 51.0569%;">ap-southeast-2</td><td style="width: 48.8618%;">アジアパシフィック
      (シドニー)</td></tr><tr><td style="width: 51.0569%;">ap-south-1</td><td style="width:
      48.8618%;">アジアパシフィック (ムンバイ)</td></tr><tr><td style="width: 51.0569%;">sa-east-1</td><td
      style="width: 48.8618%;">南米 (サンパウロ)</td></tr></tbody></table><p><br></p><p><span
      style="font-size: 24px;">手順6 [<strong>VPC</strong>] リストで、使用している VPC を選択します。</span></p><p><br></p><p><span
      style="font-size: 24px;">手順7&nbsp;[<strong>Inbound</strong>] タブで、次のルールを作成し (新しいルールごとに
      [<strong>Add Rule</strong>] を選択)、最後に [<strong>Create</strong>] を選択します。</span></p><ul
      type="disc"><li><p>[<strong>Type</strong>] リストから [<strong>HTTP</strong>] を選択し、[<strong>Source</strong>]
      が [<strong>Anywhere</strong>] (<code>0.0.0.0/0</code>) に設定されていることを確認します。</p></li><li><p>[<strong>Type</strong>]
      リストから [<strong>HTTPS</strong>] を選択し、[<strong>Source</strong>] が [<strong>Anywhere</strong>]
      (<code>0.0.0.0/0</code>) に設定されていることを確認します。</p></li><li><p>[<strong>Type</strong>]
      リストから [<strong>SSH</strong>] を選択します。[<strong>Source</strong>] ボックスで [<strong>My
      IP</strong>] を選択すると、ローカルコンピューターのパブリック IPv4 アドレスが自動的にフィールドに入力されます。別の方法として、[Custom]
      を選択してコンピュータまたはネットワークのパブリック IPv4 アドレスを CIDR 表記で指定することもできます。CIDR 表記で個々の IP アドレスを指定するには、ルーティングサフィックス
      <code>/32</code> を追加します (<code>203.0.113.25/32</code>など)。会社が特定の範囲からアドレスを割り当てている場合、範囲全体
      (<code>203.0.113.0/24</code>など) を指定します。</p></li></ul><p>＊ 表記IP アドレス以外のSSH アクセスがブロックされる</p><p><br></p><p><br></p><p><a
      href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#sign-up-for-aws">ドキュメント</a></p>'
    - '2019-04-04 08:26:02.123608'
    - '2019-07-26 08:54:10.304245'
  - - 132
    - AWS EC2 のキーペアを作成する
    - "<h2 style=\"text-align: center;\"><span style=\"font-size: 30px;\">キーペアを作成する</span></h2><p><br></p><p><span
      style=\"font-size: 24px;\">役割: Amazon EC2 は<code>パブリックキー暗号</code>を使用して、<span
      style=\"background-color: rgb(247, 218, 100);\">ログイン情報の暗号化と復号</span>を行います。パブリックキー暗号はパブリックキーを使用してデータを暗号化し
      (パスワードなど)、受信者はプライベートキーを使用してデータを復号します。パブリックキーとプライベートキーは、<em>キーペア</em>と呼ばれます。ログイン情報の安全性を保護しています。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順1: AWS ダッシュボードから、[<strong>EC2</strong>] を選択して Amazon
      EC2 コンソールを開きます。</span></p><p><span style=\"font-size: 24px;\"><br></span></p><p><span
      style=\"font-size: 24px;\">手順2: ナビゲーションバーで、キーペアを生成するリージョンを選択します。たとえば、東京リージョン
      でインスタンスを起動する予定がある場合、東京 リージョン のインスタンス用にキーペアを作成する必要があります。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\"><span style=\"font-size: 24px;\">手順3:&nbsp;</span>ナビゲーションペインの
      [<strong>NETWORK &amp; SECURITY</strong>] で、[<strong>Key Pairs</strong>] を選択します。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順4: [<strong>Create Key Pair</strong>] を選択します。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順5:&nbsp;</span><strong><span style=\"font-size:
      24px;\">Create Key Pair</span></strong><span style=\"font-size: 24px;\">] ダイアログボックスの
      [<strong>Key pair name</strong>] フィールドに新しいキーペアの名前を入力し、[<strong>Create</strong>]
      を選択します。覚えやすい名前 (IAM ユーザー名など) を使用し、その後に <code>-key-pair</code> を続け、さらにリージョン名を続けます。たとえば、iamuser-key-pair-apnortheast1
      とします。</span></p><p><br></p><p><span style=\"font-size: 24px;\">手順6: ブラウザによって秘密キーファイルが自動的にダウンロードされます。ベースファイル名はキーペアの名前として指定した名前となり、ファイル名の拡張子は
      <code>.pem</code> となります。プライベートキーファイルを安全な場所に保存します。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順7: Mac または Linux コンピュータの SSH クライアントを使用して Linux
      インスタンスに接続する場合は、次のコマンドを使用して</span><span style=\"font-size: 24px; color: rgb(243,
      121, 52);\">プライベートキーファイルの権限を設定</span><span style=\"font-size: 24px;\">すると、お客様以外のユーザーはそれを読み取ることができないようになります。</span></p><pre><span
      style=\"font-size: 24px;\"><strong><code>$ chmod 400 <em><code>your_user_name</code></em>-key-pair-<em><code>region_name</code></em>.pem</code></strong></span></pre><p><span
      style=\"font-size: 24px;\"><code>所有者 rのみ <span style=\"font-size: 24px;\"><code>所有グループ
      rwx全て権限なし その他ユーザー<span style=\"font-size: 24px;\"><code><span style=\"font-size:
      24px;\"><code>&nbsp;rwx全て権限なし</code></span></code></span></code></span></code></span></p><p><br></p><pre><span
      style=\"font-size: 24px;\">$ mv Downloads/<span style=\"font-size: 24px;\"><strong><code><em><code>your_user_name</code></em>-key-pair-<em><code>region_name</code></em>.pem</code></strong></span>
      .ssh/ <span style=\"color: rgb(163, 143, 132);\">(#作成した公開鍵をsshフォルダに移動)</span></span>\r\n<span
      style=\"font-size: 24px;\">$ cd .ssh/</span>\r\n<span style=\"font-size: 24px;
      color: rgb(163, 143, 132);\">(#ディレクトリをsshに移動)</span>\r\n<span style=\"font-size:
      24px;\"><strong><code>$ chmod 400 <em><code>your_user_name</code></em>-key-pair-<em><code>region_name</code></em>.pem</code></strong></span></pre><p><span
      style=\"font-size: 24px;\"><code>所有者 rのみ <span style=\"font-size: 24px;\"><code>所有グループ
      rwx全て権限なし その他ユーザー<span style=\"font-size: 24px;\"><code><span style=\"font-size:
      24px;\"><code>&nbsp;rwx全て権限なし</code></span></code></span></code></span></code></span></p><p><br></p><p><span
      style=\"font-size: 24px;\">＊ chmodについて</span></p><pre>$ chmod モード 対象ファイル名</pre><table
      style=\"margin-right: calc(0%); width: 100%;\"><thead><tr><th style=\"background-color:
      rgb(247, 218, 100);\">モード(数字)</th><th style=\"background-color: rgb(247, 218,
      100);\">モード(アルファベット)</th><th style=\"background-color: rgb(247, 218, 100);\">権限</th></tr></thead><tbody><tr><td>4</td><td>r</td><td>読み取り</td></tr><tr><td>2</td><td>w</td><td>書き込み</td></tr><tr><td>1</td><td>x</td><td>実行</td></tr></tbody></table><p><br></p><p><span
      style=\"font-size: 24px;\"><code>chmodは「所有者」「所有グループ」「その他」の順で入力することでパーミッションを変更することができます</code></span></p><p>「764」は<br>「所有者」に対して「読み取り」「書き込み」「実行」を、<br>「所有グループ」に対して「読み取り」「書き込み」を、<br>「その他」に「読み取り」を付与しています。</p><p><br></p><p><a
      href=\"https://qiita.com/shisama/items/5f4c4fa768642aad9e06\"><span style=\"font-size:
      24px;\">chmod 参考記事</span></a></p><p><span style=\"font-size: 24px;\"><a href=\"https://qiita.com/naoki_mochizuki/items/814e0979217b1a25aa3e\">デプロイの参考記事</a></span></p><p><br></p><p><br></p><p><a
      href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html\">ドキュメント</a></p><p><br></p><p><br></p>"
    - '2019-04-05 06:13:55.572095'
    - '2019-04-05 09:44:45.849737'
  - - 133
    - AWS コマンドラインインターフェイス
    - "<h1 style=\"text-align: center;\">AWS コマンドラインインターフェイス</h1><p><br></p><p><span
      style=\"font-size: 24px;\">役割: AWS コマンドラインインターフェイス (CLI) は、AWS サービスを管理するための統合ツールです。ダウンロードおよび設定用の単一のツールのみを使用して、コマンドラインから複数の
      AWS サービスを制御し、スクリプトを使用してこれらを自動化することができます。</span></p><p><br></p><p><strong>Windows<br></strong><a
      href=\"https://s3.amazonaws.com/aws-cli/AWSCLI64.msi\">64 ビット</a>または <a href=\"https://s3.amazonaws.com/aws-cli/AWSCLI32.msi\">32
      ビット</a> の Windows インストーラをダウンロードし、実行します。</p><p><strong>Mac および Linux<br></strong><span
      style=\"color: rgb(184, 49, 47);\"><a href=\"http://www.python.org/download/\"
      target=\"_blank\">Python</a> 2.6.5</span> 以降が必要です。<br><span style=\"color: rgb(184,
      49, 47);\"><a href=\"http://www.pip-installer.org/en/latest/\" target=\"_blank\">pip</a></span>
      を使ってインストールします。</p><pre>$ pip install awscli </pre><p><strong>Amazon Linux<br></strong>AWS
      CLI は <a href=\"https://aws.amazon.com/amazon-linux-ami/\">Amazon Linux AMI</a>
      にプレインストールされています。</p><p><strong>リリースノート<br></strong>最新バージョンの詳細については、<a href=\"https://aws.amazon.com/releasenotes/CLI\">リリースノート</a>を確認してください。</p><p><br></p><p><br></p><p><span
      style=\"font-size: 24px;\">Mac</span></p><p><span style=\"font-size: 24px;\">手順1:
      Python 2.6.5 以降が必要</span></p><pre>$sudo brew install python</pre><p><br></p><p><span
      style=\"font-size: 24px;\">手順2: Python のパッケージのインストーラーを使用する</span></p><pre>$sudo
      easy_install pip</pre><p><br></p><p><span style=\"font-size: 24px;\">手順3: awscli
      をインストール</span></p><pre>pip install awscli</pre><p><br></p><p><span style=\"font-size:
      24px; background-color: rgb(209, 213, 216);\">matplotlib 1.3.1 requires nose,
      which is not installed.</span></p><p><span style=\"font-size: 24px; background-color:
      rgb(209, 213, 216);\">matplotlib 1.3.1 requires tornado, which is not installed.</span></p><p><span
      style=\"font-size: 24px;\">みたいなエラーが出たら</span></p><pre>$ sudo easy_install nose\r\n$
      sudo easy_install tornado\r\n(エラーがまだ消えないなら)\r\n$ pip install tornado</pre><p><br></p><p><span
      style=\"font-size: 24px; background-color: rgb(209, 213, 216);\">Cannot uninstall
      &#39;six&#39;. It is a distutils installed project and thus we cannot accurately
      determine which files belong to it which would lead to only a partial uninstall.</span></p><p><span
      style=\"font-size: 24px;\">みたいなエラーはsixがすでに入っているのが原因みたいなので以下で解決</span></p><pre>$
      sudo pip install awscli --upgrade --ignore-installed six</pre><p><br></p><p><br></p><p><br></p><p><a
      href=\"https://aws.amazon.com/jp/cli/\">document</a></p>"
    - '2019-04-05 06:59:35.082106'
    - '2019-04-05 09:48:24.397612'
  - - 134
    - AWS EC2インスタンスの作成
    - '<h1 style="text-align: center;">EC2インスタンスの作成</h1><p><span style="font-size:
      24px;"><br></span></p><p><span style="font-size: 24px;">前提: VPC, サブネット, インターネットゲートウェイ,
      ルートテーブル, セキュリティーグループ, EC2のキーペアが準備できている</span></p><p><br></p><p><span style="font-size:
      24px;">EC2とは: <a href="http://e-words.jp/w/Amazon.com.html"></a>Amazon社が運営している、仮想化技術を応用したレンタルサーバサービス。<span
      style="font-size: 24px;">Amazon社</span>の運営するサーバ上のソフトウェアによって構築された仮想マシンを貸り、利用者は仮想マシン上でLinuxやWindows
      ServerなどのOSを起動し、独自のオンラインサービスを構築することができる。</span></p><p><span style="font-size:
      24px;">一言で言うと、<span style="font-size: 24px; color: rgb(226, 80, 65);">Amazon社のサーバー</span><span
      style="color: rgb(226, 80, 65);">上に擬似的に自分のパソコンを作成して起動する</span>ということ。</span></p><p><br></p><p><span
      style="font-size: 24px;">メリット: 消費した処理能力に応じて課金される仕組みで、突発的にサーバの増強が必要になった場合でもすぐに能力を拡張することができ、必要なくなったらすぐにサーバを削減してコストを抑えることができる。</span></p><p><br></p><p><span
      style="font-size: 24px;">はじめに: EC2&rarr;インスタンス&rarr;インスタンスの起動　を選択します。</span></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554640875017-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.22.23.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><br></p><p><span style="font-size:
      24px;">手順1: AMI(仮想マシンの種類)を選択する。今回は、無料枠の範囲内で、一番上のAmazon Linuxを利用する。</span></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554641120552-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.30.02.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><br></p><p><span style="font-size:
      24px;">手順2: EC2インスタンスのタイプ選択。メモリやCPUなどを決めていきます。</span></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554641236704-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.31.23.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><span style="font-size: 24px;">手順3:
      インスタンス設定 (自動割り当てパブリックIPは最後に固定します)</span></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554641574983-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.52.45.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><br></p><p><br></p><p><span
      style="font-size: 24px;">手順4: ストレージの追加</span></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554641825420-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.52.56.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><span style="font-size: 24px;">手順5:
      タグの追加 インスタンスを認識しやすくする為の設定なので任意(なくても良い)。</span></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554641956243-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.53.04.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><br></p><p><span style="font-size:
      24px;">手順6: セキュリティグループの設定</span></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554642135045-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+14.53.15.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><span style="font-size: 24px;">手順6:
      確認して作成する。</span></p><p><br></p><p><span style="font-size: 24px;">ここまでしたら、こんな感じ。</span></p><p><span
      style="font-size: 24px;"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554642322747-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+15.00.35.png"
      style="width: 900px;" class="fr-fic fr-dib"></span></p><p><br></p><p><span style="font-size:
      24px;">最後に: Elastic IPの作成、紐付け (サーバーのグローバルIPは再起動させるたびに変わってしまう ＊手順3のパブリックIP自動割り当ての通り)</span></p><p><span
      style="font-size: 24px;">IPが変わってしまうということは、IP指定の設定ファイル等を、その都度書き換えならなくなるのでIPを固定しよう。</span></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1554643299905-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-05+15.02.43.png"
      style="width: 900px;" class="fr-fic fr-dib"></p><p><br></p><p><span style="font-size:
      24px;">以上でEC2インスタンスの作成は完了<span class="fr-emoticon fr-deletable fr-emoticon-img"
      style="background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f604.svg);">&nbsp;</span><span
      class="fr-emoticon fr-deletable fr-emoticon-img" style="background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f600.svg);">&nbsp;</span><span
      class="fr-emoticon fr-deletable fr-emoticon-img" style="background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f601.svg);">&nbsp;</span>
      !</span></p><p><br></p><p><a href="https://qiita.com/naoki_mochizuki/items/22cfbf4bf7ec95f6ac1c"><span
      style="font-size: 24px;">お宝参考記事</span></a></p><p><br></p><p><br></p>'
    - '2019-04-07 12:11:32.531703'
    - '2019-04-07 13:25:28.680954'
  - - 135
    - AWS EC2へのSSHログイン
    - "<p style=\"text-align: center;\"><span style=\"font-size: 30px;\">EC2へのSSHログイン</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">前提:&nbsp;</span></p><p><span style=\"font-size: 24px;\">awscliが導入済み
      <a href=\"https://dragonarrow.herokuapp.com/articles/133\">導入してない場合はこちらを参照</a></span></p><p><span
      style=\"font-size: 24px;\">EC2のキーペアを作成済み&nbsp;</span><a href=\"https://dragonarrow.herokuapp.com/articles/132\"><span
      style=\"font-size: 24px;\">作成してsshフォルダ移動、権限付与までしてない人はこちらを参照</span></a></p><p><br></p><h3><br>インスタンスへのログイン設定</h3><p><span
      style=\"font-size: 18px;\">EC2インスタンスにログインできるユーザーとして、AWSでは、デフォルトでec2-userという名のユーザーが用意されている。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">手順1: ec2-userでログイン</span></p><pre><span style=\"font-size:
      18px;\">$ mv Downloads/administrator-key-pair-ap-northeast-1.pem .ssh/ <span
      style=\"color: rgb(163, 143, 132);\">(キーペアををすでに .ssh まで移動している人は飛ばして良い administrator-key-pair-ap-northeast-1.pemは自分のキーペア名)</span></span></pre><pre><span
      style=\"font-size: 18px;\">$ cd .ssh/ (ディレクトリをsshに移動)\r\n[.ssh] $ chmod 400
      administrator-key-pair-ap-northeast-1.pem <span style=\"color: rgb(163, 143,
      132);\">(所有者のみread権限 すでにしている人は飛ばす)</span>\r\n[.ssh] $ ssh -i administrator-key-pair-ap-northeast-1.pem
      ec2-user@54.250.70.47 <span style=\"color: rgb(163, 143, 132);\">(公開鍵を利用してec2-userとしてログイン
      54.250.70.47は自分のEC2<code>パブリックIPか<code>パブリックDNS名を指定</code></code>)</span></span></pre><p><code><span
      style=\"font-size: 18px;\">$&nbsp;</span></code><span style=\"font-size: 18px;\"><code>ssh</code></span><code><span
      style=\"font-size: 18px;\">-i &lt;key-pair&gt;.pem &lt;ユーザ名&gt;@&lt;パブリックIP
      or パブリックDNS名&gt;</span></code></p><pre><span style=\"color: rgb(163, 143, 132);
      font-size: 18px;\">The authenticity of host &#39;52.68.~~~~~~ (52.68.~~~~~~)&#39;
      can&#39;t be established.\r\nRSA key fingerprint is eb:7a:bd:e6:aa:da:~~~~~~~~~~~~~~~~~~~~~~~~.\r\nAre
      you sure you want to continue connecting (yes/no)?</span><span style=\"font-size:
      18px;\">\r\n[.ssh] $ yes</span></pre><p><br></p><p><span style=\"font-size:
      24px;\">手順2: ユーザーを作成し、作成したユーザーにマスター権限を与える</span></p><pre><span style=\"font-size:
      18px;\">[ec2-user|~]$ sudo adduser tatsuya </span><span style=\"color: rgb(163,
      143, 132); font-size: 18px;\">(新規ユーザー名の登録 adduserでなくuseraddでも良い)</span>\r\n<span
      style=\"color: rgb(226, 80, 65); font-size: 18px;\">間違って作った時は</span><span style=\"color:
      rgb(226, 80, 65);\">\r\n</span><span style=\"color: rgb(226, 80, 65); font-size:
      18px;\"><span style=\"font-size: 18px;\">[ec2-user|~]$ sudo </span>userdel -r <span
      style=\"font-size: 18px;\">tatsuya</span></span>\r\n<span style=\"font-size:
      18px;\">[ec2-user|~]$ sudo passwd <span style=\"font-size: 18px;\">tatsuya</span>\r\n<span
      style=\"color: rgb(163, 143, 132);\">(<span style=\"font-size: 18px;\">ユーザーの</span>パスワード設定と確認がされる)</span>\r\n[ec2-user|~]$
      sudo visudo</span>\r\n<span style=\"font-size: 18px; color: rgb(163, 143, 132);\">(sudoコマンドの設定ファイルをvimで編集する)</span></pre><pre><span
      style=\"font-size: 18px;\">...\r\nroot    ALL=(ALL)       ALL\r\n<span style=\"color:
      rgb(163, 143, 132);\">この真下に</span>\r\ntatsuya   ALL=(ALL)       ALL\r\n<span
      style=\"color: rgb(163, 143, 132);\">を書き加える</span>\r\n...</span></pre><p><code><span
      style=\"font-size: 18px;\">vim の使い方は&nbsp;</span></code></p><p><code><span style=\"font-size:
      18px;\">i:入力モード&nbsp;</span></code></p><p><code><span style=\"font-size: 18px;\">esc:閲覧モード&nbsp;</span></code></p><p><code><span
      style=\"font-size: 18px;\"><code><span style=\"font-size: 18px;\">閲覧モードでZZ:保存</span></code></span></code></p><p><code><span
      style=\"font-size: 18px;\"><code><span style=\"font-size: 18px;\">閲覧モードで<span
      style=\"color: rgb(44, 130, 201);\">:q!の後にEnter押下</span>:変更せずに終了</span></code></span></code></p><p><code><span
      style=\"font-size: 18px;\"><code><span style=\"font-size: 18px;\">閲覧モードで<span
      style=\"color: rgb(44, 130, 201);\">:wq!の後にEnter押下</span>:書き込んで終了(保存)</span></code></span></code></p><p><br></p><p><span
      style=\"font-size: 18px;\">編集が完了したら、</span></p><pre><span style=\"font-size:
      18px;\">[ec2-user|~]$ sudo su - tatsuya <span style=\"color: rgb(163, 143, 132);\">(ユーザーの切り替え)</span></span>\r\n<span
      style=\"font-size: 18px; color: rgb(163, 143, 132);\">[tatsuya@ip-10-0-0-149
      ~]$ に変われば成功</span></pre><p><br></p><h3>SSH通信によるインスタンスへのログイン設定を作る(<span style=\"font-size:
      24px;\">ローカル編&amp;サーバー編</span>)</h3><p><br></p><p><span style=\"font-size: 24px;\">ローカル編</span></p><pre><span
      style=\"font-size: 18px;\">$ cd .ssh</span>\r\n<span style=\"font-size: 18px;\">$
      ssh-keygen -t rsa</span>\r\n<span style=\"font-size: 18px;\">-----------------------------\r\nEnter
      file in which to save the key ():<span style=\"color: rgb(44, 130, 201);\">ec2_key_rsa(作る鍵の名前)</span>
      \r\n(#ここでファイルの名前を記述して、エンター)\r\nEnter passphrase (empty for no passphrase): \r\n(#何もせずそのままエンター)\r\nEnter
      same passphrase again: \r\n(#何もせずそのままエンター)\r\n-----------------------------</span>\r\n<span
      style=\"font-size: 18px;\">[.ssh]$ ls</span>\r\n<span style=\"font-size: 18px;\">#「<span
      style=\"font-size: 18px;\"><span style=\"color: rgb(44, 130, 201);\">ec2_key_rsa</span></span>」(秘密鍵)と「<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"color:
      rgb(44, 130, 201);\">ec2_key_rsa</span></span></span>.pub」(公開鍵)が生成されたことを確認\r\n[.ssh]$
      vi config\r\n(#VIMを起動し、設定ファイルを編集する)</span>\r\n<span style=\"font-size: 18px;\">-----------------------------\r\nHost
      dragonarrow (この部分がsshコマンドの一部になる)\r\n  Hostname <span style=\"font-size: 18px;\">54.250.70.47
      (</span>前出の固定IP</span> <span style=\"font-size: 18px;\"><code><span style=\"font-size:
      18px;\">or パブリックDNS名</span></code> #自分の設定に合わせて)\r\n  Port 22\r\n  User tatsuya (#先ほどのユーザー名)\r\n 
      IdentityFile ~/.ssh/<span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"color: rgb(44, 130, 201);\">ec2_key_rsa</span></span></span>\r\n-----------------------------</span>\r\n<span
      style=\"font-size: 18px;\">[.ssh]$ cat <span style=\"font-size: 18px;\"><span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"color:
      rgb(44, 130, 201);\">ec2_key_rsa</span></span></span></span>.pub</span>\r\n<span
      style=\"font-size: 18px;\">(#鍵の中身をターミナル上に出力&rarr;ssh-rsa~~~~最後までをコピーしておく)</span></pre><p><br></p><p><span
      style=\"font-size: 30px; color: rgb(184, 49, 47);\">重要</span></p><p><span style=\"font-size:
      18px;\">これでローカル設定は終了だが、補足！！</span></p><p><span style=\"font-size: 18px;\">githubのSSH接続設定経験がある人
      .ssh/配下に</span></p><pre><span style=\"font-size: 18px; color: rgb(44, 130, 201);\">config</span>\r\n<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"font-size: 18px;\"><span style=\"color: rgb(44, 130, 201);\">ec2_key_rsa</span></span></span></span></span></span></span>\r\n<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"font-size: 18px;\"><span style=\"color: rgb(44, 130, 201);\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"color:
      rgb(44, 130, 201);\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"color: rgb(44, 130, 201);\">ec2_key_rsa.pub</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>\r\n<span
      style=\"font-size: 18px;\">id_rsa\r\nid_rsa.pub\r\nknown_hosts</span></pre><p><span
      style=\"font-size: 18px;\">があると思うが、筆者はこの階層に</span></p><pre><span style=\"font-size:
      18px;\">$ mkdir AWS</span>\r\n<span style=\"font-size: 18px; color: rgb(163,
      143, 132);\">でAWSフォルダを作って</span>\r\n<span style=\"font-size: 18px;\">$ cd AWS</span>\r\n<span
      style=\"font-size: 18px;\">$ <span style=\"font-size: 18px;\">ssh-keygen -t
      rsa</span></span>\r\n<span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"color: rgb(163, 143, 132);\">をしてAWS配下に</span><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"color: rgb(44, 130, 201);\">ec2_key_rsa, <span style=\"font-size: 18px;\"><span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"color: rgb(44, 130, 201);\">ec2_key_rsa.pubを作った</span></span></span></span></span></span></span></span></span></span></span></pre><p>&nbsp;</p><p><span
      style=\"font-size: 18px;\">つまり、.ssh配下には AWSやgithubなどサーバーごとにフォルダを作って鍵を入れ込み.ssh配下のconfigで読み込むことで見易さと管理しやすさを維持した。</span></p><pre><span
      style=\"font-size: 18px;\">[.ssh配下] \r\n</span><span style=\"font-size: 24px;
      color: rgb(226, 80, 65);\">config</span><span style=\"font-size: 18px;\">\r\n</span><span
      style=\"font-size: 24px; color: rgb(226, 80, 65);\">github</span><span style=\"font-size:
      18px;\">(配下に<span style=\"font-size: 18px;\">github秘密鍵id_rsa 公開鍵id_rsa.pub</span>)\r\n</span><span
      style=\"font-size: 24px; color: rgb(226, 80, 65);\">AWS</span><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\">(配下にEC2<span style=\"font-size: 18px;\">秘密鍵<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"color: rgb(44, 130, 201);\">ec2_key_rsa</span></span></span></span></span></span>
      公開鍵<span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span
      style=\"color: rgb(44, 130, 201);\">ec2_key_rsa.pub</span></span></span></span></span></span></span>)</span></span>\r\n<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\">[config中身]</span></span></span>\r\n<span style=\"font-size: 18px;\"><span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\">-----------------------------</span></span></span></span>\r\n<span style=\"font-size:
      18px;\">Host dragonarrow\r\n    HostName 54.250.70.47\r\n    Port 22\r\n   
      IdentityFile ~/.ssh/AWS/ec2_key_rsa\r\n    User tatsuya\r\n\r\n\r\nHost GitHub\r\n 
        HostName <a href=\"//github.com\">github.com</a>\r\n    IdentityFile ~/.ssh/github/id_rsa\r\n 
        TCPKeepAlive yes\r\n    IdentitiesOnly yes\r\n    User git</span>\r\n<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size:
      18px;\"><span style=\"font-size: 18px;\">-----------------------------</span></span></span></span></pre><p><span
      style=\"font-size: 18px;\">これでサーバーが増えてもどの鍵がどのプロジェクトか混乱しない</span></p><p><span
      style=\"font-size: 18px;\"><a href=\"https://qiita.com/suin/items/e4a976d076134f755a9a\">このような管理の仕方もあるようだ!!</a></span></p><p><br></p><p><span
      style=\"font-size: 24px;\">サーバー編</span></p><p><br></p><pre><span style=\"font-size:
      18px;\">[tatsuya|~]$ mkdir .ssh\r\n[<span style=\"font-size: 18px;\">tatsuya</span>|~]$
      chmod 700 .ssh\r\n[<span style=\"font-size: 18px;\">tatsuya</span>|~]$ cd .ssh\r\n[<span
      style=\"font-size: 18px;\">tatsuya</span>|.ssh]$ vi authorized_keys\r\n(#vimが開く)\r\n-----------------------------\r\nssh-rsa
      asfs.....aef\r\n(#先ほどコピーした鍵の中身を貼り付け)\r\n-----------------------------\r\n[<span
      style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">tatsuya</span></span>|.ssh]$
      chmod 600 authorized_keys</span>\r\n<span style=\"font-size: 18px;\">(所有者のみread
      write権限)\r\n[<span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">tatsuya</span></span>|.ssh]$
      exit\r\n[ec2-user|~]$ exit</span></pre><p><span style=\"font-size: 18px;\">サーバー編終了</span></p><p><br></p><p><span
      style=\"font-size: 18px;\">いざ接続!!</span></p><pre><span style=\"font-size: 18px;\">[~]$
      ssh dragonarrow <span style=\"color: rgb(163, 143, 132);\">(configの<span style=\"font-size:
      18px;\">Hostで指定した語句がHostNameの代わりになってくれる</span>)</span></span>\r\n<span style=\"font-size:
      18px;\">接続できれば終了!!</span></pre><p><br></p><p><span style=\"font-size: 30px;\"><span
      style=\"color: rgb(44, 130, 201);\">初めてのサーバー構築はかなり難しかったがなんとか完了！！<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f602.svg);\">&nbsp;&nbsp;</span></span><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style='background: url(\"https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f602.svg\");
      color: rgb(44, 130, 201);'>&nbsp;</span></span></p><p><br></p><p><a href=\"https://qiita.com/naoki_mochizuki/items/814e0979217b1a25aa3e\">参考文献</a></p><p><br></p>"
    - '2019-04-07 13:29:44.959176'
    - '2019-04-07 15:15:35.762164'
  - - 138
    - 中央値の取り方
    - "<p><br></p><p><a href=\"https://atcoder.jp/contests/s8pc-6/tasks/s8pc_6_b\"></a><a
      href=\"https://atcoder.jp/contests/s8pc-6/tasks/s8pc_6_b\"><span style=\"font-size:
      30px;\">B - AtCoder Market atCoder問題</span></a></p><p><br></p><p><span style=\"color:
      rgb(226, 80, 65);\">ヒント&nbsp;</span></p><p><span style=\"color: rgb(226, 80,
      65);\">\U0001D441 個の数 \U0001D44E1, \U0001D44E2, \U0001D44E3, &hellip; , \U0001D44E\U0001D441
      があります。 |\U0001D465 &minus; \U0001D44E1| + |\U0001D465 &minus; \U0001D44E2| +
      ⋯ + |\U0001D465 &minus; \U0001D44E\U0001D441| の最小値を求めなさい。</span></p><p><span
      style=\"color: rgb(226, 80, 65);\">実は、最小値となる \U0001D465 は「\U0001D44E1, \U0001D44E2,
      \U0001D44E3, &hellip; , \U0001D44E\U0001D441 の中央値」となる！</span></p><p><span style=\"color:
      rgb(226, 80, 65);\"><br></span></p><p><span style=\"color: rgb(226, 80, 65);\"><strong>wikipedia:
      中央値</strong>（ちゅうおうち、英: median）とは、代表<strong>値</strong>の一つで、有限個のデータを小さい順に並べたとき<strong>中央</strong>に位置する<strong>値</strong>。
      たとえば5人の人がいるとき、その5人の年齢の<strong>中央値</strong>は3番目に年寄りな人の年齢である。 ただし、データが偶数個の場合は、<strong>中央</strong>に近い2つの<strong>値</strong>の算術平均をとる。</span></p><p><span
      style=\"color: rgb(226, 80, 65);\"><br></span></p><h3><span style=\"color: rgb(226,
      80, 65);\">Ribyで中央値を求めるコード</span></h3><pre data-lang=\"ruby\" data-unlink=\"\"><span
      style=\"color: rgb(226, 80, 65);\">(a.size % 2).zero? ? a[a.size/2 - 1, 2].inject(:+)
      / 2.0 : a[a.size/2]</span></pre><p><br></p><p><span style=\"font-size: 30px;\">解答</span></p><pre>n
      = gets.to_i\r\na, b = n.times.map{ gets.strip.split.map(&amp;:to_i) }.transpose\r\na.sort!\r\nb.sort!\r\n#
      a配列の中央値 偶数の時の中央値は真ん中二つの平均値なので注意\r\nent = (n%2).zero? ? (a[n/2 - 1, 2].inject(:+)
      / 2.0).round : a[n/2]\r\n# b配列の中央値\r\nexit = (n%2).zero? ? (b[n/2 - 1, 2].inject(:+)
      / 2.0).round : b[n/2]\r\ncount = 0\r\nn.times do |i|\r\ncount += (ent- a[i]).abs\r\ncount
      += (b[i] - a[i]).abs\r\ncount += (exit - b[i]).abs\r\nend\r\nputs count</pre>"
    - '2019-04-15 07:50:14.559412'
    - '2019-04-15 07:53:46.705265'
  - - 139
    - "[Ruby] AtCodr D - Handstand"
    - "<p><span style=\"font-size: 24px;\">問題atCoder <a href=\"https://atcoder.jp/contests/abc124/tasks/abc124_d\">https://atcoder.jp/contests/abc124/tasks/abc124_d</a></span></p><p><br></p><pre><span
      style=\"font-size: 30px;\">N,K = gets.split.map(&amp;:to_i)\r\nS = gets.chomp\r\nnums
      = []\r\nnum = &quot;1&quot;\r\ncount = 0\r\n\r\nfor i in 0..N-1 do\r\n# 連続数カウント\r\nif
      S[i] == num then\r\ncount+=1\r\nelse\r\n# 連続数メモ&amp;カウントのリセット&amp;カウント数字の切り替え\r\nnums.push(count)\r\ncount
      = 1\r\nnum = num == &quot;1&quot;  ? &quot;0&quot; : &quot;1&quot;\r\nend\r\nend\r\n#
      最後まで行くと、それ以上連続しないのでカウントをメモ\r\nnums.push(count)\r\n# 1..0みたいに0で終わってたら1の連続数0を加える\r\nif
      nums.length % 2 == 0\r\nnums.push(0)\r\nend\r\n\r\nadd = 2 * K + 1\r\nleft =
      0\r\nright = 0\r\ntmp = 0\r\nans = 0\r\n\r\n# 1の連続数は偶数ばんめのインデックス\r\n0.step(nums.length-1,
      2) do |i|\r\n# 連続の一番左インデックス\r\n# 連続の一番右インデックスの一個右\r\nnextleft = i\r\nnextright
      = [i + add, nums.length].min\r\n\r\n# インデックス0から連続の左端手前まで引く\r\nwhile nextleft
      &gt; left\r\ntmp -= nums[left]\r\nleft += 1\r\nend\r\n# インデックス0から連続の右端までたす\r\nwhile
      nextright &gt; right\r\ntmp += nums[right]\r\nright += 1\r\nend\r\nans = tmp
      if tmp &gt; ans  \r\n\r\nend\r\n\r\nputs ans</span></pre><p><br></p><p><br></p>"
    - '2019-04-16 13:19:35.598445'
    - '2019-04-18 07:14:07.346921'
  - - 140
    - Rails5.2 credentials
    - "<p><br></p><p><span style=\"font-size: 30px;\">目的: database.ymlやdatabase.ymlなどの各ファイルで、環境変数として機密情報を隠したいときに使える</span></p><p><br></p><p><strong><span
      style=\"font-size: 24px; color: rgb(251, 160, 38);\">credentials.yml.enc</span></strong><span
      style=\"font-size: 24px; color: rgb(251, 160, 38);\">の内容は暗号化されてるため<strong>credentials.yml.enc</strong>を編集するためには<code>editor=vim
      rails credentials:edit</code>コマンドを実行します。</span></p><p><br></p><pre># credentials.yml.encをviで開く\r\n$
      EDITOR=&quot;vi&quot; bin/rails credentials:edit</pre><p><br></p><p><span style=\"font-size:
      24px;\">credentials.yml.enc</span></p><pre><span style=\"font-size: 24px;\">db:\r\n
      \ host:     xxxxx\r\n  database: xxxxx\r\n  username: xxxxx\r\n  password: xxxxx</span>\r\n<span
      style=\"font-size: 24px;\">aws:\r\n  access_key_id: xxxxxxx\r\n  secret_access_key:
      xxxxxxx\r\nsecret_key_base: xxxxxxx</span></pre><p><br></p><p>config/database.yml</p><pre><span
      style=\"font-size: 30px;\"># 省略\r\nproduction:\r\n  &lt;&lt;: *default\r\n  #
      省略\r\n  host:     &lt;%= Rails.application.credentials.db[:host] %&gt;\r\n  <span
      style=\"color: rgb(226, 80, 65);\"># host:     &lt;%= Rails.application.credentials.dig(:db,
      :host) %&gt;でも良い</span>\r\n  database: &lt;%= Rails.application.credentials.db[:database]
      %&gt;\r\n  <span style=\"color: rgb(226, 80, 65);\"># database:     &lt;%= Rails.application.credentials.dig(:db,
      :database) %&gt;</span>\r\n  username: &lt;%= Rails.application.credentials.db[:username]
      %&gt;\r\n  <span style=\"color: rgb(226, 80, 65);\"># username:     &lt;%= Rails.application.credentials.dig(:db,
      :username) %&gt;</span>\r\n  password: &lt;%= Rails.application.credentials.db[:password]
      %&gt;\r\n  <span style=\"color: rgb(226, 80, 65);\"># password:     &lt;%= Rails.application.credentials.dig(:db,
      :password) %&gt;</span></span></pre><p><br></p><p><span style=\"font-size: 30px;\">config/database.yml</span></p><pre><span
      style=\"font-size: 30px;\"># 省略</span>\r\n<span style=\"font-size: 30px;\">amazon:\r\nservice:
      S3\r\naccess_key_id: <span style=\"color: rgb(226, 80, 65);\">&lt;%= Rails.application.credentials.dig(:aws,
      :access_key_id) %&gt;</span>\r\nsecret_access_key: <span style=\"color: rgb(226,
      80, 65);\">&lt;%= Rails.application.credentials.dig(:aws, :secret_access_key)
      %&gt;</span>\r\nregion: ap-northeast-1\r\nbucket: mybucket</span></pre><p><br></p><p><span
      style=\"font-size: 30px;\">暗号化するときの鍵は <em>RAILS_MASTER_KEY</em> という環境変数に格納</span></p><pre><span
      style=\"font-size: 30px;\">$ export RAILS_MASTER_KEY=&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;\r\n$
      rails c\r\n\r\nirb(main):001:0&gt; Rails.application.credentials.secret_key_base\r\n=&gt;
      xxxxx..</span></pre><p><br></p><p><span style=\"font-size: 30px;\">Editor指定がめんどい...</span></p><pre><span
      style=\"font-size: 30px;\">$ EDITOR=vi bin/rails credentials:edit</span></pre><p><span
      style=\"font-size: 30px;\">.bash_profileなどに<strong>環境変数：EDITOR</strong>を指定しておけば、<code>EDITOR=&quot;xxx&quot;</code>の指定は不要になります。</span></p><pre><span
      style=\"font-size: 30px;\"># .bash_profileに環境変数 EDITOR を設定する\r\n$ echo &#39;export
      EDITOR=&quot;vi&quot;&#39; &gt;&gt; ~/.bash_profile\r\n$ source ~/.bash_profile\r\n$
      echo $EDITOR\r\n  #=&gt; vi\r\n\r\n$ bin/rails credentials:edit</span></pre>"
    - '2019-04-17 09:18:11.45448'
    - '2019-04-17 09:50:12.596595'
  - - 141
    - cakePHP3.6でディレクトリを移行した後に生じた謎エラー
    - "<h1 style=\"text-align: center;\"><span style=\"font-size: 30px;\">作業ディレクトリ変更後の謎エラー</span></h1><p><br></p><p><span
      style=\"font-size: 30px;\">経緯: デスクトップからUSBに訳あって移動していたのだが、久しぶりに必要になりデスクトップに持ってきて開くとエラーが...</span></p><p><br></p><p><br></p><pre><span
      style=\"font-size: 24px;\">$ bin/cake server\r\nfailed to open stream: No such
      file or directory in /作業ディレクトリ/アプリ名/config/bootstrap.php on line 19</span>\r\n<span
      style=\"font-size: 24px;\">PHP Fatal error:  require(): Failed opening required
      &#39;/<span style=\"font-size: 24px;\">作業ディレクトリ/アプリ名</span>/config/paths.php&#39;</span></pre><p><br></p><p><span
      style=\"font-size: 24px;\">え、何もファイルいじってないのになぜにエラーが...</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">原因: なんと、config配下のpaths.phpがなくなっているではないか!なぜ勝手に消えているのだ？！</span></p><p><span
      style=\"font-size: 24px;\">そして、<span style=\"font-size: 24px;\">path.phpを新規作成してサーバーを起動すると、無事に治ったのだ！あジャバ、不思議な不思議なエラーでした<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f613.svg);\">&nbsp;</span>&nbsp;</span></span></p><p><br></p><p><br></p><pre><span
      style=\"font-size: 24px;\"><span style=\"font-size: 24px; color: rgb(44, 130,
      201);\">root_path/config/paths.php</span></span>\r\n<span style=\"font-size:
      24px;\"><span style=\"font-size: 14px;\">&lt;?php\r\n/**\r\n* CakePHP(tm) :
      Rapid Development Framework (https://cakephp.org)\r\n* Copyright (c) Cake Software
      Foundation, Inc. (https://cakefoundation.org)\r\n*\r\n* Licensed under The MIT
      License\r\n* Redistributions of files must retain the above copyright notice.\r\n*\r\n*
      @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\r\n*
      @link          https://cakephp.org CakePHP(tm) Project\r\n* @since         3.0.0\r\n*
      @license       MIT License (https://opensource.org/licenses/mit-license.php)\r\n*/\r\n\r\n/**\r\n*
      Use the DS to separate the directories in other defines\r\n*/\r\nif (!defined(&#39;DS&#39;))
      {\r\ndefine(&#39;DS&#39;, DIRECTORY_SEPARATOR);\r\n}\r\n\r\n/**\r\n* These defines
      should only be edited if you have cake installed in\r\n* a directory layout
      other than the way it is distributed.\r\n* When using custom settings be sure
      to use the DS and do not add a trailing DS.\r\n*/\r\n\r\n/**\r\n* The full path
      to the directory which holds &quot;src&quot;, WITHOUT a trailing DS.\r\n*/\r\ndefine(&#39;ROOT&#39;,
      dirname(__DIR__));\r\n\r\n/**\r\n* The actual directory name for the application
      directory. Normally\r\n* named &#39;src&#39;.\r\n*/\r\ndefine(&#39;APP_DIR&#39;,
      &#39;src&#39;);\r\n\r\n/**\r\n* Path to the application&#39;s directory.\r\n*/\r\ndefine(&#39;APP&#39;,
      ROOT . DS . APP_DIR . DS);\r\n\r\n/**\r\n* Path to the config directory.\r\n*/\r\ndefine(&#39;CONFIG&#39;,
      ROOT . DS . &#39;config&#39; . DS);\r\n\r\n/**\r\n* File path to the webroot
      directory.\r\n*/\r\ndefine(&#39;WWW_ROOT&#39;, ROOT . DS . &#39;webroot&#39;
      . DS);\r\n\r\n/**\r\n* Path to the tests directory.\r\n*/\r\ndefine(&#39;TESTS&#39;,
      ROOT . DS . &#39;tests&#39; . DS);\r\n\r\n/**\r\n* Path to the temporary files
      directory.\r\n*/\r\ndefine(&#39;TMP&#39;, ROOT . DS . &#39;tmp&#39; . DS);\r\n\r\n/**\r\n*
      Path to the logs directory.\r\n*/\r\ndefine(&#39;LOGS&#39;, ROOT . DS . &#39;logs&#39;
      . DS);\r\n\r\n/**\r\n* Path to the cache files directory. It can be shared between
      hosts in a multi-server setup.\r\n*/\r\ndefine(&#39;CACHE&#39;, TMP . &#39;cache&#39;
      . DS);\r\n\r\n/**\r\n* The absolute path to the &quot;cake&quot; directory,
      WITHOUT a trailing DS.\r\n*\r\n* CakePHP should always be installed with composer,
      so look there.\r\n*/\r\ndefine(&#39;CAKE_CORE_INCLUDE_PATH&#39;, ROOT . DS .
      &#39;vendor&#39; . DS . &#39;cakephp&#39; . DS . &#39;cakephp&#39;);\r\n\r\n/**\r\n*
      Path to the cake directory.\r\n*/\r\ndefine(&#39;CORE_PATH&#39;, CAKE_CORE_INCLUDE_PATH
      . DS);\r\ndefine(&#39;CAKE&#39;, CORE_PATH . &#39;src&#39; . DS);</span><span
      style=\"font-size: 24px;\">\r\n</span></span></pre>"
    - '2019-04-20 12:03:05.373043'
    - '2019-04-20 12:16:25.740822'
  - - 142
    - MySQL 5.6から8.0にupgradeした後のエラー
    - "<h1 itemprop=\"headline\">SQLSTATE[HY000] [2054] The server requested authentication
      method unknown to the client</h1><p><br></p><p><span style=\"color: rgb(226,
      80, 65); font-size: 24px;\">MYSQL５.7まで有効なコマンドで、MySQL8では利用できません。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">MacでMysqlを5.6から8.0にupgradeした後、LaravelからMysqlにアクセスできなくなった。</span></p><p><span
      style=\"font-size: 24px;\">ちなみにupgradeのコマンドは、</span></p><pre><span style=\"font-size:
      24px;\">$ brew upgrade mysql\r\n$ mysql_upgrade -u root -p</span></pre><p><br></p><p><br></p><p><br></p><p><span
      style=\"font-size: 36px;\">修理手順1 MySQL８での、ユーザのパスワード変更</span></p><pre><code><span
      style=\"font-size: 24px;\">mysql &gt; USE mysql;\r\nmysql &gt; ALTER USER &#39;root&#39;@&#39;localhost&#39;
      identified BY &#39;your_now_password&#39;;\r\n\r\nQuery OK, 1 row affected (0.04
      sec)\r\nRows matched: 1  Changed: 1  Warnings: 0</span></code></pre><p><br></p><p><br></p><h2>【補足】root
      ユーザのパスワード忘れて、ログイン出来ないとき</h2><pre><code><span spellcheck=\"true\" style=\"font-size:
      24px;\">// 一度終了</span><span style=\"font-size: 24px;\">\r\n$ mysql.server stop\r\n\r\n<span
      spellcheck=\"true\">// セーフモードでの起動、</span>\r\n$ mysqld_safe <span spellcheck=\"true\">--skip-grant-tables
      &amp;</span>\r\n\r\n<span spellcheck=\"true\">// パスワードなしでログインできる</span>\r\n$
      mysql -u root</span></code></pre><p><br></p><p><span style=\"font-size: 24px;\">一度パスワードを空にします。</span></p><pre><code><span
      style=\"font-size: 24px;\"><span spellcheck=\"true\">// root のパスワードを空にする</span>\r\nmysql
      &gt; UPDATE mysql.user SET authentication_string=null WHERE User=&#39;root&#39;;\r\nmysql
      &gt; exit;</span></code></pre><p><br></p><p><span style=\"font-size: 24px;\">その後、MYSQLを再起動。空のパスワードでログインして、上記のALTERコマンドを実行します。</span></p><pre><code><span
      style=\"font-size: 24px;\"><span spellcheck=\"true\">// MySQL再起動（非セーフモード）</span>\r\n$
      mysql.server restart\r\n\r\n<span spellcheck=\"true\">// 空のパスワードでログイン</span>\r\n$
      mysql -u root -p \r\n\r\n<span spellcheck=\"true\">// パスワード設定</span>\r\nmysql
      &gt; USE mysql;\r\nmysql &gt; ALTER USER &#39;root&#39;@&#39;localhost&#39;
      identified BY &#39;remake_password&#39;;\r\n\r\nQuery OK, 1 row affected (0.04
      sec)\r\nRows matched: 1  Changed: 1  Warnings: 0</span></code></pre><p><br></p><h1><a
      href=\"http://www-creators.com/archives/5574\"><br></a></h1><h1>補足】MySQL８のパスワード認証プラグインについて</h1><p><br></p><p><span
      style=\"font-size: 24px;\">MySQLでは、パスワードの認証時に、実行される、「authentication plugin」という仕組みのがあります。</span></p><p><span
      style=\"font-size: 24px;\">例えば上記のコマンドで設定したパスワードについて、下記のコマンドで、確認できます。</span></p><pre><span
      style=\"font-size: 24px;\"><code>mysql&gt; select User, Plugin from mysql.user
      where User = &#39;root&#39;;\r\n+<span spellcheck=\"true\">------+-----------------------+</span>\r\n|
      User | Plugin                |\r\n+<span spellcheck=\"true\">------+-----------------------+</span>\r\n|
      root | caching_sha2_password |\r\n+<span spellcheck=\"true\">------+-----------------------+</span></code><a>Copy</a></span></pre><p><span
      style=\"font-size: 24px;\">下のコマンドで確かめられるように、<span style=\"background-color:
      rgb(247, 218, 100);\">MySQL8　からは、「caching_sha2_password」がデフォルト</span>となったようなのですが・・、</span></p><pre><span
      style=\"font-size: 24px;\"><code>mysql &gt; use mysql;\r\nmysql &gt; show variables
      like &#39;default_authentication_plugin&#39;;\r\n+<span spellcheck=\"true\">-------------------------------+-----------------------+</span>\r\n|
      Variable_name                 | Value                 |\r\n+<span spellcheck=\"true\">-------------------------------+-----------------------+</span>\r\n|
      default_authentication_plugin | caching_sha2_password |\r\n+<span spellcheck=\"true\">-------------------------------+-----------------------+</span></code><a>Copy</a></span></pre><p><span
      style=\"font-size: 24px; background-color: rgb(247, 218, 100);\">mysqlを利用するクライアントソフトウェア（例えば、PhpMyAdminなど）では、この認証方法をサポートしていないため、エラーとなりログイン出来ないことがあるようです。</span></p><h1><a
      href=\"http://www-creators.com/archives/5574\"></a></h1><p><span style=\"font-size:
      24px; color: rgb(0, 0, 0);\">パスワードを下記のコマンドで設定すると、回避できます。</span></p><p><br></p><pre><span
      style=\"font-size: 24px;\">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39;
      identified WITH mysql_native_password BY &#39;your_now_password&#39;;\r\nQuery
      OK, 0 rows affected (0.01 sec)</span></pre><p>同様に「my.cnf」にも書き込んでおきます。これでデフォルトの認証プラグインを変更できましたので、これ以降の新規ユーザ作成時は、デフォルトで、mysql_native_password　が使用されます。</p><p><span
      style=\"font-size: 36px;\">修理手順2 my.cnfの設定を変更する</span></p><pre><span style=\"font-size:
      24px;\">$ mysql --help | grep my.cnf\r\n                      order of preference,
      my.cnf, $MYSQL_TCP_PORT,\r\n/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf
      ~/.my.cnf</span></pre><p><span style=\"font-size: 24px;\">左から順に存在するファイルを確認していく</span></p><pre><span
      style=\"font-size: 24px;\">$ ls -la /usr/local/etc/my.cnf\r\nls: /etc/my.cnf:
      No such file or directory\r\n\r\n$ ls -la /usr/local/etc/my.cnf\r\nls: /etc/mysql/my.cnf:
      No such file or directory\r\n\r\n$ ls -la /usr/local/etc/my.cnf\r\n-rw-r--r--@
      1 nakajitatsuya  admin  222  4 20 21:57 /usr/local/etc/my.cnf</span></pre><p><span
      style=\"font-size: 24px;\">/usr/local/etc/my.cnfが存在しているので、<span style=\"font-size:
      24px;\">[mysqld]下</span>に、<br>default_authentication_plugin = mysql_native_password<br>を加える</span></p><p><span
      style=\"font-size: 24px;\"><br></span></p><p><span style=\"font-size: 24px;\">conf.d/my.conf</span></p><pre
      data-lang=\"\" data-unlink=\"\"><span style=\"font-size: 24px;\">$ vi /usr/local/etc/my.cnf</span>\r\n\r\n<span
      style=\"font-size: 24px;\">[mysqld]\r\n# 省略\r\n<span style=\"color: rgb(226,
      80, 65);\">default_authentication_plugin = mysql_native_password</span> #&lt;--追加</span></pre><p><span
      style=\"font-size: 24px;\"><br></span></p><pre><span style=\"font-size: 24px;\">$
      mysql.server restart</span></pre><p><span style=\"font-size: 24px;\">これで完了</span></p><p><br></p><p><span
      style=\"font-size: 48px;\">はあ〜〜お疲れ様でした<span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f605.svg);\">&nbsp;</span><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f604.svg);\">&nbsp;</span>
      <span class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background:
      url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f602.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p><p><span
      style=\"font-size: 48px;\"><a href=\"http://www-creators.com/archives/5574\"></a></span><span
      style=\"font-size: 10px;\"><a href=\"http://www-creators.com/archives/5574\">参考文献</a></span></p><p><br></p>"
    - '2019-04-20 13:04:54.11034'
    - '2019-04-20 13:53:33.155435'
  - - 143
    - Rubyの配列で使えるメソッド、二次元配列の使い方
    - "<h1 itemprop=\"headline\"><span style=\"font-size: 36px;\">Rubyの配列で使えるメソッド、二次元配列の使い方</span></h1><section
      itemprop=\"articleBody\"><span style=\"font-size: 36px;\"><h3><br></h3><h3>配列の数、要素の長さ</h3>index.rb<pre>ary
      = [&quot;aaaaa&quot;,&quot;aa&quot;,&quot;aaa&quot;]\r\np ary.length\r\n#=&gt;
      3 #配列の要素数\r\n\r\np ary[0].length\r\n#=&gt; 5 #配列の一番目にある文字の長さ</pre><h3>要素の特定、検索、場所</h3>index.rb<pre>#include?は要素の皆無を調べる\r\nary
      = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\r\np ary.include?(&quot;a&quot;)\r\n#=&gt;true\r\np
      ary.include?(&quot;d&quot;)\r\n#=&gt;false\r\n\r\n#findは要素を探して取り出す\r\nary =
      [1,3,6,8]\r\np ary.find{|n| n % 3 == 0 }\r\n#=&gt; 3 #3で割り切れるものを一個しか返さない\r\n\r\np
      ary.find_all{|n| n % 3 == 0 }\r\n#0&gt; [3,6] #3で割り切れるもの全て返す\r\n\r\nary = [&quot;a&quot;,&quot;ab&quot;,&quot;cc&quot;,&quot;ac&quot;,&quot;ds&quot;]\r\np
      ary.find_all{|n| n.include?(&quot;a&quot;)}\r\n#=&gt;[&quot;a&quot;, &quot;ab&quot;,
      &quot;ac&quot;] #aと含まれているものを返す\r\n\r\n#indexは要素の位置を教えてくれる\r\nary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\r\np
      ary.index(&quot;b&quot;)\r\n#=&gt; 1</pre><h3>要素を結合させる</h3><pre>ary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\r\np
      ary.join\r\n#=&gt; &quot;abc&quot; #配列の中にある要素を全て結合\r\n\r\np ary.join(&quot;,&quot;)\r\n#=&gt;
      &quot;a,b,c&quot; #引数を指定するとそれを区切り文字とする</pre><h3>要素を順番に取り出して使う</h3><pre>ary =
      [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\r\n\r\nary.each do |n|\r\n  puts
      n\r\nend\r\n#=&gt;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;と順番に出力される</pre><p>参考にしたサイト一覧<br><a
      href=\"http://www.sejuku.net/blog/11843#index\" rel=\"nofollow noopener\" target=\"_blank\"></a><a
      href=\"http://www.sejuku.net/blog/11843#index\">http://www.sejuku.net/blog/11843#index</a><br><a
      href=\"http://ref.xaio.jp/ruby\" rel=\"nofollow noopener\" target=\"_blank\">http://ref.xaio.jp/ruby</a></p><h1>多次元配列</h1><h2>多次元配列の作り方</h2>index.rb<pre>ary
      = Array.new(3)\r\np ary\r\n#=&gt; [nil,nil,nil] \r\n\r\nary = Array.new(3, Array.new(3,
      &quot;a&quot;) )\r\n#=&gt;[[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]]\r\n#これで2次元配列ができる\r\n\r\nary
      = Array.new(3, Array.new(3, &quot;a&quot;) )\r\n#=&gt;[[&quot;a&quot;, &quot;a&quot;,
      &quot;a&quot;], [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;], [&quot;a&quot;,
      &quot;a&quot;, &quot;a&quot;]]\r\n#第二引数に要素を指定できる</pre><h2>要素の追加</h2>index.rb<pre>ary
      = Array.new(3, Array.new(3, &quot;a&quot;) )\r\nary[0][0] = 1\r\np ary\r\n#=&gt;
      [[1, &quot;a&quot;, &quot;a&quot;], [1, &quot;a&quot;, &quot;a&quot;], [1, &quot;a&quot;,
      &quot;a&quot;]]\r\n\r\nary = Array.new(3).map{Array.new(3,0)}\r\nary[0][0] =
      1\r\np ary\r\n#=&gt; [[1, &quot;a&quot;, &quot;a&quot;], [&quot;a&quot;, &quot;a&quot;,
      &quot;a&quot;], [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;]]\r\n\r\n</pre><blockquote><p>上記の原因は全て同じオブジェクトとして認識されているため<br>そこでmapメソッドを使って別々のオブジェクトとして初期化</p></blockquote>index.rb<pre>ary
      = Array.new(3, Array.new(3, &quot;a&quot;) )\r\np ary.map(&amp;:object_id) #idを調べる\r\n#=&gt;[70167967248120,
      70167967248120, 70167967248120]</pre><h5>同じobject_idが出るためmapで別々のオブジェクトに作り変える</h5>index.rb<pre>ary
      = Array.new(3).map{Array.new(3,0)}\r\np ary(&amp;:object_id)\r\n#=&gt; [70190754844300,
      70190754844200, 70190754844140]</pre><p>下記のサイトを見ておお！ってなりました。<br><a href=\"http://simanman.hatenablog.com/entry/2013/06/24/200306\"
      rel=\"nofollow noopener\" target=\"_blank\">http://simanman.hatenablog.com/entry/2013/06/24/200306</a></p><p><br><br>ちなみにmap抜かしても同義になるので、そこはまだ謎です。</p></span><pre><span
      style=\"font-size: 36px;\">ary = Array.new(3){Array.new(3,0)}\r\np ary.map(&amp;:object_id)\r\n#=&gt;
      [70322091142940, 70322091142840, 70322091142800]</span></pre></section>"
    - '2019-04-26 04:48:06.407622'
    - '2019-04-26 04:49:10.267062'
  - - 144
    - AWS RDS
    - "<h1 style=\"text-align: center;\"><span style=\"font-size: 60px;\">初めてのRDS</span></h1><p><br></p><p><span
      style=\"font-size: 30px;\">RDS:</span><span style=\"font-size: 24px;\">&nbsp;クラウド上で提供するRDBMSサービスRDBMS（アールディービーエムエス）とは、リレーショナルデータベースを管理するソフトウェアの総称です。Oracle,MySQL,PostgreSQLといったようなもの</span></p><p><br></p><p><span
      style=\"font-size: 24px;\"><strong>Multi-AZ機能:&nbsp;</strong>AWS側が自動で親機と子機のデータの同期を取ってくれ、さらに、フェイルオーバー機能を使い、親機に障害があった際に自動で子機に切り替えが行われます。</span></p><p><br></p><p><span
      style=\"font-size: 24px;\">前提: EC2インスタンスの作成が済んでいて、ssh接続ができる状態</span></p><p><br></p><h1>ステップ
      1: RDS DB インスタンスの作成</h1><p><br></p><p><strong>インスタンスを起動するには</strong></p><ol><li><p>AWS
      マネジメントコンソールにサインインし、Amazon RDS コンソール (<a href=\"https://console.aws.amazon.com/rds/\"
      target=\"_blank\"></a><a href=\"https://console.aws.amazon.com/rds/\">https://console.aws.amazon.com/rds/</a>)
      を開きます。</p></li><li><p>AWS マネジメントコンソール の右上で、DB インスタンスを作成する AWS リージョンを選択します。</p></li><li><p>ナビゲーションペインで、[<strong>データベース</strong>]
      を選択します。</p><p>ナビゲーションペインが閉じられている場合は、左上隅のメニューアイコンを選択して開きます。</p></li><li><p>[<strong>Create
      database (データベースの作成)</strong>] を選択して、[<strong>エンジンの選択</strong>] ページを開きます。</p></li><li><p>以下に示すように、[<strong>Select
      engine</strong>] で [<strong>MySQL</strong>] を選択し、続いて [<strong>Next</strong>]
      を選択します。</p></li></ol><p><br></p><p>(*注意 amazon auoraは有料です、無料プランで試す場合、対応しているものを選ぶ)</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556257755158-enjine.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>6.
      [<strong>Choose use case</strong>] ページで、[<strong>Dev/Test &ndash; MySQL</strong>]、[<strong>Next</strong>]
      の順に選択します。</p><p>7. 次に示す [<strong>Specify DB details</strong>] ページで、次の値を設定します。</p><ul
      type=\"disc\"><li><p><strong>License model:</strong> デフォルト値を使用します。</p></li><li><p><strong>DB
      engine version:</strong> デフォルト値を使用します。</p></li><li><p><strong>DB インスタンスクラス:</strong>\r\n<code>db.t2.small</code></p></li><li><p><strong>マルチ
      AZ 配置:</strong>\r\n<code>No (ここは冒頭で説明しましたが、この機能は有料)</code></p></li><li><p><strong>ストレージタイプ:</strong>\r\n<code>General
      Purpose (SSD)</code></p></li><li><p><strong>ストレージ割り当て:</strong>\r\n<code>20
      GiB</code></p></li><li><p><strong>DB インスタンス識別子:</strong>\r\n<code>tutorial-db-instance</code></p></li><li><p><strong>マスターユーザー名:</strong>\r\n<code>root</code></p></li><li><p><strong>Master
      password:</strong> パスワードを選択します。</p></li><li><p><strong>Confirm password:</strong>
      パスワードを再入力します。</p></li></ul><p><br><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556258115275-db_setting.png\"
      style=\"width: 489px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>8.
      [<strong>Next</strong>] を選択し、[<strong>Configure advanced settings</strong>]
      ページに以下の値を設定します。</p><ul type=\"disc\"><li><p>[<strong>Virtual Private Cloud (VPC):</strong>]
      EC2と同じVPCを選択</p><p>注記</p><p>VPC の各サブネットは異なるアベイラビリティーゾーンに存在している必要があります。</p></li><li><p>[<strong>Subnet
      group</strong>] (サブネットグループ): 「<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateVPC.html#CHAP_Tutorials.WebServerDB.CreateVPC.DBSubnetGroup\">DB
      サブネットグループを作成する</a>」で作成する <code>tutorial-db-subnet-group</code> のような、<span style=\"color:
      rgb(184, 49, 47); font-size: 24px;\">VPC 用の DB サブネットグループ</span></p></li><li><p>[<strong>パブリックアクセシビリティ</strong>]:
      [<strong>いいえ</strong>]</p></li><li><p>[<strong>アベイラビリティーゾーン</strong>]: [<strong>指定なし</strong>]</p></li><li><p>[<strong>VPC
      セキュリティグループ</strong>]: プライベートアクセス用に設定した既存の VPC セキュリティグループを選択します。これには、「<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateVPC.html#CHAP_Tutorials.WebServerDB.CreateVPC.SecurityGroupDB\">&nbsp;プライベート
      Amazon RDS DB インスタンスの VPC セキュリティグループの作成</a>」で作成する <code>tutorial-db-securitygroup</code>
      などが該当します。</p><p>他のセキュリティグループ (デフォルトのセキュリティグループなど) は、それぞれの対応する [<strong>X</strong>]
      を選択して削除します。</p></li><li><p><strong>データベース名:</strong>\r\n<code>sample</code></p></li></ul><p>その他のオプションについては、デフォルト設定のままにしておきます。</p><p><br><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556258548043-rds_setting.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>9.
      Amazon RDS MySQL DB インスタンスを作成するには、[<strong>Create database (データベースの作成)</strong>]
      を選択します。</p><p>10. 次のページで、[<strong>View DB instances details</strong>] を選択して
      RDS MySQL DB インスタンスを表示します。</p><p>11. 新しい DB インスタンスの [<strong>DB インスタンスのステータス&nbsp;</strong>]
      が [<strong>利用可能</strong>] と表示されるまで待ちます。次に示す [<strong>Connect</strong>] セクションにスクロールします。</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556258873377-Tutorial_WebServer_10.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>DB インスタンスのエンドポイントとポートを書きとめます。この情報を使用して、ウェブサーバーを
      RDS DB インスタンスに接続します。</p><p><br></p><p>あとは、EC2セキュリティグループのインバウンド、アウトバウンド設定にRDSセキュリティグループidを追加</p><p>RDSセキュリティグループのインバウンド、アウトバウンド設定にEC2セキュリティグループidを追加</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556260069210-rds_sec.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556260286884-outbaund.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556260569115-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-26+15.32.27.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1556260693491-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-04-26+15.36.52.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>サーバーにmysqlを入れる</p><pre>$
      yum list installed | grep mysql     <span style=\"color: rgb(163, 143, 132);\">mysqlがインストールされているか確認</span>\r\n$
      sudo yum install mysql</pre><p>接続する</p><pre>sshでec2にログイン\r\n$[tatsuya ~] mysql
      -h エンドポインt -P ポート -u DBインスタンスで設定したマスターユーザー -p\r\nEnter password: (DBインスタンスで設定したパスワードを打ち込む)\r\n\r\n<strong>Welcome
      to the MariaDB monitor.  Commands end with ; or \\g.</strong>\r\n<strong>Your
      MySQL connection id is 37</strong>\r\n<strong>Server version: 5.6.40-log Source
      distribution</strong>\r\n\r\n\r\n<strong>Copyright (c) 2000, 2018, Oracle, MariaDB
      Corporation Ab and others.</strong>\r\n\r\n\r\n<strong>Type &#39;help;&#39;
      or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.</strong>\r\n\r\n\r\nMySQL
      [(none)]&gt; </pre><p><span style=\"font-size: 96px;\">完璧！<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f624.svg);\">&nbsp;</span>&nbsp;</span></p><p>ちなみに接続エラーが出た人はセキュリティグループにMySQLの許可を正しく書き込めてないので、RDSに設定したセキュリティグループがMySQL許可を書き込んだセキュリティグループと同じか,きちんとec2側のセキュリティグループにもMySQL許可を書き込んだかもう一度確認してください。</p><p><br></p><section
      itemprop=\"articleBody\"><h2><span style=\"color: rgb(163, 143, 132);\">番外編：MySQLアンインストール方法</span></h2><h3><span
      style=\"color: rgb(163, 143, 132);\">yumでアンインストール処理を実施</span></h3><pre><span
      style=\"color: rgb(163, 143, 132);\">$ yum remove mysql</span></pre><h3><span
      style=\"color: rgb(163, 143, 132);\">データが入っているディレクトリを削除</span></h3><pre><span
      style=\"color: rgb(163, 143, 132);\">$ rm -rf /var/lib/mysql</span></pre></section><p><br></p><p><br></p><p><br></p>"
    - '2019-04-26 05:38:38.287188'
    - '2019-04-26 07:01:09.097883'
  - - 145
    - Python環境構築(python + pip + pyenv)
    - "<h1 style=\"text-align: center;\"><span style=\"font-size: 48px;\">Python環境構築</span></h1><p><br></p><p><span
      style=\"font-size: 36px;\">やること: pythonインストール &amp; pipインストール(pythonのパッケージ管理ツール)
      &amp; pyenvインストール(pythonのバージョンを簡単に切り替えることができるようにしてくれるツール)</span></p><p><span
      style=\"font-size: 30px;\">&nbsp;</span></p><p><span style=\"font-size: 36px;\">1.pythonインストール</span></p><pre><span
      style=\"font-size: 24px;\">$sudo brew install python</span></pre><p><br></p><p><span
      style=\"font-size: 36px;\">2. pipインストール</span></p><p><span style=\"font-size:
      24px;\">Python のパッケージのインストーラーを使用する</span></p><pre><span style=\"font-size: 24px;\">$sudo
      easy_install pip</span></pre><p><span style=\"color: rgb(44, 130, 201);\"><br></span></p><p><span
      style=\"color: rgb(44, 130, 201); font-size: 18px;\">pythonはバージョン2系と3系があり, 2系を動かすときは
      pythonコマンド($ python sample.py や $ python など)を 3系を動かすときはpython3コマンド($ python3
      sample.py や $ python3 など) とかき分けねばならず、気色が悪いので、pyenvをインストールして初めからバージョン指定をしてしまおうというわけです(いつでもバージョンを切り替えられます)</span></p><p><br></p><h1
      itemprop=\"headline\">3.pyenvのインストール</h1><section itemprop=\"articleBody\"><h2><br></h2><h2>pyenvとは</h2><p>pythonのバージョンを簡単に切り替えることができるようにしてくれるツールです。２系列と３系列との切り替えに便利です。また、ディレクトリごとにpythonのバージョンを切り替えることができます。</p><h2>pyenvのインストール</h2><p>ではまず、
      pyenvをインストールしましょう。gitから持ってくる場合上のコマンドを、brewが使える場合は下のコマンドを利用してもできます。</p><pre>$
      brew install pyenv</pre><h2>bash_profileの編集</h2><p>次にpyenvのパスを通すためにbash_profileを編集します。</p><pre>$
      echo &#39;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#39; &gt;&gt; ~/.bash_profile\r\n$
      echo &#39;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#39; &gt;&gt; ~/.bash_profile\r\n$
      echo &#39;eval &quot;$(pyenv init -)&quot;&#39; &gt;&gt; ~/.bash_profile</pre><p>またはvimを使ってbash_profileに直書きしても構いません。</p><pre>$
      vim ~/.bash_profile\r\nexport PYENV_ROOT=&quot;$HOME/.pyenv&quot;\r\nexport
      PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;\r\neval &quot;$(pyenv init -)&quot;</pre><p>最後にbash_profileの保存を適用します</p><pre>$
      source ~/.bash_profile</pre><h2>pyenvでpythonをインストール</h2><p>バージョン切り替えを体験するために２つほどバージョンが違うpythonをインストールしてましょう。インストールできるか確認をしたければ３つめのコマンドを利用すると一覧が確認できます。</p><pre>$
      pyenv install 2.7.15\r\n$ pyenv install 3.7.3\r\n$ pyenv install --list　 </pre><h2>pyenvでバージョンを切り替えてみる</h2><p>バージョンの切り替えをしてみます。localの場合は今いるディレクトリに、globalの場合は全体に反映されます。</p><pre>$
      pyenv local 2.7.15\r\n$ pyenv global 3.7.3</pre><p>ここできちんと変更が反映されているか確認するためpythonのバージョンを調べます。</p><pre>$
      python --version\r\nPython 2.7.15</pre><p>このように変更が反映されていれば問題ありません。<br>反映されていなければ下の記事をお試しください。</p><h2>pyenvでのpythonのバージョンがpython
      -vと違う時の対処法</h2><pre>$ pyenv versions\r\n  system\r\n* 2.7.15 \r\n  3.7.3\r\n$
      python --version                                                                                             \r\nPython
      3.7.3 (pyenvが適用されてない)</pre><p>その場合、whichコマンドでパスを表示してみてください。</p><pre>$ which
      python\r\n<span style=\"color: rgb(226, 80, 65);\">/usr/bin</span></pre><p>このようになっていたら、</p><p>pyenvがインストールされている/usr/localよりPythonがデフォルトでインストールされている/usr/binの優先度が高くなっているので、以下のように編集してください。</p><pre>$
      vim /etc/paths\r\n/usr/local/bin\r\n/usr/bin\r\n/bin\r\n/usr/local/sbin\r\n/usr/sbin\r\n/sbin</pre><p><span
      style=\"font-size: 24px; color: rgb(44, 130, 201);\">ここで、順番大事です！優先度が高いものが上に来るようにしており、パスがusr/binよりも/usr/localを優先されるようになります</span><span
      style=\"color: rgb(44, 130, 201);\">。</span></p><p>確認のためwhichコマンドをもう一度入力すると</p><pre>$
      which python\r\n<span style=\"color: rgb(226, 80, 65);\">/usr/local/bin/pyenv</span></pre><p>のようになるはずです。<br>最後にもう一度pyenvのpythonのバージョンがpythonのバージョンと一致するか確かめてみてください。</p></section><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1557209882746-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-05-07+15.17.02.png\"
      style=\"width: 819px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><span style=\"font-size:
      30px;\">python3 って打たなくてもバージョン3が起動するようになった！！</span></p><p><br></p><p><br></p>"
    - '2019-05-07 05:54:01.709739'
    - '2019-05-07 06:24:53.781135'
  - - 146
    - python matplotlibのインストール
    - "<p style=\"text-align: center;\"><span style=\"font-size: 36px;\">python matplotlibのインストール</span></p><p
      style=\"text-align: center;\"><br></p><p><strong><span style=\"font-size: 30px;\">初めに:
      Matplotlib</span></strong><span style=\"font-size: 30px;\">は、プログラミング言語<a href=\"https://ja.wikipedia.org/wiki/Python\"
      title=\"Python\">Python</a>およびその科学計算用ライブラリ<a href=\"https://ja.wikipedia.org/wiki/NumPy\"
      title=\"NumPy\">NumPy</a>のためのグラフ描画ライブラリである。(wikipedia)</span></p><p><br></p><p><span
      style=\"font-size: 30px;\">手順1. matplotlibのインストール</span></p><pre>pip install
      matplotlib</pre><p><br></p><p><span style=\"font-size: 30px;\">手順2. 設定ファイル(=matplotlibrc)を編集する(これしないと動かない)</span></p><pre>$
      python\r\nPython 3.7.3 (default, May  7 2019, 14:28:48) \r\n[Clang 9.1.0 (clang-902.0.39.1)]
      on darwin\r\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot;
      or &quot;license&quot; for more information.\r\n&gt;&gt;&gt; <span style=\"color:
      rgb(44, 130, 201);\">import matplotlib as mpl</span>\r\n&gt;&gt;&gt; <span style=\"color:
      rgb(44, 130, 201);\">print(mpl.get_configdir()) </span><span style=\"color:
      rgb(163, 143, 132);\">Matplotlib設定保存用ディレクトリ確認</span>\r\n~/.matplotlib\r\n&gt;&gt;&gt;
      <span style=\"color: rgb(44, 130, 201);\">print(mpl.matplotlib_fname()) <span
      style=\"color: rgb(163, 143, 132);\">適用されているmatplotlibrcの確認</span></span>\r\n<span
      style=\"background-color: rgb(247, 218, 100);\">~/matplotlib/mpl-data/matplotlibrc</span>\r\n&gt;&gt;&gt;</pre><p><br></p><p>なるほど！このmpl-dataってディレクトリに「設定ファイル(=matplotlibrc)」が入っているのですね！！！</p><pre>$
      open matplotlibrc</pre><p>すると、ついに設定ファイル（.txt）が姿を表します！<br>こんな感じ</p><pre>### MATPLOTLIBRC
      FORMAT\r\n\r\n# This is a sample matplotlib configuration file - you can find
      a copy\r\n# of it on your system in\r\n# site-packages/matplotlib/mpl-data/matplotlibrc.
      \ If you edit it\r\n# there, please note that it will be overwritten in your
      next install.\r\n# If you want to keep a permanent local copy that will not
      be\r\n# overwritten, place it in the following location:\r\n# unix/linux:\r\n#
      \    $HOME/.config/matplotlib/matplotlibrc or\r\n#     $XDG_CONFIG_HOME/matplotlib/matplotlibrc
      (if $XDG_CONFIG_HOME is set)\r\n# other platforms:\r\n#     $HOME/.matplotlib/matplotlibrc\r\n#\r\n#
      See http://matplotlib.org/users/customizing.html#the-matplotlibrc-file for\r\n#
      more details on the paths which are checked for the configuration file.\r\n#\r\n#
      This file is best viewed in a editor which supports python mode\r\n# syntax
      highlighting. Blank lines, or lines starting with a comment\r\n# symbol, are
      ignored, as are trailing comments.  Other lines must\r\n# have the format\r\n#
      \   key : val # optional comment\r\n#\r\n# Colors: for the color values below,
      you can either use - a\r\n# matplotlib color string, such as r, k, or b - an
      rgb tuple, such as\r\n# (1.0, 0.5, 0.0) - a hex string, such as ff00ff - a scalar\r\n#
      grayscale intensity such as 0.75 - a legal html color name, e.g., red,\r\n#
      blue, darkslategray\r\n\r\n#### CONFIGURATION BEGINS HERE\r\n\r\n# The default
      backend; one of GTK GTKAgg GTKCairo GTK3Agg GTK3Cairo\r\n# MacOSX Qt4Agg Qt5Agg
      TkAgg WX WXAgg Agg Cairo GDK PS PDF SVG\r\n# Template.\r\n# You can also deploy
      your own backend outside of matplotlib by\r\n# referring to the module name
      (which must be in the PYTHONPATH) as\r\n# &#39;module://my_backend&#39;.\r\n<span
      style=\"background-color: rgb(247, 218, 100);\">backend      : </span><span
      style=\"font-size: 12px; color: rgb(44, 130, 201); background-color: rgb(247,
      218, 100);\">macos</span>\r\n\r\n...</pre><p><span style=\"font-size: 30px;\">この最後の行の　<br>backend
      : <span style=\"color: rgb(44, 130, 201); background-color: rgb(247, 218, 100);\">macos</span><br>を、</span></p><pre>backend
      : <span style=\"background-color: rgb(247, 218, 100);\">TkAgg</span></pre><p>にしてあげる。</p><p><span
      style=\"font-size: 36px;\">これで完了!!<span class=\"fr-emoticon fr-deletable fr-emoticon-img\"
      style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f602.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p><p><br></p>"
    - '2019-05-07 07:59:20.212672'
    - '2019-05-07 08:31:00.447258'
  - - 147
    - python numpyインストール
    - "<p style=\"text-align: center;\"><span style=\"font-size: 36px;\">python numpyインストール</span></p><p
      style=\"text-align: center;\"><br></p><p><span style=\"font-size: 30px;\">numpyとは...</span><span
      style=\"font-size: 14px;\">&nbsp;<strong>NumPy</strong>は、プログラミング言語<a href=\"https://ja.wikipedia.org/wiki/Python\"
      title=\"Python\">Python</a>において数値計算を効率的に行うための拡張モジュールである。</span></p><p><span
      style=\"font-size: 14px;\">効率的な数値計算を行うための型付きの多次元<a href=\"https://ja.wikipedia.org/wiki/%E9%85%8D%E5%88%97\"
      title=\"配列\">配列</a>（例えばベクトルや行列などを表現できる）のサポートをPythonに加えるとともに、それらを操作するための大規模な<a
      href=\"https://ja.wikipedia.org/wiki/%E9%AB%98%E7%B4%9A%E8%A8%80%E8%AA%9E\"
      title=\"高級言語\">高水準</a>の<a href=\"https://ja.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6\"
      title=\"数学\">数学</a><a href=\"https://ja.wikipedia.org/wiki/%E9%96%A2%E6%95%B0_(%E6%95%B0%E5%AD%A6)\"
      title=\"関数 (数学)\">関数</a>ライブラリを提供する。</span></p><p><span style=\"font-size: 14px;\"><a
      href=\"https://ja.wikipedia.org/wiki/Python\" title=\"Python\">Python</a>は<a
      href=\"https://ja.wikipedia.org/wiki/%E5%8B%95%E7%9A%84%E5%9E%8B%E4%BB%98%E3%81%91\"
      title=\"\">動的型付け言語</a>(プログラムの実行よりも前にあらかじめ型を決めるということをせず、実行時の実際の値によって決める<a href=\"https://ja.wikipedia.org/wiki/%E5%9E%8B%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0\"
      title=\"型システム\">型システム</a>の性質のこと)であるため、プログラムを柔軟に記述できる一方で、純粋にPythonのみを使って<a href=\"https://ja.wikipedia.org/wiki/%E6%95%B0%E5%80%A4%E8%A8%88%E7%AE%97\"
      title=\"数値計算\">数値計算</a>を行うと、ほとんどの場合<a href=\"https://ja.wikipedia.org/wiki/C%E8%A8%80%E8%AA%9E\"
      title=\"C言語\">C言語</a>や<a href=\"https://ja.wikipedia.org/wiki/Java\" title=\"Java\">Java</a>などの静的型付き言語で書いたコードに比べて大幅に計算時間がかかる。そこでNumPyは、Pythonに対して型付きの多次元配列オブジェクト
      (<code>numpy.ndarray</code>) と、その配列に対する多数の演算関数や操作関数を提供することにより、この問題を解決しようとしている。NumPyの内部はC言語
      (およびFortran)によって実装されているため非常に高速に動作する。(wikipedia)</span></p><p><br></p><pre>python
      -m pip install numpy</pre><p><br></p><pre>$ python\r\nPython 3.7.3 (default,
      May  7 2019, 14:28:48) \r\n[Clang 9.1.0 (clang-902.0.39.1)] on darwin\r\nType
      &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot;
      for more information.\r\n&gt;&gt;&gt; import numpy as np\r\n&gt;&gt;&gt; np.random.seed(1)\r\n&gt;&gt;&gt; \r\n&gt;&gt;&gt;
      x = np.arange(10)\r\n&gt;&gt;&gt; y = np.random.randint(1, 100, 10)\r\n&gt;&gt;&gt;
      print(x)\r\n[0 1 2 3 4 5 6 7 8 9]\r\n&gt;&gt;&gt; print(y)\r\n[38 13 73 10 76
       6 80 65 17  2]\r\n&gt;&gt;&gt; \r\n<span style=\"color: rgb(163, 143, 132);\">matplotlibをインストールしてたら以下もやってみると面白い</span>\r\n&gt;&gt;&gt;
      import matplotlib.pyplot as plt\r\n&gt;&gt;&gt; plt.plot(x, y)\r\n[&lt;matplotlib.lines.Line2D
      object at 0x11408fba8&gt;]\r\n&gt;&gt;&gt; plt.show()</pre><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1557219955741-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-05-07+18.05.39.png\"
      style=\"width: 1030px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p><br></p>"
    - '2019-05-07 09:04:53.546952'
    - '2019-05-07 09:13:24.421143'
  - - 148
    - ゼロから作る Deep Learning 第1章
    - "<h1 style=\"text-align: center;\">『ゼロから作る Deep Learning』第1章 勉強メモ</h1><p><code>numpy
      高速で計算</code></p><p><code>matplotlib データのプロット</code></p><p><br></p><pre><span
      style=\"font-size: 24px;\"># coding: utf-8\r\nimport numpy as np\r\nimport matplotlib.pyplot
      as plt\r\n\r\n<span style=\"color: rgb(163, 143, 132);\"># データの作成</span>\r\nx
      = np.arange(0, 6, 0.1) <span style=\"color: rgb(163, 143, 132);\"># 0から6まで0.1刻みで生成0,
      0.1, 0.2, ... 5.9</span>\r\ny1 = np.sin(x)\r\ny2 = np.cos(x)\r\n\r\n<span style=\"color:
      rgb(163, 143, 132);\"># グラフの描画</span>\r\nplt.plot(x, y1, label=&quot;sin&quot;)\r\nplt.plot(x,
      y2, linestyle = &quot;--&quot;, label=&quot;cos&quot;)\r\nplt.xlabel(&quot;x&quot;)
      <span style=\"color: rgb(163, 143, 132);\"># x軸のラベル</span>\r\nplt.ylabel(&quot;y&quot;)
      <span style=\"color: rgb(163, 143, 132);\"># y軸のラベル</span>\r\nplt.title(&#39;sin
      &amp; cos&#39;)\r\nplt.legend()\r\nplt.show()</span></pre><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1557382401192-Figure_1.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-05-09 06:03:24.348408'
    - '2019-08-18 13:35:47.363614'
  - - 149
    - ゼロから作る Deep Learning 第2章
    - "<h1 style=\"text-align: center;\">ゼロから作る Deep Learning』第2章 勉強メモ</h1><p><br></p><pre><span
      style=\"font-size: 24px;\"># coding: utf-8\r\nimport numpy as np\r\n\r\n\r\ndef
      AND(x1, x2):\r\nx = np.array([x1, x2])\r\nw = np.array([0.5, 0.5])\r\nb = -0.7\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># { |w * x|インデックスごとで掛け算 [0.5, 0.5] * [x1,
      x2] =&gt; [0.5 * x1, 0.5 * x2] }\r\n# { |np.sum(w*x)| <span style=\"font-size:
      24px;\"><span style=\"color: rgb(163, 143, 132);\">w*xの</span></span>各要素を全てたす
      (0.5 * x1) + (0.5 * x2) }</span>\r\ntmp = <span style=\"color: rgb(226, 80,
      65);\">np.sum(w*x)</span> + b\r\nif tmp &lt;= 0:\r\nreturn 0\r\nelse:\r\nreturn
      1\r\n\r\nif __name__ == &#39;__main__&#39;:\r\nfor xs in [(0, 0), (1, 0), (0,
      1), (1, 1)]:\r\ny = AND(xs[0], xs[1])\r\nprint(str(xs) + &quot; -&gt; &quot;
      + str(y))</span></pre><p>実行結果</p><p><code>(0, 0) -&gt; 0</code></p><p><code>(1,
      0) -&gt; 0</code></p><p><code>(0, 1) -&gt; 0</code></p><p><code>(1, 1) -&gt;
      1</code></p><p><br></p><p><span style=\"font-size: 24px;\">＊ if __name__ ==
      &#39;__main__&#39; について</span></p><p>Pythonファイルのモジュール名が文字列で入っている　<code>__name__</code>
      という特殊な変数があります。</p><ul><li><code><span style=\"font-size: 18px;\">$ python hello.py</span></code><span
      style=\"font-size: 18px;\">&nbsp;のようにスクリプトからファイルを実行すると__name__ 変数は自動で <code>&quot;__main__&quot;</code>
      という文字列になる</span></li><li><span style=\"font-size: 18px;\"><code>import hello</code>
      した：<code>hello.py</code> 内部で <code>__name__</code> は <code>&quot;hello&quot;</code>
      という文字列になる</span></li></ul><p><br></p><p><span style=\"font-size: 24px; background-color:
      rgb(247, 218, 100);\">つまり...インポートしてもファイルが勝手に実行されない！！</span></p><p>(例)</p><p><span
      style=\"font-size: 14px;\">hello.py</span></p><pre data-lang=\"python\" data-unlink=\"\">def
      main():\r\n    print(&quot;Hello&quot;)\r\n\r\nmain()</pre><pre>$ python hello.py\r\nHello</pre><p>外部から
      <code>import hello</code> という風に hello.py をインポートした際にも 「Hello」と表示されてしまいます</p><pre
      data-lang=\"\" data-unlink=\"\">&gt;&gt;&gt; import hello  # この時点で「Hello」が表示されてしまう\r\nHello\r\n&gt;&gt;&gt;</pre><p><br></p><p>if
      __name__ == &quot;__main__&quot;: を加えると</p><p><span style=\"font-size: 14px;\">hello.py</span></p><pre
      data-lang=\"python\" data-unlink=\"\">def main():\r\n    print(&quot;Hello&quot;)\r\nif
      __name__ == &quot;__main__&quot;:\r\n    main()</pre><p>このif文の内部は import された際には実行されません。</p><pre
      data-lang=\"\" data-unlink=\"\">&gt;&gt;&gt; import hello\r\n&gt;&gt;&gt;</pre><p><br></p><p><span
      style=\"font-size: 48px;\">以上！！</span></p>"
    - '2019-05-09 06:31:22.596321'
    - '2019-08-18 13:35:05.580379'
  - - 150
    - ゼロから作る Deep Learning 第3章
    - "<h2 style=\"text-align: center;\">手書き数字認識</h2><h2>MNIST データセット</h2><p><span
      style=\"font-size: 18px;\">ここで使用するデータセットは MNIST という手書き数字の画像セット(</span>機械学習の分野で最も有名なデータセットの一つ<span
      style=\"font-size: 18px;\">)</span></p><p>0 から 9 までの数字画像から構成されます(図3-24)。 訓練画像が
      60,000 枚、テスト画像が 10,000 枚用意されており、それらの画像を使用 して、学習と推論を行う。</p><p><br></p><p><span
      style=\"font-size: 30px;\">準備: データセットのダウンロード・画像のNumPy 配列 への変換</span></p><p><br></p><p>本で紹介されている通り、MNIST
      データセットのダウンロードから画像データの NumPy 配列 への変換を記述した Python スクリプト(<a href=\"https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/dataset/mnist.py\">mnist.py</a>)を作成して実行する</p><p><a
      href=\"https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/dataset/mnist.py\">mnist.pyのload_mnist引数</a>&nbsp;</p><p>1
      つ目の引数の normalize は、入力画像を 0.0~1.0 の値に正規化する(255で割る)かどうか False にすれば、入力画像のピクセル(色のついた微小な点)は元の
      0~255 のまま</p><p>2 つ目の引数の flatten は、入力画像を平らにする(1 次元配列にする)かどうか&nbsp;</p><p>False
      に設定すると、入力画像は 1 &times; 28 &times; 28 の 3 次元配列として、True にすると 784 個の要素からなる 1 次元配列として格納</p><p>3
      つ目の引数の one_hot_label は、ラベルを one-hot 表現([0,0,1,0,0,0,0,0,0,0] のように、正解となるラベルだけが
      1 で、それ以外 は 0 で表現)として格納するかどうか&nbsp;</p><p>False のときは、7、2 といったように単純に 正解となるラベルを格納</p><p><code>Python
      には、pickle という便利な機能があります。これは、プログラム の実行中のオブジェクトをファイルとして保存する機能です。一度保存したpickle
      ファイルをロードすると、プログラムの実行中だったときのオブジェク トを即座に復元することができます。なお、MNIST データセットを読み込むload_mnist()
      関数の内部でも、(2 回目以降の読み込み時に)pickle を利 用しています。pickle の機能を利用することによって、MNIST のデータの準
      備を高速に行うことができます。</code></p><p><br></p><pre>$ cd work_dir\r\n$ mkdir dataset
      &amp;&amp; cd dataset <span style=\"color: rgb(163, 143, 132);\"># フォルダ名datasetにしておく(任意)</span>\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\">dataset配下にmnist.pyを貼り付け</span>\r\n$ python
      mnist.py\r\n<span style=\"color: rgb(163, 143, 132);\">ダウンロードされれば終了</span>\r\n\r\n(mnist.pyと同じディレクトリに<span
      style=\"color: rgb(243, 121, 52);\">\r\n<span style=\"font-size: 18px;\">mnist.pkl,
      t10k-images-idx3-ubyte.gz, t10k-labels-idx1-ubyte.gz, train-images-idx3-ubyte.gz,
      train-labels-idx1-ubyte.gz </span>\r\n</span>が作成されます)</pre><p><br></p><pre>$
      cd work_dir \r\n$ mkdir ch03 <span style=\"color: rgb(163, 143, 132);\"># ch03は3章で作成するファイルをまとめるフォルダ(名前は任意)</span>\r\n$
      ls\r\ndataset ch03 <span style=\"color: rgb(163, 143, 132);\"># dataset(miniset.pyなどが入ったフォルダ)
      ch03(3章で作成するファイルをまとめるフォルダ)</span>\r\n$ cd ch03 <span style=\"color: rgb(163,
      143, 132);\"># 以下、このフォルダにファイルを作成する</span></pre><p><br></p><h1><span style=\"font-size:
      48px;\">実践</span></h1><h2>訓練画像データ, 訓練教師データ, テスト画像データ, テスト教師データ を見てみる</h2><pre>(test.py)\r\nimport
      sys, os\r\nsys.path.append(os.pardir) <span style=\"color: rgb(163, 143, 132);\">#
      親ディレクトリからファイルをインポートするためのパス追加</span>\r\nfrom dataset.mnist import load_mnist
      <span style=\"color: rgb(163, 143, 132);\"># 親ディレクトリ直下の datasetフォルダのmnist.pyファイルからload_mnistメソッドをimport</span>\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># コードのxは <strong>画像データ</strong> 、tは <strong>教師ラベルデータ</strong> で、trainは学習用データ、testはモデルの性能を評価する際に使用するデータ\r\n#
      trainデータとtestデータには、データとしての本質的な違いはない。\r\n# X_train、y_train、X_test、y_test はすべてnumpy.ndarray型</span>\r\n(x_train,
      t_train), (x_test, t_test) = load_mnist(flatten=True, normalize=False)\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># それぞれのデータの形状を出力\r\n# ndarray.shapeは、</span><strong><span
      style=\"color: rgb(163, 143, 132);\">各次元ごとの要素数を示します。</span></strong>\r\nprint(x_train.shape)
      # (60000, 784) 訓練画像が6万枚用意されており、それぞれに28ピクセル*28ピクセル=784個の要素からなる平坦化された一次元配列が入った二次元配列になっている\r\nprint(t_train.shape)
      # (60000,) ラベル(0~9のどれか)が6万枚分答えとして一次元配列になっている\r\nprint(x_test.shape) # (10000,
      784) テスト画像が1万枚用意されており、それぞれに28ピクセル*28ピクセル=784個の要素からなる平坦化された一次元配列が入った二次元配列になっている\r\nprint(t_test.shape)
      # (10000,) ラベル(0~9のどれか)が1万枚分答えとして一次元配列になっている\r\n\r\n</pre><p><span style=\"color:
      rgb(243, 121, 52);\">＊ 親ディレクトリに置かれているスクリプトファイルをimportしたい場合</span></p><ul><li><span
      style=\"color: rgb(243, 121, 52);\">os.pardirは、親ディレクトリを表す文字列定数。</span></li><li><span
      style=\"color: rgb(243, 121, 52);\">sys.pathは、importするファイルを検索するパスを示す文字列のリストです。PYTHONPATH
      環境変数と、インストール先でのデフォルトパスで初期化されます。ですので、sys.pathにimportしたいファイルのディレクトリを含めれば、適当なディレクトリに置かれているスクリプトファイルをimport出来る。</span></li></ul><pre><span
      style=\"color: rgb(243, 121, 52);\">&gt;&gt;&gt; import sys,os\r\n&gt;&gt;&gt;
      sys.path.append(os.pardir)\r\n&gt;&gt;&gt; import tools</span></pre><p><br></p><h2>MNISTの手書き文字の画像を表示してみる</h2><pre>(mnist_show.py)\r\n#
      coding: utf-8\r\nimport sys, os\r\nsys.path.append(os.pardir) <span style=\"color:
      rgb(163, 143, 132);\"># 親ディレクトリのファイルをインポートするための設定</span>\r\nimport numpy as
      np\r\nfrom dataset.mnist import load_mnist\r\nfrom PIL import Image <span style=\"color:
      rgb(163, 143, 132);\"># MNIST 画像表示には PIL(Python Image Library)モジュールを使用</span>\r\n\r\n\r\ndef
      img_show(img):\r\npil_img = Image.fromarray(np.uint8(img)) <span style=\"color:
      rgb(163, 143, 132);\"># NumPy として格納された画像データを、PIL用のデータオブジェクトに変換する</span>\r\npil_img.show()\r\n\r\n(x_train,
      t_train), (x_test, t_test) = load_mnist(flatten=True, normalize=False)\r\n\r\nimg
      = x_train[0]\r\nlabel = t_train[0]\r\nprint(label)  # 5\r\n\r\nprint(img.shape)
       <span style=\"color: rgb(163, 143, 132);\"># (784,) flatten=True として読み込んだ画像imgは
      NumPy配列として1列(1次元)で格納されている</span>\r\nimg = img.reshape(28, 28)  <span style=\"color:
      rgb(163, 143, 132);\"># imgは一次元配列の入りのついた点の集まりなので、縦横28pxで元の画像サイズに変形(ちなみにimg.reshape(2,
      392)とかやるとビヨーンと横線みたいになる)</span>\r\nprint(img.shape)  <span style=\"color: rgb(163,
      143, 132);\"># (28, 28)</span>\r\n\r\nimg_show(img)</pre><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1557393696699-tmpr1b1jmp2.png\"
      style=\"width: 63px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><h2>ニューラルネットワークの推論処理</h2><pre>(neuralnet_mnist.py)\r\nimport
      sys, os\r\nsys.path.append(os.pardir)  <span style=\"color: rgb(163, 143, 132);\">#
      親ディレクトリのファイルをインポートするための設定</span>\r\nimport numpy as np\r\nimport pickle\r\nfrom
      dataset.mnist import load_mnist <span style=\"color: rgb(163, 143, 132);\">#
      親ディレクトリ直下の datasetフォルダのmnist.pyファイルからload_mnistメソッドをimport</span>\r\nfrom common.functions
      import sigmoid, softmax <span style=\"color: rgb(163, 143, 132);\">#</span>
      <span style=\"color: rgb(163, 143, 132);\">親ディレクトリ直下の</span><a href=\"https://dragonarrow.herokuapp.com/articles/156\"><span
      style=\"font-size: 18px;\">commonフォルダのfunctions.py</span></a><span style=\"color:
      rgb(163, 143, 132);\">から必要なメソッドをimport</span>\r\n\r\n\r\ndef get_data():\r\n(x_train,
      t_train), (x_test, t_test) = load_mnist(normalize=True, flatten=True, one_hot_label=False)\r\nreturn
      x_test, t_test\r\n\r\n\r\n<span style=\"color: rgb(163, 143, 132);\"># pickleファイルの
      sample_weight.pklに保存された学習済みの重みパラメータを読み込みます</span>\r\n<span style=\"color: rgb(163,
      143, 132);\"># このファイルには、重みとバイアスのパラメータがディクショナリ型の変数として保存されています</span>\r\n<span
      style=\"color: rgb(163, 143, 132);\"># 隠れ層が2つあり、ひとつ目の隠れ層か50 個、2つ目の層が100個のニューロンを持つものとします。この50と100という数字は、任意の値に設定できます</span>\r\ndef
      init_network():\r\nwith open(&quot;sample_weight.pkl&quot;, &#39;rb&#39;) as
      f:\r\nnetwork = pickle.load(f)\r\nreturn network\r\n\r\n<span style=\"color:
      rgb(163, 143, 132);\"># ニューラルネットワークアルゴリズムで入力層 -&gt; 隠れ層1 -&gt; 隠れ層2 -&gt; 隠れ層3
      -&gt; 出力層 まで算出\r\n# ニューロンは764個のピクセル(正規化されているので、それぞれの値が0~1) 出力は [0の確率, 1の確率,
      2の確率, ... ,9の確率]として分類される</span>\r\ndef predict(network, x):\r\nW1, W2, W3 =
      network[&#39;W1&#39;], network[&#39;W2&#39;], network[&#39;W3&#39;]\r\nb1, b2,
      b3 = network[&#39;b1&#39;], network[&#39;b2&#39;], network[&#39;b3&#39;]\r\n\r\na1
      = np.dot(x, W1) + b1\r\nz1 = sigmoid(a1)\r\na2 = np.dot(z1, W2) + b2\r\nz2 =
      sigmoid(a2)\r\na3 = np.dot(z2, W3) + b3\r\ny = softmax(a3) <span style=\"color:
      rgb(163, 143, 132);\"># 他クラス分類は、出力層の活性化関数はソフトマックス関数</span>\r\n\r\nreturn y\r\n\r\n\r\nx,
      t = get_data() <span style=\"color: rgb(163, 143, 132);\"># x:テストする画像データ t:
      テストする教師ラベルデータ</span>\r\nnetwork = init_network()\r\naccuracy_cnt = 0\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># テスト画像をループで渡し、全て予測していく</span>\r\nfor i
      in range(len(x)):\r\n  y = predict(network, x[i])\r\n  p = np.argmax(y) <span
      style=\"color: rgb(163, 143, 132);\"># 最も確率の高い要素の インデックス を取得(深層学習で返された配列のインデックスが手書き文字の数字でvalueが確率)\r\n#
      確率が最も高いと予測される数字と教師データが一致したら精度をメモ</span>\r\n  if p == t[i]:\r\n  accuracy_cnt
      += 1\r\n\r\n<span style=\"color: rgb(163, 143, 132);\"># 最後に 精度 (的中した回数 / 予測した回数)
      を出力</span>\r\nprint(&quot;Accuracy:&quot; + str(float(accuracy_cnt) / len(x)))\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># 出力結果 Accuracy:0.9352</span></pre><p><br></p><p><br></p><h2>ニューラルネットワークのバッチ化</h2><p>上記のneuralnet_mnist.pyでは、ループでMNIST画像を1ループにつき1個渡しおり、画像の個数分ループを実行している。</p><p>しかし、ループでデータを一個一個渡してニューラルネットワークで計算して確率を出していくより、複数の画像をまとめて渡して巨大な配列を一度に計算するほうが、速く計算が完了する。</p><p>このようにデータを束でまとめて渡して計算処理を行うやり方をバッチ処理といい、1
      枚あたりの処理時間を大幅に短縮できる。</p><p><br></p><pre>(neuralnet_mnist_batch.py)\r\nimport
      sys, os\r\nsys.path.append(os.pardir)  <span style=\"color: rgb(163, 143, 132);\">#
      親ディレクトリのファイルをインポートするための設定</span>\r\nimport numpy as np\r\nimport pickle\r\nfrom
      dataset.mnist import load_mnist\r\nfrom common.functions import sigmoid, softmax\r\n\r\n\r\ndef
      get_data():\r\n(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True,
      flatten=True, one_hot_label=False)\r\nreturn x_test, t_test\r\n\r\n\r\ndef init_network():\r\nwith
      open(&quot;sample_weight.pkl&quot;, &#39;rb&#39;) as f:\r\nnetwork = pickle.load(f)\r\nreturn
      network\r\n\r\n\r\ndef predict(network, x):\r\nw1, w2, w3 = network[&#39;W1&#39;],
      network[&#39;W2&#39;], network[&#39;W3&#39;]\r\nb1, b2, b3 = network[&#39;b1&#39;],
      network[&#39;b2&#39;], network[&#39;b3&#39;]\r\n\r\na1 = np.dot(x, w1) + b1\r\nz1
      = sigmoid(a1)\r\na2 = np.dot(z1, w2) + b2\r\nz2 = sigmoid(a2)\r\na3 = np.dot(z2,
      w3) + b3\r\ny = softmax(a3)\r\n\r\nreturn y\r\n\r\n<span style=\"color: rgb(163,
      143, 132);\"># バッチなし\r\n# x, t = get_data()\r\n# network = init_network()\r\n#
      accuracy_cnt = 0\r\n# for i in range(len(x)):\r\n#     y = predict(network,
      x[i])\r\n#     p = np.argmax(y)\r\n#     if p == t[i]:\r\n#         accuracy_cnt
      += 1\r\n# print(&quot;Accuracy:&quot; + str(float(accuracy_cnt) / len(x)))</span>\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># バッチあり 1枚あたりの処理時間を大幅に短縮できるという利点 (大きな配列を一度に計算するほうが、分割した小さい配列を大量に計算するよりも速く計算が完了する)</span>\r\nx,
      t = get_data()\r\nnetwork = init_network()\r\n\r\n<span style=\"color: rgb(44,
      130, 201);\">batch_size = 100</span> <span style=\"color: rgb(163, 143, 132);\">#
      バッチの数</span>\r\naccuracy_cnt = 0\r\n\r\n<span style=\"color: rgb(163, 143, 132);\">#
      一回のループで画像一枚一枚ではなく, batch_size(100個)をまとめて処理する</span>\r\n<span style=\"color:
      rgb(44, 130, 201);\">for i in range(0, len(x), batch_size):</span>\r\n<span
      style=\"color: rgb(44, 130, 201);\">  x_batch = x[i:i+batch_size]</span> <span
      style=\"color: rgb(163, 143, 132);\"># xのインデックスi番目 から (i+batch_size-1)番目までが取り出される
      i+batch_size-1が最大インデックスを超えても、最大までしか取りだされないので、範囲が大きくなってても綺麗に最後まで配列取得ができる</span>\r\n<span
      style=\"color: rgb(44, 130, 201);\">  y_batch = predict(network, x_batch)</span>
      <span style=\"color: rgb(163, 143, 132);\"># batch_size(100)個分のバッチ画像配列それぞれに0~9の確率が入った,
      二次元配列になっている</span>\r\n<span style=\"color: rgb(44, 130, 201);\">  p = np.argmax(y_batch,
      axis=1)</span> <span style=\"color: rgb(163, 143, 132);\"># 行列の各行で最大のインデックスを返す
      すなわち、各画像で確率が最も高い数字を返す 大きさbatch_sizeの一次元配列になる</span>\r\n<span style=\"color:
      rgb(163, 143, 132);\"># batch_size個の予測データと正解データを比べる p == t[i:i+batch_size] =&gt;
      array([False,..., True])みたいになり\r\n# np.sumにより、正解した数(False=0 と True=1の総和)がaccuracy_cntに足される</span>\r\n<span
      style=\"color: rgb(44, 130, 201);\">  accuracy_cnt += np.sum(p == t[i:i+batch_size])</span>\r\n\r\n<span
      style=\"color: rgb(44, 130, 201);\">print(&quot;Accuracy:&quot; + str(float(accuracy_cnt)
      / len(x)))</span>\r\n\r\n</pre><p><span style=\"color: rgb(44, 130, 201);\">axisはどの軸かを指定するための方法</span></p><p>二次元配列の時</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1558167500757-IMG_0824_Fotor.jpg\"
      style=\"width: 543px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>三次元配列の時</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1558167522983-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-05-18+17_Fotor.png\"
      style=\"width: 543px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>例:</p><p><code>&gt;&gt;&gt;
      import numpy as np</code></p><p><code>&gt;&gt;&gt; a = np.arange(6).reshape((3,
      2))</code></p><p><code>&gt;&gt;&gt; a</code></p><p><code>array([[0, 1],</code></p><p><code>&nbsp;
      &nbsp; &nbsp; &nbsp;[2, 3],</code></p><p><code>&nbsp; &nbsp; &nbsp; &nbsp;[4,
      5]])</code></p><p><code>&gt;&gt;&gt; print(a.sum(axis=0)) # 列ごと</code></p><p><code>[6
      9]</code></p><p><code>&gt;&gt;&gt; print(a.sum(axis=1)) # 行ごと</code></p><p><code>[1
      5 9]</code></p><p><br></p><p><br></p><p><code>&gt;&gt;&gt; a = np.arange(24).reshape((3,
      2, 4))</code></p><p><code><br></code></p><p><code>&gt;&gt;&gt; a</code></p><p><code>array([[[
      0, &nbsp;1, &nbsp;2, &nbsp;3],</code></p><p><code>&nbsp; &nbsp; &nbsp; &nbsp;
      [ 4, &nbsp;5, &nbsp;6, &nbsp;7]],</code></p><p><code><br></code></p><p><code>&nbsp;
      &nbsp; &nbsp; &nbsp;[[ 8, &nbsp;9, 10, 11],</code></p><p><code>&nbsp; &nbsp;
      &nbsp; &nbsp; [12, 13, 14, 15]],</code></p><p><code><br></code></p><p><code>&nbsp;
      &nbsp; &nbsp; &nbsp;[[16, 17, 18, 19],</code></p><p><code>&nbsp; &nbsp; &nbsp;
      &nbsp; [20, 21, 22, 23]]])</code></p><p><code>&gt;&gt;&gt; a.sum(axis=0).shape</code></p><p><code>(2,
      4)</code></p><p><code>&gt;&gt;&gt; a.sum(axis=1).shape</code></p><p><code>(3,
      4)</code></p><p><code>&gt;&gt;&gt; a.sum(axis=2).shape</code></p><p><code>(3,
      2)</code></p><p><code>&gt;&gt;&gt; a.sum(axis=0)</code></p><p><code>array([[24,
      27, 30, 33],</code></p><p><code>&nbsp; &nbsp; &nbsp; &nbsp;[36, 39, 42, 45]])</code></p><p><code>&gt;&gt;&gt;
      a.sum(axis=1)</code></p><p><code>array([[ 4, &nbsp;6, &nbsp;8, 10],</code></p><p><code>&nbsp;
      &nbsp; &nbsp; &nbsp;[20, 22, 24, 26],</code></p><p><code>&nbsp; &nbsp; &nbsp;
      &nbsp;[36, 38, 40, 42]])</code></p><p><code>&gt;&gt;&gt; a.sum(axis=2)</code></p><p><code>array([[
      6, 22],</code></p><p><code>&nbsp; &nbsp; &nbsp; &nbsp;[38, 54],</code></p><p><code>&nbsp;
      &nbsp; &nbsp; &nbsp;[70, 86]])</code></p><p><br></p><p><br></p><h1>三章まとめ</h1><p><span
      style=\"font-size: 24px;\">ニューラルネットワークの順方向の伝播(forward propagation)につ いて解説しました</span></p>"
    - '2019-05-09 06:52:22.536088'
    - '2019-08-18 13:34:00.069439'
  - - 151
    - EC2の仮想サーバーで yum がタイムアウトしてしまう
    - "<h1 style=\"text-align: center;\">EC2の仮想サーバーで yum がタイムアウトしてしまう</h1><p><br></p><pre><span
      style=\"font-size: 18px;\">[tatsuya@ip-10-0-0-149 ~]$ <span style=\"color: rgb(44,
      130, 201);\">yum install httpd -y</span>\r\n読み込んだプラグイン:extras_suggestions, langpacks,
      priorities, update-motd\r\nこのコマンドを実行するには root である必要があります。\r\n[tatsuya@ip-10-0-0-149
      ~]$ sudo yum install httpd -y\r\n[sudo] tatsuya のパスワード:\r\n読み込んだプラグイン:extras_suggestions,
      langpacks, priorities, update-motd\r\nCould not retrieve mirrorlist http://amazonlinux.ap-northeast-1.amazonaws.com/2/core/latest/x86_64/mirror.list
      error was\r\n12: Timeout on http://amazonlinux.ap-northeast-1.amazonaws.com/2/core/latest/x86_64/mirror.list:
      (28, &#39;Connection timed out after 5000 milliseconds&#39;)\r\nhttp://amazonlinux.ap-northeast-1.amazonaws.com/2/core/2.0/x86_64/6b3b97044ef1b82f2b9d1a39eb94eb0a201e1e70311d576e25d9b66195edcc42/repodata/repomd.xml?instance_id=xxxxxxxxxx&amp;region=xxxxxxxxxx:
      [Errno 12] Timeout on http://amazonlinux.ap-northeast-1.amazonaws.com/2/core/2.0/x86_64/6b3b97044ef1b82f2b9d1a39eb94eb0a201e1e70311d576e25d9b66195edcc42/repodata/repomd.xml?instance_id=xxxxxxxxxxxxx&amp;region=xxxxxxxxxxxxxx:
      (28, &#39;Connection timed out after 5001 milliseconds&#39;)\r\n他のミラーを試します。\r\nhttp://amazonlinux.ap-northeast-1.amazonaws.com/2/core/2.0/x86_64/6b3b97044ef1b82f2b9d1a39eb94eb0a201e1e70311d576e25d9b66195edcc42/repodata/repomd.xml?instance_id=xxxxxxxxxxxx&amp;region=xxxxxxxxxxxx:
      [Errno 12] Timeout on http://amazonlinux.ap-northeast-1.amazonaws.com/2/core/2.0/x86_64/6b3b97044ef1b82f2b9d1a39eb94eb0a201e1e70311d576e25d9b66195edcc42/repodata/repomd.xml?instance_id=xxxxxxxxxxxxx&amp;region=xxxxxxxxxxxxxx:
      (28, &#39;Connection timed out after 5000 milliseconds&#39;)\r\n他のミラーを試します。\r\n...</span></pre><p><br></p><p><span
      style=\"font-size: 30px;\">原因: EC2のセキュリティグループのアウトバウンド設定を何もしていなかった(ネットワークが外に出られない状態であった)</span></p><p><br></p><p><span
      style=\"font-size: 30px;\">解決策: <span style=\"font-size: 30px;\">EC2に紐付けたセキュリティグループのアウトバウンド設定にhttpとhttpsの外部接続を許可した。</span></span></p><p><span
      style=\"font-size: 30px;\"><span style=\"font-size: 30px;\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1557740997579-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-05-13+18.41.17.png\"
      style=\"width: 700px;\" class=\"fr-fic fr-dib fr-fil\"></span></span></p><p>もう一度...</p><p><br></p><pre>[tatsuya@ip-10-0-0-149
      ~]$ sudo yum install httpd -y\r\n[sudo] tatsuya のパスワード:\r\n読み込んだプラグイン:extras_suggestions,
      langpacks, priorities, update-motd\r\namzn2-core                            
                        | 2.4 kB     00:00     \r\namzn2extra-docker              
                               | 1.3 kB     00:00     \r\n(1/3): amzn2-core/2/x86_64/group_gz
                             | 2.4 kB   00:00     \r\n(2/3): amzn2-core/2/x86_64/updateinfo
                           | 103 kB   00:00     \r\n(3/3): amzn2-core/2/x86_64/primary_db
                           |  29 MB   00:00     \r\n依存性の解決をしています\r\n--&gt; トランザクションの確認を実行しています。\r\n---&gt;
      パッケージ httpd.x86_64 0:2.4.39-1.amzn2.0.1 を インストール\r\n--&gt; 依存性の処理をしています: httpd-tools
      = 2.4.39-1.amzn2.0.1 のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt; 依存性の処理をしています:
      httpd-filesystem = 2.4.39-1.amzn2.0.1 のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt;
      依存性の処理をしています: system-logos-httpd のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt;
      依存性の処理をしています: mod_http2 のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt; 依存性の処理をしています:
      httpd-filesystem のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt; 依存性の処理をしています:
      /etc/mime.types のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt; 依存性の処理をしています:
      libaprutil-1.so.0()(64bit) のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt;
      依存性の処理をしています: libapr-1.so.0()(64bit) のパッケージ: httpd-2.4.39-1.amzn2.0.1.x86_64\r\n--&gt;
      トランザクションの確認を実行しています。\r\n---&gt; パッケージ apr.x86_64 0:1.6.3-5.amzn2.0.2 を インストール\r\n---&gt;
      パッケージ apr-util.x86_64 0:1.6.1-5.amzn2.0.2 を インストール\r\n--&gt; 依存性の処理をしています: apr-util-bdb(x86-64)
      = 1.6.1-5.amzn2.0.2 のパッケージ: apr-util-1.6.1-5.amzn2.0.2.x86_64\r\n---&gt; パッケージ
      generic-logos-httpd.noarch 0:18.0.0-4.amzn2 を インストール\r\n---&gt; パッケージ httpd-filesystem.noarch
      0:2.4.39-1.amzn2.0.1 を インストール\r\n---&gt; パッケージ httpd-tools.x86_64 0:2.4.39-1.amzn2.0.1
      を インストール\r\n---&gt; パッケージ mailcap.noarch 0:2.1.41-2.amzn2 を インストール\r\n---&gt;
      パッケージ mod_http2.x86_64 0:1.14.1-1.amzn2 を インストール\r\n--&gt; トランザクションの確認を実行しています。\r\n---&gt;
      パッケージ apr-util-bdb.x86_64 0:1.6.1-5.amzn2.0.2 を インストール\r\n--&gt; 依存性解決を終了しました。\r\n\r\n\r\n依存性を解決しました\r\n\r\n\r\n================================================================================\r\n Package
                      アーキテクチャー\r\n                                    バージョン      
            リポジトリー    容量\r\n================================================================================\r\nインストール中:\r\n httpd
                        x86_64     2.4.39-1.amzn2.0.1     amzn2-core     1.3 M\r\n依存性関連でのインストールをします:\r\n apr
                          x86_64     1.6.3-5.amzn2.0.2      amzn2-core     118 k\r\n apr-util
                     x86_64     1.6.1-5.amzn2.0.2      amzn2-core      99 k\r\n apr-util-bdb
                 x86_64     1.6.1-5.amzn2.0.2      amzn2-core      19 k\r\n generic-logos-httpd
          noarch     18.0.0-4.amzn2         amzn2-core      19 k\r\n httpd-filesystem
             noarch     2.4.39-1.amzn2.0.1     amzn2-core      23 k\r\n httpd-tools
                  x86_64     2.4.39-1.amzn2.0.1     amzn2-core      87 k\r\n mailcap
                      noarch     2.1.41-2.amzn2         amzn2-core      31 k\r\n mod_http2
                    x86_64     1.14.1-1.amzn2         amzn2-core     147 k\r\n\r\n\r\nトランザクションの要約\r\n================================================================================\r\nインストール
       1 パッケージ (+8 個の依存関係のパッケージ)\r\n\r\n\r\n総ダウンロード容量: 1.9 M\r\nインストール容量: 5.1 M\r\nDownloading
      packages:\r\nDelta RPMs disabled because /usr/bin/applydeltarpm not installed.\r\n(1/9):
      apr-1.6.3-5.amzn2.0.2.x86_64.rpm                    | 118 kB   00:00     \r\n(2/9):
      apr-util-bdb-1.6.1-5.amzn2.0.2.x86_64.rpm           |  19 kB   00:00     \r\n(3/9):
      apr-util-1.6.1-5.amzn2.0.2.x86_64.rpm               |  99 kB   00:00     \r\n(4/9):
      generic-logos-httpd-18.0.0-4.amzn2.noarch.rpm       |  19 kB   00:00     \r\n(5/9):
      httpd-filesystem-2.4.39-1.amzn2.0.1.noarch.rpm      |  23 kB   00:00     \r\n(6/9):
      httpd-2.4.39-1.amzn2.0.1.x86_64.rpm                 | 1.3 MB   00:00     \r\n(7/9):
      httpd-tools-2.4.39-1.amzn2.0.1.x86_64.rpm           |  87 kB   00:00     \r\n(8/9):
      mailcap-2.1.41-2.amzn2.noarch.rpm                   |  31 kB   00:00     \r\n(9/9):
      mod_http2-1.14.1-1.amzn2.x86_64.rpm                 | 147 kB   00:00     \r\n--------------------------------------------------------------------------------\r\n合計
                                                    6.5 MB/s | 1.9 MB  00:00     \r\nRunning
      transaction check\r\nRunning transaction test\r\nTransaction test succeeded\r\nRunning
      transaction\r\n  インストール中          : apr-1.6.3-5.amzn2.0.2.x86_64            
             1/9 \r\n  インストール中          : apr-util-bdb-1.6.1-5.amzn2.0.2.x86_64  
              2/9 \r\n  インストール中          : apr-util-1.6.1-5.amzn2.0.2.x86_64      
              3/9 \r\n  インストール中          : httpd-tools-2.4.39-1.amzn2.0.1.x86_64  
              4/9 \r\n  インストール中          : generic-logos-httpd-18.0.0-4.amzn2.noarch
            5/9 \r\n  インストール中          : mailcap-2.1.41-2.amzn2.noarch            
            6/9 \r\n  インストール中          : httpd-filesystem-2.4.39-1.amzn2.0.1.noarch
           7/9 \r\n  インストール中          : mod_http2-1.14.1-1.amzn2.x86_64          
            8/9 \r\n  インストール中          : httpd-2.4.39-1.amzn2.0.1.x86_64          
            9/9 \r\n  検証中                  : apr-util-1.6.1-5.amzn2.0.2.x86_64    
                1/9 \r\n  検証中                  : apr-util-bdb-1.6.1-5.amzn2.0.2.x86_64
                2/9 \r\n  検証中                  : httpd-tools-2.4.39-1.amzn2.0.1.x86_64
                3/9 \r\n  検証中                  : httpd-2.4.39-1.amzn2.0.1.x86_64  
                    4/9 \r\n  検証中                  : httpd-filesystem-2.4.39-1.amzn2.0.1.noarch
           5/9 \r\n  検証中                  : apr-1.6.3-5.amzn2.0.2.x86_64          
               6/9 \r\n  検証中                  : mod_http2-1.14.1-1.amzn2.x86_64  
                    7/9 \r\n  検証中                  : mailcap-2.1.41-2.amzn2.noarch
                        8/9 \r\n  検証中                  : generic-logos-httpd-18.0.0-4.amzn2.noarch
            9/9 \r\n\r\n\r\nインストール:\r\n  httpd.x86_64 0:2.4.39-1.amzn2.0.1        
                                          \r\n\r\n\r\n依存性関連をインストールしました:\r\n  apr.x86_64
      0:1.6.3-5.amzn2.0.2                                                \r\n  apr-util.x86_64
      0:1.6.1-5.amzn2.0.2                                           \r\n  apr-util-bdb.x86_64
      0:1.6.1-5.amzn2.0.2                                       \r\n  generic-logos-httpd.noarch
      0:18.0.0-4.amzn2                                   \r\n  httpd-filesystem.noarch
      0:2.4.39-1.amzn2.0.1                                  \r\n  httpd-tools.x86_64
      0:2.4.39-1.amzn2.0.1                                       \r\n  mailcap.noarch
      0:2.1.41-2.amzn2                                               \r\n  mod_http2.x86_64
      0:1.14.1-1.amzn2                                             \r\n\r\n\r\n完了しました!\r\n[tatsuya@ip-10-0-0-149
      ~]$</pre><p><br></p><p><span style=\"font-size: 48px;\">バッチリ!!<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60e.svg);\">&nbsp;&nbsp;</span><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60e.svg);\">&nbsp;</span>
      <span class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background:
      url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60e.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><p><br></p>"
    - '2019-05-13 09:36:11.058148'
    - '2019-12-04 16:00:00.347534'
  - - 152
    - "[AWS] EC2+RDS開発環境設定　Nginx+Unicorn+Ruby2.6+Rails5.2+MySQL5.5"
    - "<h1 style=\"text-align: center;\">RDS開発環境設定</h1><p>初めにsshでEC2にログイン</p><pre> 
           __|  __|_  )\r\n       _|  (     /   Amazon Linux 2 AMI\r\n      ___|\\___|___|\r\n\r\n\r\n<a
      href=\"https://aws.amazon.com/amazon-linux-2/\">https://aws.amazon.com/amazon-linux-2/</a>\r\n10
      package(s) needed for security, out of 14 available\r\nRun &quot;sudo yum update&quot;
      to apply all updates.\r\n[tatsuya@ip-10-0-0-149 ~]$ </pre><p>作成したRDSに接続できるか確認</p><pre>$
      sudo yum install mysql\r\n$ sudo yum install mysql-devel #後でエラーが出たのでインストール\r\n$
      mysql -h [エンドポイント] -P 3306 -u [ユーザ名] -p [DB名]</pre><p><br></p><h2>Ruby,Railsのインストール</h2><h3>git,rbenvのインストール</h3><pre>[tatsuya@ip-10-0-0-149
      ~]$ sudo yum -y install git\r\n[tatsuya@ip-10-0-0-149 ~]$ git clone https://github.com/sstephenson/rbenv.git
      ~/.rbenv #rbenvインストール\r\n[tatsuya@ip-10-0-0-149 ~]$ git clone https://github.com/sstephenson/ruby-build.git
      ~/.rbenv/plugins/ruby-build #ruby-buildインストール\r\n<span style=\"color: rgb(44,
      130, 201);\">[tatsuya@ip-10-0-0-149 ~]$ sudo vi .bash_profile　#.bash_profileの編集\r\n\r\n=ファイルの編集画面=\r\n\r\nexport
      PATH\r\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot; &larr;　追加\r\neval &quot;$(rbenv
      init -)&quot; &larr;　追加\r\n\r\n=================</span>\r\n<span style=\"color:
      rgb(44, 130, 201);\">または</span>\r\n<span style=\"color: rgb(226, 80, 65);\">[tatsuya@ip-10-0-0-149
      ~]$ echo &#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39; &gt;&gt; ~/.bash_profile
      \r\n(#パスを通す)\r\n[tatsuya@ip-10-0-0-149 ~]$ echo &#39;eval &quot;$(rbenv init
      -)&quot;&#39; &gt;&gt; ~/.bash_profile\r\n[tatsuya@ip-10-0-0-149 ~]$ source
      .bash_profile  \r\n(#.bash_profileの読み込み)\r\n\r\n[tatsuya@ip-10-0-0-149 ~]$ source
      ~/.bash_profile #環境変数の反映</span>\r\n[tatsuya@ip-10-0-0-149 ~]$ rbenv rehash  \r\n(#rehashを行う)
      \r\n[tatsuya@ip-10-0-0-149 ~]$ rbenv -v #バージョン確認\r\nrbenv 1.1.0-2-g4f8925a</pre><p>rbenvとは、簡単にrubyのバージョンの切り替えを行うためのツールです。<br>まずはこれをgitからクローンしてきます。<br>git
      clone http://~~~~　の後に、** ~/.rbenv** とあるのは、<br>「クローンしてきたものはこのフォルダに入れてね」という意味合いとなり、<br>また、フォルダ名の前に「.」と付いているので、新しく隠しフォルダが生成されていることが分かります。</p><p>そしてsourceコマンドで.bash_profileを読み込んだ後、パスを通して(rbenvコマンドを使えるようにして)、ruby-build(rubyをインストールするためのrbenvプラグイン)をインストールしています。</p><p>また、最後のrehashはこれまたrbenv版のおまじないのようなものなので、この操作によってrubyやらgemでインストールしてきたファイルの実行環境が生成されています。</p><p>ここらへんは覚えるしかない
      &amp; 使用するツールによって操作が様々なので、<br>都度リファレンスなどを見ながらインプットしていきましょう。</p><p><br></p><h3>rubyのインストール</h3><pre>[tatsuya@ip-10-0-0-149
      ~]$ rbenv install --list (-lでも良い) # インストールできるバージョン一覧を確認する\r\n[tatsuya@ip-10-0-0-149
      ~]$ sudo yum install -y gcc\r\n[tatsuya@ip-10-0-0-149 ~]$ sudo yum install -y
      openssl-devel readline-devel zlib-devel\r\n[tatsuya@ip-10-0-0-149 ~]$ rbenv
      install 2.4.2\r\n[tatsuya@ip-10-0-0-149 ~]$ rbenv install 2.6.3\r\n[tatsuya@ip-10-0-0-149
      ~]$ rbenv global 2.6.3</pre><p><span style=\"color: rgb(163, 143, 132);\">プロジェクトで特定のバージョンを使いたいときは、
      <strong>local</strong> を使う。すると、カレントディレクトリの <em>.ruby-version</em> に使うバージョンが書き込まれる。</span></p><pre><span
      style=\"color: rgb(163, 143, 132);\">$ rbenv local 1.8.7</span></pre><p><span
      style=\"color: rgb(163, 143, 132);\">[tatsuya@ip-10-0-0-149 ~]$ rbenv versions
      # このコマンドでインストールしたバージョンを確認できる</span></p><p><span style=\"color: rgb(163, 143,
      132);\">&nbsp; 2.4.2</span></p><p><span style=\"color: rgb(163, 143, 132);\">*
      2.6.3 (set by /home/tatsuya/.rbenv/version)</span></p><h3><br></h3><h3><span
      style=\"font-size: 14px;\">おすすめ参考記事&nbsp;<a href=\"https://qiita.com/iwaseasahi/items/b28f8b91c4638e2c57fd\">https://qiita.com/iwaseasahi/items/b28f8b91c4638e2c57fd</a></span></h3>"
    - '2019-05-14 02:15:31.048711'
    - '2019-05-31 07:15:20.169601'
  - - 153
    - AWS EC2仮想サーバーに環境構築(Ruby, MySQL, node.js, git連携)
    - "<h1 style=\"text-align: center;\">EC2インスタンス内でrubyやgitその他の環境が動くよう設定する</h1><p><br></p><pre>[tatsuya@ip-10-0-0-238
      ~]$ sudo yum install \\<span style=\"color: rgb(163, 143, 132);\"> #yumのインストール</span>\r\ngit
      make gcc-c++ patch \\ <span style=\"color: rgb(163, 143, 132);\">#cとc++のコンパイラ、gitの差分をpatchファイルに変更</span>\r\nopenssl-devel
      \\ \r\nlibyaml-devel libffi-devel libicu-devel \\\r\nlibxml2 libxslt libxml2-devel
      libxslt-devel \\\r\nzlib-devel readline-devel \\\r\nmysql mysql-server mysql-devel
      \\\r\nImageMagick ImageMagick-devel \\\r\nepel-release</pre><h2><br></h2><h2>rbenv,
      ruby , ruby-buildのインストール</h2><pre>git clone https://github.com/sstephenson/rbenv.git
      ~/.rbenv\r\necho &#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39; &gt;&gt;
      ~/.bash_profile\r\necho &#39;eval &quot;$(rbenv init -)&quot;&#39; &gt;&gt;
      ~/.bash_profile\r\nvi .bash_profile\r\ngit clone https://github.com/sstephenson/ruby-build.git
      ~/.rbenv/plugins/ruby-build\r\nrbenv rehash\r\nrbenv install --list\r\nrbenv
      install 2.6.3\r\nrbenv install 2.4.2\r\nrbenv global 2.6.3\r\nruby -v\r\nrbenv
      rehash</pre><h2>お次はNode.jsのインストール)</h2><p><a href=\"https://aws.amazon.com/jp/premiumsupport/knowledge-center/ec2-enable-epel/\"></a><span
      style=\"font-size: 18px;\">ドキュメント <a href=\"\">CentOS、RHEL、または Amazon Linux
      が実行されている Amazon EC2 インスタンスに対して EPEL リポジトリを有効にする方法を教えてください。</a></span></p><p>標準リポジトリで利用できないパッケージのインストールを可能にする
      <a href=\"https://fedoraproject.org/wiki/EPEL\" target=\"_blank\">Extra Packages
      for Enterprise Linux (EPEL)</a> リポジトリへのアクセスを有効にする</p><p><br></p><p><code>$ sudo
      curl -sL https://rpm.nodesource.com/setup_11.x | bash -</code></p><p><code>問題なく上記コマンドができるようなら以下の6つのコマンドは無視</code></p><pre><code>$
      sudo yum install -y nodejs</code>\r\n<code>$ sudo yum install -y epel-release</code>\r\n\r\nAmazon
      Linux 2(AL2) では、Amazon Linux Extras を利用すると EPEL レポジトリを簡単に利用できます。\r\n<code>$
      sudo amazon-linux-extras install epel</code>\r\n\r\nYum-config-manager コマンドを用いて
      Amazon Linux 上の EPEL リポジトリを有効にする\r\n<code>$ sudo yum-config-manager --enable
      epel</code>\r\n\r\nEPEL リポジトリが有効になっていることを確認するには、以下のコマンドを実行します。\r\nepel/x86_64
       や epel-debuginfo/x86_64 が表示されていればOK\r\n\r\n<code>$ sudo yum repolist</code>\r\n<code>$
      sudo vim /etc/yum.repos.d/epel.repo</code>\r\nenabled=0 を見つけて enabled=1 に変更します。これは、epel.repo
      ファイルの $basearch セクションにあります。\r\n変更を保存し、vim エディターを終了します</pre><p>npm, node.js の
      インストール</p><p><code>$ sudo yum install nodejs npm --enablerepo=epel</code></p><h2><br>gitとの連携、アプリのクローン</h2><pre>$
      vi .gitconfig\r\n\r\n-----------------------------\r\n[user]\r\n  name = your_name
      (#gitに登録した自分の名前)\r\n  email = hoge@hoge.com (#git登録時の自分のメアド)\r\n\r\n[alias]
      (#これはお好きに)\r\n  a = add\r\n  b = branch\r\n  ch = checkout\r\n  st = status\r\n\r\n[color]
      (#色付け)\r\n  ui = true\r\n\r\n# githubの場合\r\n[url &quot;github:&quot;] (#pull、pushのための設定)\r\n
      \   InsteadOf = https://github.com/\r\n    InsteadOf = git@github.com:\r\n#
      bitbucketの場合\r\n[url &quot;bitbucket:&quot;]\r\n    InsteadOf = https://ユーザ名@bitbucket.org/\r\n
      \   InsteadOf = git@bitbucket.org:\r\n-----------------------------</pre><p>完了したらファイルを保存し、<br>アプリを配置するディレクトリを作成していきます。</p><pre>sudo
      chown tatsuya var\r\ncd var\r\nsudo mkdir www\r\nsudo chown tatsuya www\r\ncd
      www\r\nsudo mkdir rails\r\nsudo chown tatsuya rails\r\nsudo yum update</pre><p>さぁ、下準備が整ったら、いよいよgitとの接続です。</p><p><br></p><p>ローカル
      からEC2 にsshするためにローカルでキーペアを作った時みたいに、今度は</p><p>EC2 からgithub にsshするためにEC2でキーペアを作ります。</p><pre>[tatsuya|~]$
      chmod 700 .ssh\r\n[tatsuya|.ssh]$ cd .ssh\r\n[tatsuya|.ssh]$ ssh-keygen -t rsa\r\n-----------------------------\r\nEnter
      file in which to save the key ():aws_git_rsa \r\n(#ここでファイルの名前を記述して、エンター)\r\nEnter
      passphrase (empty for no passphrase): \r\n(#何もせずそのままエンター)\r\nEnter same passphrase
      again: \r\n(#何もせずそのままエンター)\r\n-----------------------------\r\n[tatsuya|.ssh]$
      ls\r\n(#「aws_git_rsa」と「aws_git_rsa.pub」が生成されたことを確認)\r\n[tatsuya|.ssh]$ vi config\r\n-----------------------------\r\n#
      githubの場合以下を追記\r\nHost github\r\n  Hostname github.com\r\n  User git\r\n  IdentityFile
      ~/.ssh/aws_git_rsa (#秘密鍵の設定)\r\n# bitbucketの場合以下を追記\r\nHost bitbucket\r\n  Hostname
      bitbucket.org\r\n  User git\r\n  IdentityFIle ~/.ssh/aws_git_rsa (#秘密鍵の設定)\r\n-----------------------------\r\n[tatsuya|.ssh]$
      cat aws_git_rsa.pub\r\n-----------------------------\r\nxxxxxxxxxxxxxxxxxxx\r\n-----------------------------</pre><p>公開鍵(aws_git_rsa.pub)をコピーしてgithubのssh設定に中身を登録する</p><p><a
      href=\"https://github.com/settings/keys\"></a><a href=\"https://github.com/settings/keys\">https://github.com/settings/keys</a></p><p><br></p><p>最後に、EC2セキュリティグループのアウトバウンド設定でsshを許可する</p><pre>$
      ssh -T github</pre><p>を実行してみてください。</p><ul><li>githubの場合</li></ul><pre>Hi NaokiMochizuki!
      You&#39;ve succwwwessfully authenticated, but GitHub does not provide shell
      access.</pre><ul><li>bitbucketの場合</li></ul><pre>logged in as tatsuya.</pre><p><br></p><p>登録が済んだら、いよいよクローン</p><pre>[naoki|.ssh]$
      cd /var/www/rails\r\n[naoki|rails]$ git clone git@github.com:~~~~~~~~~~~~</pre><p>git
      cloneの後に続くURLは、githubの下記より取得してください。</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1558673915146-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-05-24+13.54.59.png\"
      style=\"width: 700px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>アプリ名が記載されたフォルダが存在すれば、見事クローン成功です。</p><h3><a
      href=\"https://qiita.com/naoki_mochizuki/items/814e0979217b1a25aa3e#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AEsecret_key_base%E3%81%AE%E8%A8%AD%E5%AE%9A\"></a></h3><p><br></p><header><h1>＊
      Amazon Linuxで古いNode.jsがインストールされる時の解決方法</h1></header><p><a href=\"http://d.hatena.ne.jp/keyword/Amazon\">Amazon</a>\r\n<a
      href=\"http://d.hatena.ne.jp/keyword/Linux\">Linux</a>で何度Node.js v11をインストールしようとしてもv6が入ってしまう現象が起こったのでその解決策をメモ。</p><h1>現象</h1><p>v11用<a
      href=\"http://d.hatena.ne.jp/keyword/RPM\">RPM</a>のセットアップをする。</p><pre data-lang=\"\"
      data-unlink=\"\">$ curl -sL https://rpm.nodesource.com/setup_11.x | sudo bash
      -</pre><p>その後、<a href=\"http://d.hatena.ne.jp/keyword/yum\">yum</a> installしても
      <code>2:6.14.4-1nodesource</code> がインストールされる。</p><pre data-lang=\"\" data-unlink=\"\">$
      sudo yum install -y nodejs\r\n...\r\nInstalled:\r\n  nodejs.x86_64 2:6.14.4-1nodesource</pre><h1>解決策</h1><p>以下のコマンドで<a
      href=\"http://d.hatena.ne.jp/keyword/RPM\">RPM</a>のキャッシュを消す。</p><pre data-lang=\"\"
      data-unlink=\"\">$ sudo yum remove -y nodesource-release* nodejs\r\n$ yum clean
      all\r\n$ sudo rm -rf /var/cache/yum/*\r\n$ sudo rm /etc/yum.repos.d/nodesource-el.repo</pre><p>その後、再度RPMセットアップコマンドを流してyum
      installすればよい。</p><pre data-lang=\"\" data-unlink=\"\">$ curl -sL https://rpm.nodesource.com/setup_11.x
      | sudo bash -\r\n...\r\n$ sudo yum install -y nodejs\r\n...\r\nInstalled:\r\n\r\n$
      node -v\r\nv11.15.0</pre>"
    - '2019-05-16 04:20:26.263562'
    - '2019-05-24 05:01:42.00465'
  - - 154
    - EC2 sshが権限ミスで突然死する
    - '<h2>Amazon EC2で「ssh_exchange_identification: Connection closed by remote host」エラーでインスタンスに接続出来ない。</h2><p><br></p><p>Amazon
      EC2でそれまではインスタンスに接続出来ていたのに、作業をしていると急に以下のエラーでSSHでインスタンスに接続出来なくなる現象が起きました。</p><p><br>ssh_exchange_identification:
      Connection closed by remote host</p><p>ネットを調べると/etc/hosts.allowの設定や/etc/ssh/sshd_configのMaxStartupsのパラメタに大きな値が設定されていない事が原因等の情報は載っていましたが、それでも解決せず・・・。</p><p
      data-empty="true"><br></p><p>サーバーで原因を調べていたところ、何と/varディレクトリのパーミッションが問題でssh接続出来ない事が分かりました！</p><p
      data-empty="true"><br></p><p>デフォルトでは以下のパーミション設定になっているのを「chmod -R 777 /var」などとやってしまい、パーミションに変更するとsshで接続出来なくなるようです(全ての人がsshできる設定にするともう接続不可になってしまう)。気を付けないといけませんね。</p><p><br></p><p>筆者は一度EC2インスタンスを作り直すハメになりました。</p><p
      data-empty="true"><br></p><pre>drwxr-xr-x 20 root root 4096 Aug 2 04:55 var</pre>'
    - '2019-05-16 07:19:01.982539'
    - '2019-05-16 07:23:01.597606'
  - - 155
    - EC2サーバーからGitHubにsshアクセスできない
    - "<h1 style=\"text-align: center;\">EC2サーバーからGitHubにsshアクセスできない</h1><p><br></p><p>仮想サーバーのフォルダやssh設定ファイル状況</p><pre>[tatsuya@ip-10-0-0-238
      .ssh]$ ls\r\nGitHub  authorized_keys  config  known_hosts\r\n[tatsuya@ip-10-0-0-238
      .ssh]$ cd GitHub\r\n[tatsuya@ip-10-0-0-238 GitHub]$ ls\r\naws_git_rsa  aws_git_rsa.pub\r\n[tatsuya@ip-10-0-0-238
      GitHub]$ cd ..\r\n[tatsuya@ip-10-0-0-238 .ssh]$ cat config\r\nHost github\r\n 
      Hostname <a href=\"//github.com\">github.com</a>\r\n  User git\r\n  Port 22\r\n 
      IdentityFile ~/.ssh/GitHub/aws_git_rsa\r\n[tatsuya@ip-10-0-0-238 .ssh]$ </pre><p>sshでGitHubに接続する</p><pre>[tatsuya@ip-10-0-0-238
      .ssh]$ ssh -T github\r\nssh: connect to host github.com port 22: Connection
      timed out</pre><p><br></p><p><span style=\"font-size: 60px;\">ファっ？！<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f632.svg);\">&nbsp;</span></span></p><p>結構手こずったものの、原因は単純にEC2セキュリティグループのアウトバウンド設定でした（ーー；）</p><p>以下の画像のようにSSH接続の許可を出すと、無事接続できました。なお、ssh接続は今は任意の場所にしていますが、固定IPのルーターがある会社や組織などでは基本IPを指定して、他の場所からは接続できないようにするのが定石です。</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1557995540070-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-05-16+17.30.02.png\"
      style=\"width: 700px;\" class=\"fr-fic fr-dib fr-fil\"></p><pre>[tatsuya@ip-10-0-0-238
      .ssh]$ ssh github\r\nWarning: Permanently added the RSA host key for IP address
      to the list of known hosts.\r\nPTY allocation request failed on channel 0\r\nHi
      NakajiTatsuya! You&#39;ve successfully authenticated, but GitHub does not provide
      shell access.\r\nConnection to github.com closed.\r\n\r\n</pre><p><span style=\"font-size:
      30px;\">つながりました、完璧!!</span></p><p><br></p><p><br></p><p><br></p>"
    - '2019-05-16 08:24:51.502644'
    - '2019-05-16 08:38:50.59554'
  - - 156
    - ゼロから作る Deep Learningで使用する関数ファイル
    - "<h1 style=\"text-align: center;\">深層学習の活性化関数</h1><p><br></p><p><br></p><p><span
      style=\"font-size: 18px;\">書籍ではch01,ch02,ch03...フォルダと同じ階層にcommonフォルダを作成し、そのフォルダにfunctions.pyとして置いてある</span></p><p><span
      style=\"font-size: 18px;\"><a href=\"https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/functions.py\"></a>書籍のgithub<a
      href=\"https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/functions.py\">https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/functions.py</a></span></p><p><span
      style=\"font-size: 18px;\">各関数が必要な時はimportするだけで利用できるようにする。</span></p><p><br></p><pre><span
      style=\"font-size: 24px;\"># coding: utf-8\r\nimport numpy as np\r\n\r\n\r\ndef
      identity_function(x):\r\n  return x\r\n\r\n\r\ndef step_function(x):\r\n  return
      np.array(x &gt; 0, dtype=np.int)\r\n\r\n\r\ndef sigmoid(x):\r\n  return 1 /
      (1 + np.exp(-x))    \r\n\r\n\r\ndef sigmoid_grad(x):\r\n  return (1.0 - sigmoid(x))
      * sigmoid(x)\r\n\r\n\r\ndef relu(x):\r\n  return np.maximum(0, x)\r\n\r\n\r\ndef
      relu_grad(x):\r\n  grad = np.zeros(x)\r\n  grad[x&gt;=0] = 1\r\n  return grad\r\n\r\n\r\ndef
      softmax(x):\r\n  if x.ndim == 2:\r\n    x = x.T\r\n    x = x - np.max(x, axis=0)\r\n
      \   y = np.exp(x) / np.sum(np.exp(x), axis=0)\r\n    return y.T\r\n\r\n  x =
      x - np.max(x) # オーバーフロー対策(値が大きすぎて計算不可になるのを防ぐ)\r\n  return np.exp(x) / np.sum(np.exp(x))\r\n\r\n\r\ndef
      mean_squared_error(y, t):\r\n  return 0.5 * np.sum((y-t)**2)\r\n\r\n\r\ndef
      cross_entropy_error(y, t):\r\n  if y.ndim == 1:\r\n    t = t.reshape(1, t.size)\r\n
      \   y = y.reshape(1, y.size)\r\n\r\n  # 教師データがone-hot-vectorの場合、正解ラベルのインデックスに変換\r\n 
      if t.size == y.size:\r\n    t = t.argmax(axis=1)\r\n\r\n  batch_size = y.shape[0]\r\n
      \ return -np.sum(np.log(y[np.arange(batch_size), t] + 1e-7)) / batch_size\r\n\r\n\r\ndef
      softmax_loss(X, t):\r\n  y = softmax(X)\r\n  return cross_entropy_error(y, t)</span></pre>"
    - '2019-05-17 10:16:18.151877'
    - '2019-08-18 13:33:39.734545'
  - - 157
    - EC2仮想サーバーにpostgresqlをインストールする手順
    - "<h1 style=\"text-align: center;\">postgresqlのサーバはyumでインストールする</h1><p>どうやら <code>amazon-linux-extras</code>
      コマンドでは <code>psql</code> コマンドがインストールされるだけのようです。</p><p>なので、yumで入れましょう</p><p><br></p><p><span
      style=\"font-size: 30px;\">前提: EC2仮想サーバーにsshできる状態、ec2内にユーザーを作成済み(筆者の場合tatsuya)</span></p><p>　</p><h3>手順1.
      インストール</h3><p>と言うことで、postgresのサーバは普通に <code>yum install</code> でインストールしましょう。</p><pre>[tatsuya@ip-10-0-0-238
      ~]$<code>sudo</code> <code>yum </code><code>install</code> <code>-y postgresql
      postgresql-server postgresql-devel postgresql-contrib postgresql-docs</code></pre><p>結果(一部)</p><pre><code>Loaded
      plugins: extras_suggestions, langpacks, priorities, update-motd\r\namzn2-core
      \                                                                                                                                                                          \r\n\r\n〜〜中略〜〜\r\n\r\nComplete!\r\n</code></pre><p>確認</p><p><code>$
      psql --version</code></p><p><code>psql (PostgreSQL) 9.2.4</code></p><p>　</p><h3>手順2.
      初期設定</h3><p>次に初期設定を行います。以下のコマンドでできます。</p><p><code>## 初期化(PostgreSQLインストール後には必ず実施)</code></p><pre>[tatsuya@ip-10-0-0-238
      ~]$ <code>sudo </code><code>/sbin/service </code><code>postgresql initdb</code></pre><p><br></p><h3>サービスの起動・停止・再起動</h3><pre><code>##
      起動・停止・再起動</code></pre><pre>[tatsuya@ip-10-0-0-238 ~]$ <code>sudo </code><code>/sbin/service </code><code>postgresql
      start</code>\r\n<code>Starting postgresql service:                               </code><code>[
       OK  ]</code>\r\n[tatsuya@ip-10-0-0-238 ~]$<code>$ </code><code>sudo </code><code>/sbin/service </code><code>postgresql
      stop</code>\r\n<code>Stopping postgresql service:                          
          [  OK  ]</code>\r\n\r\n[tatsuya@ip-10-0-0-238 ~]$<code>sudo </code><code>/sbin/service </code><code>postgresql
      restart</code>\r\n<code>Stopping postgresql service:                        
            [  OK  ]</code>\r\n<code>Starting postgresql service: </code></pre><p>　</p><h3>サービスの自動起動化設定</h3><p>必要に応じて以下の自動起動設定を行なってください。</p><pre><code>$ </code><code>sudo
      </code><code>/sbin/chkconfig </code><code>--list | </code><code>grep </code><code>postgresql
      </code>\r\n<code><span style=\"color: rgb(163, 143, 132);\">postgresql      0:off
      1:off 2:off 3:off 4:off 5:off 6:off</span></code>\r\n<code>$ </code><code>sudo
      </code><code>/sbin/chkconfig </code><code>postgresql on</code>\r\n<code>$ </code><code>sudo
      </code><code>/sbin/chkconfig </code><code>--list | </code><code>grep </code><code>postgresql </code><code>postgresql</code>\r\n<code><span
      style=\"color: rgb(163, 143, 132);\">0:off 1:off 2:on  3:on  4:on  5:on  6:off</span></code></pre><p>　</p><h3>手順4.
      接続(ユーザー:postgres)</h3><p>ec2-userにてPostgreSQL用ユーザーpostgresのパスワードを変更します。</p><pre>[tatsuya@ip-10-0-0-238
      ~]$ <code>sudo </code><code>passwd </code><code>postgres</code>\r\n<code>ユーザー
      postgres のパスワードを変更。</code>\r\n<code>新しいパスワード:(**************)</code>\r\n<code>新しいパスワードを再入力してください:(**************)</code>\r\n<code>passwd</code><code>:
      全ての認証トークンが正しく更新できました。</code></pre><p><br></p><p>ユーザが変更出来ることを確認してみます。</p><pre>[tatsuya@ip-10-0-0-238
      ~]$<code> </code><code>su </code><code>- postgres</code>\r\n<code>パスワード:</code>\r\n<code>-</code><code>bash</code><code>-4.1$ </code><code>exit</code>\r\n<code>-</code><code>bash</code><code>-4.1</code></pre><p>次にpsqlコマンドで接続します。</p><p>psql
      -U postgres -h localhost</p><p>以下のような結果が得られればOKです。</p><pre><code>psql (9.6.8)\r\nType
      &quot;help&quot; for help.\r\n\r\npostgres=#</code></pre><p><br></p><h3>PG設定ファイルの編集</h3><p>設定ファイルpostgresql.confを編集。listen_addressは行先頭のコメントを除去し内容を『*』に変更</p><pre>$ <code>su
      </code><code>- postgres</code>\r\n<p><code>$ </code><code>vi </code><code>/var/lib/pgsql/data/postgresql</code><code>.conf</code></p><p><code>-----</code></p><p><code>...</code></p><p><code>#------------------------------------------------------------------------------</code></p><p><code>#
      CONNECTIONS AND AUTHENTICATION</code></p><p><code>#------------------------------------------------------------------------------</code></p>\r\n<p><code>#
      - Connection Settings -</code></p>\r\n<p><code><span style=\"color: rgb(243,
      121, 52);\">listen_addresses = </span></code><code><span style=\"color: rgb(243,
      121, 52);\">&#39;*&#39;</span></code>                  <code># what IP address(es)
      to listen on;</code></p>\r\n<p><code>                                        </code><code>#
      comma-separated list of addresses;</code></p>\r\n\r\n<p><code>             
                                </code><code># defaults to &#39;localhost&#39;; use
      &#39;*&#39; for all</code></p><code><code><span style=\"color: rgb(243, 121,
      52);\">port = 5432</span>                             </code><code># (change
      requires restart)</code></code></pre><p>次いでpg_hba.confの編集。ここは以下の様に最低限の設定でひとまず進めます。</p><pre><code>$ </code><code>vi
      </code><code>/var/lib/pgsql/data/pg_hba</code><code>.conf</code>\r\n\r\n# local
      \  all             all                                    peer\r\n<span style=\"color:
      rgb(163, 143, 132);\"># 以下に変更(peer認証を取り除く)</span>\r\nlocal   all             all
      \                                   md5\r\n\r\n# host    all             all
      \            127.0.0.1/32            ident\r\n<span style=\"color: rgb(163,
      143, 132);\"># 以下に変更(localhostからの時passwordを求めない)</span>\r\nhost    all             all
      \            127.0.0.1/32            trust</pre><p><code>trust でローカル環境なら　psql
      -U postgres -h localhost でパスワードなしでもアクセスできるようになる</code></p><ul><li>Ident ： DB
      の所有者がシェルを実行している OS のユーザ名と一致するかで認証</li><li>MD5 ： PW 認証 (MD5-hashed)</li><li>Trust
      ： 認証せず、DB への接続許可 (PW スルー)</li></ul><h2>DB接続用ユーザーの作成</h2><p>postgresユーザとは別に、今回の動作確認用のDB接続ユーザーを作成します。まずは、実行ユーザをpostgresにチェンジ。</p><pre><code>$ </code><code>su
      </code><code>- postgres</code>\r\n<code>パスワード: (***********)</code>\r\n<code>-</code><code>bash</code><code>-4.1$</code></pre><table
      style=\"margin-right: calc(75%); width: 25%;\"><tbody><tr><td style=\"width:
      63.9535%;\">ユーザー名<br></td><td style=\"width: 35.6589%;\">tatsuya<br></td></tr><tr><td
      style=\"width: 63.9535%;\">パスワード<br></td><td style=\"width: 35.6589%;\">cmtestpass<br></td></tr><tr><td
      style=\"width: 63.9535%;\">データベース(テスト環境)<br></td><td style=\"width: 35.6589%;\">db_test<br></td></tr><tr><td
      style=\"width: 63.9535%;\">データベース(開発環境)<br></td><td style=\"width: 35.6589%;\">db_development<br></td></tr><tr><td
      style=\"width: 63.9535%;\">データベース(本番環境)<br></td><td style=\"width: 35.6589%;\">db_production<br></td></tr></tbody></table><p><span
      style=\"color: rgb(243, 121, 52);\">ユーザー名はec2-user以外の登録したユーザを作成する。理由はEC2のユーザー名と、<span
      style=\"color: rgb(243, 121, 52);\">これから作成する</span>postgresqlサーバー内のユーザー名を合わせることで、勝手にユーザーを識別してくれる</span></p><pre><span
      style=\"color: rgb(243, 121, 52);\">[tatsuya@ip-10-0-0-238 ~]$ psql -l -U tatsuya</span></pre><p><span
      style=\"color: rgb(243, 121, 52);\">-Uを指定しなくてもpsql -lだけでユーザー名tatsuyaとして認識してくれてちょっと楽</span></p><p><span
      style=\"color: rgb(243, 121, 52);\">-Uオプション指定の手間なんて気にしないという人はcmtestuserなり好きなユーザー名を作成してください</span></p><p><br></p><h2>DB,
      role作成(やり方2通り書くがどちらでも良い)</h2><h3><span style=\"color: rgb(97, 189, 109);\">方法1.
      CLIで作成</span></h3><p><span style=\"color: rgb(97, 189, 109);\">今回作業用の接続ユーザー及びパスワードの設定は上記内容とします。まずはDB接続ユーザー作成/パスワード設定</span></p><pre>-bash-4.1$
      createuser -AdPE tatsuya\r\nEnter password for\r\nnew role: (作成ユーザー名に対応するパスワードを設定)\r\nEnter
      it again: (上記内容を再入力)\r\n-bash-4.1$</pre><p><span style=\"color: rgb(97, 189,
      109);\">ユーザーが利用するDBの作成(パスワードは上記作成ユーザのパスワードを入力)</span></p><pre>$ createdb -U
      tatsuya -W db_test\r\n$ createdb -U tatsuya -W db_production\r\n$ createdb -U
      tatsuya -W db_development\r\nPassword: (**********)\r\n-bash-4.1$ /usr/bin/pg_ctl
      restart -D /var/lib/pgsql/data -o &quot;-p 5432&quot; -w -t 300 # または\r\n[tatsuya@ip-10-0-0-238
      ~]$ sudo /sbin/service postgresql restart</pre><p><span style=\"color: rgb(97,
      189, 109);\">以上でDBに関する接続ユーザー情報の設定は完了。</span></p><p><br></p><h3><span style=\"color:
      rgb(26, 188, 156);\">方法2. SQLで作成</span></h3><pre>$ su - postgres\r\nパスワード: (***********)\r\n-bash-4.1$
      psql\r\npsql (9.2.24)\r\nType &quot;help&quot; for help.\r\n\r\n\r\npostgres=#
      CREATE ROLE ユーザ名 LOGIN CREATEDB PASSWORD &#39;ここにパスワード&#39;; # ユーザ名をtatsuya,パスワードにはpgサーバーにユーザー名でログインするときのパスワードを指定\r\npostgres=#
      CREATE DATABASE データベース名 OWNER ユーザ名; # db_test, db_development, db_productionを作成</pre><p><span
      style=\"color: rgb(26, 188, 156);\">ちなみにユーザー(ROLE)のパスワードを変更したい、忘れたので上書きしたい時とか以下でできる</span></p><pre>postgres=#　ALTER
      ROLE postgres with password &#39;postgres&#39;;</pre><p><span style=\"color:
      rgb(26, 188, 156);\">上記サンプルでは「postgres」という文字列のパスワードを設定しています</span></p><p><br></p><h2>接続確認(Local:CUI)</h2><pre><code>$ </code><code>su
      </code><code>- tatsuya</code>\r\n<code>パスワード:</code></pre><pre>[tatsuya@ip-10-0-0-238
      ~]$ psql -l\r\nパスワード: \r\n                                                データベース一覧\r\n 
              名前           |  所有者  | エンコーディング |  照合順序   | Ctype(変演算子) |      アクセス権
            \r\n-------------------------+----------+------------------+-------------+----------\r\n---------+-----------------------\r\n db_test
      | tatsuya  | UTF8             | en_US.UTF-8 | en_US.UTF-8       | \r\n db_production
       | tatsuya  | UTF8             | en_US.UTF-8 | en_US.UTF-8       | \r\n db_development
             | tatsuya  | UTF8             | en_US.UTF-8 | en_US.UTF-8       | \r\n postgres
                     | postgres | UTF8             | en_US.UTF-8 | en_US.UTF-8    
        | \r\n template0               | postgres | UTF8             | en_US.UTF-8
      | en_US.UTF-8       | =c/postgres          +\r\n                         |  
             |                  |             |          \r\n         | postgres=CTc/postgres\r\n template1
                    | postgres | UTF8             | en_US.UTF-8 | en_US.UTF-8    
        | =c/postgres          +\r\n                         |          |        
               |             |          \r\n         | postgres=CTc/postgres\r\n(6
      行)\r\n\r\n</pre><p><br></p><p><br></p><p><br></p><ul><li><strong><a href=\"http://www.pgadmin.org/\">pgAdmin:
      PostgreSQL administration and management tools</a>で確認してみると良い</strong></li></ul><p><br></p><p><code><code><a
      href=\"https://dev.classmethod.jp/cloud/aws/install-postgresql-on-aws-ec2/\"></a>参考記事
      <a href=\"https://dev.classmethod.jp/cloud/aws/install-postgresql-on-aws-ec2/\">https://dev.classmethod.jp/cloud/aws/install-postgresql-on-aws-ec2/</a></code></code></p><p><a
      href=\"https://www.setouchino.cloud/blogs/95\"></a><a href=\"https://www.setouchino.cloud/blogs/95\">https://www.setouchino.cloud/blogs/95</a></p><p><a
      href=\"http://cocodrips.hateblo.jp/entry/2017/09/04/213323\"></a><a href=\"http://cocodrips.hateblo.jp/entry/2017/09/04/213323\">http://cocodrips.hateblo.jp/entry/2017/09/04/213323</a></p><p><br></p><p><br></p><p><br></p><p><br></p><p>アンインストール</p><p>sudo
      yum -y remove postgresql*</p><p>sudo rm -rf /var/lib/pgsql*</p><p>sudo rm -rf
      /var/lib/postgresql*</p>"
    - '2019-05-20 04:12:01.201069'
    - '2019-06-11 11:15:47.472281'
  - - 158
    - EC2に入れたMySQL5.6を8.0にする
    - "<h1 style=\"text-align: center;\">EC2仮想サーバーに入れたMySQL5.6を8.0にする</h1><p><br></p><p>現在,
      仮想サーバーに入れたMySQLは以下の通り5.7です。</p><pre>[tatsuya@ip-10-0-0-238 ~]$ mysql -u root
      -p\r\nEnter password: \r\nWelcome to the MySQL monitor.  Commands end with ;
      or \\g.\r\nYour MySQL connection id is 13\r\nServer version: 5.7.26 MySQL Community
      Server (GPL)</pre><p><br></p><h2>初めに...MySQL8.0を入れてみる</h2><pre>[tatsuya@ip-10-0-0-238
      rails] $sudo rpm -ivh https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm\r\n\r\nhttps://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm
      を取得中\r\nエラー: 依存性の欠如:\r\nmysql57-community-release は mysql80-community-release-el7-2.noarch
      と競合します。</pre><p>MySQL5.7がすでに入っていて、新たに入れようとしているMySQL8.0と競合を起こすとエラーが出ています。</p><p><code>$
      yum list installed | grep mysql でインストール済みのmysqlを確認できる</code></p><h2>MySQL5.6を一旦アンインストールする</h2><pre>[tatsuya@ip-10-0-0-238
      /]$ sudo yum remove mysql\r\n[sudo] tatsuya のパスワード:\r\n読み込んだプラグイン:extras_suggestions,
      langpacks, priorities, update-motd\r\n依存性の解決をしています\r\n--&gt; トランザクションの確認を実行しています。\r\n---&gt;
      パッケージ mysql-community-client.x86_64 0:5.7.26-1.el7 を 削除\r\n--&gt; 依存性の処理をしています:
      mysql-community-client(x86-64) &gt;= 5.7.9 のパッケージ: mysql-community-server-5.7.26-1.el7.x86_64\r\n--&gt;
      トランザクションの確認を実行しています。\r\n---&gt; パッケージ mysql-community-server.x86_64 0:5.7.26-1.el7
      を 削除\r\n--&gt; 依存性解決を終了しました。\r\namzn2-core/2/x86_64                        
                   | 2.4 kB     00:00     \r\n...\r\n依存性を解決しました</pre><pre>[tatsuya@ip-10-0-0-238
      /]$ sudo rm -rf /var/lib/mysql</pre><pre>[tatsuya@ip-10-0-0-238 /]$ sudo yum
      remove mysql*\r\n読み込んだプラグイン:extras_suggestions, langpacks, priorities, update-motd\r\n依存性の解決をしています\r\n--&gt;
      トランザクションの確認を実行しています。\r\n---&gt; パッケージ mysql-community-common.x86_64 0:5.7.26-1.el7
      を 削除\r\n---&gt; パッケージ mysql-community-devel.x86_64 0:5.7.26-1.el7 を 削除\r\n---&gt;
      パッケージ mysql-community-libs.x86_64 0:5.7.26-1.el7 を 削除\r\n---&gt; パッケージ mysql57-community-release.noarch
      0:el7-10 を 削除\r\n--&gt; 依存性解決を終了しました。\r\n\r\n...\r\n依存性を解決しました</pre><h2><br></h2><h2>MySQL8.0を入れる</h2><pre>[tatsuya@ip-10-0-0-238
      /]$ sudo  rpm -ivh <a href=\"https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm\">https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</a>\r\nhttps://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm
      を取得中\r\n準備しています...              ################################# [100%]\r\n更新中
      / インストール中...\r\n   1:mysql80-community-release-el7-1  #################################
      [100%]</pre><pre>[tatsuya@ip-10-0-0-238 /]$ sudo  yum -y install mysql-community-server
      mysql-devel\r\n読み込んだプラグイン:extras_suggestions, langpacks, priorities, update-motd\r\nmysql80-community
                                             | 2.5 kB     00:00     \r\nmysql80-community/x86_64/primary_db
                             |  70 kB   00:00     \r\n200 packages excluded due to
      repository priority protections\r\n依存性の解決をしています\r\n...\r\n--&gt; 依存性解決を終了しました。\r\n依存性を解決しました</pre><p><code>ロックファイル
      /var/run/yum.pid が存在します: PID 5633 として別に実行されています。みたいなエラーが出たら...</code></p><p><code>[tatsuya@ip-10-0-0-238
      /]$ sudo rm -rf /var/run/yum.pid</code></p><p><br></p><h2>MySQL初期設定</h2><pre>[tatsuya@ip-10-0-0-238
      /]$ sudo  systemctl start mysqld.service\r\n[tatsuya@ip-10-0-0-238 /]$ sudo
       systemctl enable mysqld.service\r\n[tatsuya@ip-10-0-0-238 /]$ grep password
      /var/log/mysqld.log\r\n2019-05-21T03:09:44.809223Z 5 [Note] [MY-010454] [Server]
      A temporary <strong>password</strong> is generated for root@localhost: ##########(臨時パスワード)</pre><pre>[tatsuya@ip-10-0-0-238
      /]$ sudo mysql_secure_installation\r\n\r\nSecuring the MySQL server deployment.\r\nEnter
      password for user root: (臨時パスワードを打ち込む)\r\nThe existing password for the user
      account root has expired. Please set a new password.\r\nNew password: (新規パスワード)\r\nRe-enter
      new password: (もう一度)\r\nThe &#39;validate_password&#39; component is installed
      on the server.\r\nThe subsequent steps will run with the existing configuration\r\nof
      the component.\r\nUsing existing password for root.\r\nEstimated strength of
      the password: 100 \r\nChange the password for root ? ((Press y|Y for Yes, any
      other key for No) : y\r\nNew password: \r\nRe-enter new password: \r\nEstimated
      strength of the password: 100 \r\nDo you wish to continue with the password
      provided?(Press y|Y for Yes, any other key for No) : y\r\nEstimated strength
      of the password: 100 \r\nDo you wish to continue with the password provided?(Press
      y|Y for Yes, any other key for No) : y\r\nBy default, a MySQL installation has
      an anonymous user,\r\nallowing anyone to log into MySQL without having to have\r\na
      user account created for them. This is intended only for\r\ntesting, and to
      make the installation go a bit smoother.\r\nYou should remove them before moving
      into a production\r\nenvironment.\r\nRemove anonymous users? (Press y|Y for
      Yes, any other key for No) : y\r\nSuccess.\r\nNormally, root should only be
      allowed to connect from\r\n&#39;localhost&#39;. This ensures that someone cannot
      guess at\r\nthe root password from the network.\r\nDisallow root login remotely?
      (Press y|Y for Yes, any other key for No) : \r\n ... skipping.\r\nBy default,
      MySQL comes with a database named &#39;test&#39; that\r\nanyone can access.
      This is also intended only for testing,\r\nand should be removed before moving
      into a production\r\nenvironment.\r\nRemove test database and access to it?
      (Press y|Y for Yes, any other key for No) : \r\n ... skipping.\r\nReloading
      the privilege tables will ensure that all changes\r\nmade so far will take effect
      immediately.\r\nReload privilege tables now? (Press y|Y for Yes, any other key
      for No) : \r\n ... skipping.\r\nAll done!</pre><p><br></p><h2>発行したパスワードでログインしてみる</h2><pre>[tatsuya@ip-10-0-0-238
      /]$ mysql -uroot -p\r\nEnter password: \r\nWelcome to the MySQL monitor.  Commands
      end with ; or \\g.\r\nYour MySQL connection id is 13\r\nServer version: <span
      style=\"color: rgb(184, 49, 47);\">8.0.16</span> MySQL Community Server - GPL\r\n\r\nCopyright
      (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\r\n\r\nOracle
      is a registered trademark of Oracle Corporation and/or its\r\naffiliates. Other
      names may be trademarks of their respective\r\nowners.\r\n\r\nType &#39;help;&#39;
      or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.\r\nmysql&gt;
      select version();\r\n+-----------+\r\n| version() |\r\n+-----------+\r\n| <span
      style=\"color: rgb(184, 49, 47);\">8.0.16</span>    |\r\n+-----------+\r\n1
      row in set (0.00 sec)</pre>"
    - '2019-05-21 03:14:54.744679'
    - '2019-05-21 04:04:03.770659'
  - - 159
    - EC2仮想サーバーにRuby On Rails5.2 のアプリをクローンした後の稼働まで
    - "<h3>目的: Rails4までは　$ rake secret でシークレットキーを確認してconfig/secrets.yml に貼り付けることで本番環境でファイルを読み込めるようになっていた。</h3><h3>Rails5.2から機密情報をcredentialsで暗号化する手法が導入され、MASTERを使ってファイルを読み込む。</h3><h3>今回はMASTERKEYをどう渡すのか、そしてDBをどう設定してローカルで動いていた時みたいに稼働させるのか、手順を記す。</h3><p><br></p><h2><br>環境変数：RAILS_MASTER_KEY</h2><p><code>/config/master.key</code>が共有できない環境では<strong>master
      key</strong>を<strong>環境変数：RAILS_MASTER_KEY</strong>で指定します。</p><p><code>/config/master.key</code>が存在せず、<strong>環境変数：RAILS_MASTER_KEY</strong>で<strong>master
      key</strong>が設定されてない場合は<strong>credentials.yml.enc</strong>内のデータは読み取れません。</p><p>今回は/config/master.keyを作成しますが、EC2では
      $ export RAILS_MASTER_KEY=&quot;xxx&quot;で設定したら読み込めなくなります。</p><p><br></p><h2>GitHubからRailsアプリをクローン</h2><p>作成したprojectsへ移動</p><pre>$
      cd /var/www/projects</pre><p><br></p><p>bundlerをインストール</p><pre>$ gem install
      bundler</pre><p><br></p><p>Gemfileを作成</p><pre>$ bundle init</pre><p><br></p><p>Gemfileを編集</p><pre>$
      vim Gemfile</pre><p><br></p><p>Railsバージョンを記載</p><pre>gem &quot;rails&quot;, &#39;5.2.3&#39;</pre><p><br></p><p>vendor/bundleへgemをインストール</p><pre>$
      bundle install --path vendor/bundle --jobs=4\r\n$ bundle exec rails -v</pre><p><br></p><p>GitHubからアプリをクローン</p><pre>$
      git clone git@github.com:GitHubのユーザー名/リポジトリ名.git\r\n$ ls# リポジトリ名  Gemfile  Gemfile.lock
      \ vendor</pre><p><br></p><p>クローンしたディレクトリへ移動</p><pre>$ cd リポジトリ名/</pre><p><br></p><p>gemインストール</p><pre>$
      bundle install --path vendor/bundle</pre><p><br></p><p>ローカル環境で開発していたときと同じ状態になるようにmaster.keyをconfig配下に作成する</p><pre>$
      cd config\r\n$ vi master.key\r\n---\r\n.gitignoreされているマスターキーを貼り付ける\r\n---</pre><p>これで、credentialsで暗号化したファイルの内容を読み込むことができるようになる!</p><p><br></p><p>ちなみに...$
      export RAILS_MASTER_KEY=&quot;xxx&quot;で環境変数から設定したら読み込めませんでした。</p><p><br></p><p><br></p><h2>DBのテーブル作成</h2><p>初めにMySQLなり
      PostgreSQLなりでDBやユーザー、パスワード設定までdatabase.ymlと同じ設定の環境を用意する。</p><p>これをしとかないと、MySQLサーバー,
      PostgreSQLサーバーにそもそも接続ができない</p><pre>ec2サーバーにsshした後に\r\n$ bundle exec rake db:schema:load
      RAILS_ENV=&quot;test&quot;\r\n$ bundle exec rake db:schema:load RAILS_ENV=&quot;development&quot;\r\n$
      bundle exec rake db:schema:load RAILS_ENV=&quot;production&quot;</pre><p>テーブル一覧が作成されるはず！</p><p><br></p><p><span
      style=\"color: rgb(163, 143, 132);\">ちなみに画像表示が必要な場合...クローンしたら</span></p><pre>bundle
      exec rake assets:precompile RAILS_ENV=&quot;test&quot;</pre><pre>bundle exec
      rake assets:precompile RAILS_ENV=&quot;development&quot;</pre><pre>bundle exec
      rake assets:precompile RAILS_ENV=&quot;production&quot;</pre><p><span style=\"color:
      rgb(163, 143, 132);\">も早めにしとこう</span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-05-24 05:05:04.718116'
    - '2019-05-24 06:43:44.526384'
  - - 160
    - Rails5.2 EC2サーバーでRailsコンソールが起動しない
    - "<h1 style=\"text-align: center;\">bin/rails sとかは動くのにコンソールが不動</h1><p><br></p><pre>[tatsuya@ip-10-0-0-238
      my-project]$ bin/rails c</pre><p>...ずっとこのままです。</p><p>control + c で止めると...</p><pre>^C/var/www/rails/my-project/vendor/bundle/ruby/2.4.0/gems/spring-2.0.2/lib/spring/client/run.rb:117:in
      `gets&#39;: Interrupt\r\nfrom /var/www/rails/my-project/vendor/bundle/ruby/2.4.0/gems/spring-2.0.2/lib/spring/client/run.rb:117:in
      `verify_server_version&#39;\r\nfrom /var/www/rails/my-project/vendor/bundle/ruby/2.4.0/gems/spring-2.0.2/lib/spring/client/run.rb:62:in
      `run&#39;\r\nfrom /var/www/rails/my-project/vendor/bundle/ruby/2.4.0/gems/spring-2.0.2/lib/spring/client/run.rb:42:in
      `warm_run&#39;\r\n...\r\n...</pre><p><br></p><h1>調査と対応</h1><p>調べてみるとspringというプロセスがrails
      consoleを走らせた時に走っているらしい。</p><p>springのプロセスが走っているか確認</p><pre>[tatsuya@ip-10-0-0-238
      my-project]$ bin/spring status\r\nSpring is running:\r\n\r\n\r\n10327 spring
      server | my-project | started 74 hours ago\r\n11326 [ruby] &lt;defunct&gt;</pre><p>何もしていないのにsprig
      のプロセスが起動しっぱなしだった。</p><p>原因を調べてみると、この my-projectに当たるプロジェクトを同名で、以前に何度か作っては壊し、作っては壊しを続けていた。<br>そのため、すでに壊した環境のrails
      consoleのプロセスがそのまま残ってしまっていたらしい... <img alt=\":sweat_smile:\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f605.png\"
      title=\":sweat_smile:\" width=\"20\" class=\"fr-fic fr-dii\"></p><h2>解決法：springデーモンをkillする</h2><pre>[tatsuya@ip-10-0-0-238
      my-project]$ ps axww | grep spring\r\nXXXXX ?        Sl     0:00 <strong>spring</strong>
      server | froala-blog | started 74 hours ago\r\nYYYYY pts/2    S+     0:00 grep
      --color=auto <strong>spring</strong>\r\n[tatsuya@ip-10-0-0-238 froala-blog]$
      kill -9 XXXXX\r\n\r\n\r\n[tatsuya@ip-10-0-0-238 froala-blog]$ bin/rails c\r\nRunning
      via Spring preloader in process 17428\r\nLoading development environment (Rails
      5.2.3)\r\nirb(main):001:0&gt;</pre><h2>動いたー！！<span class=\"fr-emoticon fr-deletable
      fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f607.svg);\">&nbsp;&nbsp;</span>\r\n<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f607.svg);\">&nbsp;</span>
      &nbsp;</h2><p><br></p><h1><span style=\"font-family: Georgia, serif;\">最後に:
      同じ名前でプロジェクトを作ったり壊したりするときはプロセスが残っていないか確認しよう。</span></h1><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-05-24 07:49:20.225236'
    - '2019-05-24 08:03:55.945239'
  - - 161
    - EC2内にRails5.2 + unicorn(アプリケーションサーバ) + Nginx(Webサーバ) を導入
    - "<p><span style=\"font-size: 30px;\">前提: ruby, データベースのユーザー作成済み、gitの連携が終わっていて、
      AWSで公開する最終段階にいることを想定</span></p><p><span style=\"font-size: 18px;\"><br></span></p><p><span
      style=\"font-size: 18px;\">初めに:&nbsp;</span></p><ul><li><span style=\"font-size:
      18px;\">Webサーバは、HTTPに則り、クライアントソフトウェアのウェブブラウザに対して、HTMLやオブジェクト（画像など）の表示を提供するサービスプログラム及び、サーバコンピュータを指す
      (wikipedia)</span></li><li><span style=\"font-size: 18px;\">アプリケーションサーバは、ビジネスロジックなどを実装したアプリケーションソフトウェアを実行することを専門とするコンピュータネットワーク上のサーバコンピュータ、もしくはそのようなコンピュータ上でのアプリケーションの実行を管理補助するミドルウェアのこと。クライアントからのHTTPのレスポンス要求を処理するウェブサーバとバックエンドのデータベース中核層への橋渡しを担い、データの加工などの処理を行う。
      (wikipedia)</span></li></ul><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1559550316169-server.png\"
      style=\"width: 470px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>(<a href=\"https://www.draw.io/\"></a><a
      href=\"https://www.draw.io/\">https://www.draw.io/</a> で上記画像を作成しました。面白いので使ってみてね)</p><p>ちなみに、rails
      s　のコマンドを打ち込んで起動するサーバー(WEBrick)は、<strong>アプリケーションサーバー</strong>です。</p><p>大半のアプリケーションサーバーは、webサーバーを使わずに単体で実行できます。<br>(本番環境ではwebサーバーを設置することがほとんどですが)</p><p><br></p><p><br></p><h2>手順1.
      Unicornの設定</h2><pre><strong>Unicorn</strong>とはアプリケーションサーバーの一種です。\r\n[tatsuya@ip-10-0-0-238
      ~] $: vi Gemfile\r\n-----------------------------\r\n#以下を追記\r\ngroup :production,
      :staging do\r\n    gem &#39;unicorn&#39;\r\nend\r\n----------------------------\r\n[tatsuya@ip-10-0-0-238
      ~] $ gem install bundler\r\n[tatsuya@ip-10-0-0-238 ~] $ bundle install\r\n[tatsuya@ip-10-0-0-238
      ~] $ vi config/unicorn.conf.rb\r\n----------------------------</pre><p>viコマンドでconfig配下に生成したunicornの設定ファイルに、下記を記述します。</p><p>unicorn.conf.rb</p><pre>
      \ # set lets\r\n  $worker  = 2\r\n  $timeout = 30\r\n  $app_dir = &quot;/var/www/rails/myapp&quot;
      #自分のアプリケーション名\r\n  $listen  = File.expand_path &#39;tmp/sockets/unicorn.sock&#39;,
      $app_dir\r\n  $pid     = File.expand_path &#39;tmp/pids/unicorn.pid&#39;, $app_dir\r\n
      \ $std_log = File.expand_path &#39;log/unicorn.log&#39;, $app_dir\r\n  # set
      config\r\n  worker_processes  $worker\r\n  working_directory $app_dir\r\n  stderr_path
      $std_log\r\n  stdout_path $std_log\r\n  timeout $timeout\r\n  listen  $listen\r\n
      \ pid $pid\r\n  # loading booster\r\n  preload_app true\r\n  # before starting
      processes\r\n  before_fork do |server, worker|\r\n    defined?(ActiveRecord::Base)
      and ActiveRecord::Base.connection.disconnect!\r\n    old_pid = &quot;#{server.config[:pid]}.oldbin&quot;\r\n
      \   if old_pid != server.pid\r\n      begin\r\n        Process.kill &quot;QUIT&quot;,
      File.read(old_pid).to_i\r\n      rescue Errno::ENOENT, Errno::ESRCH\r\n      end\r\n
      \   end\r\n  end\r\n  # after finishing processes\r\n  after_fork do |server,
      worker|\r\n    defined?(ActiveRecord::Base) and ActiveRecord::Base.establish_connection\r\n
      \ end</pre><p>これでUnicornの設定が完了です。</p><p><br></p><h2>手順2. Nginxの設定</h2><p>NginxはWebサーバーにあたります。</p><pre>[tatsuya@ip-10-0-0-238
      ~] sudo yum install nginx\r\n[tatsuya@ip-10-0-0-238 ~]$ cd /etc/nginx/conf.d/\r\n[tatsuya|conf.d]$
      sudo vi myapp.conf #自分のアプリケーション名でファイル名変更</pre><p>viコマンドで作成したnginxの設定ファイルには、下記を記述します。</p><p><br></p><p>myapp.conf(アプリ名.conf)</p><pre>#
      log directory\r\nerror_log  /var/www/rails/myapp/log/nginx.error.log; #自分のアプリケーション名に変更\r\naccess_log
      /var/www/rails/myapp/log/nginx.access.log; #自分のアプリケーション名に変更\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream <span style=\"color: rgb(243, 121, 52);\">app_server</span>
      {\r\n  # for UNIX domain socket setups\r\n  server unix:/var/www/rails/myapp/tmp/sockets/unicorn.sock
      fail_timeout=0; #自分のアプリケーション名に変更\r\n}\r\nserver {\r\n  listen 80;\r\n  server_name
      ~~~.~~~.~~~.~~~;(#アプリのElastic IPに変更してください)\r\n  # nginx so increasing this is
      generally safe...\r\n  keepalive_timeout 5;\r\n  # path for static files\r\n
      \ root /var/www/rails/myapp/public; #自分のアプリケーション名に変更\r\n  # page cache loading\r\n
      \ try_files $uri/index.html $uri.html $uri @app;\r\n  location @app {\r\n    #
      HTTP headers\r\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n
      \   proxy_set_header Host $http_host;\r\n    proxy_redirect off;\r\n    proxy_pass
      http://<span style=\"color: rgb(243, 121, 52);\">app_server</span>;\r\n  }\r\n
      \ # Rails error pages\r\n  error_page 500 502 503 504 /500.html;\r\n  location
      = /500.html {\r\n    root /var/www/rails/myapp/public; #自分のアプリケーション名に変更\r\n
      \ }\r\n}</pre><p><br></p><p>下記のファイルで読み込まれます。なお下記のファイルはデフォルトのままにしておきます。</p><p>etc/nginx/nginx.conf</p><pre>#
      for more information on configuration, see:\r\n#   * Official English Documentation:
      <a href=\"http://nginx.org/en/docs/\">http://nginx.org/en/docs/</a>\r\n#   *
      Official Russian Documentation: http://nginx.org/ru/docs/\r\n\r\nuser nginx;\r\nworker_processes
      auto;\r\nerror_log /var/log/nginx/error.log;\r\npid /var/run/nginx.pid;\r\n\r\n#
      Load dynamic modules. See /usr/share/nginx/README.dynamic.\r\ninclude /usr/share/nginx/modules/*.conf;\r\n\r\nevents
      {\r\n  worker_connections 1024;\r\n}\r\n\r\nhttp {\r\nlog_format  main  &#39;$remote_addr
      - $remote_user [$time_local] &quot;$request&quot; &#39;\r\n&#39;$status $body_bytes_sent
      &quot;$http_referer&quot; &#39;\r\n&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\r\n\r\naccess_log
       /var/log/nginx/access.log  main;\r\n\r\nsendfile            on;\r\ntcp_nopush
               on;\r\ntcp_nodelay         on;\r\nkeepalive_timeout   65;\r\ntypes_hash_max_size
      2048;\r\n\r\ninclude             /etc/nginx/mime.types;\r\ndefault_type    
         application/octet-stream;\r\n\r\n# Load modular configuration files from
      the /etc/nginx/conf.d directory.\r\n# See http://nginx.org/en/docs/ngx_core_module.html#include\r\n#
      for more information.\r\ninclude /etc/nginx/conf.d/*.conf;\r\n\r\nserver {\r\nlisten
            80 default_server;\r\nlisten       [::]:80 default_server;\r\nserver_name
       _;\r\nroot         /usr/share/nginx/html;\r\n\r\n# Load configuration files
      for the default server block.\r\ninclude /etc/nginx/default.d/*.conf;\r\n\r\nlocation
      / {\r\n}\r\n\r\nerror_page 404 /404.html;\r\nlocation = /40x.html {\r\n}\r\n\r\nerror_page
      500 502 503 504 /50x.html;\r\nlocation = /50x.html {\r\n}\r\n}\r\n\r\n# Settings
      for a TLS enabled server.\r\n#\r\n#    server {\r\n#        listen       443
      ssl http2 default_server;\r\n#        listen       [::]:443 ssl http2 default_server;\r\n#
             server_name  _;\r\n#        root         /usr/share/nginx/html;\r\n#\r\n#
             ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;\r\n#        ssl_certificate_key
      &quot;/etc/pki/nginx/private/server.key&quot;;\r\n#        ssl_session_cache
      shared:SSL:1m;\r\n#        ssl_session_timeout  10m;\r\n#        ssl_ciphers
      HIGH:!aNULL:!MD5;\r\n#        ssl_prefer_server_ciphers on;\r\n#\r\n#      
       # Load configuration files for the default server block.\r\n#        include
      /etc/nginx/default.d/*.conf;\r\n#\r\n#        location / {\r\n#        }\r\n#\r\n#
             error_page 404 /404.html;\r\n#            location = /40x.html {\r\n#
             }\r\n#\r\n#        error_page 500 502 503 504 /50x.html;\r\n#        
         location = /50x.html {\r\n#        }\r\n#    }\r\n\r\n}</pre><p><br></p><p>設定ファイルの記述が終わったら、下記も実行してください。やらないと画像のアップロード等のファイル送信系はPermission
      deniedになります</p><pre>[tatsuya|conf.d] cd /var/lib\r\n[tatsuya|lib] sudo chmod
      -R 775 nginx</pre><h2>MySQLの設定</h2><p><br></p><p>続いてDBです。<br>(アプリケーションのDBがMySQLで作成されている前提で話を進めていきます。)</p><p>下記コマンドを打ち込み、MySQLに関する設定を変更していきましょう。</p><pre>[tatsuya|myapp]$
      vi config/database.yml\r\n----------------------------\r\n  production:\r\n
      \   &lt;&lt;: *default\r\n    database: &lt;%= Rails.application.credentials.db[:database]
      %&gt;\r\n    username: &lt;%= Rails.application.credentials.db[:username] %&gt;\r\n
      \   password: &lt;%= Rails.application.credentials.db[:password] %&gt;\r\n    host:
      &lt;%= Rails.application.credentials.db[:host] %&gt; # RDSを使ってないので、とりあえずlocalhostを指定しています
      RDS使用者はエンドポイント</pre><pre>[tatsuya|myapp]$ EDITOR=vim bin/rails credentials:edit\r\ndb:\r\n 
      database: xxxxx\r\n  username: xxxxx\r\n  password: xxxxx\r\n  host: xxxxx\r\n...</pre><pre>[tatsuya|myapp]$
      sudo service mysqld start #mysqldの起動\r\n[tatsuya|myapp]$ ln -s /var/lib/mysql/mysql.sock
      /tmp/mysql.sock\r\n[tatsuya|myapp]$ rake db:create RAILS_ENV=production\r\n[tatsuya|myapp]$
      rake db:migrate RAILS_ENV=production</pre><p>アプリのmigrationファイルが実行されたログが出て来れば無事成功です(権限が原因でmysqldの起動が出来ないことがあります。その場合はchownやchmodコマンドでmysql関連ファイルの権限を変更してあげましょう。)</p><h2>Nginxの起動</h2><p>Nginxを起動</p><pre>[tatsuya|myapp]$
      sudo service nginx start</pre><p>http://xx.xx.xx.xx (Elastic IPアドレス) にアクセス</p><p>もし繋がらなかったらUnicornを再起動もしくは停止してたら起動させる</p><pre>[myapp]$
      ps -ef | grep unicorn | grep -v grep\r\ntatsuya  <span style=\"color: rgb(243,
      121, 52);\">xxxxx</span>     1  0 05:19 ?        00:00:01 unicorn_rails master
      -c /var/www/rails/myapp/config/unicorn.conf.rb -D -E production\r\ntatsuya  yyyyy
      xxxxx  0 05:19 ?        00:00:00 unicorn_rails worker[0] -c /var/www/rails/myapp/config/unicorn.conf.rb
      -D -E production\r\ntatsuya  zzzzz xxxxx  0 05:19 ?        00:00:00 unicorn_rails
      worker[1] -c /var/www/rails/myapp/config/unicorn.conf.rb -D -E production</pre><p>こんな感じで3行表示されていれば既に起動されています。何も表示されなかったら起動してません</p><h3>[起動方法]</h3><pre>[tatsuya]$
      unicorn_rails -c /var/www/rails/myapp(アプリの名前)/config/unicorn.conf.rb -D -E production
      #unicornを起動させる</pre><h3>[再起動方法]</h3><p>・一旦きる</p><pre>[tatsuya]$ kill -9 <span
      style=\"color: rgb(243, 121, 52);\">xxxx </span># unicornプロセスをきる</pre><p>・起動する</p><pre>[tatsuya]$
      unicorn_rails -c /var/www/rails/myapp(アプリの名前)/config/unicorn.conf.rb -D -E production
      #unicornを起動させる</pre><p><br></p><p>Nginxもリロードさせます。</p><pre>[tatsuya|myapp]$ sudo
      nginx -s reload</pre><p><br></p><p>アクセスできれば完了</p><p>「このサイトにアクセスできません」となる人は本番環境設定でブロックしてしまっている可能性があります。ssl設定を確認しましょう</p><p>config/environments/production.rb</p><pre>config.force_ssl
      = true\r\nを\r\nconfig.force_ssl = false\r\nに変更(ssl証明書をまだ発行していない人はtrueだとアクセスできない)</pre><p><br></p><p>勝手にhttpsにリダイレクトされてしまう人は</p><p>chromeにて</p><p>&nbsp;閲覧履歴を消去-&gt;キャッシュされた画像ファイルを削除-&gt;データを削除<br>キャッシュを捨てることで,httpsに勝手に飛ばされていたのをhttpでアクセスできるようになる</p><p><br></p><p>セキュリティグループの許可について</p><p>インバウンド設定、アウトバウンド設定にてhttpの許可を出しておく</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1559554922005-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-03+18.34.49.png\"
      style=\"width: 557px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>上記をきちんとやれていればアクセスできるはずです！</p><p>祝デプロイ！</p><p><span
      style=\"font-size: 60px;\">完！！</span></p><p><br></p><p><br></p><p><br></p><p>d以下、サーバーでの多用コマンド(注意:
      筆者のアプリ名はfroala-blogなので自分のアプリ名に読み替えてください)</p><h2>・nginx</h2><p>アクセスログ(アプリ接続)</p><pre>sudo
      tail -f /var/www/rails/froala-blog/log/nginx.access.log</pre><p>エラーログ(アプリ接続)</p><pre>sudo
      tail -f /var/www/rails/froala-blog/log/nginx.error.log</pre><p>アクセスログ(エンジン起動時)</p><pre>sudo
      tail -f /var/log/nginx/access.log</pre><p>エラーログ(エンジン起動時)</p><pre>sudo tail -f
      /var/log/nginx/error.log</pre><p>リロード</p><pre>sudo nginx -s reload</pre><p>スタート、ストップ、再起動</p><pre>sudo
      service nginx start\r\nsudo service nginx stop\r\nsudo service nginx restart</pre><p>プロセスのポートを調べる(nginxをstopできないときにプロセスをkillして再起動)</p><pre>ps
      aux | grep nginx</pre><p>ポートをきる</p><pre>kill -9 xxxx</pre><p>nginxの設定ファイル編集</p><pre>sudo
      vi /etc/nginx/nginx.conf</pre><p>アプリのnginxとの接続設定ファイル編集</p><pre>sudo vi /etc/nginx/conf.d/froala-blog.conf</pre><p><br></p><h2>・unicorn</h2><p>unicornログ</p><pre>sudo
      tail -f /var/www/rails/froala-blog/log/unicorn.log</pre><p>unicorn設定ファイル編集</p><pre>vim
      /var/www/rails/froala-blog/config/unicorn.conf.rb</pre><p>unicorn起動</p><pre>bundle
      exec unicorn_rails -c /var/www/rails/froala-blog/config/unicorn.conf.rb -D -E
      production</pre><p>プロセス確認</p><pre>ps -ef | grep unicorn | grep -v grep</pre><p>ポート確認</p><pre>cat
      /var/www/rails/froala-blog/tmp/pids/unicorn.pid</pre><p>停止(プロセス確認からポートを探ってkillしてもいいが以下だと一行で停止できる)</p><pre>sudo
      kill -QUIT `cat /var/www/rails/froala-blog/tmp/pids/unicorn.pid`</pre><p>起動</p><pre>bundle
      exec unicorn_rails -c /var/www/rails/froala-blog/config/unicorn.conf.rb -D -E
      production</pre><p>再起動</p><pre>sudo kill -HUP `cat /var/www/rails/froala-blog/tmp/pids/unicorn.pid`</pre><p><br></p><p><br></p><p>参考文献
      <a href=\"https://qiita.com/naoki_mochizuki/items/5a1757d222806cbe0cd1\"></a><a
      href=\"https://qiita.com/naoki_mochizuki/items/5a1757d222806cbe0cd1\">https://qiita.com/naoki_mochizuki/items/5a1757d222806cbe0cd1</a></p><p><br></p>"
    - '2019-06-03 06:12:43.788525'
    - '2019-07-08 10:05:18.902384'
  - - 162
    - "『ゼロから作る Deep Learning 第4章"
    - "<h1 style=\"text-align: center;\">『ゼロから作る Deep Learning』第4章 勉強メモ(最低限)</h1><h2>損失関数</h2><p>ニューラルネットワークの性能の&ldquo;悪さ&rdquo;を示す指標で一般には、2
      乗和誤差や交差エントロピー誤差などが用いられる</p><h3>2 乗和誤差</h3><h4>E = &frac12; &sum; (y-t)&sup2;</h4><pre>def
      mean_squared_error(y, t):\r\n  return 0.5 * np.sum((y-t)**2)\r\n&gt;&gt;&gt;
      # 「2」を正解とする\r\n&gt;&gt;&gt; t = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]\r\n&gt;&gt;&gt;\r\n&gt;&gt;&gt;
      # 例 1:「2」の確率が最も高い場合(0.6)\r\n&gt;&gt;&gt; y = [0.1, 0.05, 0.6, 0.0, 0.05, 0.1,
      0.0, 0.1, 0.0, 0.0]\r\n&gt;&gt;&gt; mean_squared_error(np.array(y), np.array(t))0.097500000000000031</pre><p><br></p><h3>交差エントロピー誤差</h3><h4>E
      = -&sum; t logy</h4><pre>def cross_entropy_error(y, t):\r\n  delta = 1e-7\r\n
      \ return -np.sum(t * np.log(y + delta))</pre><p>np.log(0) はマイナスの無限大を表す-inf となり、そ
      うなってしまうと、それ以上計算を進めることができなくなります。その防止策とし て、微小な値を追加して、マイナス無限大を発生させないようにしています。</p><pre>&gt;&gt;&gt;
      t = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]\r\n&gt;&gt;&gt; y = [0.1, 0.05, 0.6, 0.0,
      0.05, 0.1, 0.0, 0.1, 0.0, 0.0]\r\n&gt;&gt;&gt; cross_entropy_error(np.array(y),
      np.array(t))\r\n0.51082545709933802</pre><h3><br></h3><p>訓練データすべての損失関数の平均</p><h4>E
      = -1/N &sum; &sum; t logy (データが N 個)</h4><p><br></p><h3>[バッチ対応版]交差エントロピー誤差の実装</h3><pre>#
      データがひとつの場合と、データがバッチとしてまとめら れて入力される場合の両方のケースに対応\r\ndef cross_entropy_error(y,
      t):\r\n  # yが普通の配列だったとき(データ一個の出力だったとき)行列にする\r\n  if y.ndim == 1:\r\n    t =
      t.reshape(1, t.size)\r\n    y = y.reshape(1, y.size)\r\n  # 出力した画像全てをまとめて損失関数の総和を出す\r\n
      \ # ちなみにy.shape[1]は出力層のニューロンの数\r\n  batch_size = y.shape[0]\r\n  return -np.sum(t
      * np.log(y)) / batch_size</pre><p>ちなみにnp.sumや配列積は以下の例からわかるはず</p><pre>&gt;&gt;&gt;
      import numpy as np\r\n&gt;&gt;&gt; x = np.arange(10).reshape(2,5)\r\n&gt;&gt;&gt;
      y = np.arange(10).reshape(2,5)\r\n&gt;&gt;&gt; x\r\narray([[0, 1, 2, 3, 4],\r\n 
           [5, 6, 7, 8, 9]])\r\n&gt;&gt;&gt; x*y\r\narray([[ 0,  1,  4,  9, 16],\r\n 
           [25, 36, 49, 64, 81]])\r\n&gt;&gt;&gt; np.sum(x*y)\r\n285</pre><p><br></p><p>教師データがラベルとして与えられたとき(one-hot&nbsp;表現ではなく、「2」や
      「7」といったラベルとして与えられたとき)、交差エントロピー誤差は次のように実</p><p>装することができます</p><pre>def cross_entropy_error(y,
      t):\r\n  if y.ndim == 1:\r\n    t = t.reshape(1, t.size)\r\n    y = y.reshape(1,
      y.size)\r\n  batch_size = y.shape[0]\r\n  return -np.sum(np.log(y[np.arange(batch_size),
      t])) / batch_size</pre><p>実装のポイントは、one-hot 表現で t が 0 の要素は、交差エントロピー誤差 も 0
      であるから、その計算は無視してもよい。</p><p>y[np.arange(batch_size), t] は 各画像行 正解ラベル列として</p><p>array([
      画像1の正解ラベル出力値, 画像2の正解ラベル出力値, 画像3の正解ラベル出力値, ... , 画像Nの正解ラベル出力値 ])</p><p>になっている。</p><p><br></p><h2>なぜ損失関数を設定するのか?</h2><p>認識精度が高くなるようなパラメータ
      を獲得したいので、「認識精度」を指標にすべきではないか?</p><p>認識精度は離散値であり、微分がほとんどの場所で 0 になってし まい、パラメータの更新(学習)ができなくなってしまう。</p><p>例えば、訓練データが100枚の時、精度は1%毎にしか変化できない</p><p><br></p><h2>微分</h2><p>df(x)/dx
      = lim{(f(x + h) &minus; f(x)) / h}</p><pre># 悪い実装例\r\ndef numerical_diff(f,
      x):\r\n  h = 10e-50\r\n  return (f(x+h) - f(x)) / h</pre><p>h には 10e-50(「0.00...1」の
      0 が 50 個続く数)という小さな値を用いてます。しかし、これでは逆に丸め誤差になる。</p><p>丸め誤差とは, 小数の小さな範囲において数値が省略され
      ることで(たとえば、小数点第 8 位以下が省略されるといったこと)、最終的な計算 結果に誤差が生じる</p><pre>&gt;&gt;&gt;
      import numpy as np\r\n&gt;&gt;&gt; np.float32(1e-50)\r\n0.0</pre><p><br></p><p>改善点1:
      丸め誤差を避けるべく、微小な値 h として 10&minus;4 を用いる。(10&minus;4 程度 の値を用いれば、良い結果が得られることが分かってる。)</p><p>改善点2:
      (x, f(x)) (x+h, f(x+h)) の2点間の直線であり(前方差分)、接戦の傾きとは誤差があるので、誤差を減らす工夫とし て、(x + h)
      と (x &minus; h) での関数 f の差分を計算する(中心差分)</p><p><br></p><pre>def numerical_diff(f,
      x):\r\n  h = 1e-4 # 0.0001\r\n  return (f(x+h) - f(x-h)) / (2*h)</pre><p>上記のように微小な差分によって微分を求めることを数値微分</p><p>一方、数式の展開によって微分を「解析的に解く」とか「解析的に微分を求める」などと言います</p><p><br></p><h3>数値微分の例</h3><pre>(gradient_1d.py)\r\nimport
      numpy as np\r\nimport matplotlib.pylab as plt\r\n\r\ndef numerical_diff(f, x):\r\n
      \ h = 1e-4 # 0.0001\r\n  return (f(x+h) - f(x-h)) / (2*h)\r\n\r\ndef function_1(x):\r\n
      \ return 0.01*x**2 + 0.1*x\r\n\r\ndef tangent_line(f, x):\r\n  d = numerical_diff(f,
      x)\r\n  print(d)\r\n  # 接戦Y = dx + bより、以下はy切片bを表している\r\n  b = f(x) - d*x\r\n
      \ # 傾きd y切片bの1次関数を返す関数を表している\r\n  return lambda t: d*t + b\r\n\r\nx = np.arange(0.0,
      20.0, 0.1)\r\ny = function_1(x) # 関数1\r\nplt.xlabel(&quot;x&quot;)\r\nplt.ylabel(&quot;f(x)&quot;)\r\n\r\ntf
      = tangent_line(function_1, 5)\r\ny2 = tf(x) # 接戦\r\n\r\nplt.plot(x, y)\r\nplt.plot(x,
      y2)\r\nplt.show()</pre><pre>$ python gradient_1d.py\r\n0.1999999999990898 #
      真の微分は0.2なのでほとんど同じ値と見なすことができるぐらい小さな誤差\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1559807689484-Figure_1.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></pre><p><br></p><h3>偏微分</h3><p>f(x0,x1)=x0&sup2;
      +x1&sup2;</p><pre>def function_2(x):\r\n  return x[0]**2 + x[1]**2\r\n  # または
      return np.sum(x**2)</pre><p>x0 = 3、x1 = 4 のときの x0 に対する偏微分&part;f / &part;x0</p><pre>&gt;&gt;&gt;
      def function_tmp1(x0):\r\n... return x0*x0 + 4.0**2.0\r\n...\r\n&gt;&gt;&gt;
      numerical_diff(function_tmp1, 3.0)6.00000000000378</pre><p>x0 = 3、x1 = 4 のときの
      x1 に対する偏微分&part;f / &part;x1</p><pre>&gt;&gt;&gt; def function_tmp2(x1):\r\n... return
      3.0**2.0 + x1*x1\r\n...\r\n&gt;&gt;&gt; numerical_diff(function_tmp2, 4.0)7.999999999999119</pre><p><br></p><p><br></p><pre>(gradient_2d.py)\r\nimport
      numpy as np\r\nimport matplotlib.pylab as plt\r\nfrom mpl_toolkits.mplot3d import
      Axes3D\r\n\r\n# すべての変数の偏微分ベクトル(勾配)を求める\r\ndef _numerical_gradient_no_batch(f,
      x):\r\n  h = 1e-4  # 0.0001\r\n  grad = np.zeros_like(x) # xと形状が同じで値が全て0の配列\r\n\r\n
      \ for idx in range(x.size):\r\n    tmp_val = x[idx]\r\n    x[idx] = float(tmp_val)
      + h\r\n    fxh1 = f(x)  # f(x+h)\r\n\r\n    x[idx] = tmp_val - h\r\n    fxh2
      = f(x)  # f(x-h)\r\n    grad[idx] = (fxh1 - fxh2) / (2*h)\r\n\r\n    x[idx]
      = tmp_val  # 値を元に戻す\r\n  return grad\r\n\r\n# バッチ処理\r\ndef numerical_gradient(f,
      X):\r\n  if X.ndim == 1:\r\n    return _numerical_gradient_no_batch(f, X)\r\n
      \ else:\r\n    grad = np.zeros_like(X)\r\n\r\n  for idx, x in enumerate(X):\r\n
      \   grad[idx] = _numerical_gradient_no_batch(f, x)\r\n\r\n  return grad\r\n\r\n\r\ndef
      function_2(x):\r\n  if x.ndim == 1:\r\n    return np.sum(x**2)\r\n  else:\r\n
      \   return np.sum(x**2, axis=1)\r\n\r\n\r\ndef tangent_line(f, x):\r\n  d =
      numerical_gradient(f, x)\r\n  print(d) # 微分結果\r\n  # 接戦のy切片d\r\n  b = f(x) -
      d*x\r\n  return lambda t: d*t + b\r\n\r\n\r\nif __name__ == &#39;__main__&#39;:\r\n
      \ x0 = np.arange(-2, 2.5, 0.25)\r\n  x1 = np.arange(-2, 2.5, 0.25)\r\n  X, Y
      = np.meshgrid(x0, x1)\r\n\r\n  X = X.flatten()\r\n  Y = Y.flatten()\r\n\r\n
      \ grad = numerical_gradient(function_2, np.array([X, Y]).T).T\r\n\r\n  plt.figure()
      # Figureインスタンスを作成\r\n  plt.quiver(X, Y, -grad[0], -grad[1],  angles=&quot;xy&quot;,color=&quot;#666666&quot;)
      # 矢印（ベクトル）\r\n  plt.xlim([-2, 2])\r\n  plt.ylim([-2, 2])\r\n  plt.xlabel(&#39;x0&#39;)\r\n
      \ plt.ylabel(&#39;x1&#39;)\r\n  plt.grid()\r\n  plt.draw()\r\n  plt.show()</pre><p>補足:
      enumerate&nbsp;</p><p>Pythonの<code>enumerate()</code>関数を使うと、forループの中でリスト（配列）などのイテラブルオブジェクトの要素と同時にインデックス番号（カウント、順番）を取得できる。</p><pre>l
      = [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charlie&#39;]\r\nfor i, name in enumerate(l):\r\n
      \   print(i, name)\r\n# 0 Alice\r\n# 1 Bob\r\n# 2 Charlie</pre><p>補足: np.ndarray.flatten
      多次元配列を一次元配列</p><pre>&gt;&gt;&gt; x=np.arange(12).reshape(2,3,2)\r\n&gt;&gt;&gt;
      x.flatten()\r\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])</pre><p>補足:
      meshgridについて</p><p>例えば<code>x = [1,2,3,4,5,6,7,8,9]</code>の配列をX軸<code>y = [10,20,30,40,50]</code>の配列をY軸として表を作る場合</p><table><thead><tr><th><div
      style=\"margin-left: 60px;\">y \\ x&nbsp;</div></th><th><div style=\"margin-left:
      60px;\">1</div></th><th><div style=\"margin-left: 60px;\">2</div></th><th><div
      style=\"margin-left: 60px;\">3</div></th><th><div style=\"margin-left: 60px;\">4</div></th><th><div
      style=\"margin-left: 60px;\">5</div></th><th><div style=\"margin-left: 60px;\">6</div></th><th><div
      style=\"margin-left: 60px;\">7</div></th><th><div style=\"margin-left: 60px;\">8</div></th><th><div
      style=\"margin-left: 60px;\">9</div></th></tr></thead><tbody><tr><td><div style=\"margin-left:
      60px;\">10</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td></tr><tr><td><div style=\"margin-left: 60px;\">20</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td></tr><tr><td><div
      style=\"margin-left: 60px;\">30</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td></tr><tr><td><div style=\"margin-left: 60px;\">40</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td></tr><tr><td><div
      style=\"margin-left: 60px;\">50</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td><td><div style=\"margin-left: 60px;\">&nbsp;</div></td><td><div
      style=\"margin-left: 60px;\">&nbsp;</div></td><td><div style=\"margin-left:
      60px;\">&nbsp;</div></td></tr></tbody></table><p>上のような表の各要素のx値とy値から各要素に入る値を求めることになる。</p><p><strong>meshgrid()</strong>
      を使うと、予め上のような表（実際は行列）に各要素毎のx値とy値を埋めたものを生成してくれる。</p><p><code>import numpy as npx
      = [1,2,3,4,5,6,7,8,9]</code></p><p><code>y = [10,20,30,40,50]</code></p><p><code>X,Y
      = np.meshgrid(x,y)</code></p><p><code>print(X)</code></p><p><code># =&gt; [[1
      2 3 4 5 6 7 8 9]</code></p><p><code># &nbsp; &nbsp;</code><code>[1 2 3 4 5 6
      7 8 9]</code></p><p><code># &nbsp; &nbsp;</code><code>[1 2 3 4 5 6 7 8 9]</code></p><p><code>#
      &nbsp; &nbsp;</code><code>[1 2 3 4 5 6 7 8 9]</code></p><p><code># &nbsp; &nbsp;</code><code>[1
      2 3 4 5 6 7 8 9]]</code></p><p><code>print(Y)</code></p><p><code># =&gt; [[10
      10 10 10 10 10 10 10 10]</code></p><p><code># &nbsp; &nbsp; [20 20 20 20 20
      20 20 20 20]</code></p><p><code># &nbsp; &nbsp; [30 30 30 30 30 30 30 30 30]</code></p><p><code>#
      &nbsp; &nbsp; [40 40 40 40 40 40 40 40 40]</code></p><p><code># &nbsp; &nbsp;
      [50 50 50 50 50 50 50 50 50]]</code></p><p>このような座標行列を予め作成しておくことより、<br>例えば<br>f(x,y)&nbsp;=&nbsp;x+yの値を求める場合</p><p><code>print(X+Y)</code></p><p><code>#
      =&gt; [[11 12 13 14 15 16 17 18 19]</code></p><p><code># &nbsp; &nbsp; [21 22
      23 24 25 26 27 28 29]</code></p><p><code># &nbsp; &nbsp; [31 32 33 34 35 36
      37 38 39]</code></p><p><code># &nbsp; &nbsp; [41 42 43 44 45 46 47 48 49]</code></p><p><code>#
      &nbsp; &nbsp; [51 52 53 54 55 56 57 58 59]]</code></p><p>f(x,y)&nbsp;=&nbsp;x+2yの場合は</p><p><code><code
      data-language=\"Python\">print(X+2*Y)&nbsp;</code></code></p><p><code><code
      data-language=\"Python\"># =&gt; [[ 21 22 23 24 25 26 27 28 29]&nbsp;</code></code></p><p><code><code
      data-language=\"Python\"># &nbsp; &nbsp; [ 41 42 43 44 45 46 47 48 49]&nbsp;</code></code></p><p><code><code
      data-language=\"Python\"># &nbsp; &nbsp; [ 61 62 63 64 65 66 67 68 69]&nbsp;</code></code></p><p><code><code
      data-language=\"Python\"># &nbsp; &nbsp; [ 81 82 83 84 85 86 87 88 89]&nbsp;</code></code></p><p><code><code
      data-language=\"Python\"># &nbsp; &nbsp; [101 102 103 104 105 106 107 108 109]]</code></code></p><p>のようにシンプルに各座標値を求めることができます。</p><p><br></p><p>補足:
      plt.quiver ベクトル(矢印)について</p><p><code>plt.quiver(0.5,0.5,0.5,0.5) #(x,y,u,v) x,y-始点座標、u,v-ベクトルの向き</code></p><p><a
      href=\"https://algorithm.joho.info/programming/python/matplotlib-quiver/\"></a>わかりやすかった参考文献<a
      href=\"https://algorithm.joho.info/programming/python/matplotlib-quiver/\">&nbsp;https://algorithm.joho.info/programming/python/matplotlib-quiver/</a></p><p><br></p><pre>$
      python gradient_2d.py\r\n<code><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1559812660576-Figure_2.png\"
      style=\"width: 597px;\" class=\"fr-fic fr-dib fr-fil\"></code></pre><p><br></p><h2>勾配法</h2><p>最小値を探す場合を勾配降下法(gradient
      descent method)、最大値を探す場合を勾配上昇法(gradient ascent method)と言います。</p><p>一般的に、ニューラルネットワーク(ディー
      プラーニング)の分野では、勾配法は「勾配降下法」として登場</p><h3>x0 = x0 - &eta; (&part;f / &part;x0)</h3><p>&eta;
      は学習率と呼ばれ、</p><p>学習率の値は、0.01 や 0.001 など、前もって何らかの値に決める必要がある。一般的に、大きすぎても小さすぎても、「良い場所」にたどり着くことができない。</p><pre>#
      lr(learningrate)学習率, step_num 学習回数\r\ndef gradient_descent(f, init_x, lr=0.01,
      step_num=100):\r\n  x  = init_x\r\n  for i in range(step_num):\r\n    grad =
      numerical_gradient(f, x)\r\n    x -= lr * grad\r\n  return x</pre><p><br></p><p>問:
      f(x0 , x1 ) = x0&sup2; + x1&sup2; の最小値を勾配法で求めよ</p><pre>&gt;&gt;&gt; def function_2(x):\r\n... 
      \ return x[0]**2 + x[1]**2...\r\n\r\n&gt;&gt;&gt;  init_x = np.array([-3.0,
      4.0])\r\n&gt;&gt;&gt;  gradient_descent(function_2, init_x=init_x, lr=0.1, step_num=100)\r\narray([
      -6.11110793e-10, 8.14814391e-10])</pre><p>最終的な結果は (-6.1e-10, 8.1e-10) となり、これはほとんど
      (0, 0)に近い。</p><p>真の最小値は (0, 0) なので、勾配法によって、ほぼ正 しい結果を得ることができた</p><p><br></p><pre>(gradient_method.py)\r\nimport
      numpy as np\r\nimport matplotlib.pylab as plt\r\nfrom gradient_2d import numerical_gradient\r\n\r\n\r\ndef
      gradient_descent(f, init_x, lr=0.01, step_num=100):\r\n  x = init_x\r\n  x_history
      = []\r\n\r\n  for i in range(step_num):\r\n    x_history.append( x.copy() )
      # 配列に要素を追加\r\n    grad = numerical_gradient(f, x)\r\n    x -= lr * grad\r\n
      \ return x, np.array(x_history)\r\n\r\n\r\ndef function_2(x):\r\n  return x[0]**2
      + x[1]**2\r\n\r\ninit_x = np.array([-3.0, 4.0])    \r\nlr = 0.1\r\nstep_num
      = 20\r\nx, x_history = gradient_descent(function_2, init_x, lr=lr, step_num=step_num)\r\n<span
      style=\"color: rgb(163, 143, 132);\">#print(&quot;学習結果x&quot;)\r\n#print(x)\r\n#print(&quot;学習過程&quot;)\r\n#print(x_history)</span>\r\n\r\nplt.plot(
      [-5, 5], [0,0], &#39;--b&#39;) # blue markers with default shape\r\nplt.plot(
      [0,0], [-5, 5], &#39;--b&#39;)\r\nplt.plot(x_history[:,0], x_history[:,1], &#39;o&#39;)
      # &#39;o&#39; サークルマーカー\r\n\r\nplt.xlim(-3.5, 3.5)\r\nplt.ylim(-4.5, 4.5)\r\nplt.xlabel(&quot;X0&quot;)\r\nplt.ylabel(&quot;X1&quot;)\r\nplt.show()</pre><p>補足:
      array.copy() オブジェクトをコピーする(値を参照ではなく全く別のものを複製)</p><p>・値渡しと参照渡し</p><pre>参照渡し\r\n&gt;&gt;&gt;
      x=[1,2,3]\r\n&gt;&gt;&gt; y=x\r\n&gt;&gt;&gt; y.apend(4)\r\n&gt;&gt;&gt; y,x\r\n[1,
      2, 3, 4], [1, 2, 3, 4]</pre><p>上記は参照元と参照先がメモリを共有した状態であり、一方を変更したら両方変更が適用される</p><pre>値渡し\r\n&gt;&gt;&gt;
      x=[1,2,3]\r\n&gt;&gt;&gt; y=x.copy()\r\n&gt;&gt;&gt; y.append(4)\r\n&gt;&gt;&gt;
      x,y\r\n([1, 2, 3], [1, 2, 3, 4])</pre><p><a href=\"https://translate.google.com/translate?hl=ja&sl=en&u=https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.plot.html&prev=search\"></a><a
      href=\"https://translate.google.com/translate?hl=ja&sl=en&u=https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.plot.html&prev=search\"></a></p><p><br></p><p>補足:
      matplotlib.pyplot.plotのオプションいついてはドキュメント参照</p><p><a href=\"https://translate.google.com/translate?hl=ja&sl=en&u=https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.plot.html&prev=search\">https://translate.google.com/translate?hl=ja&amp;sl=en&amp;u=https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.plot.html&amp;prev=search</a></p><p><br></p><p>補足:
      array[:,0]やarray[:,1]について</p><p><code>[行:列]</code>でスライスでき、省略した場合はすべてを指定したことになるので、<code>[:,&nbsp;0]</code>は全ての行の0列目を取得することになります。省略せずに書くと2x2の配列の場合なら<code>a[0:2,&nbsp;0]</code>となります。</p><pre>&gt;&gt;&gt;
      a = numpy.array([[0,1], [2, 3]])\r\n&gt;&gt;&gt; aarray([[0, 1],       [2, 3]])\r\n&gt;&gt;&gt;
      a[:,0]array([0, 2])\r\n&gt;&gt;&gt;</pre><p><br></p><pre>$ python gradient_method.py\r\n<img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1559901748741-gradient.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></pre><p><br></p><p><br></p><h2>簡単なニューラルネットワークを例にして、実際に勾配を求める実装</h2><p><br></p><pre>(gradient_simplenet.py)\r\nimport
      sys, os \r\nsys.path.append(os.pardir)\r\nimport numpy as np from common.functions
      \r\nfrom common.functions import softmax, cross_entropy_error \r\nfrom common.gradient
      import numerical_gradient\r\nclass simpleNet:    \r\n  def __init__(self):\r\n
      \   self.W = np.random.randn(2,3) # ガウス分布で重み初期化\r\n\r\n  def predict(self,
      x):\r\n      return np.dot(x, self.W)\r\n\r\n  def loss(self, x, t):\r\n    z
      = self.predict(x)\r\n    y = softmax(z)\r\n    loss = cross_entropy_error(y,
      t)\r\n    return loss\r\n\r\nx = np.array([0.6, 0.9])\r\nt = np.array([0, 0,
      1])\r\n\r\nnet = simpleNet()\r\n\r\nf = lambda w: net.loss(x, t)\r\ndW = numerical_gradient(f,
      net.W)\r\n\r\nprint(dW) # 重みの微分結果</pre><p><br></p><h2>学習アルゴリズムの実装</h2><p>2
      層ニューラルネットワークを、ひとつのクラスとして実装する</p><p><br></p><pre>(two_layer_net.py)\r\nimport
      sys, os\r\nsys.path.append(os.pardir)  # 親ディレクトリのファイルをインポートするための設定\r\nfrom common.functions
      import *\r\nfrom common.gradient import numerical_gradient\r\n\r\nclass TwoLayerNet:\r\n
      \ # 引数は、入力層のニューロンの数、隠れ層のニューロンの数、出力層のニューロンの数\r\n  def __init__(self, input_size,
      hidden_size, output_size, weight_init_std=0.01):\r\n  # 重みの初期化\r\n    self.params
      = {}\r\n    self.params[&#39;W1&#39;] = weight_init_std * np.random.randn(input_size,
      hidden_size)\r\n    self.params[&#39;b1&#39;] = np.zeros(hidden_size)\r\n    self.params[&#39;W2&#39;]
      = weight_init_std * np.random.randn(hidden_size, output_size)\r\n    self.params[&#39;b2&#39;]
      = np.zeros(output_size)\r\n\r\n  # 入力層のニューロンからニューラルネットワークの計算値を出力\r\n  def predict(self,
      x):\r\n    W1, W2 = self.params[&#39;W1&#39;], self.params[&#39;W2&#39;]\r\n
      \   b1, b2 = self.params[&#39;b1&#39;], self.params[&#39;b2&#39;]\r\n\r\n    a1
      = np.dot(x, W1) + b1\r\n    z1 = sigmoid(a1)\r\n    a2 = np.dot(z1, W2) + b2\r\n
      \   y = softmax(a2)\r\n    return y\r\n\r\n  # 損失関数を求める x:入力データ, t:教師データ\r\n
      \ def loss(self, x, t):\r\n    y = self.predict(x)\r\n    return cross_entropy_error(y,
      t)\r\n\r\n  # 認識精度(0~1)\r\n  def accuracy(self, x, t):\r\n    y = self.predict(x)\r\n
      \   y = np.argmax(y, axis=1)\r\n    t = np.argmax(t, axis=1)\r\n    accuracy
      = np.sum(y == t) / float(x.shape[0])\r\n    return accuracy\r\n\r\n  # 重みパラメータに対する勾配を求める
      x:入力データ, t:教師データ\r\n  def numerical_gradient(self, x, t):\r\n    loss_W = lambda
      W: self.loss(x, t)\r\n    # 勾配を保持するディクショナリ変数\r\n    grads = {}\r\n    grads[&#39;W1&#39;]
      = numerical_gradient(loss_W, self.params[&#39;W1&#39;])\r\n    grads[&#39;b1&#39;]
      = numerical_gradient(loss_W, self.params[&#39;b1&#39;])\r\n    grads[&#39;W2&#39;]
      = numerical_gradient(loss_W, self.params[&#39;W2&#39;])\r\n    grads[&#39;b2&#39;]
      = numerical_gradient(loss_W, self.params[&#39;b2&#39;])\r\n    return grads\r\n\r\n
      \ # 重みパラメータに対する勾配を求める numerical_gradient() の高速版!\r\n  def gradient(self, x,
      t):\r\n    W1, W2 = self.params[&#39;W1&#39;], self.params[&#39;W2&#39;]\r\n
      \   b1, b2 = self.params[&#39;b1&#39;], self.params[&#39;b2&#39;]\r\n    grads
      = {}\r\n\r\n    batch_num = x.shape[0]\r\n\r\n    # forward\r\n    a1 = np.dot(x,
      W1) + b1\r\n    z1 = sigmoid(a1)\r\n    a2 = np.dot(z1, W2) + b2\r\n    y =
      softmax(a2)\r\n\r\n    # backward\r\n    dy = (y - t) / batch_num\r\n    grads[&#39;W2&#39;]
      = np.dot(z1.T, dy) # 2層目の重みの勾配\r\n    grads[&#39;b2&#39;] = np.sum(dy, axis=0)
      # 二層目のバイアスの勾配\r\n\r\n    dz1 = np.dot(dy, W2.T)\r\n    da1 = sigmoid_grad(a1)
      * dz1\r\n    grads[&#39;W1&#39;] = np.dot(x.T, da1) # 1層目の重みの勾配\r\n    grads[&#39;b1&#39;]
      = np.sum(da1, axis=0) # 一層目のバイアスの勾配\r\n\r\n    return grads</pre><p><br></p><p>TwoLayerNet
      クラスを対象に、MNIST データセッ トを使って学習</p><pre>(train_nueralnet.py)\r\n# coding: utf-8\r\nimport
      sys, os\r\nsys.path.append(os.pardir)  # 親ディレクトリのファイルをインポートするための設定\r\nimport
      numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom dataset.mnist import
      load_mnist\r\nfrom two_layer_net import TwoLayerNet\r\n\r\n# データの読み込み\r\n(x_train,
      t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)\r\n\r\nnetwork
      = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)\r\n\r\niters_num
      = 10000  # 勾配法による更新の回数(繰り返し回数)を適宜設定する\r\ntrain_size = x_train.shape[0]\r\nbatch_size
      = 100\r\nlearning_rate = 0.1\r\n\r\ntrain_loss_list = []\r\ntrain_acc_list =
      []\r\ntest_acc_list = []\r\n\r\n# 1エポックあたりの繰り返し数(訓練データの総数6万枚に相当する量を読み込んだ時全ての画像を見たと定め1エポック)\r\niter_per_epoch
      = max(train_size / batch_size, 1)\r\ncount=0\r\nfor i in range(iters_num):\r\n
      \ # ミニバッチの取得\r\n  batch_mask = np.random.choice(train_size, batch_size) # train_size未満の自然数をbatch_size個セレクト\r\n
      \ x_batch = x_train[batch_mask] # 例えば, x_train[[0,3]] だったら[x_train[0],x_train[3]]
      になる\r\n  t_batch = t_train[batch_mask]\r\n\r\n <span style=\"color: rgb(163,
      143, 132);\"> # 勾配の計算\r\n  #grad = network.numerical_gradient(x_batch, t_batch)</span>\r\n
      \ grad = network.gradient(x_batch, t_batch)\r\n\r\n  # パラメータの更新(学習)\r\n  for
      key in (&#39;W1&#39;, &#39;b1&#39;, &#39;W2&#39;, &#39;b2&#39;):\r\n    network.params[key]
      -= learning_rate * grad[key]\r\n\r\n  # 損失関数を計算して配列にメモ\r\n  loss = network.loss(x_batch,
      t_batch)\r\n  train_loss_list.append(loss)\r\n\r\n  # 1エポック(バッチ)ごとに認識精度を計算 今回はiter_per_epochが600.0なので600回ごとに実行される\r\n
      \ if i % iter_per_epoch == 0:\r\n    # print(i) =&gt; 0,600,1200, ... ,9600\r\n
      \   train_acc = network.accuracy(x_train, t_train)\r\n    test_acc = network.accuracy(x_test,
      t_test)\r\n    train_acc_list.append(train_acc) # 精度をメモ\r\n    test_acc_list.append(test_acc)
      # 精度をメモ\r\n    print(&quot;train acc, test acc | &quot; + str(train_acc) + &quot;,
      &quot; + str(test_acc))\r\n\r\n  # グラフの描画\r\nmarkers = {&#39;train&#39;: &#39;o&#39;,
      &#39;test&#39;: &#39;s&#39;}\r\nx = np.arange(len(train_acc_list))\r\nplt.plot(x,
      train_acc_list, label=&#39;train acc&#39;)\r\nplt.plot(x, test_acc_list, label=&#39;test
      acc&#39;, linestyle=&#39;--&#39;)\r\nplt.xlabel(&quot;epochs&quot;)\r\nplt.ylabel(&quot;accuracy&quot;)\r\nplt.ylim(0,
      1.0)\r\nplt.legend(loc=&#39;lower right&#39;)\r\nplt.show()</pre><pre>$ python
      train_neuralnet.py\r\ntrain acc, test acc | 0.09871666666666666, 0.098\r\ntrain
      acc, test acc | 0.7983166666666667, 0.8035\r\ntrain acc, test acc | 0.8775833333333334,
      0.8794\r\ntrain acc, test acc | 0.8989, 0.902\r\ntrain acc, test acc | 0.9080333333333334,
      0.9117\r\ntrain acc, test acc | 0.9140666666666667, 0.9162\r\ntrain acc, test
      acc | 0.91905, 0.9208\r\ntrain acc, test acc | 0.92365, 0.9265\r\ntrain acc,
      test acc | 0.9277333333333333, 0.9272\r\ntrain acc, test acc | 0.9306166666666666,
      0.9305\r\ntrain acc, test acc | 0.9336333333333333, 0.9334\r\ntrain acc, test
      acc | 0.9368166666666666, 0.9366\r\ntrain acc, test acc | 0.93925, 0.9399\r\ntrain
      acc, test acc | 0.9417333333333333, 0.9401\r\ntrain acc, test acc | 0.9438833333333333,
      0.942\r\ntrain acc, test acc | 0.9452666666666667, 0.9444\r\ntrain acc, test
      acc | 0.9467, 0.9455\r\n<img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1559980371365-Figure.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></pre><p>学習をしていない初めは確率通りでほぼ10%であり、6万枚を16エポック96万枚学習した性能は94%である</p><p><br></p><p>訓練データとテストデータを使って評価した認識精度は両方とも向上している。</p><p>また、その
      2 つの認識精度には差がないことが分かる(その 2 つの線はほぼ重なっている)。</p><p>そのため、今回の学習では過学習が起きていないことが
      分かる。</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-06-06 04:08:16.369075'
    - '2019-08-18 13:34:18.21605'
  - - 163
    - MuuMuuDomain + Route53 独自ドメイン取得＆IPと紐付け
    - "<h1 style=\"text-align: center;\">MuuMuuDomain + Route53</h1><p><br></p><h2>現状:
      EC2にてアプリをデプロイし、http://[ElasticIP] で公開している状態</h2><p><br></p><h2>目的: 独自ドメインを取得してhttp://[ElasticIP]
      とひもづけることで、独自ドメインでサイトにアクセスできるようにする</h2><h2><br></h2><h2>ドメイン取得</h2><p><a href=\"https://muumuu-domain.com/\"></a><a
      href=\"https://muumuu-domain.com/\">https://muumuu-domain.com/<img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560142365082-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-10+13.52.21.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></a></p><p>検索を押下すると一覧が表示されるのでその中で欲しいものを選択</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560142460039-domain.jpeg\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>基本既定値で大丈夫です。<br>DNSに関しても後で設定するのでそのままでOK</p><p>支払いはコンビニやクレジットカードが選択できます。<br>そのまま進んでいき最後にサマリが出てくるので確認して申し込めば完了です。</p><p>以上でドメインが取得できました。</p><p><br></p><h2><br>Route
      53</h2><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560142774071-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-10+13.58.30.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560143415984-domain.jpeg\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>ドメインネームを記載（取得したドメイン名
      例: example.com）</p><p>コメントは適当に作成</p><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560143938289-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-10+14.12.52.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h2>ムームードメインの管理画面へ移動</h2><p>ネームサーバーをRoute53に変更<br><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560144051171-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-09+20.00.25.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>先ほどの4つのNameServersの情報を記載します。最後の.は要らない</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560144222858-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-09+20.00.13.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>例ではサブドメインをwwwと定義しました。</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560144774834-ip.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p>これでEC2（WEBサーバ)に独自ドメイン(http://www.example.com)で接続できるようになる。</p><p>と言いたいところだが、私の場合、「welcome
      to nginx」のページが表示されてしまい、サイトのページが表示されなかった。</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560144894853-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-10+14.34.36.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>理由は、nginxの設定ファイル
      /etc/nginx/conf.d/froala-blog.conf (froala-blogは私のアプリ名)</p><p>にて<br><code>server_name
      xx.xx.xx.xx;</code>&nbsp;<br>ではなく<br><code>server_name www.example.com xx.xx.xx.xx;</code>&nbsp;<br>というように、サーバー名に独自ドメインを追加した</p><p><br></p><p>/etc/nginx/conf.d/froala-blog.conf</p><pre>#
      log directory\r\nerror_log  /var/www/rails/froala-blog/log/nginx.error.log;\r\naccess_log
      /var/www/rails/froala-blog/log/nginx.access.log;\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream app_server {\r\n  # for UNIX domain socket setups\r\n  server
      unix:/var/www/rails/froala-blog/tmp/sockets/unicorn.sock fail_timeout=0;\r\n}\r\nserver
      {\r\n  listen 80;\r\n  server_name <span style=\"color: rgb(243, 121, 52);\">www.example.com</span>
      <span style=\"color: rgb(243, 121, 52);\">xx.xx.xx.xx</span>; # 独自ドメイン ElasticIP\r\n 
      # nginx so increasing this is generally safe...\r\n  keepalive_timeout 5;\r\n 
      # path for static files\r\n  root /var/www/rails/froala-blog/public;\r\n  #
      page cache loading\r\n  try_files $uri/index.html $uri.html $uri @app;\r\n 
      location @app {\r\n    # HTTP headers\r\n    proxy_set_header X-Forwarded-For
      $proxy_add_x_forwarded_for;\r\n    proxy_set_header Host $http_host;\r\n   
      proxy_redirect off;\r\n    proxy_pass http://app_server;\r\n  }\r\n  # Rails
      error pages\r\n  error_page 500 502 503 504 /500.html;\r\n  location = /500.html
      {\r\n    root /var/www/rails/froala-blog/public;\r\n  }\r\n}</pre><p><br></p><p>最後にnginxとunicornを再起動して無事アクセスできました。</p><pre>sudo
      service nginx restart(nginx再起動)</pre><pre>sudo kill -HUP `cat /var/www/rails/froala-blog/tmp/pids/unicorn.pid`(unicorn再起動)</pre><p><br></p><p><br></p><p><span
      style=\"font-size: 60px;\">完！！<span class=\"fr-emoticon fr-deletable fr-emoticon-img\"
      style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f600.svg);\">&nbsp;</span>
      </span></p><p><br></p><p><br></p><p><br></p>"
    - '2019-06-10 04:48:30.35856'
    - '2019-06-10 05:47:51.934507'
  - - 164
    - Amazon EC2のタイムゾーンを日本時間に変更する方法
    - "<h1 itemprop=\"headline\">Amazon EC2のタイムゾーンを日本時間に変更する方法<p>Tokyoリージョンでインスタンスを立ち上げたものの、タイムゾーンが初期設定でUTCになっていたので、日本時間に変更する方法。<br>確認するとこんな感じ。</p><pre>$
      date\r\n2019年  6月 13日 木曜日 07:14:45 UTC</pre></h1><h1>時間帯の変更</h1><h2>Step1 インスタンスで使用する時間帯を検索</h2><p><code>/usr/share/zoneinfo</code>にすべての時間帯があるので、そちらを参照。</p><pre>$
      ls /usr/share/zoneinfo/\r\nAfrica      Canada   GB         Indian     Mexico
         ROK        iso3166.tab\r\nAmerica     Chile    GB-Eire    Iran       NZ  
           Singapore  leapseconds\r\nAntarctica  Cuba     GMT        Israel     NZ-CHAT
        Turkey     posix\r\nArctic      EET      GMT+0      Jamaica    Navajo    UCT
             posixrules\r\nAsia        EST      GMT-0      <span style=\"color: rgb(243,
      121, 52);\">Japan</span>      PRC       US         right\r\nAtlantic    EST5EDT
       GMT0       Kwajalein  PST8PDT   UTC        tzdata.zi\r\nAustralia   Egypt  
       Greenwich  Libya      Pacific   Universal  zone.tab\r\nBrazil      Eire    
      HST        MET        Poland    W-SU       zone1970.tab\r\nCET         Etc  
         Hongkong   MST        Portugal  WET\r\nCST6CDT     Europe   Iceland    MST7MDT
         ROC       Zulu</pre><p><code>Japan</code>があることを確認。</p><p><br></p><h2>Step2
      clockファイルの変更</h2><pre>$ vim /etc/sysconfig/clock</pre><p>こちらでファイルを編集</p><pre>#
      ZONE=&quot;UTC&quot;\r\nZONE=&quot;Japan&quot;\r\nUTC=true</pre><p><br></p><h2>Step3
      時間帯ファイルにシンボリックリンク</h2><p>インスタンスが現地時間情報を参照する際に、時間帯ファイルを読み込むためシンボリックリンクをはる。</p><pre>$
      sudo ln -sf /usr/share/zoneinfo/Japan /etc/localtime</pre><h2>Step4 システムの再起動</h2><pre>$
      sudo reboot</pre><p><code>Connection to xx.xx.xx.xx closed by remote host.<br>Connection
      to xx.xx.xx.xx closed.<br>sshすると...<br>ssh: connect to host 54.250.70.47 port
      22: Operation timed out<br><br>ですが大丈夫1分くらい待ってもう一度sshすると無事接続でき、反映されている<br></code></p><p><br></p><h2>Step5
      日本時間になってるかを確認</h2><pre>$ date\r\n2019年  6月 13日 木曜日 16:22:53 JST</pre>"
    - '2019-06-13 07:25:19.446024'
    - '2019-06-13 07:30:04.837476'
  - - 165
    - EC2にHeroku CLI を導入
    - "<h1 style=\"text-align: center;\">EC2にHeroku CLI を導入</h1><p><br></p><pre><code>$
      npm install -g heroku</code></pre><p>すると...</p><p><code>npm WARN deprecated
      heroku-cli@7.0.9: &#39;heroku-cli&#39; has been renamed &#39;heroku&#39;\r\nnpm
      WARN deprecated cross-spawn-async@2.2.5: cross-spawn no longer requires a build
      toolchain, use it instead</code></p><p>&#39;heroku-cli&#39; は &#39;heroku&#39;
      に変わったのでそっちを使えとさ。</p><p><br></p><pre>1...$ npm uninstall -g heroku-cli\r\n2...$
      npm i -g heroku</pre><p><span style=\"font-size: 60px;\">完</span></p>"
    - '2019-06-15 10:10:55.748712'
    - '2019-06-15 10:14:21.396101'
  - - 166
    - EC2-ローカル間でのファイル転送
    - "<h1 style=\"text-align: center;\">EC2-ローカル間でのファイル転送</h1><h2><br></h2><h3>目的:
      ローカル内でエクスポートしたDBのダンプファイルをEC2に転送させたかった。初めは$viコマンドでファイル作成&amp;貼り付けで済んでいたのだが、重いファイルだとviコマンドでは貼り付け先でフリーズを起こす。よって、コマンドを使用することにした。</h3><p><br></p><h2>ちなみに、scpはsshとcopyを意味するらしい</h2><p><br></p><p>ローカル：Mac<br>Amazon
      EC2：Amazon Linux</p><p><br></p><h1>EC2 &rarr; ローカル 転送</h1><p>scp -i [公開鍵ファイルのパス]
      [ユーザ名@ドメイン]:[送信元EC2ファイルパス] [転送先ローカルファイルパス]</p><pre># 例\r\nscp -i /keys/hoge.pem
      user@ec2-xxxx.com:/sqls/hoge.sql /Desktop</pre><p><br></p><h1>ローカル &rarr; EC2
      転送</h1><p>scp -i [公開鍵ファイルのパス] [送信元先ローカルファイルパス] [ユーザ名@ドメイン]:[転送先EC2ファイルパス]</p><pre>#
      例\r\nscp -i /keys/hoge.pem /Desktop/hoge.sql user@ec2-xxxx.com:/sqls</pre><p><br></p><p>筆者の場合は</p><pre>$scp
      -i ~/.ssh/EC2/ec2_key_rsa ~/DIARY/dragonarrow/latest.dump tatsuya@xx.xx.xx.xx:/var/www/rails/myApp/
      </pre><p>これで /var/www/rails/myApp配下にlatest.dumpが作成されました。</p><p>ec2-userでやるとmyAppの権限でエラーを出したため、権限ユーザーでアクセスしました。</p><p><br></p><h1
      itemprop=\"headline\">scpコマンドでPermission deniedが出るときの対処法</h1><p>原因が二つあり、一つはアップロード先にアップロードのためのディレクトリが用意されていないこと、もう一つは権限の問題。</p><p>一つ目に関してはアップロード先のディレクトリにアップロードするディレクトリと同名のディレクトリを用意してあげることで解決する。</p><p><br></p><p>二つ目の問題については、<span
      style=\"color: rgb(41, 105, 176);\">アップロードするディレクトリのローカルにおける権限</span>と、<span
      style=\"color: rgb(184, 49, 47);\">アップロード先に用意したディレクトリの権限</span>の両方を気にしてあげる必要がある。権限を持つuserを指定してscpするか、一時的に777にしてあげるのもあり（ほんとは危険・・・）</p><pre
      title=\"\">$ chmod 777 myApp/</pre><p><br></p><h1>まとめ</h1><p>scpコマンド便利、ありがたや。</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-06-15 11:05:53.035518'
    - '2019-06-16 09:53:56.851012'
  - - 167
    - Herokuにあげてるアプリをクローンしたい
    - "<h1 style=\"text-align: center;\"><span style=\"font-size: 48px;\">Heroku にある既存のアプリを
      git clone する</span></h1><p><br></p><h1>Heroku で既存アプリを扱う</h1><p><code>$ heroku
      create</code> をしてその流れの中でアプリを扱う説明はよく見かけるのですが、すでに存在しているアプリをまっさらな環境にもってくる場合はあまり見かけなかったので書いておきます。なお、
      Heroku Toolbelt の準備はできているものとします。</p><p><br></p><h1><code>heroku apps</code>
      でアプリ一覧の情報を得る</h1><p><code>$ heroku apps</code> で現在存在するアプリの一覧が得られます。</p><pre
      data-lang=\"\" data-unlink=\"\">$ heroku apps\r\n=== your@mail.address Apps\r\nfoo-bar-12345\r\nhoge-fuga-98765\r\nfoobar-hogefuga-54321</pre><p><br></p><h1><code>heroku
      git:clone --app アプリ名</code> をすると「アプリ名」のファイルがダウンロードできる</h1><p>前項の結果によりアプリ名が分かれば、<code>$
      heroku git:clone --app アプリ名</code> としてアプリ名を指定することでいわゆる <code>git clone</code>
      ができます。</p><pre data-lang=\"\" data-unlink=\"\">$ heroku git:clone --app foobar-hogefuga-54321\r\nCloning
      into &#39;foobar-hogefuga-54321&#39;...\r\nwarning: You appear to have cloned
      an empty repository.\r\nChecking connectivity... done.</pre><p><br></p><h1><code>heroku
      git:clone</code> したファイル群には Heroku と連携する情報が組み込み済み</h1><p>前項で clone したリポジトリは Heroku
      と結びついた設定が組み込み済みです。具体的には <code>.git/config</code> に以下のような設定がすでに書き込まれています。</p><pre
      data-lang=\"config\" data-unlink=\"\">[remote &quot;heroku&quot;]\r\n    url
      = <a href=\"https://git.heroku.com/foobar-hogefuga\">https://git.heroku.com/foobar-hogefuga</a>-54321.git\r\n
      \   fetch = +refs/heads/*:refs/remotes/heroku/*\r\n[branch &quot;master&quot;]\r\n
      \   remote = heroku\r\n    merge = refs/heads/master</pre><p>したがって、<code>$ git
      push heroku master</code> のように実行すれば Heroku に すぐさまPush できることになります。</p><p><br></p><h1>補足</h1><h4><code>heroku
      apps:info アプリ名</code> でアプリの詳細情報を得る</h4><p>アプリ名が分かれば、<code>$ heroku apps:info
      アプリ名</code> を実行すると指定したアプリの詳細情報が得られます。</p><pre data-lang=\"\" data-unlink=\"\">$
      heroku apps:info hoge-fuga-98765\r\n=== hoge-fuga-98765\r\nAuto Cert Mgmt: false\r\nDynos:\r\nGit
      URL:        https://git.heroku.com/hoge-fuga-98765.git\r\nOwner:          your@mail.address\r\nRegion:
      \        us\r\nRepo Size:      0 B\r\nSlug Size:      0 B\r\nStack:          heroku-16\r\nWeb
      URL:        https://hoge-fuga-98765.herokuapp.com/</pre><p><br></p><p><br></p>"
    - '2019-06-15 11:44:15.787108'
    - '2019-06-15 11:48:16.278988'
  - - 168
    - 'scpコマンド: ローカルのデータベースをEC2データベースにダンプしてロード'
    - "<h1 style=\"text-align: center;\">scpを使ってローカルDBをEC2にダンプ</h1><p><br></p><h3>環境</h3><p>Rails
      5.2</p><p>ruby 2.4</p><p>AmazonLinux 2</p><p>gem &#39;yaml_db&#39;</p><p><br></p><h3>手順1
      yaml_dbを導入</h3><pre># Gemfile\r\ngem &#39;yaml_db&#39;\r\n$ bundle install</pre><p><br></p><h3>手順2
      コピーしたいデータをダンプ&amp;ロード</h3><p>yaml_db の使い方はこんな感じ</p><pre>$ rake db:dump RAILS_ENV=&quot;development&quot;\r\n(config/db/data.yml
      will be created!)\r\n\r\n$ rake db:data:load RAILS_ENV=&quot;production&quot;\r\n(production.sqlite3
      will be created!)</pre><p><br></p><h1>今回は、<span style=\"color: rgb(41, 105,
      176);\">ローカルのpostgreSQLデータベース</span>を<span style=\"color: rgb(184, 49, 47);\">EC2直入れのpostgreSQLデータベース</span>にダンプする</h1><p><br></p><h3>2-1.
      ローカルのデータベースをダンプしてEC2にアップロード</h3><pre>ローカル\r\n$ cd ~/DIARY/dragonarrow # 自分の作業ディレクトリに移動\r\n$
      rake db:dump RAILS_ENV=&quot;development&quot;　# development環境のDBデータをダンプ\r\n$
      scp -i ~/.ssh/AWS/dragonarrow_key_rsa ~/DIARY/dragonarrow/db/data.yml <a href=\"mailto:tatsuya@xx%3A/var/www/rails/froala-blog/db/.xx\">tatsuya@xx.xx.xx.xx:/var/www/rails/froala-blog/db/</a>\r\ndata.yml
                                           100%  516KB   2.0MB/s   00:00</pre><p>scpはディレクトリごとアップロードしたい時は
      -rをつける</p><p><br></p><h3>2-2. EC2側で、アップロードされたdata.ymlを読み込む</h3><pre>EC2\r\nec2にssh\r\n$
      cd /var/www/rails/froala-blog/\r\n$ bundle exec rake db:data:load RAILS_ENV=&quot;production&quot;</pre><p><br></p><h1>終了です。無事ロードされました。</h1><p><br></p><h1><br></h1><p><br></p><p><span
      style=\"font-size: 18px;\">じゃあ逆はどうするの？？</span></p><h1><span style=\"color: rgb(184,
      49, 47);\">ローカルのpostgreSQLデータベース</span>を<span style=\"color: rgb(41, 105, 176);\">EC2直入れのpostgreSQLデータベース</span>にダンプする</h1><p><br></p><h3>①.
      EC2のデータベースをダンプ</h3><pre>EC2\r\nec2にssh\r\n$ cd /var/www/rails/froala-blog/\r\n$
      bundle exec rake db:dump RAILS_ENV=production</pre><p><br></p><h3>②. EC2のダンプファイルをダウンロードして読み込む</h3><pre>ローカル\r\n$
      scp -i ~/.ssh/AWS/dragonarrow_key_rsa tatsuya@xx.xxxx.xx:/var/www/rails/froala-blog/db/data.yml
      ~/DIARY/dragonarrow/db/\r\n$ rake db:data:load RAILS_ENV=&quot;development&quot;　#
      development環境のDBに読み込む</pre><p>scpはディレクトリごとアップロードしたい時は -rをつける</p><p><br></p><h1>最後に</h1><hr><p>scpコマンドを使うのは、いつもローカルからです。</p><p>多分初心者は、わけわからなくなるかもしれませんが、アップロード・ダウンロードどちらもローカルからしかscpコマンドは使わないので、覚えておくとわかりやすいと思います。</p><p><br></p><h1><br></h1>"
    - '2019-06-16 09:56:21.074893'
    - '2019-08-06 15:16:18.014476'
  - - 169
    - Jupyter Notebookのインストール
    - "<h1 itemprop=\"headline\" style=\"text-align: center;\">Jupyter Notebookのインストール</h1><p><br></p><section
      itemprop=\"articleBody\"><h2>はじめに</h2><p>Jupyter NotebookをmacOSに導入した際の記録（手順メモ）です。</p><ul><li>macOS
      High Sierra</li><li>Python3.6.4</li></ul><h2>pipを更新する</h2><p>pipを最新の状態へ更新します。</p><pre>$
      pip install --upgrade setuptools\r\n$ pip install --upgrade pip</pre><h2>必要パッケージをインストールする</h2><p>必要なパッケージをインストールします。</p><pre>$
      pip install numpy\r\n$ pip install scipy\r\n$ pip install matplotlib\r\n$ pip
      install Pillow\r\n$ pip install ipython[all]</pre><h2>Jupyter Notebookをインストールする</h2><p>Jupyter
      Notebookをインストールします。</p><pre>$ pip install jupyter</pre><h2>確認する</h2><p>以下を実行し、ブラウザでJupyter
      Notebookが開けるか確認します。</p><pre>$ jupyter notebook</pre><p><br></p><p><br></p><p><span
      style=\"font-size: 60px;\">以上で起動しました。</span></p></section>"
    - '2019-06-17 01:18:49.27233'
    - '2019-06-17 02:09:16.232844'
  - - 170
    - ゼロから作る Deep Learning で使用する微分ファイル
    - "<h1 style=\"text-align: center;\">深層学習の微分関数</h1><p>書籍ではch01,ch02,ch03...フォルダと同じ階層にcommonフォルダを作成し、そのフォルダにgradient.pyとして置いてある</p><p>書籍のgithub<a
      href=\"https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/functions.py\"></a><a
      href=\"https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/gradient.py\">https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/gradient.py</a></p><p>各関数が必要な時はimportするだけで利用できるようにする。</p><p><br></p><pre><span
      style=\"font-size: 24px;\">import numpy as np\r\n\r\n\r\ndef _numerical_gradient_1d(f,
      x):\r\n    h = 1e-4 # 0.0001\r\n    grad = np.zeros_like(x)\r\n    \r\n    for
      idx in range(x.size):\r\n        tmp_val = x[idx]\r\n        x[idx] = float(tmp_val)
      + h\r\n        fxh1 = f(x) # f(x+h)\r\n        \r\n        x[idx] = tmp_val
      - h \r\n        fxh2 = f(x) # f(x-h)\r\n        grad[idx] = (fxh1 - fxh2) /
      (2*h)\r\n        \r\n        x[idx] = tmp_val # 値を元に戻す\r\n        \r\n    return
      grad\r\n\r\n\r\n\r\n\r\ndef numerical_gradient_2d(f, X):\r\n    if X.ndim ==
      1:\r\n        return _numerical_gradient_1d(f, X)\r\n    else:\r\n        grad
      = np.zeros_like(X)\r\n        \r\n        for idx, x in enumerate(X):\r\n   
              grad[idx] = _numerical_gradient_1d(f, x)\r\n        \r\n        return
      grad\r\n\r\n\r\n# 中心差分で微分\r\ndef numerical_gradient(f, x):\r\n    h = 1e-4 #
      0.0001\r\n    grad = np.zeros_like(x)\r\n    \r\n    it = np.nditer(x, flags=[&#39;multi_index&#39;],
      op_flags=[&#39;readwrite&#39;])\r\n    while not it.finished:\r\n        idx
      = it.multi_index\r\n        tmp_val = x[idx]\r\n        x[idx] = float(tmp_val)
      + h\r\n        fxh1 = f(x) # f(x+h)\r\n        \r\n        x[idx] = tmp_val
      - h \r\n        fxh2 = f(x) # f(x-h)\r\n        grad[idx] = (fxh1 - fxh2) /
      (2*h)\r\n        \r\n        x[idx] = tmp_val # 値を元に戻す\r\n        it.iternext()\r\n 
            \r\n    return grad</span></pre><p><br></p><p><span style=\"font-size:
      24px;\"><span style=\"font-size: 24px;\">_numerical_gradient_1d は画像一枚が渡ってきたときの微分</span></span></p><p>x
      = array([0.1, 0.1, 0.9, 0.1, 0.6, 0. , 0.9, 0.7, 0. , 0.7]) みたいな状況</p><p><br></p><p><span
      style=\"font-size: 24px;\"><span style=\"font-size: 24px;\">_numerical_gradient_2d
      は画像がバッチ処理(100枚とか)で渡ってきたときの微分</span></span></p><p>x = array([[0.9, 0.9, 0.2,
      0. , 0.2, 0.3, 0.8, 0.2, 0.1, 0.1],</p><p>&nbsp; &nbsp; &nbsp; &nbsp;[0.3, 0.1,
      0. , 0.2, 0.4, 0.1, 0.5, 0.6, 0.5, 0.7],</p><p>&nbsp; &nbsp; &nbsp; &nbsp;...</p><p>&nbsp;
      &nbsp; &nbsp; &nbsp;[0.2, 0.7, 0.5, 0.4, 0.7, 0.8, 0.5, 0.3, 0.4, 0. ]]) &nbsp;みたいな状況</p><p><br></p><p><span
      style=\"font-size: 24px;\">numerical_gradient はxの次元数に場合分けを使わない便利な書き方</span></p><p>役割は
      <span style=\"font-size: 14px;\">_numerical_gradient_2d と同じ</span></p><p><span
      style=\"font-size: 24px;\">補足:【Python】numpy.nditer()という関数</span></p><p><a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.nditer.html\">numpy.nditer
      &mdash; NumPy v1.12 Manual</a></p><p>オプションのop_flags=[&#39;readwrite&#39;]配下の説明参照</p><p><span
      style=\"font-size: 24px;\"><a href=\"https://teratail.com/questions/79756\"></a></span><span
      style=\"font-size: 14px;\"><a href=\"https://teratail.com/questions/79756\">https://teratail.com/questions/79756</a></span></p><p>何するの、これ？
      と思ったけど、使ってみた。まずはコードから。</p><pre data-lang=\"python\" data-unlink=\"\">np_array
      = np.random.randn(2, 3)\r\nprint(np_array)\r\n\r\nnditer = np.nditer(np_array,
      flags=[&#39;multi_index&#39;])\r\nwhile not nditer.finished:\r\n    print(nditer.multi_index)\r\n
      \   print(np_array[nditer.multi_index])\r\n    nditer.iternext()</pre><p>結果</p><pre
      data-lang=\"\" data-unlink=\"\"># 最初のprint()\r\n[[-1.74892591 -0.59628881  0.05522772]\r\n
      [ 1.31665726  1.22965398 -0.41140946]]\r\n\r\n# whileループ\r\n(0, 0)\r\n-1.7489259098\r\n(0,
      1)\r\n-0.596288812217\r\n(0, 2)\r\n0.0552277235215\r\n(1, 0)\r\n1.31665726393\r\n(1,
      1)\r\n1.229653983\r\n(1, 2)\r\n-0.411409464808</pre><p>なるほどー。何が便利かわからん。。。と思ったけど、numpyの次元が増えた時、２重ループとか使わず全パターン繰り返される</p><p>画像っぽい値で。2行2列3の値（３次元）</p><pre
      data-lang=\"python\" data-unlink=\"\">np_array = np.random.randn(2, 2, 3)\r\nprint(np_array)\r\n\r\nnditer
      = np.nditer(np_array, flags=[&#39;multi_index&#39;])\r\nwhile not nditer.finished:\r\n
      \   print(nditer.multi_index)\r\n    print(np_array[nditer.multi_index])\r\n
      \   nditer.iternext()</pre><pre data-lang=\"\" data-unlink=\"\">[[[ 0.40570373
      \ 0.29383617  0.19770627]\r\n  [-0.35118724  0.64944819 -0.85610483]]\r\n\r\n
      [[-0.99811347 -0.3842173  -0.40674939]\r\n  [-0.28392354  1.00559893 -0.36640248]]]\r\n(0,
      0, 0)\r\n0.405703731115\r\n(0, 0, 1)\r\n0.293836169251\r\n(0, 0, 2)\r\n0.197706273648\r\n(0,
      1, 0)\r\n-0.351187235594\r\n(0, 1, 1)\r\n0.649448185325\r\n(0, 1, 2)\r\n-0.856104830751\r\n(1,
      0, 0)\r\n-0.998113470526\r\n(1, 0, 1)\r\n-0.384217298371\r\n(1, 0, 2)\r\n-0.406749392256\r\n(1,
      1, 0)\r\n-0.283923537977\r\n(1, 1, 1)\r\n1.0055989324\r\n(1, 1, 2)\r\n-0.366402477684</pre><p>すばらしい！！！</p><p><br></p><p><br></p><p><br></p>"
    - '2019-06-25 09:56:50.821113'
    - '2019-08-18 13:34:35.138894'
  - - 171
    - froala ライセンス 裏技
    - "<h1 style=\"text-align: center;\">froala ライセンス 臨時的な裏技</h1><p><br></p><p><code>Ruby
      On Rails (5.2.1)</code></p><p><code>froala-editor-sdk (1.2.0</code></p><p><br></p><h2>はじめに:</h2><p><span
      style=\"font-size: 18px;\">froalaを使う場合、本番環境だとライセンスがないと警告みたいなのが出て、それを購入して手続きすると警告が消える仕組み</span></p><p><span
      style=\"font-size: 18px;\">今回載せているのは、あくまでも臨時的なものであり、ライセンスの手続きを済ませるまでの苦肉の策だと思っていただきたい。</span></p><p><br></p><h2><span
      style=\"font-size: 18px;\">1. 警告を非表示</span></h2><pre><span style=\"font-size:
      18px;\">&lt;style&gt;\r\n  .fr-wrapper &gt; div:first-child {\r\n  display:
      none;\r\n  }\r\n&lt;/style&gt;</span></pre><p><span style=\"font-size: 18px;\">上記のコードで一応警告を非表示にはできる</span></p><p><span
      style=\"font-size: 20px; color: red;\">ただし、入力しているとeditorが突然壊れるというバグが起きる。</span></p><p><span
      style=\"font-size: 18px;\">結構イライラすることになるので、本当に臨時的。</span></p><p><br></p><h2><span
      style=\"font-size: 18px;\">2. 警告の透明化</span></h2><pre><span style=\"font-size:
      18px;\">&lt;style&gt;\r\n  .fr-wrapper &gt; div:first-child {\r\n  visibility:
      hidden;\r\n  }\r\n&lt;/style&gt;</span></pre><p><span style=\"font-size: 18px;\">上記のコードで一応警告を非表示にはできる</span></p><p><span
      style=\"font-size: 20px; color: red;\">ただし、エディターの一番上に空白がポコっとできる。</span></p><p><span
      style=\"font-size: 18px;\">動作上も表示上も特に問題はないのだが、編集するときに、妙な隙間が空いてるとむずむずするよねって話。</span></p><p><span
      style=\"font-size: 18px;\">あまり気にならない方はこれでもいいかも？？</span></p><p><br></p><p><br></p><h2>最後に:</h2><p><span
      style=\"font-size: 18px;\">今回はあくまで苦肉の策です。</span></p><p><span style=\"font-size:
      18px;\">JODIT editor、BlueGriffonなど、無料のwysiwygエディタもあるし、あまり凝らずに他のサードパーティを使うか、サクッとライセンスを買ったほうがいいかも。</span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-07-01 01:47:23.344967'
    - '2019-07-25 17:06:23.556089'
  - - 172
    - EC2でyumがCannot allocate memory
    - '<h1 style="text-align: center;">EC2でyumが「Cannot allocate memory」になる</h1><p><br></p><h2>問題</h2><h3>AWS
      EC2 の最低スペック(nano インスタンス)で動かしているマシンがあったのですが、そこで yum update を行ったところ [Errno 5]
      [Errno 12] Cannot allocate memoryとエラーが出た。</h3><p><br></p><h2>原因</h2><h3>メモリが足りないこと。
      AWS EC2 の nano インスタンスなんで500MBぐらいしかない。</h3><p><br></p><h2>エラーへの対処</h2><p>メモリ不足が原因ですので、メモリを増やしてあげれば解決するのですが、EC2の物理メモリはインスタンスタイプ毎に決められているので物理メモリを増やすことはできない。</p><p>そこで、LINUXのしくみで、ディスクをメモリ代わりに使用する<strong>仮想メモリというものを追加</strong></p><p><br></p><p><br></p><p><br></p><pre>fallocate
      -l 512M /swapfile</pre><p>これで仮想メモリとして使う<strong>スワップファイルを確保</strong>します。-l の後には追加する大きさを指定します。</p><p><br></p><pre>chmod
      600 /swapfile</pre><p>スワップファイルのアクセス権を設定</p><p><br></p><pre>mkswap /swapfile</pre><p>仮想メモリとして使うファイルとして指定</p><p><br></p><pre>swapon
      /swapfile</pre><p>仮想メモリを有効にします</p><p><br></p><p><code>以上の手順で&nbsp;swapon failed:
      Invalid argument というエラーが出てしまう場合は以下の手順をお試しください</code></p><p><code>まず、<strong>先ほど作成した
      swapfile を削除します</strong>。その後以下のコマンドラインを入力してください。（fallocate を dd に変えただけです）</code></p><p><br></p><p><code>dd
      if=/dev/zero of=/swapfile count=512000 bs=1K<br>chmod 600 /swapfile<br>mkswap
      /swapfile<br>swapon /swapfile</code></p><p data-empty="true"><br></p><p data-empty="true"><strong>仮想メモリの追加完了！</strong></p><p
      data-empty="true"><br></p><p>以上の操作がエラーなく終わったら改めて yum update</p><p>無事にアップデートが完了しました。</p><p>仮想メモリの大きさは自由に変更できますので、上記のコマンドの512の部分を適切な数値に変更してお試しください。</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>'
    - '2019-07-05 09:40:52.377605'
    - '2019-07-26 11:57:05.038001'
  - - 173
    - certbotで無料でHTTPS化
    - "<h1 style=\"text-align: center;\">certbotで無料でHTTPS化</h1><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1562654275349-certbot_ec2.jpg\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib\"></p><p><br></p><h1>実行環境</h1><ul><li>Amazon
      Linux 2</li><li>nginx version: nginx/1.12.2</li></ul><p><br></p><h1>1．Let&#39;s
      Encryptとは？</h1><p>今まで、サイトをSSL化するためには、1年単位でライセンスを購入し、その証明書を用いる必要がありました。</p><p>こいつがピンきりですが高いものはめちゃくちゃ高くて、<strong>年間数千円~十数万円の費用がかかるのが普通</strong>でした。</p><p>そこで、「インターネットを介した安全な通信を行う際の、経済面・技術面・教育面での障壁を減らすこと」を指名として活動している、非営利団体のISRG(Internet
      Security Research Group)が開発したのが、このLet&#39;s Encryptなのです。</p><p><br></p><p><strong>これを使えば無料かつ、面倒な更新手続き・運用を自動化しながら、安全な通信を行うことが出来るようになります。</strong></p><p><br></p><h1>2．なぜcertbotを使うの？</h1><p>こちらの記事を参考に見ていただくと、今回はパターン2になります。</p><p><a
      href=\"https://recipe.kc-cloud.jp/archives/11067\"></a><a href=\"https://recipe.kc-cloud.jp/archives/11067\">https://recipe.kc-cloud.jp/archives/11067</a></p><p>AWSではAWS
      Certificate Manager (ACM) を使って無料で証明書を発行できますが、以下のサービスでしか配置ができません。</p><p>・Elastic
      Load Balancing.<br>・Amazon CloudFront.</p><p><br></p><p><strong>◯主なメリット　まとめ</strong><br>・更新はAWSが自動で行なってくれる（最短で有効期限の60日前～）<br>・再起動などのダウンタイムを最小限にできる<br>・証明書をコンソールなどから一括で管理が出来る<br>・ワイルドカードも対応可能</p><p><strong>◯利用する際の注意点　まとめ</strong><br>・特定サービスのみの対応（ELB,Cloudfront）<br>・AWS環境以外で利用ができない<br>・最低限の証明となっている（SSL/TSL）<br>・アカウント単位で20個までという制限がある<br>・コード署名や
      E メールの暗号化に利用できない</p><p><br></p><p>結論: ACM自体には基本お金がかからないが、ELBやCloudFrontで結構お金がかかるので、完全無料のものを使いたいと思った結果、certbotにたどり着きました。</p><h1><br>3．証明書を発行しよう！</h1><h2>3-1．certbotのインストール</h2><p>certbotとはLet&rsquo;s
      Encryptが提供する、クライアントソフトウェアで、<strong>これを使えばSSL証明書の取得・更新作業を自動化出来る</strong>ようになっています。</p><p>今回はこれを使ってサイトのSSL化をしていくので、まずはcertbotをインストールします。</p><h2><br></h2><p>最初はGitHubからcertbotをcloneしてcertbotを実行できるようにしようと思っていたのですが、2019年5月現在、GitHubからcloneしてcertbot-autoを実行すると、次のエラーが発生します。</p><pre><code>Requesting
      to rerun ./certbot-auto with root privileges...\r\nSorry, I don&#39;t know how
      to bootstrap Certbot on your operating system!</code></pre><p>設定ファイルを書き換えて対応する方法もあるようなのですが、今回はyumでcertbotをインストールすることにします。</p><p><br></p><pre><code>$
      sudo yum -y install certbot</code></pre><p><br></p><h2>Nginx対応プラグインのインストール</h2><p>Nginxを使用している場合は「certbot-nginx」をインストールします。</p><p>certbot実行時にnginxを指定することで、nginxの設定ファイルに証明書の設定を自動で追加してくれます。(めちゃくちゃ便利)</p><pre><code>$
      sudo yum -y install certbot-nginx</code></pre><p><br></p><h2>certbotを使ってSSL証明書を取得</h2><p>Nginxを使用している場合は、オプションで「&ndash;nginx」を指定します。</p><p>「-d」オプションに続いてドメイン名を入力します。</p><p>certbot実行時に権限でエラーになる場合は、root権限で実行します。</p><pre><code>$
      certbot --nginx -d www.example.com</code></pre><pre>Saving debug log to /var/log/letsencrypt/letsencrypt.log\r\nPlugins
      selected: Authenticator nginx, Installer nginx\r\nObtaining a new certificate\r\nPerforming
      the following challenges:\r\nhttp-01 challenge for www.example.com\r\nWaiting
      for verification...\r\nCleaning up challenges\r\nDeploying Certificate to VirtualHost
      /etc/nginx/conf.d/froala-blog.conf\r\n\r\nPlease choose whether or not to redirect
      HTTP traffic to HTTPS, removing HTTP access.\r\n- - - - - - - - - - - - - -
      - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n1: No redirect - Make
      no further changes to the webserver configuration.\r\n2: Redirect - Make all
      requests redirect to secure HTTPS access. Choose this for\r\nnew sites, or if
      you&#39;re confident your site works on HTTPS. You can undo this\r\nchange by
      editing your web server&#39;s configuration.\r\n- - - - - - - - - - - - - -
      - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nSelect the appropriate
      number [1-2] then [enter] (press &#39;c&#39; to cancel): 2\r\nRedirecting all
      traffic on port 80 to ssl in /etc/nginx/conf.d/froala-blog.conf\r\n\r\n- - -
      - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nCongratulations!
      You have successfully enabled https://www.examle.com\r\n\r\nYou should test
      your configuration at:\r\nhttps://www.ssllabs.com/ssltest/analyze.html?d=www.example.com\r\n-
      - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      -\r\n\r\nIMPORTANT NOTES:\r\n- Congratulations! Your certificate and chain have
      been saved at:\r\n/etc/letsencrypt/live/www.example.com/fullchain.pem\r\nYour
      key file has been saved at:\r\n/etc/letsencrypt/live/www.example.com/privkey.pem\r\nYour
      cert will expire on 2019-10-03. To obtain a new or tweaked\r\nversion of this
      certificate in the future, simply run certbot again\r\nwith the &quot;certonly&quot;
      option. To non-interactively renew *all* of\r\nyour certificates, run &quot;certbot
      renew&quot;\r\n- If you like Certbot, please consider supporting our work by:\r\n\r\nDonating
      to ISRG / Let&#39;s Encrypt:   https://letsencrypt.org/donate\r\nDonating to
      EFF:                    https://eff.org/donate-le\r\n\r\n</pre><p><br></p><h2>Nginxの再起動</h2><p>Nginxのコンフィグをテストし、問題なければNginxを再起動します。</p><pre><code>$
      nginx -t\r\n$ </code>sudo service nginx restart</pre><p><br></p><p><span style=\"font-size:
      24px;\">以上でhttpsでアクセスできます。</span></p><p><br></p><p><br></p><p><br></p><h2>SSL/TLS証明書を失効・削除したいとき</h2><p>　Let&rsquo;s
      Encrypt で発行した SSL/TLS 証明書を失効した上で削除します。 これは certbot revoke コマンドで行うことができます。 (certbot
      コマンドには delete オプションもありますが、これだと失効させられないので注意してください。) certbot revoke コマンドを実行する際に
      &ndash;cert-pat オプションで、失効させる証明書のパスを指定します。 コマンドを実行すると、次のような表示で完了することができます。</p><p>削除のみ</p><pre>$
      sudo certbot delete --cert-name www.example.com</pre><p>削除・失効</p><pre>$ sudo
      certbot revoke --cert-path /etc/letsencrypt/live/www.example.com/cert.pem</pre><pre>Saving
      debug log to /var/log/letsencrypt/letsencrypt.log\r\nStarting new HTTPS connection
      (1): acme-v01.api.letsencrypt.org\r\n\r\n-------------------------------------------------------------------------------\r\nWould
      you like to delete the cert(s) you just revoked?\r\n-------------------------------------------------------------------------------\r\n(Y)es
      (recommended)/(N)o: y\r\n\r\n-------------------------------------------------------------------------------\r\nDeleted
      all files relating to certificate www.example.com.\r\n-------------------------------------------------------------------------------\r\n\r\n-------------------------------------------------------------------------------\r\nCongratulations!
      You have successfully revoked the certificate that was located\r\nat /etc/letsencrypt/live/www.example.com/cert.pem\r\n\r\n-------------------------------------------------------------------------------</pre><p>これで、SSL/TLS証明書を失効させ、削除することができました。
      ただし、Apache や Nginx などの各種ソフトウェアへ行った設定は残ったままですので、それらについては別途対応するようにしてください。</p><h2>証明書を手動更新したいとき</h2><p>以下は、証明書の期限がまだ十分にあるためリニューアルを実行しませんでしたという内容になっていますが、期限前にやると実行されます。</p><pre>$
      sudo certbot renew --post-hook &quot;sudo service nginx restart&quot;\r\nSaving
      debug log to /var/log/letsencrypt/letsencrypt.log\r\n\r\n- - - - - - - - - -
      - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nProcessing /etc/letsencrypt/renewal/www.example.com\r\n-
      - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      -\r\nCert not yet due for renewal\r\n\r\n- - - - - - - - - - - - - - - - - -
      - - - - - - - - - - - - - - - - - - - - - -\r\n\r\nThe following certs are not
      due for renewal yet:\r\n/etc/letsencrypt/live/www.example.com/fullchain.pem
      expires on 2019-10-06 (skipped)\r\nNo renewals were attempted.\r\nNo hooks were
      run.\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - - - - - -</pre><p><br></p><h2>証明書を自動更新したいとき</h2><h4>cronで自動更新の設定</h4><pre>$
      sudo vi /etc/cron.d/letsencrypt</pre><p>SSL証明書の有効期限が90日なので自動更新の設定をします。</p><pre>#毎月1日の1時に強制的に更新をします\r\n0
      1 1 * * root certbot renew --force-renewal --deploy-hook &quot;service httpd
      restart&quot;</pre><p>これで設定終了です。簡単なのでサクッとやってしまいましょう。</p><p><br></p><p skip=\"true\">＊
      --pre-hook, --post-hook, --deploy-hook について</p><table><thead><tr><th>ディレクトリ</th><th>処理のトリガー</th></tr></thead><tbody><tr><td>pre</td><td>certbotが<strong>全部の</strong>証明書更新の処理を始める前に<strong>証明書の更新の有無に関わらず</strong>必ず実行されます</td></tr><tr><td>post</td><td>certbotが<strong>全部の</strong>証明書更新の処理を終わった後で<strong>証明書の更新の有無に関わらず</strong>必ず実行されます</td></tr><tr><td>deploy</td><td>certbotが<strong>個々の</strong>証明書更新の処理を終わった後で<strong>証明書の更新された場合にだけ</strong>実行されます</td></tr></tbody></table><p><br></p><h1>最後に</h1><p>きになる人だけ。</p><p>--nginxオプションで自動で設定の書き込みを行なったが、自動で加わった内容をチェックする</p><p><span
      style=\"color: rgb(209, 72, 65);\">ーなくなった部分 赤</span></p><p><span style=\"color:
      rgb(97, 189, 109);\">＋付け加えられた部分 緑</span></p><p>( /etc/nginx/conf.d/froala-blog.conf
      )</p><pre># log directory\r\nerror_log  /var/www/rails/froala-blog/log/nginx.error.log;\r\naccess_log
      /var/www/rails/froala-blog/log/nginx.access.log;\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream app_server {\r\n  # for UNIX domain socket setups\r\n  server
      unix:/var/www/rails/froala-blog/tmp/sockets/unicorn.sock fail_timeout=0;\r\n}\r\nserver
      {\r\n  <span style=\"color: rgb(209, 72, 65);\">- listen 80;</span>\r\n  server_name
      www.example.com [IP];\r\n  # nginx so increasing this is generally safe...\r\n 
      keepalive_timeout 5;\r\n  # path for static files\r\n  root /var/www/rails/froala-blog/public;\r\n 
      # page cache loading\r\n  try_files $uri/index.html $uri.html $uri @app;\r\n 
      location @app {\r\n    # HTTP headers\r\n    proxy_set_header X-Forwarded-For
      $proxy_add_x_forwarded_for;\r\n    <span style=\"color: rgb(243, 121, 52);\">proxy_set_header
      X-Forwarded-Proto https;</span> # ここは手動で追記する 追記しないと「リダイレクトが多すぎます」というエラーが出てアクセスできない\r\n 
        proxy_set_header Host $http_host;\r\n    proxy_redirect off;\r\n    proxy_pass
      http://app_server;\r\n  }\r\n  # Rails error pages\r\n  error_page 500 502 503
      504 /500.html;\r\n  location = /500.html {\r\n    root /var/www/rails/froala-blog/public;\r\n 
      }\r\n<span style=\"color: rgb(97, 189, 109);\">    listen 443 ssl; # managed
      by Certbot</span>\r\n<span style=\"color: rgb(97, 189, 109);\">    ssl_certificate
      /etc/letsencrypt/live/www.exaple.com/fullchain.pem; # managed by Certbot</span>\r\n<span
      style=\"color: rgb(97, 189, 109);\">    ssl_certificate_key /etc/letsencrypt/live/www.exaple.com/privkey.pem;
      # managed by Certbot</span>\r\n<span style=\"color: rgb(97, 189, 109);\">   
      include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot</span>\r\n<span
      style=\"color: rgb(97, 189, 109);\">    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
      # managed by Certbot</span>\r\n}\r\n\r\n\r\n<span style=\"color: rgb(97, 189,
      109);\">server {</span>\r\n<span style=\"color: rgb(97, 189, 109);\">    if
      ($host = <span style=\"color: rgb(97, 189, 109);\"><a href=\"//www.exaple.com\">www.exaple.com</a></span>)
      {</span>\r\n<span style=\"color: rgb(97, 189, 109);\">        return 301 https://$host$request_uri;</span>\r\n<span
      style=\"color: rgb(97, 189, 109);\">    } # managed by Certbot</span>\r\n<span
      style=\"color: rgb(97, 189, 109);\">  listen 80;</span>\r\n<span style=\"color:
      rgb(97, 189, 109);\">  server_name www.exaple.com [IP];</span>\r\n<span style=\"color:
      rgb(97, 189, 109);\">    return 404; # managed by Certbot</span>\r\n<span style=\"color:
      rgb(97, 189, 109);\">}</span></pre><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-07-09 04:40:28.641605'
    - '2020-01-09 20:26:48.440967'
  - - 174
    - AWSのインフラ構成図を書く
    - '<h1 style="text-align: center;">AWSのインフラ構成図</h1><h2>利用ツール</h2><p><a href="https://www.draw.io/"
      rel="nofollow noopener" target="_blank"></a><a href="https://www.draw.io/">https://www.draw.io/</a></p><ul><li>オンラインで作図できる</li><li>AWS作図用のアイコンセットがある</li><li>無料で使える</li><li>保存先が色々選べる<ul><li>ローカル保存の他にGitHubやGoogleDriveなどにも連携可能</li></ul></li><li>必要最低限の画像出力<ul><li>PNG,PDF</li></ul></li></ul><p><br></p><h2>なぜこのツールなのか</h2><p>インフラ関連の説明に使う多くの画像が揃っている</p><p>ソフトをインストールせずに使うことができるため、メモリを使用せず便利。</p><h2><br>ツールの使い方</h2><h3>新しくファイルを作る</h3><p><a
      href="https://www.draw.io/" rel="nofollow noopener" target="_blank"></a><a href="https://www.draw.io/">https://www.draw.io/</a></p><p>上記にアクセスすると以下のダイアログが出る</p><p>「Create
      New Diagram」 をクリック</p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1562655304214-diagram.png"
      style="width: 603px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>左側のテンプレートメニューの
      「Network」を選択</p><p>AWSの公式ドキュメントでよく見るアイコンのテンプレートがあるので、それを選択して、「Create」ボタンをクリック</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1562655659010-edit.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>すると、以下のようにAWSのアイコンセットが使える状態の図が作られる</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1562655864153-sampleinfra.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>追加で欲しい画像を調べて付け足したり、いらないものを削除して編集をお行う。</p><p><br></p><p><br></p><h2>ファイル保存</h2><p>「File」メニューの
      「Save」をクリックし、<br>xmlファイルをダンロードする。</p><h2><br>再開</h2><p><a href="https://www.draw.io/"></a><a
      href="https://www.draw.io/">https://www.draw.io/</a> から「Open Exixting Diagram」
      を選ぶ</p><p>この画面で 「Open Existing Diagram」 をクリックし、<br>xmlファイルをアップロードする。</p><p><br></p><h2>画像出力</h2><p>「File」メニューの
      「Export as」 で出力したフォーマットを選ぶ。</p><p>googleDriveやパソコン本体、ブラウザなど好きなところに保存して利用できる</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>'
    - '2019-07-09 06:40:03.34379'
    - '2019-07-09 07:13:54.463374'
  - - 175
    - 'ActiveStorageにて 「Mixed Content: The page at ''<URL>'' was loaded over HTTPS,
      but requested an insecure image ''<URL>''. This content should also be served
      over HTTPS.」'
    - "<h1 itemprop=\"headline\" style=\"text-align: center;\">【Rails 5.2】 Active
      Storageの混合コンテンツのエラー</h1><p><br></p><h2>環境</h2><p>Amazon Linux 2<br>Rails 5.2.1<br>ruby
      2.4.2<br>(アプリケーション、ウェブサーバー)<br>nginx version: nginx/1.12.2<br>unicorn 5.5.1<br>(ssl証明書)<br>python2-certbot-nginx
      0.34.2-1.el7<br>certbot 0.34.2-3.el7<br>certbot-nginx 0.34.2-3.el7</p><p><br></p><h2><strong>エラー内容</strong></h2><p><strong>「混合コンテンツ：
      &#39;&lt;URL&gt;&#39;のページはHTTPS経由でロードされましたが、安全でない画像 &#39;&lt;URL&gt;&#39;を要求しました。このコンテンツもHTTPS経由で配信する必要があります」</strong></p><p><br></p><h2>原因</h2><p>ページのURLがhttpsなのに、保証されてないurl(http)がリクエストされていること</p><p>=&gt;
      https://[domain]　に　アクセスするとhttpsで暗号化により通信が保護されるが、画像のプロトコルがhttpであるため、他者にすり替えられた危険なコンテンツの恐れがある</p><p>と言っている</p><p><br></p><h2>解決策</h2><p>activeStorageのURL
      http://[domain]/rails/active_storage/blobs/xxxxxxxxxx/image.jpg を</p><p>http
      =&gt; httpsにするだけ...ですがこれがくせもの。</p><p><br></p><h3>・試したこと（以下どれも効果がなかった）</h3><p>1:&nbsp;fileアップロード先であるs3にてプロパティ&nbsp;-&gt;&nbsp;static&nbsp;website&nbsp;hosting設定にて<br>「ウェブサイトのホスティングを無効」
      から <span style=\"font-size: 18px;\">バケットを指定してhttpsプロトコルにリダイレクト</span><br>に変更。</p><p>2:&nbsp;Railsのconfig/environments/production.rbにて以下を追記</p><pre>Rails.application.configure
      do\r\n  Rails.application.routes.default_url_options[:protocol] = &#39;https&#39;\r\n
      \ Rails.application.routes.default_url_options[:host] = &quot;www.example.com&quot;\r\n 
      ...\r\nend</pre><p>3: activestorageのアップロード先のs3にて　アクセス権限-&gt;CORSの設定にhttp以外にもhttpsでの通信許可を追加した</p><pre>&lt;CORSRule&gt;\r\n&lt;AllowedOrigin&gt;https://xxxx&lt;/AllowedOrigin&gt;\r\n&lt;AllowedMethod&gt;GET&lt;/AllowedMethod&gt;\r\n&lt;AllowedMethod&gt;POST&lt;/AllowedMethod&gt;\r\n&lt;AllowedMethod&gt;PUT&lt;/AllowedMethod&gt;\r\n&lt;MaxAgeSeconds&gt;3000&lt;/MaxAgeSeconds&gt;\r\n&lt;AllowedHeader&gt;*&lt;/AllowedHeader&gt;\r\n&lt;/CORSRule&gt;</pre><p>4:&nbsp;config/initializersにforce_ssl.rbというファイルを新規作成<br>(
      https://medium.com/@stacietaylorcima/rails-active-storage-serve-your-images-over-https-14b916c67a51
      を参考にした)</p><pre>(force_ssl.rb)\r\nif Rails.application.config.force_ssl  \r\n 
      Rails.application.routes.default_url_options[:protocol] = &#39;https&#39;\r\nend</pre><p><br></p><p>結局プロトコルで矯正すると「「リダイレクトが多すぎます」と表示されてしまう」ためアクセスできなくなるだけだった...</p><h3>・解決方法</h3><p>ウェブサーバーにてNginx
      のリバースプロキシ設定が入ってなかった。</p><p>Rails側に過失はなかった。</p><p>・Nginx - Rails の場合</p><p>NginxでリバースプロキシするときにもSSLはNginxで処理させる場合が多く、プロキシされるアプリケーションサーバにはSSLが解かれた状態でリクエストが届く。<br>そのため
      X-Forwarded-Proto ヘッダを使って SSL であることを Railsに伝えなければ、force_ssl が機能しない</p><pre>#
      log directory\r\nerror_log  /var/www/rails/myapp/log/nginx.error.log; #自分のアプリケーション名に変更\r\naccess_log
      /var/www/rails/myapp/log/nginx.access.log; #自分のアプリケーション名に変更\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream app_server {\r\n  # for UNIX domain socket setups\r\n  server
      unix:/var/www/rails/myapp/tmp/sockets/unicorn.sock fail_timeout=0; #自分のアプリケーション名に変更\r\n}\r\nserver
      {\r\n  listen 80;\r\n  server_name ~~~.~~~.~~~.~~~;(#アプリのElastic IPに変更してください)\r\n
      \ # nginx so increasing this is generally safe...\r\n  keepalive_timeout 5;\r\n
      \ # path for static files\r\n  root /var/www/rails/myapp/public; #自分のアプリケーション名に変更\r\n
      \ # page cache loading\r\n  try_files $uri/index.html $uri.html $uri @app;\r\n
      \ location @app {\r\n    # HTTP headers\r\n    proxy_set_header X-Forwarded-For
      $proxy_add_x_forwarded_for;\r\n    <span style=\"color: rgb(250, 197, 28);\">proxy_set_header
      X-Forwarded-Proto https;</span>\r\n    proxy_set_header Host $http_host;\r\n
      \   proxy_redirect off;\r\n    proxy_pass http://app_server;\r\n  }\r\n  # Rails
      error pages\r\n  error_page 500 502 503 504 /500.html;\r\n  location = /500.html
      {\r\n    root /var/www/rails/myapp/public; #自分のアプリケーション名に変更\r\n  }\r\n}</pre><p><br></p><h1><br></h1><h1>以下は非推奨</h1><h3>・臨時の解決方法</h3><p>結論、画像表示のコードをいじり、絶対パスから相対パスに書き換えて表示させることにしました。</p><pre>&lt;%
      @articles.each do |article| %&gt;\r\n  &lt;% if article.image.attached? %&gt;\r\n 
        <span style=\"color: rgb(184, 49, 47);\">- &lt;%= image_tag article.image,
      :alt =&gt; &quot;イメージ&quot;, width: &#39;30%&#39;, height: &#39;30%&#39; %&gt;</span>\r\n 
       <span style=\"color: rgb(0, 168, 133);\"> + &lt;%= image_tag(url_for(article.image),
      :alt =&gt; &quot;イメージ&quot;, width: &#39;30%&#39;, height: &#39;30%&#39;) %&gt;</span>\r\n 
      &lt;% end %&gt;\r\n&lt;% end %&gt;</pre><p><br></p><p>出力されてHTMLでいうと、こんな感じになっています</p><p><span
      style=\"color: rgb(184, 49, 47);\">&lt;img alt=&quot;イメージ&quot; width=&quot;30%&quot;
      height=&quot;30%&quot; src=&quot;http://[domain]/rails/active_storage/blobs/xxxxx/sample.jpg&quot;&gt;</span></p><p><span
      style=\"color: rgb(0, 168, 133);\">&lt;img alt=&quot;イメージ&quot; width=&quot;30%&quot;
      height=&quot;30%&quot; src=&quot;/rails/active_storage/blobs/xxxxx/sample.jpg&quot;&gt;</span></p><p><br></p><p>絶対パス
      =&gt; 相対パス でプロトコルに左右されないという形にしました。</p><p>やむをえずって感じです。</p><p><br></p><p><br></p>"
    - '2019-07-11 05:39:12.788444'
    - '2019-07-20 04:35:56.527513'
  - - 176
    - ゼロから作る Deep Learning 第5章
    - "<h1 style=\"text-align: center;\">ゼロから作る Deep Learning』第5章 勉強メモ(最低限)</h1><p><br></p><p><br></p><h2>5.1
      計算グラフ</h2><p><br></p><p>問 1:太郎くんはスーパーで 1 個 100 円のリンゴを 2 個買いました。支払う金額 を求めなさい。ただし、消費税が
      10% 適用されるものとします。</p><p><br></p><p style=\"margin-left: 20px;\">計算グラフで解くと...</p><p
      style=\"margin-left: 20px;\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563100588019-flow.png\"
      style=\"width: 443px;\" class=\"fr-fic fr-dib fr-fil\"></p><p style=\"margin-left:
      20px;\"><br></p><p style=\"margin-left: 20px;\">乗算レイヤーを2回使って220円という出力が計算されます。</p><p
      style=\"margin-left: 20px;\"><br></p><p>問 2:太郎くんはスーパーでリンゴを 2 個、みかんを 3 個買いました。リンゴは1
      個 100 円、みかんは 1 個 150 円です。消費税が 10% かかるものとして、支払う金額を求めなさい。</p><p><br></p><p style=\"margin-left:
      20px;\">計算グラフで解くと...</p><p style=\"margin-left: 20px;\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563101651107-orange_apple.png\"
      style=\"width: 488px;\" class=\"fr-fic fr-dib fr-fil\"></p><p style=\"margin-left:
      20px;\"><br></p><p style=\"margin-left: 20px;\">乗算レイヤーを3回、加算レイヤーを1回使って715円という出力が計算されます。</p><p><br></p><p>計算グラフを使って問題を解くには、</p><p>1.
      計算グラフを構築する<br>2.&nbsp;計算グラフ上で計算を左から右へ進める</p><p>という流れで行います。ここで 2 番目の「計算を左から右へ進める」というステップは、順方向の伝播、略して、<span
      style=\"font-size: 24px;\">順伝播(forward propagation)</span></p><p>右から左方向への伝播を<span
      style=\"font-size: 24px;\">逆伝播(backward propagation)</span></p><p><br></p><h2>なぜ計算グラフで解くのか?</h2><p>計算グラフを使う最大の理由は、逆方向の伝播に
      よって「微分」を効率良く計算できる点</p><p><br></p><h2>計算グラフの逆伝播</h2><p><br></p><p>最終的に L という値を出力する大きな計算グラフを想定</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563106124907-L.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>逆伝播の計算は以下のようになっている</p><p>①では、x
      -&gt; z になっているので波の強度は (dz / dx) と考える。</p><p><span style=\"font-size: 24px;\">上流から流れてきた値(=dL/dz)が　強度
      (dz / dx)の波で強められるので、(上流値)&times;(波の強度)で下流値が出る</span></p><p>②では、y -&gt; z になっているので波の強度は
      (dz / dy) と考える。</p><p><span style=\"font-size: 24px;\">上流から流れてきた値(=dL/dz)が　強度
      (dz / dy)の波で強められるので、(上流値)&times;(波の強度)で下流値が出る</span></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563105664980-theory_reverse.png\"
      style=\"width: 500px; height: 300px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563108300801-reverse_apple_orange.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>入力値が1アップした時の出力値のアップ</p><p>りんごの値段が1円アップ
      -&gt; 全支払いが2.2円アップ</p><p><span style=\"color: rgb(209, 72, 65); font-size: 18px;\">支払いのリンゴの値段の微分は
      2.2</span></p><p>みかんの値段が1円アップ -&gt; 全支払いが3.3円アップ</p><p><span style=\"color:
      rgb(209, 72, 65); font-size: 18px;\">支払いのみかんの値段の微分は 2.2</span></p><p>消費税が1(100%)アップ
      -&gt; 全支払いが650円アップ</p><p><span style=\"color: rgb(209, 72, 65); font-size: 18px;\">支払いの消費税の値段の微分は
      650</span></p><p><br></p><p><span style=\"font-size: 24px; background-color:
      rgb(247, 218, 100);\">「微分」を効率良く計算できる</span></p><p><br></p><p><span style=\"font-size:
      24px;\">筆者の逆伝播の考え方</span></p><p><code>渓流がたくさんあります。&nbsp;</code></p><p><code>流れの強さは、緩やかなものもあれば急なものもあり、流れの向きは順速(加速する)のものもあれば逆速(減速する)のものもあります。&nbsp;</code></p><p><code>上流から岩石を下流に向けて流すと、全ての滝を超えて下流についた頃には隕石のスピードになったとします。</code></p><p><code>次に、全ての滝に関して、流れの勢いは変えないまま、流れの向きだけを反対にします。&nbsp;</code><code>そして今度は下流から上流に岩石を流したとします。</code></p><p><code>&nbsp;全ての滝を超えて上流についた頃には同じく隕石のスピードになっています。</code></p><p><span
      style=\"color: rgb(41, 105, 176); font-size: 18px;\">これが逆伝播の理屈です。</span></p><p><code>順伝播と逆伝播の違いは、渓流を上流から下流に向かうか、下流から上流に向かうかのみの違いで、
      準速の渓流は準速のまま、逆速の渓流は逆速のまま計算しているため、 結局、岩石が渓流を渡る順番が違うだけなのです。&nbsp;</code></p><p><code>したがって、順伝播も逆伝播も計算結果は同じで、どちらの方法でも岩石は同じスピードで帰ってくる。</code></p><p><br></p><h2>乗算レイヤの実装</h2><p>ソースコードは
      ch05/layer_naive.py</p><pre>class MulLayer:\r\n  def __init__(self):\r\n    self.x
      = None\r\n    self.y = None\r\n\r\n  def forward(self, x, y):\r\n    self.x
      = x\r\n    self.y = y\r\n    out = x * y\r\n\r\n    return out\r\n\r\n  def
      backward(self, dout):\r\n    dx = dout * self.y # xとyを逆にする\r\n    dy = dout
      * self.x\r\n    \r\n    return dx, dy</pre><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563109730037-apple_reverse.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>上記の順伝播は次のように実装することができます
      ソースコードは ch05/buy_apple.py&nbsp;</p><pre><span style=\"color: rgb(184, 49, 47);\">from</span>
      layer_naive <span style=\"color: rgb(184, 49, 47);\">import</span> <span style=\"color:
      rgb(85, 57, 130);\">*</span>\r\n\r\n\r\napple <span style=\"color: rgb(184,
      49, 47);\">=</span> <span style=\"color: rgb(85, 57, 130);\">100</span>\r\napple_num
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(85,
      57, 130);\">2</span>\r\ntax <span style=\"color: rgb(184, 49, 47);\">=</span>
      <span style=\"color: rgb(85, 57, 130);\">1.1</span>\r\n\r\nmul_apple_layer <span
      style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(84, 172,
      210);\">MulLayer</span>()\r\nmul_tax_layer <span style=\"color: rgb(184, 49,
      47);\">=</span> <span style=\"color: rgb(84, 172, 210);\">MulLayer</span>()\r\n\r\n#
      forward\r\napple_price <span style=\"color: rgb(184, 49, 47);\">=</span> mul_apple_layer.<span
      style=\"color: rgb(44, 130, 201);\">forward</span>(apple, apple_num)\r\nprice
      <span style=\"color: rgb(184, 49, 47);\">=</span> mul_tax_layer.<span style=\"color:
      rgb(44, 130, 201);\">forward</span>(apple_price, tax)\r\n\r\n# backward\r\ndprice
      <span style=\"color: rgb(184, 49, 47);\">=</span> 1\r\ndapple_price, dtax <span
      style=\"color: rgb(184, 49, 47);\">=</span> mul_tax_layer.<span style=\"color:
      rgb(44, 130, 201);\">backward</span>(dprice)\r\ndapple, dapple_num <span style=\"color:
      rgb(184, 49, 47);\">=</span> mul_apple_layer.<span style=\"color: rgb(44, 130,
      201);\">backward</span>(dapple_price)\r\n\r\nprint(<span style=\"color: rgb(250,
      197, 28);\">&quot;price:&quot;</span>, <span style=\"color: rgb(44, 130, 201);\">int</span>(price))\r\nprint(<span
      style=\"color: rgb(250, 197, 28);\">&quot;dApple:&quot;</span>, dapple)\r\nprint(<span
      style=\"color: rgb(250, 197, 28);\">&quot;dApple_num:&quot;</span>, <span style=\"color:
      rgb(44, 130, 201);\">int</span>(dapple_num))\r\nprint(<span style=\"color: rgb(250,
      197, 28);\">&quot;dTax:&quot;</span>, dtax)\r\n<span style=\"color: rgb(163,
      143, 132);\"># price: 220</span>\r\n<span style=\"color: rgb(163, 143, 132);\">#
      dApple: 2.2\r\n# dApple_num: 110\r\n# dTax: 200</span></pre><p><br></p><h2>加算レイヤの実装</h2><p>ソースコードは
      ch05/layer_naive.py</p><pre>class AddLayer:\r\n  def __init__(self):\r\n    <span
      style=\"color: rgb(184, 49, 47);\">pass</span> <span style=\"color: rgb(163,
      143, 132);\"># クラス変数としてx,yを保持する必要がない 「何も行わない」という命令</span>\r\n\r\n  def forward(self,
      x, y):\r\n    out = x + y\r\n    return out\r\n\r\n  def backward(self, dout):\r\n
      \   dx = dout * 1 <span style=\"color: rgb(163, 143, 132);\"># 下流に流すだけ</span>\r\n
      \   dy = dout * 1\r\n    \r\n    return dx, dy</pre><p><br><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563108300801-reverse_apple_orange.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>計算グラフは、Python
      で実装すると次のようになります(ソースコードは ch05/buy_apple_orange.py )</p><pre><span style=\"color:
      rgb(184, 49, 47);\">from</span> layer_naive <span style=\"color: rgb(184, 49,
      47);\">import</span> <span style=\"color: rgb(85, 57, 130);\">*</span>\r\n\r\napple
      <span style=\"color: rgb(184, 49, 47);\">=</span> 100\r\napple_num <span style=\"color:
      rgb(184, 49, 47);\">=</span> 2\r\norange <span style=\"color: rgb(184, 49, 47);\">=</span>
      150\r\norange_num <span style=\"color: rgb(184, 49, 47);\">=</span> 3\r\ntax
      <span style=\"color: rgb(184, 49, 47);\">=</span> 1.1\r\n\r\n# layer\r\nmul_apple_layer
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(44,
      130, 201);\">MulLayer</span>()\r\nmul_orange_layer <span style=\"color: rgb(184,
      49, 47);\">=</span> <span style=\"color: rgb(44, 130, 201);\">MulLayer</span>()\r\nadd_apple_orange_layer
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(44,
      130, 201);\">AddLayer</span>()\r\nmul_tax_layer <span style=\"color: rgb(184,
      49, 47);\">=</span> <span style=\"color: rgb(44, 130, 201);\">MulLayer</span>()\r\n\r\n#
      forward\r\napple_price <span style=\"color: rgb(184, 49, 47);\">=</span> mul_apple_layer.<span
      style=\"color: rgb(44, 130, 201);\">forward</span>(apple, apple_num)  # (1)\r\norange_price
      <span style=\"color: rgb(184, 49, 47);\">=</span> mul_orange_layer.<span style=\"color:
      rgb(44, 130, 201);\">forward</span>(orange, orange_num)  # (2)\r\nall_price
      <span style=\"color: rgb(184, 49, 47);\">=</span> add_apple_orange_layer.<span
      style=\"color: rgb(44, 130, 201);\">forward</span>(apple_price, orange_price)
       # (3)\r\nprice <span style=\"color: rgb(184, 49, 47);\">=</span> mul_tax_layer.<span
      style=\"color: rgb(44, 130, 201);\">forward</span>(all_price, tax)  # (4)\r\n\r\n#
      backward\r\ndprice <span style=\"color: rgb(184, 49, 47);\">=</span> 1\r\ndall_price,
      dtax <span style=\"color: rgb(184, 49, 47);\">=</span> mul_tax_layer.<span style=\"color:
      rgb(44, 130, 201);\">backward</span>(dprice)  # (4)\r\ndapple_price, dorange_price
      <span style=\"color: rgb(184, 49, 47);\">=</span> add_apple_orange_layer.<span
      style=\"color: rgb(44, 130, 201);\">backward</span>(dall_price)  # (3)\r\ndorange,
      dorange_num <span style=\"color: rgb(184, 49, 47);\">=</span> mul_orange_layer.<span
      style=\"color: rgb(44, 130, 201);\">backward</span>(dorange_price)  # (2)\r\ndapple,
      dapple_num <span style=\"color: rgb(184, 49, 47);\">=</span> mul_apple_layer.<span
      style=\"color: rgb(44, 130, 201);\">backward</span>(dapple_price)  # (1)\r\n\r\nprint(<span
      style=\"color: rgb(250, 197, 28);\">&quot;price:&quot;</span>, <span style=\"color:
      rgb(44, 130, 201);\">int</span>(price))\r\nprint(<span style=\"color: rgb(250,
      197, 28);\">&quot;dApple:&quot;</span>, dapple)\r\nprint(<span style=\"color:
      rgb(250, 197, 28);\">&quot;dApple_num:&quot;</span>, int(dapple_num))\r\nprint(<span
      style=\"color: rgb(250, 197, 28);\">&quot;dOrange:&quot;</span>, dorange)\r\nprint(<span
      style=\"color: rgb(250, 197, 28);\">&quot;dOrange_num:&quot;</span>, <span style=\"color:
      rgb(44, 130, 201);\">int</span>(dorange_num))\r\nprint(<span style=\"color:
      rgb(250, 197, 28);\">&quot;dTax:&quot;</span>, dtax)\r\n<span style=\"color:
      rgb(163, 143, 132);\"># price: 715\r\n# dApple: 2.2\r\n# dApple_num: 110\r\n#
      dOrange: 3.3000000000000003\r\n# dOrange_num: 165\r\n# dTax: 650</span></pre><p><br></p><h2>活性化関数レイヤの実装</h2><h3>ReLU
      レイヤ</h3><table style=\"width: 60%;\"><tbody><tr><td rowspan=\"2\" style=\"width:
      50%; vertical-align: middle; text-align: center;\">y =<br></td><td style=\"width:
      50%; text-align: center;\">x (x&gt;0)<br></td></tr><tr><td style=\"width: 50%;
      text-align: center;\">0 (x≦0)<br></td></tr></tbody></table><table style=\"width:
      60%;\"><tbody><tr><td rowspan=\"2\" style=\"width: 50%; vertical-align: middle;
      text-align: center;\">&part;y/&part;x =<br></td><td style=\"width: 50%; text-align:
      center;\">1 (x&gt;0)<br></td></tr><tr><td style=\"width: 50%; text-align: center;\">0
      (x≦0)<br></td></tr></tbody></table><p><br></p><p>ReLU レイヤの実装は、common/layers.py</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563112329210-reverse_apple_orange+%281%29.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><pre>class
      Relu:\r\n  def __init__(self):\r\n    self.mask = None\r\n\r\n  def forward(self,
      x):\r\n    self.mask = (x &lt;= 0) <span style=\"color: rgb(163, 143, 132);\">#
      x=np.array([ 1.29400019, -0.78059715, -1.09235197)] の時、mask=np.array([False,
       True,  True])</span>\r\n    out = x.copy() <span style=\"color: rgb(163, 143,
      132);\"># 参照コピーではなく値コピー</span>\r\n    out[self.mask] = 0 <span style=\"color:
      rgb(163, 143, 132);\"># out=np.array([ 1.29400019, 0., 0.)] Trueのインデックスに代入が適用される</span>\r\n\r\n 
        return out\r\n\r\n  def backward(self, dout):\r\n    dout[self.mask] = 0 <span
      style=\"color: rgb(163, 143, 132);\"># xが0以下の時は0を流す、それ以外は値をそのまま流す</span>\r\n 
        dx = dout\r\n\r\n    return dx</pre><p><br></p><p><br></p><h3>Sigmoid レイヤ</h3><p><br></p><p><span
      style=\"font-size: 18px;\">シグモイド関数</span></p><p>&nbsp;y=1 / (1 + exp(&minus;x))</p><p
      class=\"fr-text-gray\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563168380252-sigmoid.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><a href=\"https://qiita.com/yuyasat/items/d9cdd4401221df5375b6\"></a>
      <a href=\"https://qiita.com/yuyasat/items/d9cdd4401221df5375b6\"></a></p><p><a
      href=\"https://qiita.com/yuyasat/items/d9cdd4401221df5375b6\">参考資料 証明</a></p><p><br></p><p>Sigmoid
      レイヤを Python で実装(common/layers.py)</p><pre>class Sigmoid:\r\n  def __init__(self):\r\n
      \   self.out = None\r\n\r\n  def forward(self, x):\r\n    out = 1 / (1 + np.exp(-x))\r\n
      \   self.out = out\r\n\r\n    return out\r\n\r\n  def backward(self, dout):\r\n
      \   dx = dout * (1.0 - self.out) * self.out\r\n\r\n    return dx</pre><p><br></p><h3>Affine
      レイヤ</h3><p>Affine レイヤの計算グラフ</p><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563173813967-affine.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>Affine
      の実装(common/layers.py)</p><pre>class Affine:\r\n  def __init__(self, W, b):\r\n
      \   self.W =W\r\n    self.b = b\r\n    self.x = None\r\n    self.dW = None\r\n
      \   self.db = None\r\n\r\n  def forward(self, x):\r\n    self.x = x\r\n    out
      = np.dot(self.x, self.W) + self.b\r\n\r\n    return out\r\n\r\n  def backward(self,
      dout):\r\n    dx = np.dot(dout, self.W.T)\r\n    self.dW = np.dot(self.x.T,
      dout)\r\n    self.db = np.sum(dout, axis=0)\r\n\r\n    return dx</pre><p><br></p><h3>Softmax-with-Loss
      レイヤ</h3><p>Softmax レイヤは、入力された値を正規化(出力の和が1 になるように変形)して出力</p><p>なお、手書き数字認識は、10
      クラス分類を 行うため、Softmax レイヤへの入力は 10 個</p><p><br></p><p>Softmax レイヤの出力</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563175855599-softmax.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>損失関数である交差 エントロピー誤差(cross
      entropy error)も含めて、「Softmax-with-Loss レイヤ」 という名前のレイヤで実装</p><p>&nbsp;Softmax-with-Loss
      レイヤ(ソ フトマックス関数と交差エントロピー誤差)の計算グラフ</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1563176167145-softmax_loss.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>逆伝播の結果を見ると、Softmax
      レイヤからの逆伝播は、(y1 &minus; t1, y2 &minus; t2, y3 &minus; t3) という&ldquo;キレイ&rdquo;な結果になっています</p><p>(y1,
      y2, y3) はSoftmax レイヤの出力、(t1, t2, t3) は教師データなので、(y1 &minus; t1, y2 &minus;
      t2, y3 &minus; t3)は、Softmax レイヤの出力と教師ラベルの差分</p><p><br></p><p>「ソフトマックス関数」の損失関数として「交差エントロピー誤差」を用いると、
      逆伝播が (y1 &minus; t1, y2 &minus; t2, y3 &minus; t3) という&ldquo;キレイ&rdquo;な結果になりました。
      実は、そのような&ldquo;キレイ&rdquo;な結果は偶然ではなく、そうなるように交差エント ロピー誤差という関数が設計された。</p><p>また、回帰問題では出力層に「恒
      等関数」を用い、損失関数として「2 乗和誤差」を用いますが(「3.5 出力層の 設計」参照)、これも同様の理由によります。つまり、「恒等関数」の損失関数
      として「2 乗和誤差」を用いると、逆伝播が (y1 &minus; t1, y2 &minus; t2, y3 &minus; t3) とい う&ldquo;キレイ&rdquo;な結果になる。</p><p><br></p><p>Softmax-with-Loss
      レイヤの実装(common/layers.py)</p><pre>class SoftmaxWithLoss:\r\n  def __init__(self):\r\n
      \   self.loss = None\r\n    self.y = None # softmaxの出力\r\n    self.t = None
      # 教師データ(one-hot vector)\r\n\r\n  def forward(self, x, t):\r\n    self.t = t\r\n
      \   self.y = softmax(x)\r\n    self.loss = cross_entropy_error(self.y, self.t)\r\n\r\n
      \   return self.loss\r\n\r\n  def backward(self, dout=1):\r\n    batch_size
      = self.t.shape[0]\r\n    dx = (self.y - self.t) / batch_size\r\n\r\n    return
      dx</pre><p><br></p><p>逆伝播の際には、伝播する値をバッチの個数(batch_size)で割ることで、データ 1 個あたりの
      誤差が前レイヤへ伝播する点に注意</p><p><br></p><h2>誤差逆伝播法に対応したニューラルネットワークの 実装</h2><p>2 層のニューラルネットワークをTwoLayerNet
      として実装</p><pre>(ch05/two_layer_net.py)\r\n<span style=\"color: rgb(184, 49, 47);\">import</span>
      sys, os\r\nsys.path.<span style=\"color: rgb(84, 172, 210);\">append</span>(os.pardir)
       # 親ディレクトリのファイルをインポートするための設定\r\n<span style=\"color: rgb(184, 49, 47);\">import</span>
      numpy <span style=\"color: rgb(184, 49, 47);\">as</span> np\r\n<span style=\"color:
      rgb(184, 49, 47);\">from</span> common.layers <span style=\"color: rgb(184,
      49, 47);\">import</span> <span style=\"color: rgb(147, 101, 184);\">*</span>\r\n<span
      style=\"color: rgb(184, 49, 47);\">from</span> common.gradient <span style=\"color:
      rgb(184, 49, 47);\">import</span> numerical_gradient\r\n<span style=\"color:
      rgb(184, 49, 47);\">from</span> collections <span style=\"color: rgb(184, 49,
      47);\">import</span> OrderedDict\r\n\r\n\r\n<span style=\"color: rgb(97, 189,
      109);\">class</span> <span style=\"color: rgb(84, 172, 210);\">TwoLayerNet</span>:\r\n\r\n
      \ <span style=\"color: rgb(84, 172, 210);\">def __init__</span>(<span style=\"color:
      rgb(251, 160, 38);\">self</span>, <span style=\"color: rgb(251, 160, 38);\">input_size</span>,
      <span style=\"color: rgb(251, 160, 38);\">hidden_size</span>, <span style=\"color:
      rgb(251, 160, 38);\">output_size</span>, <span style=\"color: rgb(251, 160,
      38);\">weight_init_std</span> <span style=\"color: rgb(184, 49, 47);\">=</span>
      <span style=\"color: rgb(147, 101, 184);\">0.01</span>):\r\n    # 重みの初期化\r\n<span
      style=\"color: rgb(251, 160, 38);\">    self</span>.params = {}\r\n<span style=\"color:
      rgb(251, 160, 38);\">    self</span>.params[<span style=\"color: rgb(250, 197,
      28);\">&#39;W1&#39;</span>] = weight_init_std * np.random.<span style=\"color:
      rgb(84, 172, 210);\">randn</span>(input_size, hidden_size)\r\n<span style=\"color:
      rgb(251, 160, 38);\">    self</span>.params[<span style=\"color: rgb(250, 197,
      28);\">&#39;b1&#39;</span>] = np.<span style=\"color: rgb(84, 172, 210);\">zeros</span>(hidden_size)\r\n<span
      style=\"color: rgb(251, 160, 38);\">    self</span>.params[<span style=\"color:
      rgb(250, 197, 28);\">&#39;W2&#39;</span>] = weight_init_std * np.random.<span
      style=\"color: rgb(84, 172, 210);\">randn</span>(hidden_size, output_size)\r\n<span
      style=\"color: rgb(251, 160, 38);\">    self</span>.params[<span style=\"color:
      rgb(250, 197, 28);\">&#39;b2&#39;</span>] = np.<span style=\"color: rgb(84,
      172, 210);\">zeros</span>(output_size)\r\n\r\n    # レイヤの生成\r\n<span style=\"color:
      rgb(251, 160, 38);\">    self</span>.layers = <span style=\"color: rgb(84, 172,
      210);\">OrderedDict</span>()\r\n<span style=\"color: rgb(251, 160, 38);\">    self</span>.layers[<span
      style=\"color: rgb(250, 197, 28);\">&#39;Affine1&#39;</span>] = <span style=\"color:
      rgb(84, 172, 210);\">Affine</span>(<span style=\"color: rgb(251, 160, 38);\">self</span>.params[<span
      style=\"color: rgb(250, 197, 28);\">&#39;W1&#39;</span>], <span style=\"color:
      rgb(251, 160, 38);\">self</span>.params[<span style=\"color: rgb(250, 197, 28);\">&#39;b1&#39;</span>])\r\n<span
      style=\"color: rgb(251, 160, 38);\">    self</span>.layers[<span style=\"color:
      rgb(250, 197, 28);\">&#39;Relu1&#39;</span>] = <span style=\"color: rgb(84,
      172, 210);\">Relu</span>()\r\n<span style=\"color: rgb(251, 160, 38);\">    self</span>.layers[<span
      style=\"color: rgb(250, 197, 28);\">&#39;Affine2&#39;</span>] = <span style=\"color:
      rgb(84, 172, 210);\">Affine</span>(<span style=\"color: rgb(251, 160, 38);\">self</span>.params[<span
      style=\"color: rgb(250, 197, 28);\">&#39;W2&#39;</span>], <span style=\"color:
      rgb(251, 160, 38);\">self</span>.params[<span style=\"color: rgb(250, 197, 28);\">&#39;b2&#39;</span>])\r\n\r\n<span
      style=\"color: rgb(251, 160, 38);\">    self</span>.lastLayer = <span style=\"color:
      rgb(84, 172, 210);\">SoftmaxWithLoss</span>()\r\n\r\n<span style=\"color: rgb(84,
      172, 210);\">    def</span> <span style=\"color: rgb(97, 189, 109);\">predict</span>(<span
      style=\"color: rgb(251, 160, 38);\">self</span>, <span style=\"color: rgb(251,
      160, 38);\">x</span>):\r\n    # インスタンスを取り出して順伝播させる\r\n<span style=\"color: rgb(184,
      49, 47);\">    for</span> layer <span style=\"color: rgb(184, 49, 47);\">in</span>
      <span style=\"color: rgb(251, 160, 38);\">self</span>.layers.values():\r\n      x
      <span style=\"color: rgb(184, 49, 47);\">=</span> layer.<span style=\"color:
      rgb(84, 172, 210);\">forward</span>(x)\r\n\r\n      <span style=\"color: rgb(184,
      49, 47);\">return</span> x\r\n\r\n    # x:入力データ, t:教師データ\r\n    <span style=\"color:
      rgb(84, 172, 210);\">def</span> <span style=\"color: rgb(97, 189, 109);\">loss</span>(<span
      style=\"color: rgb(251, 160, 38);\">self</span>, <span style=\"color: rgb(251,
      160, 38);\">x</span>, <span style=\"color: rgb(251, 160, 38);\">t</span>):\r\n
      \     y <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color:
      rgb(251, 160, 38);\">self</span>.<span style=\"color: rgb(84, 172, 210);\">predict</span>(x)\r\n
      \     <span style=\"color: rgb(184, 49, 47);\">return</span> <span style=\"color:
      rgb(251, 160, 38);\">self</span>.lastLayer.<span style=\"color: rgb(84, 172,
      210);\">forward</span>(y, t)\r\n\r\n    <span style=\"color: rgb(84, 172, 210);\">def</span>
      <span style=\"color: rgb(97, 189, 109);\">accuracy</span>(<span style=\"color:
      rgb(251, 160, 38);\">self</span>, <span style=\"color: rgb(251, 160, 38);\">x</span>,
      <span style=\"color: rgb(251, 160, 38);\">t</span>):\r\n      y <span style=\"color:
      rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(251, 160, 38);\">self</span>.<span
      style=\"color: rgb(84, 172, 210);\">predict</span>(x)\r\n      y <span style=\"color:
      rgb(184, 49, 47);\">=</span> np.<span style=\"color: rgb(84, 172, 210);\">argmax</span>(y,
      <span style=\"color: rgb(251, 160, 38);\">axis</span><span style=\"color: rgb(184,
      49, 47);\">=</span><span style=\"color: rgb(147, 101, 184);\">1</span>)\r\n
      \     if t.ndim <span style=\"color: rgb(184, 49, 47);\">!= </span>1 : t = np.argmax(t,
      <span style=\"color: rgb(251, 160, 38);\">axis</span><span style=\"color: rgb(184,
      49, 47);\">=</span><span style=\"color: rgb(147, 101, 184);\">1</span>)\r\n\r\n
      \     accuracy <span style=\"color: rgb(184, 49, 47);\">=</span> np.<span style=\"color:
      rgb(84, 172, 210);\">sum</span>(y <span style=\"color: rgb(184, 49, 47);\">==</span>
      t) / <span style=\"color: rgb(84, 172, 210);\">float</span>(x.shape[<span style=\"color:
      rgb(147, 101, 184);\">0</span>])\r\n      <span style=\"color: rgb(184, 49,
      47);\">return</span> accuracy\r\n\r\n    # x:入力データ, t:教師データ\r\n    <span style=\"color:
      rgb(84, 172, 210);\">def</span> <span style=\"color: rgb(97, 189, 109);\">numerical_gradient</span>(<span
      style=\"color: rgb(251, 160, 38);\">self</span>, <span style=\"color: rgb(251,
      160, 38);\">x</span>, <span style=\"color: rgb(251, 160, 38);\">t</span>):\r\n
      \     loss_W <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color:
      rgb(84, 172, 210);\">lambda</span> <span style=\"color: rgb(251, 160, 38);\">W</span>:
      <span style=\"color: rgb(251, 160, 38);\">self</span>.<span style=\"color: rgb(84,
      172, 210);\">loss</span>(x, t)\r\n\r\n      grads <span style=\"color: rgb(184,
      49, 47);\">=</span> {}\r\n      grads[<span style=\"color: rgb(250, 197, 28);\">&#39;W1&#39;</span>]
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(84,
      172, 210);\">numerical_gradient</span>(loss_W, <span style=\"color: rgb(251,
      160, 38);\">self</span>.params[<span style=\"color: rgb(250, 197, 28);\">&#39;W1&#39;</span>])\r\n
      \     grads[<span style=\"color: rgb(250, 197, 28);\">&#39;b1&#39;</span>] <span
      style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(84, 172,
      210);\">numerical_gradient</span>(loss_W, <span style=\"color: rgb(251, 160,
      38);\">self</span>.params[<span style=\"color: rgb(250, 197, 28);\">&#39;b1&#39;</span>])\r\n
      \     grads[<span style=\"color: rgb(250, 197, 28);\">&#39;W2&#39;</span>] <span
      style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(84, 172,
      210);\">numerical_gradient</span>(loss_W, <span style=\"color: rgb(251, 160,
      38);\">self</span>.params[<span style=\"color: rgb(250, 197, 28);\">&#39;W2&#39;</span>])\r\n
      \     grads[<span style=\"color: rgb(250, 197, 28);\">&#39;b2&#39;</span>] <span
      style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(84, 172,
      210);\">numerical_gradient</span>(loss_W, <span style=\"color: rgb(251, 160,
      38);\">self</span>.params[<span style=\"color: rgb(250, 197, 28);\">&#39;b2&#39;</span>])\r\n\r\n
      \     <span style=\"color: rgb(184, 49, 47);\">return</span> grads\r\n\r\n    <span
      style=\"color: rgb(84, 172, 210);\">def</span> <span style=\"color: rgb(97,
      189, 109);\">gradient</span>(<span style=\"color: rgb(251, 160, 38);\">self</span>,
      <span style=\"color: rgb(251, 160, 38);\">x</span>, <span style=\"color: rgb(251,
      160, 38);\">t</span>):\r\n      # forward\r\n      <span style=\"color: rgb(251,
      160, 38);\">self</span>.<span style=\"color: rgb(84, 172, 210);\">loss</span>(x,
      t)\r\n\r\n      # backward\r\n      dout <span style=\"color: rgb(184, 49, 47);\">=</span>
      <span style=\"color: rgb(147, 101, 184);\">1</span>\r\n      dout <span style=\"color:
      rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(251, 160, 38);\">self</span>.lastLayer.<span
      style=\"color: rgb(84, 172, 210);\">backward</span>(dout)\r\n\r\n      layers
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(84,
      172, 210);\">list</span>(self.layers.<span style=\"color: rgb(84, 172, 210);\">values</span>())
      # 各層のインスタンスをリストで取得\r\n      layers.<span style=\"color: rgb(84, 172, 210);\">reverse</span>()
      # 下流から上流の順にする\r\n      <span style=\"color: rgb(184, 49, 47);\">for</span> layer
      <span style=\"color: rgb(184, 49, 47);\">in</span> layers:\r\n        dout <span
      style=\"color: rgb(184, 49, 47);\">=</span> layer.<span style=\"color: rgb(84,
      172, 210);\">backward</span>(dout)\r\n\r\n      # 設定\r\n      grads <span style=\"color:
      rgb(184, 49, 47);\">=</span> {}\r\n      grads[<span style=\"color: rgb(250,
      197, 28);\">&#39;W1&#39;</span>], grads[<span style=\"color: rgb(250, 197, 28);\">&#39;b1&#39;</span>]
      = self.layers[<span style=\"color: rgb(250, 197, 28);\">&#39;Affine1&#39;</span>].dW,
      self.layers[<span style=\"color: rgb(250, 197, 28);\">&#39;Affine1&#39;</span>].db\r\n
      \     grads[<span style=\"color: rgb(250, 197, 28);\">&#39;W2&#39;</span>],
      grads[<span style=\"color: rgb(250, 197, 28);\">&#39;b2&#39;</span>] = self.layers[<span
      style=\"color: rgb(250, 197, 28);\">&#39;Affine2&#39;</span>].dW, self.layers[<span
      style=\"color: rgb(250, 197, 28);\">&#39;Affine2&#39;</span>].db\r\n\r\n      <span
      style=\"color: rgb(184, 49, 47);\">return</span> grads\r\n\r\n</pre><p>OrderedDictは順番付きディクショナリ</p><p>キーには層の名前を、値には層の初期化したインスタンスがはいる</p><p><br></p><h2>誤差逆伝播法の勾配確認</h2><p>これからは、計算に時間のかかる数値微分ではなく、誤差逆伝播法によって勾配を求める</p><p>数値微分で勾配を求めた結果と、誤差逆伝播法で求めた勾配の結果が一致すること――正確には、ほとんど
      近い値にあること――を確認する作業を<span style=\"font-size: 14px;\">勾配確認という。</span></p><p><br></p><p>勾配確認の実装(ch05/gradient_check.py)</p><pre><span
      style=\"color: rgb(184, 49, 47);\">import</span> sys, os\r\nsys.path.<span style=\"color:
      rgb(84, 172, 210);\">append</span>(os.pardir)  # 親ディレクトリのファイルをインポートするための設定\r\n<span
      style=\"color: rgb(184, 49, 47);\">import</span> numpy <span style=\"color:
      rgb(184, 49, 47);\">as</span> np\r\n<span style=\"color: rgb(184, 49, 47);\">from</span>
      dataset.mnist <span style=\"color: rgb(184, 49, 47);\">import</span> load_mnist\r\n<span
      style=\"color: rgb(184, 49, 47);\">from</span> two_layer_net <span style=\"color:
      rgb(184, 49, 47);\">import</span> TwoLayerNet\r\n\r\n# データの読み込み\r\n(x_train,
      t_train), (x_test, t_test) <span style=\"color: rgb(184, 49, 47);\">=</span>
      <span style=\"color: rgb(84, 172, 210);\">load_mnist</span>(<span style=\"color:
      rgb(243, 121, 52);\">normalize</span>=True, <span style=\"color: rgb(243, 121,
      52);\">one_hot_label</span>=True)\r\n\r\nnetwork <span style=\"color: rgb(184,
      49, 47);\">=</span> <span style=\"color: rgb(84, 172, 210);\">TwoLayerNet</span>(<span
      style=\"color: rgb(243, 121, 52);\">input_size</span><span style=\"color: rgb(184,
      49, 47);\">=</span>784, <span style=\"color: rgb(243, 121, 52);\">hidden_size</span><span
      style=\"color: rgb(184, 49, 47);\">=</span>50, <span style=\"color: rgb(243,
      121, 52);\">output_size</span><span style=\"color: rgb(184, 49, 47);\">=</span>10)\r\n\r\nx_batch
      <span style=\"color: rgb(184, 49, 47);\">=</span> x_train[:3]\r\nt_batch <span
      style=\"color: rgb(184, 49, 47);\">=</span> t_train[:3]\r\n\r\ngrad_numerical
      <span style=\"color: rgb(184, 49, 47);\">=</span> network.<span style=\"color:
      rgb(84, 172, 210);\">numerical_gradient</span>(x_batch, t_batch)\r\ngrad_backprop
      <span style=\"color: rgb(184, 49, 47);\">=</span> network.<span style=\"color:
      rgb(84, 172, 210);\">gradient</span>(x_batch, t_batch)\r\n\r\n<span style=\"color:
      rgb(184, 49, 47);\">for</span> key <span style=\"color: rgb(184, 49, 47);\">in</span>
      grad_numerical.<span style=\"color: rgb(84, 172, 210);\">keys</span>():\r\ndiff
      <span style=\"color: rgb(184, 49, 47);\">=</span> np.<span style=\"color: rgb(84,
      172, 210);\">average</span>( np.<span style=\"color: rgb(84, 172, 210);\">abs</span>(grad_backprop[key]
      <span style=\"color: rgb(184, 49, 47);\">-</span> grad_numerical[key]) )\r\n<span
      style=\"color: rgb(84, 172, 210);\">print</span>(key + <span style=\"color:
      rgb(250, 197, 28);\">&quot;:&quot;</span> + <span style=\"color: rgb(84, 172,
      210);\">str</span>(diff))</pre><p><br></p><p><code>$ python gradient_check.py</code></p><p><code>W1:4.3856368115776307e-10</code></p><p><code>b1:2.5851454858716577e-09</code></p><p><code>W2:5.371920504880761e-09</code></p><p><code>b2:1.3970113447031584e-07</code></p><p>この結果から、数値微分と誤差逆伝播法でそれぞれ求めた勾配の差はかなり小さいことが分かる</p><p>コンピュータの計算は有限の精度で行われるため、誤差は通常
      0 にはならない</p><p><br></p><h2>誤差逆伝播法を使った学習</h2><p>誤差逆伝播法で勾配を求める</p><p>(ch05/train_nueralnet.py)</p><pre>import
      sys, os\r\nsys.path.<span style=\"color: rgb(84, 172, 210);\">append</span>(os.pardir)\r\n\r\n<span
      style=\"color: rgb(184, 49, 47);\">import</span> numpy as np\r\n<span style=\"color:
      rgb(184, 49, 47);\">from</span> dataset.mnist <span style=\"color: rgb(184,
      49, 47);\">import</span> load_mnist\r\n<span style=\"color: rgb(184, 49, 47);\">from</span>
      two_layer_net <span style=\"color: rgb(184, 49, 47);\">import</span> TwoLayerNet\r\n\r\n#
      データの読み込み\r\n(x_train, t_train), (x_test, t_test) <span style=\"color: rgb(184,
      49, 47);\">=</span> <span style=\"color: rgb(84, 172, 210);\">load_mnist</span>(<span
      style=\"color: rgb(243, 121, 52);\">normalize</span><span style=\"color: rgb(184,
      49, 47);\">=</span>True, <span style=\"color: rgb(243, 121, 52);\">one_hot_label</span><span
      style=\"color: rgb(184, 49, 47);\">=</span>True)\r\n\r\nnetwork = TwoLayerNet(<span
      style=\"color: rgb(243, 121, 52);\">input_size</span><span style=\"color: rgb(184,
      49, 47);\">=</span><span style=\"color: rgb(147, 101, 184);\">784</span>, <span
      style=\"color: rgb(243, 121, 52);\">hidden_size</span><span style=\"color: rgb(184,
      49, 47);\">=</span><span style=\"color: rgb(147, 101, 184);\">50</span>, <span
      style=\"color: rgb(243, 121, 52);\">output_size</span><span style=\"color: rgb(184,
      49, 47);\">=</span><span style=\"color: rgb(147, 101, 184);\">10</span>)\r\n\r\niters_num
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(147,
      101, 184);\">10000</span>\r\ntrain_size <span style=\"color: rgb(184, 49, 47);\">=</span>
      x_train.shape[<span style=\"color: rgb(147, 101, 184);\">0</span>]\r\nbatch_size
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(147,
      101, 184);\">100</span>\r\nlearning_rate <span style=\"color: rgb(184, 49, 47);\">=</span>
      <span style=\"color: rgb(147, 101, 184);\">0.1</span>\r\n\r\ntrain_loss_list
      <span style=\"color: rgb(184, 49, 47);\">=</span> []\r\ntrain_acc_list <span
      style=\"color: rgb(184, 49, 47);\">=</span> []\r\ntest_acc_list <span style=\"color:
      rgb(184, 49, 47);\">=</span> []\r\n\r\niter_per_epoch <span style=\"color: rgb(184,
      49, 47);\">=</span> <span style=\"color: rgb(84, 172, 210);\">max</span>(train_size
      <span style=\"color: rgb(184, 49, 47);\">/</span> batch_size, <span style=\"color:
      rgb(147, 101, 184);\">1</span>)\r\n\r\nfor i in <span style=\"color: rgb(84,
      172, 210);\">range</span>(iters_num):\r\n  batch_mask <span style=\"color: rgb(184,
      49, 47);\">=</span> np.random.<span style=\"color: rgb(84, 172, 210);\">choice</span>(train_size,
      batch_size)\r\n  x_batch <span style=\"color: rgb(184, 49, 47);\">=</span> x_train[batch_mask]\r\n
      \ t_batch <span style=\"color: rgb(184, 49, 47);\">=</span> t_train[batch_mask]\r\n\r\n
      \ # 勾配誤差逆伝播法によって勾配を求める\r\n  #grad <span style=\"color: rgb(184, 49, 47);\">=</span>
      network.numerical_gradient(x_batch, t_batch)\r\n  grad <span style=\"color:
      rgb(184, 49, 47);\">=</span> network.gradient(x_batch, t_batch)\r\n\r\n  # 更新\r\n<span
      style=\"color: rgb(184, 49, 47);\">  for</span> key <span style=\"color: rgb(184,
      49, 47);\">in</span> (<span style=\"color: rgb(250, 197, 28);\">&#39;W1&#39;</span>,
      <span style=\"color: rgb(250, 197, 28);\">&#39;b1&#39;</span>, <span style=\"color:
      rgb(250, 197, 28);\">&#39;W2&#39;</span>,<span style=\"color: rgb(250, 197,
      28);\"> &#39;b2&#39;</span>):\r\n    network.params[key] <span style=\"color:
      rgb(184, 49, 47);\">-=</span> learning_rate <span style=\"color: rgb(184, 49,
      47);\">*</span> grad[key]\r\n\r\n    loss <span style=\"color: rgb(184, 49,
      47);\">=</span> network.<span style=\"color: rgb(84, 172, 210);\">loss</span>(x_batch,
      t_batch)\r\n    train_loss_list.<span style=\"color: rgb(84, 172, 210);\">append</span>(loss)\r\n\r\n<span
      style=\"color: rgb(184, 49, 47);\">    if</span> i % iter_per_epoch <span style=\"color:
      rgb(184, 49, 47);\">==</span> <span style=\"color: rgb(147, 101, 184);\">0</span>:\r\n
      \     train_acc <span style=\"color: rgb(184, 49, 47);\">=</span> network.<span
      style=\"color: rgb(84, 172, 210);\">accuracy</span>(x_train, t_train)\r\n      test_acc
      <span style=\"color: rgb(184, 49, 47);\">=</span> network.<span style=\"color:
      rgb(84, 172, 210);\">accuracy</span>(x_test, t_test)\r\n      train_acc_list.<span
      style=\"color: rgb(84, 172, 210);\">append</span>(train_acc)\r\n      test_acc_list.<span
      style=\"color: rgb(84, 172, 210);\">append</span>(test_acc)\r\n<span style=\"color:
      rgb(84, 172, 210);\">      print</span>(train_acc, test_acc)</pre><p><br></p><h2>まとめ</h2><ul><li><p><span
      style=\"font-size: 18px;\">ニューラルネットワークの構成要素をレイヤとして実装することで、勾配の計算を効率的に求めることができる(誤差逆伝播法)。</span></p></li><li><p><span
      style=\"font-size: 18px;\">数値微分と誤差逆伝播法の結果を比較することで、誤差逆伝播法の実装に誤りがないことを確認できる(勾配確認)。</span></p></li></ul><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-07-14 10:00:58.912403'
    - '2019-08-18 13:34:50.319957'
  - - 177
    - "「リダイレクトが多すぎます」でアクセスできない"
    - "<h1 style=\"text-align: center;\">「リダイレクトが多すぎます」でアクセスできない</h1><p><br></p><h3>環境</h3><hr><p>Amazon
      Linux 2<br>Rails 5.2.1<br>ruby 2.4.2<br>(アプリケーション、ウェブサーバー)<br>nginx version:
      nginx/1.12.2<br>unicorn 5.5.1<br>(ssl証明書)<br>python2-certbot-nginx 0.34.2-1.el7<br>certbot
      0.34.2-3.el7<br>certbot-nginx 0.34.2-3.el7</p><p><br></p><h3>発生している問題・エラーメッセージ</h3><p>chromeにて
      https://[domain] にアクセスすると、「リダイレクトが多すぎます。クッキーを削除してください」というエラーが画面に出てページにアクセスできない。</p><p>クッキーを削除しても効果がない。</p><p><br></p><h3>該当のソースコード</h3><hr><h3>certbotで発行した証明書</h3><pre><code>(発行した証明書情報)\r\nCertificate
      Name: [domain]\r\n    Domains: [domain]\r\n    Expiry Date: 2019-10-06 09:16:15+00:00
      (VALID: 89 days)\r\n    Certificate Path: /etc/letsencrypt/live/[domain]/fullchain.pem\r\n
      \   Private Key Path: /etc/letsencrypt/live/[domain]/privkey.pem\r\ncertbot
      0.34.2-3.el7certbot-nginx 0.34.2-3.el7</code></pre><h3><br></h3><h3>nginx設定ファイル</h3><pre><code>(/etc/nginx/conf.d/myapp.conf)\r\n#
      log directory\r\nerror_log  /var/www/rails/myapp/log/nginx.error.log;\r\naccess_log
      /var/www/rails/myapp/log/nginx.access.log;\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream app_server {\r\n  # for UNIX domain socket setups\r\n  server
      unix:/var/www/rails/myapp/tmp/sockets/unicorn.sock fail_timeout=0;\r\n}\r\nserver
      {\r\n  server_name [domain] [IP];\r\n  # nginx so increasing this is generally
      safe...\r\n  keepalive_timeout 5;\r\n  # path for static files\r\n  root /var/www/rails/myapp/public;\r\n
      \ # page cache loading\r\n  try_files $uri/index.html $uri.html $uri @app;\r\n
      \ location @app {\r\n    # HTTP headers\r\n    proxy_set_header X-Forwarded-For
      $proxy_add_x_forwarded_for;\r\n    proxy_set_header Host $http_host;\r\n    proxy_redirect
      off;\r\n    proxy_pass http://app_server;\r\n  }\r\n  # Rails error pages\r\n
      \ error_page 500 502 503 504 /500.html;\r\n  location = /500.html {\r\n    root
      /var/www/rails/myapp/public;\r\n  }\r\n\r\n    listen 443 ssl; # managed by
      Certbot\r\n    ssl_certificate /etc/letsencrypt/live/[domain]/fullchain.pem;
      # managed by Certbot\r\n    ssl_certificate_key /etc/letsencrypt/live/[domain]/privkey.pem;
      # managed by Certbot\r\n    include /etc/letsencrypt/options-ssl-nginx.conf;
      # managed by Certbot\r\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; #
      managed by Certbot\r\n\r\n\r\n}\r\n\r\nserver {\r\n    if ($host = [domain])
      {\r\n        return 301 https://$host$request_uri;\r\n    } # managed by Certbot\r\n\r\n\r\n
      \ listen 80;\r\n  server_name [domain] [IP];\r\n    return 404; # managed by
      Certbot\r\n\r\n\r\n}</code></pre><p><br></p><h3>Railsの本番環境設定ファイル</h3><p>(environments/production.rb)</p><p>Railsのconfig/environments/production.rbにて以下を追記</p><pre>Rails.application.configure
      do\r\n  ...\r\n  config.force_ssl=<span style=\"color: rgb(184, 49, 47);\">true</span>\r\n 
      if Rails.application.config.force_ssl  \r\n    Rails.application.routes.default_url_options[:protocol]
      = &lsquo;<span style=\"color: rgb(41, 105, 176);\">https</span>&rsquo;\r\n 
      end\r\nend</pre><p><br></p><h3>解決策</h3><h4>nginx設定ファイル</h4><p>に以下を書き込む</p><p><code>proxy_set_header
      X-Forwarded-Proto https;</code></p><p><br></p><pre><code>(/etc/nginx/conf.d/myapp.conf)\r\n#
      log directory\r\nerror_log  /var/www/rails/myapp/log/nginx.error.log;\r\naccess_log
      /var/www/rails/myapp/log/nginx.access.log;\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream app_server {\r\n  # for UNIX domain socket setups\r\n  server
      unix:/var/www/rails/myapp/tmp/sockets/unicorn.sock fail_timeout=0;\r\n}\r\nserver
      {\r\n  server_name [domain] [IP];\r\n  # nginx so increasing this is generally
      safe...\r\n  keepalive_timeout 5;\r\n  # path for static files\r\n  root /var/www/rails/myapp/public;\r\n
      \ # page cache loading\r\n  try_files $uri/index.html $uri.html $uri @app;\r\n
      \ location @app {\r\n    # HTTP headers\r\n    proxy_set_header X-Forwarded-For
      $proxy_add_x_forwarded_for;</code>\r\n<code>    </code><code><span style=\"color:
      rgb(250, 197, 28);\">proxy_set_header X-Forwarded-Proto https;</span></code><code>\r\n
      \   proxy_set_header Host $http_host;\r\n    proxy_redirect off;\r\n    proxy_pass
      http://app_server;\r\n  }\r\n  # Rails error pages\r\n  error_page 500 502 503
      504 /500.html;\r\n  location = /500.html {\r\n    root /var/www/rails/myapp/public;\r\n
      \ }\r\n\r\n    listen 443 ssl; # managed by Certbot\r\n    ssl_certificate /etc/letsencrypt/live/[domain]/fullchain.pem;
      # managed by Certbot\r\n    ssl_certificate_key /etc/letsencrypt/live/[domain]/privkey.pem;
      # managed by Certbot\r\n    include /etc/letsencrypt/options-ssl-nginx.conf;
      # managed by Certbot\r\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; #
      managed by Certbot\r\n\r\n\r\n}\r\n\r\nserver {\r\n    if ($host = [domain])
      {\r\n        return 301 https://$host$request_uri;\r\n    } # managed by Certbot\r\n\r\n\r\n
      \ listen 80;\r\n  server_name [domain] [IP];\r\n    return 404; # managed by
      Certbot\r\n\r\n\r\n}</code></pre><p><br></p><p><span style=\"font-size: 30px;\">かなり時間使ったが、結果はたったの1行で、エラーの悪夢が過ぎ去りました。</span></p><p><span
      style=\"font-size: 30px;\">参考資料有難や！！</span></p><p><br></p><p><span style=\"font-size:
      24px;\">参考資料</span></p><p><span style=\"font-size: 24px;\"><a href=\"https://joe-noh.hatenablog.com/entry/2016/10/28/075322\"></a><a
      href=\"https://joe-noh.hatenablog.com/entry/2016/10/28/075322\">https://joe-noh.hatenablog.com/entry/2016/10/28/075322</a></span></p><p><span
      style=\"font-size: 24px;\"><a href=\"https://qiita.com/chanken/items/b6dc4a896f8cc1615f34\"></a></span><a
      href=\"https://qiita.com/chanken/items/b6dc4a896f8cc1615f34\"><span style=\"font-size:
      24px;\">https://qiita.com/chanken/items/b6dc4a896f8cc1615f34</span></a></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-07-19 09:10:33.324388'
    - '2019-07-19 09:38:51.682138'
  - - 178
    - Route53とs3でwww有りから無しにリダイレクト
    - "<h1 style=\"text-align: center;\">Route53とs3でwww有りから無しにリダイレクト</h1><p><br></p><h2>環境</h2><hr><p><span
      style=\"font-size: 18px;\">ムームードメイン でドメイン取得</span></p><p><span style=\"font-size:
      18px;\">Route53 でドメイン管理</span></p><p><br></p><h2>経緯</h2><hr><p><span style=\"font-size:
      18px;\">googleAdsenseにてwww無しのurlにサイトがないと、「お客様のサイトにリーチできません」とエラーになっていたので、解決法としてwww無しにアクセスされた際、www有りにリダイレクトさせれば良いということで、Route53とs3を使い、設定しました。</span></p><p><br></p><h2>手順</h2><hr><h2>1.
      Amazon S3 にてリダイレクト元\x1Cの名前(example.com)でバケットを作成</h2><p><span style=\"font-size:
      18px;\">バケット名: example.com(実際はなんでも良いのだが、リダイレクト元をバケット名にすることで、役割が明確になる)</span></p><p><span
      style=\"font-size: 18px;\">リージョン: アジアパシフィック(東京)</span></p><p><span style=\"font-size:
      18px;\">これ以外は全部デフォルト設定</span></p><p><br></p><h2>2. プロパティのStatic website hostingからリダイレクト先を指定</h2><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564030742853-s3_redirect.png\"
      style=\"width: 800px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h2>3.
      Amazon Route 53 でリダイレクト元のバケットを指定</h2><p><span style=\"font-size: 18px;\">1.
      レコードセットの作成</span></p><p><span style=\"font-size: 18px;\">2. タイプをAに指定する</span></p><p><span
      style=\"font-size: 18px;\">3. エイリアスを[はい]</span></p><p><span style=\"font-size:
      18px;\">4. 先ほどのリダイレクト用のバケットを指定</span></p><p><span style=\"font-size: 18px;\">5.
      作成</span></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564031726186-route53_arecord.png\"
      style=\"width: 800px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><span
      style=\"font-size: 30px;\">設定は以上です。</span></p><p><span style=\"font-size: 30px;\">反映まで3分ほどかかります。</span></p><p><br></p><p><br></p><p><br></p><h2>まとめ</h2><p><span
      style=\"font-size: 18px;\">思った以上に簡単にできた。</span></p><p><span style=\"font-size:
      18px;\">本記事では、サブドメイン <strong>なし</strong> をサブドメイン <strong>あり</strong> にリダイレクトする設定を紹介したが、</span></p><p><span
      style=\"font-size: 18px;\">例えば、example.comからexample.netに転送したり、www.example.comからexample.netに転送したり、自由にドメインをリダイレクトさせられるので便利！</span></p>"
    - '2019-07-25 13:38:58.770375'
    - '2019-07-25 14:32:44.244278'
  - - 179
    - "[Rails5.2] will_paginateでページネーション"
    - "<h1 style=\"text-align: center;\">[Rails5.2] will_paginateでページネーション</h1><p><br></p><h2>環境</h2><hr><p><strong><code>ruby
      2.4.2</code></strong><br><strong><code>rails 5.2.1</code></strong></p><p><br></p><h2>Gemfile</h2><pre>gem
      &#39;will_paginate&#39;,           &#39;3.1.6&#39;\r\ngem &#39;bootstrap-will_paginate&#39;,
      &#39;1.0.0&#39;</pre><p>追加したら<code>$ bundle install</code>を実行します。</p><p><br></p><h2>Controller</h2><p><code>モデル名.paginate</code>でページネーションを扱える</p><p><code>Hoge.where(id:
      [1,2,3]).paginate</code>みたいに条件で絞り込んだデータにページネーションもできる</p><p>(articles_controller.rb)</p><pre>def
      index\r\n  @articles = Article.paginate(page: params[:page], per_page: 20) #
      デフォルトでは30件\r\nend</pre><p><br></p><h2>View</h2><p>以下の一行のコードを貼り付けるだけで、ページネーションが追加される</p><p>&lt;div
      class=&quot;text-center&quot;&gt;はbootstrapの中央寄せを行うラッパー</p><p>別になくても良い</p><p>(index.html.erb)</p><pre>&lt;div
      class=&quot;text-center&quot;&gt;\r\n  &lt;%= will_paginate @articles %&gt;\r\n&lt;/div&gt;</pre><p><br></p><h2>ラベルを日本語化</h2><p>設定していないと、ラベルが英語表記</p><h3>やり方A:
      設定で日本語にする</h3><p>config/application.rb</p><pre>config.i18n.default_locale =
      :ja</pre><p>config/locals/ja.yml</p><pre>ja:\r\n  will_paginate:\r\n    previous_label:
      前\r\n    next_label: 次\r\n    page_gap: &hellip;</pre><p><br></p><h3>やり方B: オプションを日本語で指定</h3><pre>&lt;%=
      will_paginate @articles, :previous_label =&gt; &#39; &lt; 前へ&#39;, :next_label
      =&gt; &#39;次へ &gt;&#39;, page_gap: &#39;&hellip;&#39; %&gt;</pre><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564128368830-page.png\"
      style=\"width: 300px;\" class=\"fr-fic fr-dib\"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-07-26 17:06:31.221717'
    - '2019-07-26 17:06:31.224723'
  - - 180
    - Rails5.2 アプリに検索機能を実装
    - "<h1 style=\"text-align: center;\">Rails5.2 アプリに検索機能を実装</h1><h2>環境</h2><hr><p><span
      style=\"font-size: 18px;\">Rails 5.2.1</span></p><p><span style=\"font-size:
      18px;\">ruby 2.4.2</span></p><p><br></p><h2>目的</h2><hr><p><span style=\"font-size:
      18px;\">Postテーブルのtitleから投稿を検索する機能の実装</span></p><p><span style=\"font-size: 18px;\">postsテーブルの構造</span></p><pre>create_table
      &quot;posts&quot;, force: :cascade do |t|\r\n  t.string &quot;title&quot;\r\n 
      t.text &quot;body&quot;\r\n  t.datetime &quot;created_at&quot;, null: false\r\n 
      t.datetime &quot;updated_at&quot;, null: false\r\nend</pre><h1>実装</h1><hr><h3>手順1.
      モデル内にクラスメソッドを追記</h3><p>selfを忘れない。selfが抜けるとインスタンスメソッドになってしまう。</p><p><span style=\"color:
      rgb(243, 121, 52); font-size: 18px;\">ILIKE - 条件検索で大文字小文字を区別させない</span><span
      style=\"font-size: 18px;\">ために今回はLIKEではなく、ILIKEを使った。</span></p><p><span style=\"font-size:
      18px;\">ここ大事です。</span></p><pre>(mode/post.rb)\r\nclass Post &lt; ApplicationRecord\r\n\r\n
      \ def self.search(search)\r\n    if search # Controllerから渡されたパラメータが!= nilの場合は、titleカラムを部分一致検索\r\n 
          Post.where([&#39;title ILIKE ?&#39;, &quot;%#{search}%&quot;])\r\n    else\r\n 
          Post.all #全て表示。\r\n    end\r\n  end\r\n\r\nend\r\n\r\n</pre><p><br></p><h3>手順2.
      検索フォームのViewを記述</h3><p><span style=\"font-size: 18px;\">ルートページだけ検索機能が欲しかったので
      posts/index.html.erbに以下を追記</span></p><pre>(posts/index.html.erb)\r\n&lt;%= form_tag
      posts_path, :method =&gt; &#39;get&#39; do %&gt; \r\n  &lt;p&gt;\r\n    &lt;%=
      text_field_tag :search, params[:search] %&gt;\r\n    &lt;%= submit_tag &quot;Search&quot;,
      :name =&gt; nil %&gt;\r\n  &lt;/p&gt;\r\n&lt;% end %&gt;\r\n<span style=\"color:
      rgb(163, 143, 132);\">&lt;% @posts.each do |post| %&gt;\r\n  &lt;div class=&quot;text-center&quot;&gt;\r\n 
        &lt;h2&gt;&lt;%= article.title %&gt;&lt;/h2&gt;\r\n    &lt;h6&gt;&lt;%= article.created_at.strftime(&#39;%b
      %d, %Y&#39;) %&gt;&lt;/h6&gt;\r\n  &lt;/div&gt;\r\n&lt;% end %&gt;</span></pre><p><br></p><h3>手順3.
      コントローラーでパラメータを渡す</h3><p><span style=\"font-size: 18px;\">(posts_constoller.rb)</span></p><pre>class
      PostsController &lt; ApplicationController\r\n  def index\r\n    @posts = Post.search(params[:search])\r\n
      \ end\r\nend</pre><p><br></p><p><a href=\"https://www.dragonarrow.work/\"></a><a
      href=\"https://www.dragonarrow.work\"><span style=\"font-size: 18px;\">このサイト右上の検索にも実装してます。動作確認とかどうぞ！</span></a></p><p><span
      style=\"font-size: 18px;\"><br></span></p><p><span style=\"font-size: 18px;\">以上で終了！！</span></p><p><br></p><h3>まとめ</h3><p><span
      style=\"font-size: 18px;\">検索機能は、プラグインとか使わなくても簡単に実装できる。</span></p><p skip=\"true\"><span
      style=\"font-size: 18px;\">gem &#39;ransack&#39;とかでの検索機能が流行ってるけど、なるべく自分で作れそうなものは作った方が良い！！（カスタマイズとかしやすいし、仕組みもわかってた方が良い）</span></p><p
      skip=\"true\"><br></p><p skip=\"true\"><br></p><p skip=\"true\"><span style=\"font-size:
      18px;\">参考資料</span></p><p><span style=\"font-size: 18px;\"><a href=\"https://freesworder.net/rails-search/\"></a></span><a
      href=\"https://freesworder.net/rails-search/\"><span style=\"font-size: 18px;\">https://freesworder.net/rails-search/</span></a></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-07-26 20:12:11.818336'
    - '2019-07-26 20:20:06.3795'
  - - 181
    - Rails5.2 ads.txt ファイルの作成
    - "<h1 style=\"text-align: center;\">ads.txt ファイルを作成して設置</h1><p><br></p><p><br></p><h2>環境</h2><hr><p><span
      style=\"font-size: 18px;\">Amazon Linux 2<br>Rails 5.2.1<br>ruby 2.4.2<br>nginx
      1.12.2<br>unicorn 5.5.1<br></span></p><p><br></p><h2>経緯</h2><hr><p><span style=\"font-size:
      18px;\">GoogleAdsenseのコンソールから、「要注意 - 収益に重大な影響が出ないよう、ads.txt ファイルの問題を修正してください。」と警告が来ていたので、今回こちらを設置しました。</span></p><p><br></p><h2>ads.txtの役割</h2><hr><p><span
      style=\"font-size: 18px;\">広告枠の販売を許可する認定販売者を宣言することで詐欺広告を防止し、透明性を高めることができます。</span></p><p><span
      style=\"font-size: 18px;\">自身のサイトで、広告枠の販売を許可されたことを掲示する役割を持っています。</span></p><p><br></p><h2>作成と設置</h2><hr><h3>手順1.
      ads.txt をgoogleAdesnse のコンソールからダウンロード</h3><p>ちなみに、ダウンロードせずに.txtファイルを作成してもいいですが、ダウンロードした方が、サイト運営者IDとかも書いてくれているので早いです。</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564290887385-ads_pic.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h3>手順2.
      ads.txt を、ドメインのルートレベル（例: <em><a href=\"https://example.com/ads.txt\"></a>https://example.com/ads.txt</em>）でホストする</h3><p><br></p><p><span
      style=\"font-size: 18px;\">アプリ/public内にads.txtファイルを置くだけでホストされます。以後、ドメイン/ads.textを叩くと該当ファイルが表示されます。</span></p><p><span
      style=\"font-size: 18px;\">ローカルからEC2にコピーするときはscpコマンドを使いましょう。</span></p><p><br></p><pre>$
      scp -i [ec2の公開鍵のパス] ~/Downloads/ads.txt [ユーザー名]@[サーバのドメイン]:[アプリのパス]/public/ads.txt</pre><p><span
      style=\"font-size: 18px;\">これで、[アプリのパス]/publicに ads.txt がコピーされます。</span></p><p><br></p><h3>手順2.
      nginxにて文字コードを指定</h3><p><span style=\"font-size: 18px;\"><a href=\"https://fe.datasign.co/adstxt/\"></a><a
      href=\"https://fe.datasign.co/adstxt/\">https://fe.datasign.co/adstxt/</a> こちらのサービスでads.txtをテストしてもらえるとわかると思いますが、</span></p><p><span
      style=\"font-size: 18px;\"><code>&rdquo;ISO-8859-1&Prime;は誤った文字コードです。utf-8で作成してください。</code></span></p><p>と表示されると思います。理由は、nginxを経由してファイルにアクセスするときに、文字コードが変換されてしまうからです。</p><p>なので、nginx設定がいるから文字コードを指定する。</p><p><br></p><p>筆者の場合、アプリ名froala-blogのnginx設定ファイルは、froala-blog.conf
      なので</p><pre>$ sudo vi /etc/nginx/conf.d/froala-blog.conf\r\n\r\n...\r\nserver
      {\r\n  <span style=\"color: rgb(243, 121, 52);\">charset utf-8; </span><span
      style=\"color: rgb(163, 143, 132);\"># こいつを追加</span>\r\n  server_name domain
      xx.xx.xx.xx;\r\n  # nginx so increasing this is generally safe...\r\n  keepalive_timeout
      5;\r\n  # path for static files\r\n  root /var/www/rails/froala-blog/public;\r\n 
      # page cache loading\r\n  try_files $uri/index.html $uri.html $uri @app;\r\n 
      location @app {\r\n    # HTTP headers\r\n    proxy_set_header X-Forwarded-For
      $proxy_add_x_forwarded_for;\r\n    proxy_set_header X-Forwarded-Proto https;\r\n 
        proxy_set_header Host $http_host;\r\n    proxy_redirect off;\r\n    proxy_pass
      http://app_server;\r\n  }\r\n...</pre><p><span style=\"font-size: 18px;\">最後にnginxとunicorn(ウェブサーバー、アプリケーションサーバー)を再起動すれば終了です。</span></p><p><span
      style=\"font-size: 18px;\"><a href=\"https://fe.datasign.co/adstxt/\"></a><a
      href=\"https://fe.datasign.co/adstxt/\">https://fe.datasign.co/adstxt/</a>&nbsp;
      でもう一度テストすると文字コードエラーが消えていると思います！</span></p><p><br></p><p><span style=\"font-size:
      18px;\">ドメイン/ads.txtでアクセスして、ads.txtの表示を確認しましょう！</span></p><p><br></p><p><span
      style=\"font-size: 36px;\">完<span class=\"fr-emoticon fr-deletable fr-emoticon-img\"
      style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f603.svg);\">&nbsp;</span><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f604.svg);\">&nbsp;</span><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f606.svg);\">&nbsp;</span></span></p><p><br></p><p><span
      style=\"font-size: 18px;\">ちなみに...nginxではなくApatchを使っている方は手順2にて以下の通りにすると良いです</span></p><p><span
      style=\"font-size: 18px;\">&nbsp;.htaccess に以下の内容を追記</span></p><pre><span style=\"font-size:
      18px;\">&lt;Files ads.txt&gt;\r\nAddType &quot;text/plain; charset=utf-8&quot;
      .txt\r\n&lt;/Files&gt;</span></pre><p><span style=\"font-size: 18px;\">これで、UTF-8で
      txtファイルと接続できます。</span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-07-28 14:34:59.870429'
    - '2019-07-28 15:42:45.802851'
  - - 182
    - Route53 nginx 「サブドメインとメインドメインを両方でアクセスできるようにする」(リダイレクト設定も)
    - "<h1 style=\"text-align: center;\">Route53 nginx 「サブドメインとメインドメインを両方でアクセスできるようにする(リダイレクト設定も)」</h1><p><br></p><h2>環境</h2><hr><p>Amazon
      Linux 2<br>Rails 5.2.1<br>ruby 2.4.2<br>nginx 1.12.2<br>unicorn 5.5.1</p><h2>はじめに</h2><hr><p><a
      href=\"https://www.dragonarrow.work/articles/163\"></a><a href=\"https://www.dragonarrow.work/articles/163\"><span
      style=\"font-size: 18px;\">https://www.dragonarrow.work/articles/163</span></a><span
      style=\"font-size: 18px;\">&nbsp;こちらの記事通り、wwwでアクセスできるようにした状態からのスタートとする。</span></p><p><br></p><p><br></p><h2>手順</h2><hr><p><br></p><h3>Route53
      メインドメインのレコード追加</h3><p><span style=\"font-size: 18px;\">下記の通り、1~4を行い、Aレコードでメインドメインが追加できたことを確認する。</span></p><ol><li><span
      style=\"font-size: 18px;\">レコードセットの作成</span></li><li><span style=\"font-size:
      18px;\">名前(サブドメイン空)</span></li><li><span style=\"font-size: 18px;\">EC2のElastic_IPを指定</span></li><li><span
      style=\"font-size: 18px;\">作成</span></li></ol><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564301025012-Route53_maindomain.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h3>nginx
      リダイレクト設定</h3><p>nginx設定ファイルにて、メインドメインでアクセスしたら、wwwのurlにリダイレクトするように指定する。</p><p>ちなみに、筆者のアプリ名はfroala-blog、設定ファイルは
      /etc/nginx/conf.d/froala-blog.conf だが、人によって名前やパスは違うはず</p><p>便宜読み換える。</p><pre>#
      log directory\r\nerror_log  /var/www/rails/froala-blog/log/nginx.error.log;\r\naccess_log
      /var/www/rails/froala-blog/log/nginx.access.log;\r\n# max body size\r\nclient_max_body_size
      2G;\r\nupstream app_server {\r\n  # for UNIX domain socket setups\r\n  server
      unix:/var/www/rails/froala-blog/tmp/sockets/unicorn.sock fail_timeout=0;\r\n}\r\nserver
      {\r\n  charset utf-8;\r\n  server_name www.example.com [My_Elastic_IP] <span
      style=\"background-color: rgb(235, 107, 86); color: rgb(255, 255, 255);\">example.com</span>;
      <span style=\"color: rgb(163, 143, 132);\"># example.com(メインドメイン)を追加</span>\r\n 
      # nginx so increasing this is generally safe...\r\n  keepalive_timeout 5;\r\n 
      # path for static files\r\n  root /var/www/rails/froala-blog/public;\r\n  #
      page cache loading\r\n  try_files $uri/index.html $uri.html $uri @app;\r\n 
      location @app {\r\n    # HTTP headers\r\n    proxy_set_header X-Forwarded-For
      $proxy_add_x_forwarded_for;\r\n    proxy_set_header X-Forwarded-Proto https;\r\n 
        proxy_set_header Host $http_host;\r\n    proxy_redirect off;\r\n    proxy_pass
      http://app_server;\r\n  }\r\n  # Rails error pages\r\n  error_page 500 502 503
      504 /500.html;\r\n  location = /500.html {\r\n    root /var/www/rails/froala-blog/public;\r\n 
      }\r\n  \r\n    listen 443 ssl; # managed by Certbot\r\n    ssl_certificate /etc/letsencrypt/live/www.example.com/fullchain.pem;
      # managed by Certbot\r\n    ssl_certificate_key /etc/letsencrypt/live/www.example.com/privkey.pem;
      # managed by Certbot\r\n    include /etc/letsencrypt/options-ssl-nginx.conf;
      # managed by Certbot\r\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; #
      managed by Certbot\r\n}\r\nserver {\r\n    if ($host = www.example.com) {\r\n 
            return 301 https://$host$request_uri;\r\n    } # managed by Certbot\r\n\r\n
      \ <span style=\"color: rgb(163, 143, 132);\"># example.com(メインドメイン)でアクセスしたらwwwつきurlに返す</span>\r\n 
        <span style=\"background-color: rgb(235, 107, 86); color: rgb(255, 255, 255);\">if
      ($host = example.com) {\r\n        return 301 https://www.$host$request_uri;\r\n 
        } # managed by Certbot</span> \r\n\r\n\r\n  listen 80;\r\n  server_name www.example.com
      [My_Elastic_IP] <span style=\"background-color: rgb(235, 107, 86); color: rgb(255,
      255, 255);\"><a href=\"//example.com\">example.com</a></span>; <span style=\"color:
      rgb(163, 143, 132);\"># httpでのメインドメインのアクセスを許さない</span>\r\n    return 404; #
      managed by Certbot \r\n\r\n\r\n\r\n\r\n}</pre><p><br></p><h3>最後に、サーバーの再起動</h3><p>unicorn停止</p><pre>sudo
      kill -QUIT `cat /var/www/rails/froala-blog/tmp/pids/unicorn.pid`</pre><p>unicorn起動</p><pre>bundle
      exec unicorn_rails -c /var/www/rails/froala-blog/config/unicorn.conf.rb -D -E
      production</pre><p>nginx再起動</p><pre>sudo service nginx restart</pre><p><br></p><p><a
      href=\"http://example\"><span style=\"font-size: 18px;\">http://example</span></a><span
      style=\"font-size: 18px;\">.com, <a href=\"https://examole.com\">https://examole.com</a>
      にアクセスすると、https://www.exaple.com でアクセスするようになる。</span></p><p><br></p><p><span
      style=\"font-size: 30px;\">Thay&#39;s all for now!!<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f624.svg);\">&nbsp;&nbsp;</span><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f624.svg);\">&nbsp;</span><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f624.svg);\">&nbsp;</span>
      &nbsp;</span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-07-28 17:26:22.672423'
    - '2019-07-28 17:27:50.188079'
  - - 183
    - Rails5.2 GoogleSearchConsoleにてサイトマップを追加
    - "<h1 style=\"text-align: center;\">Rails5.2 GoogleSearchConsoleにてサイトマップを自動で追加</h1><p><br></p><h2>環境</h2><hr><p><span
      style=\"font-size: 18px;\">Amazon Linux 2<br>Rails 5.2.1<br>ruby 2.4.2<br>nginx
      1.12.2<br>unicorn 5.5.1</span></p><p><br></p><h2>サイトマップとは?</h2><hr><p><strong>サイトマップとは、サイト全体のページ構成を地図のように一覧で記載しているページのこと。</strong></p><p><strong>サイトマップは、ユーザーや検索エンジンにサイト内容をわかりやすく伝える役割を担ってる。</strong></p><p><strong>サイトマップを用意しておくことで、<u><span
      style=\"background-color: rgb(247, 218, 100);\">ユーザーが目的のページを探しやすくなったり(HTMLサイトマップ)</span></u>、<u><span
      style=\"background-color: rgb(247, 218, 100);\">検索エンジンがサイト内のページを知らせる(XMLサイトマップ)</span></u>ことができる。</strong></p><p><br></p><p><strong><span
      style=\"font-size: 18px;\"><u><span style=\"background-color: rgb(247, 218,
      100);\">つまり、検索エンジンに認識されやすくすることで、検索結果に表示されやすくする役割がある。</span></u></span></strong></p><p><br></p><h2>手順</h2><h3>1.
      Gemをインストール</h3><p>Gemfileに追記して <code>bundle install</code> します。</p><pre># Site
      map\r\ngem &#39;sitemap_generator&#39;</pre><p><br></p><h3>2. sitemap.rb(サイトマップ設定ファイル)を作成</h3><p>以下のコマンドで<code>config/sitemap.rb</code>(サイトマップの設定ファイル)
      が作成される。</p><pre><code>$ bundle exec rake sitemap:install</code></pre><p><br></p><p>以下のコマンドで<code>public/</code>
      配下に <code>sitemap.xml.gz</code> が作成される。</p><pre><code>$ <code>bundle exec </code>rake
      sitemap:refresh</code></pre><p><br></p><p><code>sitemap.xml.gz</code>はgit 管理したくないので、忘れないうちにここで
      .gitignore しておく</p><pre>$ vi .gitignore\r\n# Ignore sitemap file\r\npublic/sitemap.xml.gz</pre><p><br></p><h3>3.
      sitemap.rb(サイトマップ設定ファイル)を編集</h3><pre>$ vi config/sitemap.rb</pre><p><a href=\"https://qiita.com/tackeyy/items/077f7247309665592112\"></a></p><pre><span
      style=\"color: rgb(65, 168, 95);\">SitemapGenerator</span>::<span style=\"color:
      rgb(65, 168, 95);\">Sitemap</span>.default_host = &quot;<span style=\"color:
      rgb(184, 49, 47);\"><a href=\"http://www.example\">http://www.example</a>.com</span>&quot;\r\n 
      <span style=\"color: rgb(65, 168, 95);\">SitemapGenerator</span>::<span style=\"color:
      rgb(65, 168, 95);\">Sitemap</span>.create do\r\n  \r\n  add articles_path, :priority =&gt; 0.7, :changefreq =&gt; &#39;daily&#39;\r\n 
      <span style=\"color: rgb(163, 143, 132);\"># &#39;/articles/:id&#39; を追加する</span>\r\n 
      <span style=\"color: rgb(65, 168, 95);\">Article</span>.find_each <span style=\"color:
      rgb(243, 121, 52);\">do</span> |<span style=\"color: rgb(84, 172, 210);\">article</span>|\r\n 
        add article_path(article), priority: 1.0, :lastmod =&gt; article.updated_at\r\n 
      <span style=\"color: rgb(243, 121, 52);\">end</span>\r\n  <span style=\"color:
      rgb(65, 168, 95);\">Tag</span>.find_each <span style=\"color: rgb(243, 121,
      52);\">do</span> |<span style=\"color: rgb(84, 172, 210);\">tag</span>|\r\n 
        add manage_tag_path(tag), priority: 0.8, :lastmod =&gt; tag.updated_at\r\n 
      <span style=\"color: rgb(243, 121, 52);\">end</span>\r\n<span style=\"color:
      rgb(243, 121, 52);\">end</span></pre><p><strong>Article、</strong><strong>Tag</strong>
      は自分の環境のテーブル名なので、自分の環境に合わせてテーブル名を書く</p><p>article_path や manage_tag_path は筆者の場合であり、
      <code>$ rake routes</code> で自分の環境にて確認できる。</p><p><br></p><p>各設定項目の内容は以下のとおり。</p><table
      style=\"margin-right: calc(1%); width: 99%;\"><tbody><tr><th style=\"width:
      9.6739%; height: 60px; text-align: center;\">changefreq<br></th><td style=\"width:
      90.2174%; vertical-align: middle; text-align: center;\">更新頻度を指定。[&lsquo;always&rsquo;,
      &lsquo;hourly&rsquo;, &lsquo;daily&rsquo;, &lsquo;weekly&rsquo;, &lsquo;monthly&rsquo;,
      &lsquo;yearly&rsquo;, &lsquo;never（アーカイブされたページ）&rsquo;]のいずれかを指定<br></td></tr><tr><th
      style=\"width: 9.6739%; height: 60px; vertical-align: middle; text-align: center;\">priority<br></th><td
      style=\"width: 90.2174%; text-align: center;\">優先順位1.0(重要度:高)～0.1(重要度:低)を指定<br></td></tr><tr><th
      style=\"width: 9.6739%; height: 60px; text-align: center;\">lastmod<br></th><td
      style=\"width: 90.2174%; text-align: center; vertical-align: middle;\">最終更新日を指定<br></td></tr></tbody></table><p><br></p><p><br></p><h3>4.
      設定に基づいて、サイトマップを作成</h3><p>以下コマンドで、設定ファイルの通りに public/sitemap.xml.gz が作られます。</p><pre><code>$
      <code>bundle exec </code>rake sitemap:refresh</code>\r\nPinging with URL &#39;http://www.example.work/sitemap.xml.gz&#39;:\r\n 
      Successful ping of Google\r\n  Successful ping of Bing</pre><p><u><strong>このログのURL
      http://www.example.work/sitemap.xml.gz をメモしておく。(手順8にて使用)</strong></u></p><p><br></p><p>sitemapコマンド</p><p><code>rake
      sitemap:refresh</code> には <code>no_ping</code> というオプションがあります。<br><code>rake
      sitemap:refresh</code> だとサーチエンジンに通知をしてしまいますが、 <code>rake sitemap:refresh:no_ping</code>
      を使えば通知を無効にできます</p><table style=\"margin-right: calc(1%); width: 99%;\"><thead><tr><th
      style=\"text-align: center; height: 60px; width: 35.9517%;\">コマンド<br></th><th
      style=\"text-align: center; height: 60px; width: 63.8972%;\">どういう時に使えば良いか<br></th></tr></thead><tbody><tr><td
      style=\"text-align: center; height: 60px; width: 35.9517%;\">rake sitemap:create<br></td><td
      style=\"text-align: center; height: 60px; width: 63.8972%;\">sitemapの作成を行いたい時<br></td></tr><tr><td
      style=\"text-align: center; height: 60px; width: 35.9517%;\">rake sitemap:refresh<br></td><td
      style=\"text-align: center; height: 60px; width: 63.8972%;\">sitemapの作成してサーチエンジンにsitemapを更新したことを通知したい時<br></td></tr><tr><td
      style=\"text-align: center; height: 60px; width: 35.9517%;\">rake sitemap:clean<br></td><td
      style=\"text-align: center; height: 60px; width: 63.8972%;\">sitemapを削除したい時<br></td></tr></tbody></table><p>READMEでは以下にコマンドの説明があります。<br><a
      href=\"https://github.com/kjvarga/sitemap_generator#deployments--capistrano\"
      rel=\"nofollow noopener\" target=\"_blank\"></a><a href=\"https://github.com/kjvarga/sitemap_generator#deployments--capistrano\"></a><a
      href=\"https://github.com/kjvarga/sitemap_generator#deployments--capistrano\">https://github.com/kjvarga/sitemap_generator#deployments--capistrano</a></p><p><br></p><h3>5.
      定期的にsitemapを自動で更新する設定を行う</h3><p>Gemfileに追記して<code>bundle install</code>します。</p><pre>gem
      &#39;whenever&#39;, require: false</pre><p><br></p><h3>6. 自動更新の設定ファイルを作成&amp;編集</h3><p>以下のコマンドで
      config/schedule.rb が作成されます。</p><pre>$ bundle exec wheneverize</pre><p>投稿の更新頻度によって、1.dayか1.weekか好きな値にする</p><pre>set
      :<span style=\"color: rgb(184, 49, 47);\">output</span>, <span style=\"color:
      rgb(184, 49, 47);\">&#39;log/crontab.log&#39;</span>\r\n\r\n\r\nevery <span
      style=\"color: rgb(184, 49, 47);\">1</span>.day, at: <span style=\"color: rgb(184,
      49, 47);\">&#39;5:00 am&#39;</span> do\r\n  rake <span style=\"color: rgb(184,
      49, 47);\">&#39;-s sitemap:refresh&#39;</span>\r\nend</pre><p><br></p><h3>7.
      cronにデータを反映</h3><pre>$ bundle exec whenever --update-crontab </pre><p>cronが設定できているかを確認</p><pre>$
      crontab -l\r\n# Begin Whenever generated tasks for: /var/www/rails/froala-blog/config/schedule.rb
      at: 2019-07-29 11:23:22 +0900\r\n0 5 * * * /bin/bash -l -c &#39;cd /var/www/rails/froala-blog
      &amp;&amp; RAILS_ENV=production bundle exec rake -s sitemap:refresh --silent
      &gt;&gt; log/crontab.log 2&gt;&amp;1&#39;\r\n# End Whenever generated tasks
      for: /var/www/rails/froala-blog/config/schedule.rb at: 2019-07-29 11:23:22 +0900</pre><p>上記のようなログが出たら、設定反映されています。</p><p><br></p><p>cronに反映する際のコマンド</p><ul><li>設定の確認</li></ul><pre>$
      bundle exec whenever \r\n$ bundle exec crontab -e</pre><ul><li>cronにデータを反映</li></ul><pre>$
      bundle exec whenever --update-crontab </pre><ul><li>cronからデータを削除</li></ul><pre>$
      bundle exec whenever --clear-crontab</pre><p>です。</p><p><br></p><h3>補足. 自動ではなく手動でやりたい場合</h3><p>基本、自動でやることがほとんどだと思うが、今すぐサイトマップに反映させたい場合のために追記</p><p>手順4にてメモった、<u><strong><a
      href=\"http://www.example.work/sitemap.xml.gz\">http://www.example.work/sitemap.xml.gz</a></strong></u>
      をGoogleSearchConsoleのサイトマップに送信する</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564373156353-sitemap_pic.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>正しいURLで送信できたらステータスが「成功しました」になる。</p><p>また、「成功しました」となっているのに検出されたURLが少なかったら、手順3の
      sitemap.rb の記述を誤っている可能性がある。</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564373337102-%E3%82%B5%E3%82%A4%E3%83%88%E3%83%9E%E3%83%83%E3%83%95%E3%82%9A%E7%B5%90%E6%9E%9C.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p><span
      style=\"font-size: 30px;\">以上で終了です!!</span></p><p><span style=\"font-size: 30px;\">めんどくさいのは最初だけなのでさくっとやってしまいましょう！<span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f607.svg);\">&nbsp;</span><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f618.svg);\">&nbsp;</span><span
      class=\"fr-emoticon fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60a.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p><h1>最後に</h1><p>capistrano(カピストラーノ)でデプロイフローを一連化させている人は、デプロイフローの中でsitemapも自動作成できるようです。</p><p>下記URLの資料に内容が書いてあったので、試してみてください。</p><p><a
      href=\"https://qiita.com/tackeyy/items/077f7247309665592112\"></a><a href=\"https://qiita.com/tackeyy/items/077f7247309665592112\">https://qiita.com/tackeyy/items/077f7247309665592112</a></p><p><br></p><p>筆者もぼちぼち
      Capistrano でデプロイフローを考えているので、そちらも記事にしたいと思っています。</p><p>もし書いたら、タイトルに「Capistrano」が入ると思うので、記事検索からみてみてね！</p><p><br></p><p><span
      style=\"font-size: 30px; font-family: Impact, Charcoal, sans-serif;\">That&#39;s
      all for now!!</span></p><p><br></p>"
    - '2019-07-29 13:24:09.900946'
    - '2020-09-05 18:33:56.037709'
  - - 184
    - Bootstrap3でサイドバーの作成
    - '<h1 style="text-align: center;">Bootstrap3でサイドバーの作成</h1><p><br><iframe height="265"
      style="width: 100%;" scrolling="no" title="oKZwdo" src="//codepen.io/napojin/embed/oKZwdo/?height=265&theme-id=dark&default-tab=html,result"
      frameborder="no" allowtransparency="true" allowfullscreen="true"> See the Pen
      <a href=''https://codepen.io/napojin/pen/oKZwdo/''>oKZwdo</a> by NakajiTatsuya
      (<a href=''https://codepen.io/napojin''>@napojin</a>) on <a href=''https://codepen.io''>CodePen</a>.
      </iframe></p><p>領域がわかりやすいように黄色と緑の背景をつけています。</p><p><br></p><p>基本となるのが、BootstrapのGridSystem（グリッドシステム）。</p><p>GridSystemとは、サイトの横幅を12分割してレイアウトするデザイン手法で、「col-{class}-{size}」で幅を表現する。</p><p>classには、以下の4種類がある</p><ul><li>xs
      - for phones</li><li>sm - for tablets</li><li>md - for desktops</li><li>lg -
      for larger desktops</li></ul><p>今回はsm（for tablets）のclassを使っているので、ウィンドウが768pxを下回った場合にすべてのグリッドがwidth:
      100%になる。</p><p><br></p><p>丸コピして使ってくれて構わないので、お役に立てれば幸いです！</p><p>最後に、</p><pre><code
      data-alt-lang="xml" data-lang="htmlmixed" data-og-lang="htmlmixed">&lt;div class=&quot;left_sidebar
      col-sm-3 hidden-xs&quot;&gt;</code></pre><p>という1行ですが、<code data-alt-lang="xml"
      data-lang="htmlmixed" data-og-lang="htmlmixed">hidden-xs</code> の場合、スマホでは非表示にできるbootstrapのクラスです。</p><p><code
      data-alt-lang="xml" data-lang="htmlmixed" data-og-lang="htmlmixed">hidden-md</code>
      とか <code data-alt-lang="xml" data-lang="htmlmixed" data-og-lang="htmlmixed">hidden-lg</code>
      という形でも使えるので、レスポンシブなUIをガンガン作っていきましょう！</p>'
    - '2019-07-30 15:21:52.783631'
    - '2019-07-30 15:23:49.104145'
  - - 185
    - codepenでコードと動作をシェア
    - '<h1 style="text-align: center;">codepenでコードと動作をシェア</h1><p><br></p><p><a data-wpel-link="external"
      href="http://codepen.io/" target="_blank"><span style="font-size: 30px;">CodePen</span></a></p><p>最近最もよく見かけるのがCodePenです。登録しなくても、動作確認を行うことができますが、無料登録をすると埋め込みも使えるようになります。Emmet利用可。</p><p><br></p><h2>CodePen</h2><hr><p><span
      style="font-size: 18px;">前述した通り、<a href="https://codepen.io/">CodePen</a> は「Web上で
      HTML, CSS, JavaScript を書いてすぐに結果を表示することができる」サービスです。</span></p><p><br></p><h2>埋め込まれた時の表示</h2><hr><p>こんな感じです。めちゃくちゃ便利。</p><p><br><iframe
      height="500" style="width: 100%;" scrolling="no" title="oKZwdo" src="//codepen.io/napojin/embed/oKZwdo/?height=265&theme-id=dark&default-tab=html,result"
      frameborder="no" allowtransparency="true" allowfullscreen="true"> See the Pen
      <a href=''https://codepen.io/napojin/pen/oKZwdo/''>oKZwdo</a> by NakajiTatsuya
      (<a href=''https://codepen.io/napojin''>@napojin</a>) on <a href=''https://codepen.io''>CodePen</a>.
      </iframe></p><p><br></p><h2>Codeのテスト</h2><hr><p>以下の画像のように、HTML, CSS, JS を記述</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564468761705-make_code.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><h2>Codeの埋め込み</h2><hr><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564469009539-embed.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><span style="font-size:
      18px;">最後に、表示コードを取得して、ブラ具などに貼り付け！</span></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564469380439-share_code.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><span style="font-size:
      30px;">これで、簡単にコードや動作を紹介できて、超便利！</span></p><p><span style="font-size: 30px;">これからガンガン使っていく予定です！</span></p><p><br></p><p><br></p><p><br></p>'
    - '2019-07-30 15:38:24.247662'
    - '2019-07-30 17:20:43.894836'
  - - 186
    - 'モデル内のクラスメソッドで効率化(例: 記事が多い順にタグを取得) Rails5.2'
    - "<h1 style=\"text-align: center;\">モデル内のクラスメソッドで効率化 Rails5.2</h1><p><br></p><p><br></p><p>例えば、tagテーブルとarticlesテーブルが存在し、以下のような構造であったとする</p><p>(schema.rb)</p><pre>ActiveRecord::Schema.define(version:
      xxxx_xx_xx) do\r\n...\r\n  create_table &quot;tags&quot;, force: :cascade do
      |t|\r\n    t.string <span style=\"color: rgb(243, 121, 52);\">&quot;name&quot;</span>,
      null: false\r\n    t.datetime <span style=\"color: rgb(243, 121, 52);\">&quot;created_at&quot;</span>,
      null: false\r\n    t.datetime <span style=\"color: rgb(243, 121, 52);\">&quot;updated_at&quot;</span>,
      null: false\r\n  end\r\n  create_table <span style=\"color: rgb(243, 121, 52);\">&quot;articles&quot;</span>,
      force: :cascade do |t|\r\n    t.string <span style=\"color: rgb(243, 121, 52);\">&quot;title&quot;</span>\r\n 
        t.text <span style=\"color: rgb(243, 121, 52);\">&quot;body&quot;</span>\r\n 
        t.datetime <span style=\"color: rgb(243, 121, 52);\">&quot;created_at&quot;</span>,
      null: false\r\n    t.datetime <span style=\"color: rgb(243, 121, 52);\">&quot;updated_at&quot;</span>,
      null: false\r\n  end\r\n...\r\nend</pre><p>(models/tag.rb)</p><pre>class Tag
      &lt; ApplicationRecord\r\n  has_and_belongs_to_many :articles\r\nend</pre><p><br></p><p>(models/article.rb)</p><pre>class
      Article &lt; ApplicationRecord\r\n  has_and_belongs_to_many :tags\r\nend</pre><p><br></p><p>viewのなかで、記事が多い順にタグを取得して表示したい。</p><p>そういうときは、こういう長い文になります。</p><p><br></p><pre>&lt;%
      <span style=\"color: rgb(41, 105, 176);\">Tag</span>.<span style=\"color: rgb(41,
      105, 176);\">select</span>(<span style=\"color: rgb(250, 197, 28);\">&#39;tags.*&#39;</span>,
      <span style=\"color: rgb(250, 197, 28);\">&#39;count(articles.id) AS acs&#39;</span>).left_joins(<span
      style=\"color: rgb(85, 57, 130);\">:articles</span>).group(<span style=\"color:
      rgb(250, 197, 28);\">&#39;tags.id&#39;</span>).order(<span style=\"color: rgb(250,
      197, 28);\">&#39;acs desc&#39;</span>) do |tag| %&gt;\r\n  &lt;<span style=\"color:
      rgb(184, 49, 47);\">li</span>&gt;&lt;a href=&lt;%= manage_tag_path(id: tag.id)
      %&gt;&gt;&lt;%= tag.<span style=\"color: rgb(41, 105, 176);\">name</span> %&gt;&lt;/a&gt;&lt;/<span
      style=\"color: rgb(184, 49, 47);\">li</span>&gt;\r\n&lt;% end %&gt;</pre><p><br></p><p>もちろん、コントローラの中で</p><p>@tags=<span
      style=\"color: rgb(41, 105, 176);\">Tag</span>.<span style=\"color: rgb(41,
      105, 176);\">select</span>(<span style=\"color: rgb(250, 197, 28);\">&#39;tags.*&#39;</span>,
      <span style=\"color: rgb(250, 197, 28);\">&#39;count(articles.id) AS acs&#39;</span>).left_joins(<span
      style=\"color: rgb(85, 57, 130);\">:articles</span>).group(<span style=\"color:
      rgb(250, 197, 28);\">&#39;tags.id&#39;</span>).order(<span style=\"color: rgb(250,
      197, 28);\">&#39;acs desc&#39;</span>)</p><p>としてから@tagsで渡してもいいですが、それだと他のコントローラで使うときに、また宣言をしないといけなくなります</p><p><br></p><h2>そこで、クラスメソッドを使う</h2><p>models/tag.rbにクラスメソッドを追加</p><p>(models/tag.rb)</p><pre>class
      Tag &lt; ApplicationRecord\r\n  has_and_belongs_to_many :articles\r\n\r\n# articleが多い順に全てのtagを取得している\r\n　　def
      self.popular_sort_tags\r\n    　<span style=\"color: rgb(41, 105, 176);\">Tag</span>.<span
      style=\"color: rgb(41, 105, 176);\">select</span>(<span style=\"color: rgb(250,
      197, 28);\">&#39;tags.*&#39;</span>, <span style=\"color: rgb(250, 197, 28);\">&#39;count(articles.id)
      AS acs&#39;</span>).left_joins(<span style=\"color: rgb(85, 57, 130);\">:articles</span>).group(<span
      style=\"color: rgb(250, 197, 28);\">&#39;tags.id&#39;</span>).order(<span style=\"color:
      rgb(250, 197, 28);\">&#39;acs desc&#39;</span>)\r\n　　end\r\nend</pre><p><br></p><p>これで、いつでも</p><pre>&lt;%
      <span style=\"color: rgb(41, 105, 176);\">Tag</span>.popular_sort_tags.each
      do |tag| %&gt;\r\n  &lt;<span style=\"color: rgb(184, 49, 47);\">li</span>&gt;&lt;a
      href=&lt;%= manage_tag_path(id: tag.id) %&gt;&gt;&lt;%= tag.<span style=\"color:
      rgb(41, 105, 176);\">name</span> %&gt;&lt;/a&gt;&lt;/<span style=\"color: rgb(184,
      49, 47);\">li</span>&gt;\r\n&lt;% end %&gt;</pre><p><br></p><p>てやったり、</p><p>コントローラで</p><p>@tags=<span
      style=\"color: rgb(41, 105, 176);\">Tag</span>.popular_sort_tags</p><p>として</p><pre>&lt;%
      @tags.each do |tag| %&gt;\r\n  &lt;<span style=\"color: rgb(184, 49, 47);\">li</span>&gt;&lt;a
      href=&lt;%= manage_tag_path(id: tag.id) %&gt;&gt;&lt;%= tag.<span style=\"color:
      rgb(41, 105, 176);\">name</span> %&gt;&lt;/a&gt;&lt;/<span style=\"color: rgb(184,
      49, 47);\">li</span>&gt;\r\n&lt;% end %&gt;</pre><p><br></p><p>で、スマートにまとめることができる。</p><p><br></p><p><span
      style=\"font-size: 30px;\">何回も使うものは定義は1回で済ませる努力をしよう！！</span></p>"
    - '2019-07-30 16:15:19.455931'
    - '2019-07-30 16:15:19.455931'
  - - 187
    - お名前.com とRoute53 独自ドメイン取得と設定
    - '<h2>対象</h2><hr><h2>http://[ElasticIP] で公開しているが,独自ドメインでアクセスできるようにしたい人</h2><p><br></p><h2>必要なもの</h2><hr><p>お名前ドットコムのドメイン</p><p>AWS</p><ul><li>EC2インスタンス</li><li>ElasticIP</li><li>route53</li></ul><p><br></p><h2>手順</h2><hr><h2>1.
      お名前.com&nbsp;にてドメイン取得</h2><p><br></p><p>お名前.comに以下からアクセスする</p><p><a href="https://px.a8.net/svt/ejp?a8mat=35LJ99+G4HNLE+50+2HBG69"
      rel="nofollow" target="_blank"><img border="0" width="468" height="60" alt=""
      src="https://www28.a8.net/svt/bgt?aid=190801341975&wid=001&eno=01&mid=s00000000018015002000&mc=1"
      class="fr-fic fr-dii"></a><img border="0" width="1" height="1" src="https://www10.a8.net/0.gif?a8mat=35LJ99+G4HNLE+50+2HBG69"
      alt="" class="fr-fic fr-dii"></p><p><br></p><p>欲しいドメインを検索する</p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564651576362-onamae_search.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>ドメインの最後の
      .xxx の部分のなかですでに他人に取られているものは &times; で表示されている。</p><p>選択肢から、好きなドメインを選ぶ。</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564651627995-onaame_get.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><br></p><h2>2.
      Route53でHostedZonesを作成する</h2><p><br></p><p><a href="https://console.aws.amazon.com/route53/">Route53</a>
      にアクセスしてホストゾーンを作成する <a href="https://console.aws.amazon.com/route53/"></a></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560142774071-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-10+13.58.30.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>Domain
      Name に取得したドメイン名を記載（例: example.com）</p><p>Comment に何かしら、適当に。例えば、「taken by onamae.com」
      とか。</p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560143415984-domain.jpeg"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>NSタイプのレコードの値4つををメモ</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560143938289-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2019-06-10+14.12.52.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><h2>3. お名前.comの設定の管理画面へ移動</h2><p><br></p><p><code>ドメイン設定</code>-&gt;<code>ネームサーバーの設定</code>&rarr;
      <code>ネームサーバーの変更</code>をクリックします。</p><p><code>他のネームサーバーを利用</code>&rarr;<code>ネームサーバー情報を入力</code>をクリックします。</p><p>メモしておいた、<code>Route53</code>の<code>NSレコード</code>を4つ登録</p><p>※終わりが「.」の場合は「.」は削除します。</p><p><br></p><h2>4.
      サブドメイン、IPとともにAタイプのレコードを作成</h2><p><br></p><p>例ではサブドメインをwwwと定義しました。</p><p>また、サブドメインがいらない人は、Nameを空欄にして作成してください。</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1560144774834-ip.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><br></p><h1>最終確認</h1><p>digコマンドでチェックします。<br>digはDNS（ネームサーバ）の情報を出すコマンドです。<br>ここにEC2のアドレスが出ていれば72時間以内に反映されます。</p><pre>$
      dig www.example.com <span style="color: rgb(163, 143, 132);"># wwwをからにした人は $
      dig <a href="//www.example.com"></a>example.com</span></pre><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>'
    - '2019-08-01 19:19:39.753663'
    - '2019-08-05 10:26:45.048389'
  - - 188
    - A8.netの基本情報
    - "<pre><span style=\"color: rgb(84, 172, 210);\"><span style=\"font-size: 36px;\">目次</span></span><a
      href=\"https://netbusinessbox.net/a8net-characteristics#A8net\"></a>\r\n\r\n<a
      href=\"#basic_info\"><span style=\"font-size: 24px;\">・A8.netの基本情報</span></a><span
      style=\"font-size: 24px;\">\r\n\r\n<a href=\"#merit\">・メリット</a>\r\n\r\n<a href=\"#demerit\">・デメリット\r\n\r\n</a></span><a
      href=\"#summary\"><span style=\"font-size: 24px;\">・まとめ</span></a></pre><h2><br></h2><h2
      id=\"basic_info\">ASPの大手 A8.netの基本情報</h2><table style=\"margin-right: calc(0%);
      width: 100%;\"><thead><tr><th colspan=\"2\" style=\"text-align: center; vertical-align:
      middle; background-color: rgb(209, 213, 216);\"><a href=\"https://px.a8.net/svt/ejp?a8mat=35LJ99+G3ASDU+0K+116QG1\"
      rel=\"nofollow\" target=\"_blank\"><img border=\"0\" width=\"234\" height=\"auto\"
      alt=\"\" src=\"https://www21.a8.net/svt/bgt?aid=190801341973&wid=001&eno=01&mid=s00000000002006246000&mc=1\"
      class=\"fr-fic fr-dii\" style=\"width: 305px;\"></a><img border=\"0\" width=\"1\"
      height=\"1\" src=\"https://www12.a8.net/0.gif?a8mat=35LJ99+G3ASDU+0K+116QG1\"
      alt=\"\" class=\"fr-fic fr-dii\"><img src=\"https://www17.a8.net/0.gif?a8mat=1HWE6U+D5X2B6+0K+10BFWH\"
      alt=\"\" width=\"1\" height=\"1\" class=\"fr-fic fr-dii\"><br></th></tr></thead><tbody><tr><td>最低換金額<br></td><td>1,000円か5,000円の支払い方式から選択※月毎の確定報酬額が設定金額以上になった場合全額振り込む方式<br><br>支払い方式にキャリーオーバーを選ぶと、その月の確定報酬額を翌月以降に繰り越す<br></td></tr><tr><td>手数料<br></td><td><strong>ゆうちょ銀行だと30円</strong><br><br>それ以外の銀行は105円～735円<br></td></tr><tr><td>登録サイト審査<br></td><td>なし<br><br>広告と提携する際の審査はプログラムによって有り<br></td></tr><tr><td>紹介報酬<br></td><td>500円<br></td></tr><tr><td>備考<br></td><td>18歳以上から利用可能<br><br>300サイトまで登録可<br></td></tr></tbody></table><p><br></p><h2
      id=\"merit\">A8.netのメリットについて</h2><ul><li><span style=\"background-color: rgb(247,
      218, 100); font-size: 18px;\">会員登録時のサイト審査なし！</span></li><li><span style=\"font-size:
      18px;\"><span style=\"background-color: rgb(247, 218, 100);\">サイトやブログがなくても登録可能</span></span></li><li><span
      style=\"font-size: 18px;\"><span style=\"background-color: rgb(247, 218, 100);\">高額成果報酬公開</span></span></li><li><span
      style=\"font-size: 18px;\"><span style=\"background-color: rgb(247, 218, 100);\">便利なA8.netスマホアプリ</span></span></li></ul><p><br></p><p>A8.netは、サイト審査なしでアフィリエイトを始めることができる数少ないASP</p><p>初心者は結構、審査でつまずいた経験がある人もいるのでは？？</p><h2
      id=\"#demerit\">A8.netのデメリットについて</h2><ul><li><span style=\"background-color:
      rgb(239, 239, 239); font-size: 18px;\">お知らせメールが多い</span></li><li><span style=\"font-size:
      18px;\"><span style=\"background-color: rgb(239, 239, 239);\">振込手数料が有料</span></span></li></ul><p><br><strong>ゆうちょなら振込手数料は一律30円</strong>で済みますが、その他の銀行だと(三井住友以外の銀行や楽天銀行のようなネットバンク)振込金額が三万円未満の場合525円、三万円以上の場合は735円かかります。</p><p>他のデメリットとしては、提携してるサービスによって違いはありますがお知らせメールが多い点が挙げられます。<br>期間限定キャンペーンをメールで知らせてくれるのですが、知らせすぎなことがあります。</p><p><br></p><h2
      id=\"summary\">まとめ</h2><p><span style=\"font-size: 18px;\"><strong>初心者が成果を得るのに特にオススメ</strong>です。</span></p><p><span
      style=\"font-size: 18px;\">使う人はゆうちょの口座を登録しよう。</span><br></p><p><a href=\"https://px.a8.net/svt/ejp?a8mat=35LJ99+G3ASDU+0K+11E8I9\"
      rel=\"nofollow\" target=\"_blank\"><img border=\"0\" width=\"468\" height=\"60\"
      alt=\"\" src=\"https://www27.a8.net/svt/bgt?aid=190801341973&wid=001&eno=01&mid=s00000000002006281000&mc=1\"
      class=\"fr-fic fr-dii\"></a>\r\n<img border=\"0\" width=\"1\" height=\"1\" src=\"https://www10.a8.net/0.gif?a8mat=35LJ99+G3ASDU+0K+11E8I9\"
      alt=\"\" class=\"fr-fic fr-dii\"></p><footer><br></footer>"
    - '2019-08-02 16:28:27.943373'
    - '2019-08-02 16:42:35.216764'
  - - 189
    - 'Rails: SEO ページタイトルをページごとに設定'
    - "<h1 style=\"text-align: center;\">Rails: ページタイトルをページごとに設定</h1><p><br></p><pre><span
      style=\"font-size: 36px; color: rgb(84, 172, 210);\">目次</span>\r\n\r\n<span
      style=\"font-size: 24px;\">1.<a href=\"#page_title\">ページタイトルとは</a>\r\n\r\n2.<a
      href=\"#title_role\">ページタイトルを設定する場合の注意点</a><a href=\"https://www.dragonarrow.work/articles/188#demerit\">\r\n\r\n</a>3.<a
      href=\"#title_setting\">Railsでページごとに実装</a></span></pre><p><br></p><h2><br></h2><h2><br></h2><h2
      id=\"page_title\">1. ページタイトル</h2><hr><p>ページタイトルは、ここではウェブページのHTMLの中でタイトルタグ（&lt;title&gt;タグ）に記述されている文字列を指します。</p><p>検索結果（SERPs）に表示されるサイトのリンクには、このページタイトルが使われます。</p><p><strong>タイトルタグは、サイトの訪問者や検索エンジンに対してページの内容・トピックを表す、とても重要なタグです。</strong></p><p><strong>また、SEO内部対策のチェックポイントとしても、<span
      style=\"font-size: 24px;\"><u><span style=\"background-color: rgb(247, 218,
      100);\">タイトルは一番にチェックすべき部分</span></u></span>です。</strong></p><p><br></p><h2><br></h2><h2
      id=\"title_role\">2. ページタイトルを設定する場合の注意点</h2><hr><ul><li><h3>キーワードの詰め込みすぎに注意(テーマがばらけて何のページか判定されない)</h3></li><li><h3>対策キーワードは1つが基本</h3></li><li><h3>サイト内でできるだけ固有のタイトルにする(検索エンジンが重複した記事を区別できない)</h3></li><li><h3>複合ワードに対応させる(キーワードに基づく複合ワードでアクセスされやすくする)</h3></li></ul><p><br></p><h2
      id=\"title_setting\">3. Rails でページごとに設定する</h2><hr><p>Railsでは、特に何もしていなければ、全ページでアプリ名がタイトルになっている。</p><p>その理由は、app/views/layouts/application.html.erb
      の html が全ページで適用されるからである。</p><p>$ rails new MyApp</p><p>でアプリを作成したなら、titileは自動で</p><p>&lt;title&gt;MyApp&lt;/title&gt;</p><p>になっている。</p><p><br></p><h3>3-1.
      application.html.erb ファイルから、タイトルをパラメータで受け取るようにする</h3><p>(編集前)</p><pre>&lt;head&gt;\r\n<span
      style=\"color: rgb(184, 49, 47);\">&lt;title&gt;MyApp&lt;/title&gt;</span>\r\n...\r\n&lt;/head&gt;</pre><p><br></p><p>(編集後)</p><pre>&lt;head&gt;\r\n<span
      style=\"color: rgb(26, 188, 156);\">&lt;title&gt;&lt;%= content_for?(:html_title)
      ? yield(:html_title) : &quot;MyApp&quot; %&gt;&lt;/title&gt;</span>\r\n...\r\n&lt;/head&gt;</pre><p><br></p><h3>3-2.
      タイトルを設定したいビューファイルの冒頭に以下を追記</h3><pre>&lt;% content_for(:html_title) { &#39;Title&#39;
      } %&gt;</pre><p><br></p><p><span style=\"font-size: 18px;\">以上で、ビューファイルからタイトルが取得され、content_for
      が設定されてないときは&quot;MyApp&quot;がタイトルになります。</span></p><p><br></p><p><span style=\"font-size:
      18px; color: rgb(163, 143, 132);\">＊＊＊豆知識＊＊＊</span></p><p><span style=\"color:
      rgb(163, 143, 132);\"><span style=\"font-size: 18px;\">Postテーブルのnameカラムをタイトル設定したいときは</span></span></p><pre><span
      style=\"color: rgb(163, 143, 132);\"><span style=\"font-size: 18px;\">&lt;%
      content_for(:html_title) { Post.title } %&gt;</span></span></pre><p><span style=\"font-size:
      18px; color: rgb(163, 143, 132);\">とすると、投稿記事と同じタイトルが設定できます。</span></p><p><br></p><p><span
      style=\"font-size: 30px;\">That&#39;s all for now!!<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f600.svg);\">&nbsp;</span>&nbsp;</span></p><p><br></p>"
    - '2019-08-04 13:31:11.471201'
    - '2019-08-04 13:42:32.280192'
  - - 190
    - froala「couldn't find file 'third_party/xxxxxxxx.min.js' with type 'application/javascript'!」
    - "<h1 style=\"text-align: center;\">「couldn&#39;t find file &#39;third_party/xxxxxxxx.min.js&#39;
      with type &#39;application/javascript&#39;」</h1><p><br></p><h2>ENVIRONMENT</h2><hr><p>Rails
      5.2.1</p><p>ruby 2.4.2</p><p>wysiwyg-rails 2.6.6</p><p>froala-editor-sdk 1.2.0</p><p><br></p><h2>ERROR</h2><hr><p>(app/assets/javascripts/application.js)</p><pre>...\r\n//=
      require third_party/spell_checker.min.js\r\n//= require third_party/font_awesome.min.js\r\n//=
      require third_party/embedly.min.js\r\n//= require third_party/image_tui.min.js\r\n...</pre><p><br></p><p>(app/assets/stylesheets/application.scss)</p><pre>...\r\n@import
      &#39;third_party/embedly.min.css&#39;;\r\n@import &#39;third_party/image_tui.min.css&#39;;\r\n@import
      &#39;third_party/spell_checker.min.css&#39;;\r\n...</pre><p><br></p><h2>SOLUTION</h2><hr><h2>1.
      update <u><span style=\"background-color: rgb(247, 218, 100);\">gem wysiwyg-rails</span></u>
      version</h2><p><br></p><p><code>wysiwyg-rails (2.6.6) -&gt; wysiwyg-rails (2.9.6)</code></p><p><br></p><h3><em><span
      style=\"background-color: rgb(235, 107, 86);\">two impotant things</span></em></h3><p><em>・<code>wysiwyg-rails
      (2.6.6)</code> is not supporting third party <span style=\"color: rgb(184, 49,
      47);\">except&nbsp;</span><u>spell_checker</u>.</em></p><p><em>・version of <code>wysiwyg-rails</code>
      must not exceed 3.0 because of dependency with froala-editor-sdk.</em></p><p><br></p><h2>2.
      chenge from font-awesome-sass to <u><span style=\"background-color: rgb(247,
      218, 100);\">font-awesome-rails</span></u></h2><h3><br></h3><p>・add <span style=\"background-color:
      rgb(247, 218, 100);\">gem &#39;font-awesome-rails&#39;</span> in Gemfie</p><p>・bundle
      install</p><p>・add <span style=\"background-color: rgb(247, 218, 100);\">@import
      &#39;font-awesome&#39;;</span> in (app/assets/stylesheets/application.scss)</p><p><br></p><h2>3.
      Reboot Rails Server</h2><p><br></p><h2>4. access webpage</h2><p><span style=\"font-size:
      24px;\">you&#39;ll confirm alll third party work well !! COOL<span class=\"fr-emoticon
      fr-deletable fr-emoticon-img\" style=\"background: url(https://cdnjs.cloudflare.com/ajax/libs/emojione/2.0.1/assets/svg/1f60e.svg);\">&nbsp;
      &nbsp;</span>&nbsp;</span></p><p><br></p><p><span style=\"font-size: 24px;\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1564996673653-wysiwyg-rails2.9.png\"
      style=\"width: 629px;\" class=\"fr-fic fr-dib\"></span></p><h2><br></h2><h2><br></h2><h2><span
      style=\"font-size: 24px; color: rgb(163, 143, 132);\">For everyone, I&#39;ll
      share my&nbsp;</span>application.scss<span style=\"font-size: 24px; color: rgb(163,
      143, 132);\">&nbsp;and&nbsp;</span>application.js</h2><pre>(app/assets/stylesheets/application.scss)\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;font-awesome&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;froala_editor.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;froala_style.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/char_counter.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/code_view.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/colors.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/emoticons.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/file.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/fullscreen.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/help.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/image_manager.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/image.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/line_breaker.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/quick_insert.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/special_characters.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/table.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;plugins/video.min.css&#39;;\r\n\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;third_party/embedly.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;third_party/image_tui.min.css&#39;;\r\n<span
      style=\"color: rgb(184, 49, 47);\">@import</span> &#39;third_party/spell_checker.min.css&#39;;</pre><p><br></p><p>(app/assets/javascripts/application.js)</p><pre>//=
      require froala_editor.min.js\r\n//= require plugins/align.min.js\r\n//= require
      plugins/char_counter.min.js\r\n//= require plugins/code_beautifier.min.js\r\n//=
      require plugins/code_view.min.js\r\n//= require plugins/colors.min.js\r\n//=
      require plugins/emoticons.min.js\r\n//= require plugins/entities.min.js\r\n//=
      require plugins/file.min.js\r\n//= require plugins/font_family.min.js\r\n//=
      require plugins/font_size.min.js\r\n//= require plugins/fullscreen.min.js\r\n//=
      require plugins/help.min.js\r\n//= require plugins/image.min.js\r\n//= require
      plugins/image_manager.min.js\r\n//= require plugins/inline_style.min.js\r\n//=
      require plugins/line_breaker.min.js\r\n//= require plugins/link.min.js\r\n//=
      require plugins/lists.min.js\r\n//= require plugins/paragraph_format.min.js\r\n//=
      require plugins/paragraph_style.min.js\r\n//= require plugins/print.min.js\r\n//=
      require plugins/quick_insert.min.js\r\n//= require plugins/quote.min.js\r\n//=
      require plugins/save.min.js\r\n//= require plugins/table.min.js\r\n//= require
      plugins/special_characters.min.js\r\n//= require plugins/url.min.js\r\n//= require
      plugins/video.min.js\r\n//= require activestorage\r\n\r\n//= require third_party/spell_checker.min.js\r\n//=
      require third_party/font_awesome.min.js\r\n//= require third_party/embedly.min.js\r\n//=
      require third_party/image_tui.min.js\r\n\r\n//= require languages/ja.js</pre><p><br></p><p><br></p><p><span
      style=\"font-size: 30px;\">That&#39;s all for now!!</span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-08-05 18:19:03.921809'
    - '2019-08-05 19:10:25.380821'
  - - 192
    - 'Rails: Mathjax  is not reflected after page transition'
    - "<h1 style=\"text-align: center;\">Mathjax &nbsp;is not reflected after page
      transition</h1><p><br></p><h2>ENVIRONMENT</h2><hr><p>Rails 5.2</p><p>Ruby 2.4.2</p><p><br></p><h2
      data-placeholder=\"翻訳\" dir=\"ltr\"><span lang=\"en\" tabindex=\"0\">Cause</span></h2><hr><p>turbolinks
      stops loading data when page transition.</p><p><br></p><h2>Solution</h2><hr><h3>select
      favorite solution in two.</h3><p><br></p><h3>solution1. add Typeset script in
      view file</h3><p>every time to added view, MathJax will set again.</p><pre>&lt;script&gt;\r\n 
      MathJax.Hub.Typeset();\r\n&lt;/script&gt;</pre><p data-placeholder=\"翻訳\" dir=\"ltr\"><span
      lang=\"en\" tabindex=\"0\">There is no need to limit view.</span></p><p data-placeholder=\"翻訳\"
      dir=\"ltr\"><span lang=\"en\" tabindex=\"0\">application.js or post.coffee,
      application.html.erb is OK!</span></p><p data-placeholder=\"翻訳\" dir=\"ltr\"><br></p><p
      data-placeholder=\"翻訳\" dir=\"ltr\"><span lang=\"en\" tabindex=\"0\">I found
      this thanks to below nice resource!</span></p><p data-placeholder=\"翻訳\" dir=\"ltr\"><a
      href=\"https://stackoverflow.com/questions/19767982/rails-4-turbolinks-not-loading-mathjax/20783780#20783780\">https://stackoverflow.com/questions/19767982/rails-4-turbolinks-not-loading-mathjax/20783780#20783780</a></p><p
      data-placeholder=\"翻訳\" dir=\"ltr\"><br></p><p data-placeholder=\"翻訳\" dir=\"ltr\"><span
      lang=\"en\" tabindex=\"0\">if you do like below, MathJax is set every view.</span></p><p
      data-placeholder=\"翻訳\" dir=\"ltr\"><span lang=\"en\" tabindex=\"0\">(application.html.erb)</span></p><pre
      data-placeholder=\"翻訳\" dir=\"ltr\"><span lang=\"en\" tabindex=\"0\">&lt;body&gt;</span>\r\n<span
      lang=\"en\" tabindex=\"0\">  ...</span>\r\n<span lang=\"en\" tabindex=\"0\">&lt;/body&gt;</span>\r\n&lt;script&gt;\r\n 
      MathJax.Hub.Typeset();\r\n&lt;/script&gt;</pre><p><br></p><h3>solution2. add
      Queue script in coffee file</h3><pre>$(document).on &#39;turbolinks:load&#39;,
      -&gt; MathJax.Hub.Queue([&quot;Typeset&quot;, MathJax.Hub])</pre><p><br></p><h2
      data-placeholder=\"翻訳\" dir=\"ltr\"><span lang=\"en\" tabindex=\"0\">Summary</span></h2><hr><p><span
      style=\"font-size: 18px;\">Select efficiently solution for you.</span></p><p><span
      style=\"font-size: 18px;\">if you activate only one file, you don&#39;t need
      activate MathJax in every page.</span></p><p><span style=\"font-size: 18px;\">That&#39;s
      all for now!!</span></p><p><br></p><p><br></p><p><br></p>"
    - '2019-08-05 18:37:21.121255'
    - '2019-08-09 18:05:55.406202'
  - - 193
    - 'Mathjax: Write a formula'
    - "<h1 style=\"text-align: center;\">Mathjax: &nbsp;Write a formula</h1><p><br></p><p>DOCUMENT
      <a href=\"https://www.mathjax.org/\"></a></p><p><a href=\"https://www.mathjax.org/\"></a><a
      href=\"https://www.mathjax.org/\">https://www.mathjax.org/</a></p><p><br></p><p>When
      $$a \\ne 0$$, there are two solutions to \\(ax^2 + bx + c = 0\\) and they are
      $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$</p><p><br></p><p data-placeholder=\"翻訳\"
      dir=\"ltr\"><span lang=\"en\" tabindex=\"0\">If you use Mathjax, complex formulas
      can be expressed in their own Regex.</span></p><p><br></p><h2>1. Mathjaxの導入</h2><p>add
      below script in &lt;head&gt;&lt;/head&gt;</p><pre>&lt;script type=&quot;text/javascript&quot;
      async\r\n  src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML&quot;&gt;\r\n&lt;/script&gt;\r\n&lt;script
      type=&quot;text/x-mathjax-config&quot;&gt;\r\n MathJax.Hub.Config({\r\n tex2jax:
      {\r\n inlineMath: [[&quot;\\\\(&quot;,&quot;\\\\)&quot;] ],\r\n displayMath:
      [ [&#39;$$&#39;,&#39;$$&#39;], [&quot;\\\\[&quot;,&quot;\\\\]&quot;] ]\r\n }\r\n
      });\r\n&lt;/script&gt;</pre><p><br></p><p><br></p><h2>2. Let&#39;s use!</h2><p>in
      view, add some formula like</p><p><span class=\"mjx-chtml MJXc-display\" style=\"text-align:
      center;\"><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='<math xmlns=\"http://www.w3.org/1998/Math/MathML\"
      display=\"block\"><mi>x</mi><mo>=</mo><mrow class=\"MJX-TeXAtom-ORD\"><mfrac><mrow><mo>−</mo><mi>b</mi><mo>±</mo><msqrt><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></msqrt></mrow><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mrow><mo>.</mo></math>'
      id=\"MathJax-Element-3-Frame\" style=\"font-size: 116%; text-align: center;
      position: relative;\" tabindex=\"0\"><span class=\"MJX_Assistive_MathML MJX_Assistive_MathML_Block\">=&minus;b&plusmn;b2&minus;4ac</span></span></span></p><p><a
      href=\"https://jsbin.com/?html,output\"></a>democracy<a href=\"https://jsbin.com/?html,output​​​​\">&nbsp;https://jsbin.com/?html,output</a>&nbsp;</p><p><br></p><p><span
      style=\"font-size: 18px;\">my recommended site search formula regexp via this
      site</span></p><p><a class=\"fr-green\" href=\"http://if1.tech/g-mathjax\"><span
      style=\"font-size: 24px;\">http://if1.tech/g-mathjax</span></a><span style=\"font-size:
      18px;\"><br></span></p><p><br></p><pre>$$formula$$ # don&#39;t forget $$</pre><p><span
      style=\"font-size: 30px;\">That&#39;s all for now!!</span></p>"
    - '2019-08-05 20:36:04.326625'
    - '2019-08-13 17:52:22.981697'
  - - 194
    - 'scpコマンド: EC2仮想サーバーにアップロード・ダウンロード'
    - "<h1 style=\"text-align: center;\">scpを使ってEC2仮想サーバーのファイルをローカルにダンプ</h1><p><br></p><p><br></p><h2>SCPコマンド</h2><hr><p>ローカルからリモートにファイルをアップロードしたり、逆にリモートからローカルにダウンロードするときに使う。</p><p><br></p><h2>基本的な使い方</h2><hr><div
      data-lang=\"text\"><pre>scp [オプション][転送したいファイル名][転送先のパス]</pre><p><code>-r</code>オブションを使えばディレクトリを丸ごとアップロード・ダウンロードできる</p><p><br></p><h3>オプション</h3><table><tbody><tr><td>-C</td><td>通信を圧縮します。</td></tr><tr><td>-i
      秘密鍵ファイル</td><td>秘密鍵ファイル（identityファイル）を指定します。初期設定は、SSHバージョン1は、~/.ssh/identity、SSHバージョン2は、~/.ssh/id_rsa
      と ~/.ssh/id_dsa。</td></tr><tr><td>-P ポート番号</td><td>ポート番号を指定します。</td></tr><tr><td>-p</td><td>コピー元の更新時間とモードを維持します。</td></tr><tr><td>-r</td><td>ディレクトリ内を再帰的にコピーします。</td></tr><tr><td>-1</td><td>SSHのプロトコルバージョン1を使用します。</td></tr><tr><td>-2</td><td>SSHのプロトコルバージョン2を使用します。</td></tr><tr><td>-4</td><td>IPv4を使用します。</td></tr><tr><td>-6</td><td>IPv6を使用します。</td></tr></tbody></table><p><br></p><h2>EC2仮想サーバーにアップロード</h2><hr><pre>$
      scp -i [公開鍵のパス] [ローカルのアップロード元のパス] [ユーザー名]@[ドメイン]:[EC2のアップロード先のパス]\r\n       
                               100%  516KB   2.0MB/s   00:00</pre><p><br></p><p>例</p><pre>$
      scp -i ~/.ssh/AWS/dragonarrow_key_rsa ~/Desktop/dump.sql tatsuya@xx.xx.xx.xx:/var/www/html/MyApp/db/</pre><p><br></p><p><br></p><h2>EC2仮想サーバーからダウンロード</h2><hr><pre>$
      scp -i [公開鍵のパス] [ユーザー名]@[ドメイン]:[EC2のダウンロード元のパス] [ローカルのダウンロード先のパス]</pre><p><br></p><p>例</p><pre>$
      scp -i ~/.ssh/AWS/dragonarrow_key_rsa tatsuya@xx.xx.xx.xx:/var/www/html/MyApp/db/data.yml
      ~/Desktop</pre><p><br></p><p><br></p><p><span style=\"font-size: 30px;\">データベースのダンプファイルを転送するときにめちゃくちゃ使います。</span></p><p><span
      style=\"font-size: 30px;\">便利なので、ガンガン使っていこう！！</span></p><p><br></p></div>"
    - '2019-08-06 14:47:54.386068'
    - '2019-08-06 14:47:54.39727'
  - - 195
    - ゼロから作る Deep Learning 第6章
    - "<h1 style=\"text-align: center;\" title=\"Page 185\">ゼロから作る Deep Learning』第6章</h1><p
      style=\"text-align: center;\"><br></p><div title=\"Page 185\">&nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<h2
      style=\"text-align: left;\">&nbsp;パラメータの更新</h2><hr><p><br></p></div><div title=\"Page
      185\"><p style=\"text-align: left;\"><span style=\"font-size: 18px;\">損失関数の値をできるだけ小さくする最適なパラメータを見つけることを最適化</span></p><p
      style=\"text-align: left;\"><span style=\"font-size: 18px;\">前章まで使ってきた最適化の手法は確率的勾配降下法(stochastic
      gradient descent)――略して SGD</span></p><p style=\"text-align: left;\"><br></p><h2
      style=\"text-align: left;\">SGD</h2><hr><p style=\"text-align: left;\">式 $$W
      \\leftarrow W - &nbsp;&eta; \\frac{ &part;L }{ &part;W } $$<span class=\"mjx-chtml
      MJXc-display\" style=\"text-align: center;\"><span class=\"mjx-chtml MathJax_CHTML\"
      data-mathml='<math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><mi>W</mi><mo
      stretchy=\"false\">←</mo><mi>W</mi><mo>−</mo><mrow class=\"MJX-TeXAtom-ORD\"><mo>η</mo></mrow><mfrac><mrow><mrow
      class=\"MJX-TeXAtom-ORD\"><mo>∂</mo></mrow><mi>L</mi></mrow><mrow><mrow class=\"MJX-TeXAtom-ORD\"><mo>∂</mo></mrow><mi>W</mi></mrow></mfrac></math>'
      id=\"MathJax-Element-1-Frame\" style=\"font-size: 116%; text-align: center;
      position: relative;\" tabindex=\"0\"><span class=\"MJX_Assistive_MathML MJX_Assistive_MathML_Block\">W&larr;W&minus;&eta;&part;L&part;W</span></span></span></p><p><br></p><p><span
      style=\"font-size: 18px;\">更新する重みパラメータを W、W に関する損失関数の勾配を &part;L / &part;W</span></p><p
      style=\"text-align: left;\"><span style=\"font-size: 18px;\">ます。&eta; は学習係数を表し、実際には
      0.01 や 0.001 といった値を、前もって決めて使用</span></p><p style=\"text-align: left;\"><br></p><p
      style=\"text-align: left;\"><span style=\"font-size: 18px;\">pythonでの実装</span>&nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp;</p><pre>class SGD:\r\n    def __init__(self, lr=0.01):\r\n
      \     self.lr = lr                       \r\n\r\n    def update(self, params,
      grads):\r\n        for key in params.keys():\r\n          params[key] -= self.lr
      * grads[key]</pre>lrは学習率<p style=\"text-align: left;\">params[key] は W1, W2などパラメータごとの値</p><p
      style=\"text-align: left;\">grads[key] は W1, W2などパラメータごとの損失関数の微分 &nbsp; &nbsp;</p><h3><br></h3><h2>SGD
      の欠点</h2><hr><p><span style=\"font-size: 18px;\">SGDの欠点は<strong>関数の形状が等方的でないとパラメータの更新が非効率</strong></span></p><p><span
      style=\"font-size: 18px;\">例えば、</span></p><p><span style=\"font-size: 18px;\">式
      $$f(x, y) = &nbsp;\\frac{ 1 }{ 20 } x ^{ 2 } + &nbsp;y ^{ 2 } $$</span></p><p><br></p><p><span
      style=\"font-size: 18px;\">&nbsp;という関数があったとすると、勾配は<span tabindex=\"0\">x</span>軸方向が極端に小さく<span
      tabindex=\"0\">y</span>軸方向に大きくなり、パラメータの更新経路が<span tabindex=\"0\">y</span>軸方向にジグザグなり非効率な経路でパラメータを探索する。</span></p><p
      style=\"text-align: left;\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565080351888-inefficiency_sgd.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p style=\"text-align:
      left;\"><br></p><h2 style=\"text-align: left;\">以降SGDの欠点を改善した手法を見ていく</h2><h2>Momentum</h2><hr><p>数式では以下のように表されます。</p><p>式&nbsp;</p><p>$$v
      \\leftarrow &nbsp;&alpha;v - &eta;\\frac{ &part;L }{ &part;W } \\\\W \\leftarrow
      W + v$$</p><p><br></p><p>W は更新する重みパラメータ、 &part;L/&part;W は W に関する損失関の勾配、&eta;
      は学習係数を表し、</p><p>&nbsp;v は物理で言うところの「速度」に対応し、&alpha; は物理で言うところの「空気抵抗」に対応。(物体が何も力を受けないときに徐々に減速するための役割)</p><p><br></p><p><br></p><p><span
      style=\"font-size: 30px;\">筆者の考え方</span></p><h4><span style=\"font-size: 24px;
      background-color: rgb(250, 197, 28); color: rgb(255, 255, 255);\">・&alpha;=0
      の時 SGD&nbsp;</span></h4><p><span style=\"font-size: 18px; background-color:
      rgb(250, 197, 28); color: rgb(255, 255, 255);\">慣性力がない( &eta;(&part;L/&part;W)転がった時の勢いが残ってない)
      考え方</span></p><p><br></p><p><span style=\"font-size: 24px; background-color:
      rgb(235, 107, 86); color: rgb(255, 255, 255);\">・0&lt;&alpha;&lt;1 の時 Momentum&nbsp;</span></p><p><span
      style=\"font-size: 18px; background-color: rgb(235, 107, 86); color: rgb(255,
      255, 255);\">慣性力が残っている( &eta;(&part;L/&part;W)転がった時の勢いが、空気抵抗で弱まって&alpha;(&part;L/&part;W)
      残っている )</span></p><div title=\"Page 191\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<p>Momentum
      の実装(ソースコードは common/optimizer.py) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p></div><pre><span
      style=\"color: rgb(84, 172, 210);\">class</span> <span style=\"color: rgb(26,
      188, 156);\">Momentum</span>:\r\n\r\n\r\n    <span style=\"color: rgb(163, 143,
      132);\">&quot;&quot;&quot;Momentum SGD&quot;&quot;&quot;</span>\r\n\r\n\r\n 
        <span style=\"color: rgb(84, 172, 210);\">def</span> <span style=\"color:
      rgb(84, 172, 210);\">__init__</span>(self, lr=0.01, momentum=0.9):\r\n     
        self.lr = lr\r\n        self.momentum = momentum\r\n        self.v = None\r\n 
            \r\n    <span style=\"color: rgb(84, 172, 210);\">def</span> update(self,
      params, grads):\r\n        <span style=\"color: rgb(163, 143, 132);\"># vが空のとき、params配列と同じ形状の0だけで埋められた配列を作る</span>\r\n 
            if self.v is None:\r\n            self.v = {}\r\n            for key,
      val in params.<span style=\"color: rgb(84, 172, 210);\">items</span>():    
                                 \r\n                self.v[key] = np.<span style=\"color:
      rgb(84, 172, 210);\">zeros_like</span>(val)\r\n                \r\n        for
      key in params.keys():\r\n            self.v[key] = self.momentum*self.v[key]
      - self.lr*grads[key] \r\n            params[key] += self.v[key]</pre><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565344389810-momentum.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565346957744-roll.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>Momentumのイメージ:
      更新経路はボールがお椀を転がるような動きをします。</p><p><br></p><div title=\"Page 192\">&nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<h2>AdaGrad</h2><hr><p>ニューラルネットワークの学習係数では学習係数の値がかなり重要で、学習係数が小さすぎると学習に時間がかかりすぎてしまい、逆に大きすぎると発散して正しい学習が行えない。</p><p>そこで有効なのが<strong>学習係数を減衰</strong>させる方法。</p><p>この<strong>AdaGrad</strong>は学習が進むにつれて学習係数<span
      tabindex=\"0\">&eta;</span>を小さくする方法。</p><p>最初は&ldquo;大きく&rdquo;学習し、次第に&ldquo;小さく&rdquo;学習する</p><p>しかし無限に学習すると<span
      tabindex=\"0\">h</span>がかなり大きくなりパラメータの更新が行われなくなってしまう。</p><p><br></p><p>数式&nbsp;</p><p>$$h
      \\leftarrow &nbsp;h + \\frac{ &part;L }{ &part;W } ⊙ \\frac{ &part;L }{ &part;W
      } \\\\W \\leftarrow &nbsp;W - &eta; &nbsp;\\dfrac{ 1 }{ &nbsp;\\sqrt{ h } &nbsp;}
      &nbsp;\\frac{ &part;L }{ &part;W } $$</p><p><br></p><p><br></p><p>(&part;L/&part;W)
      と 1/&radic;h は反比例なので、パラメータが大きく更新されるほど学習率が小さくなり、更新量が大きな学習から小さな学習になっていく。</p></div><p><br></p><div
      title=\"Page 193\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<p>AdaGrad の実装(common/optimizer.py)</p></div><pre>class
      AdaGrad:\r\n\r\n\r\n    <span style=\"color: rgb(163, 143, 132);\">&quot;&quot;&quot;AdaGrad&quot;&quot;&quot;</span>\r\n\r\n\r\n 
        def __init__(self, lr=0.01):\r\n        self.lr = lr\r\n        self.h = None\r\n 
            \r\n    def update(self, params, grads):\r\n        if self.h is None:\r\n 
                self.h = {}\r\n            for key, val in params.items():\r\n   
                  self.h[key] = np.zeros_like(val)\r\n            \r\n        for
      key in params.keys():\r\n            self.h[key] += grads[key] * grads[key]\r\n 
                params[key] -= self.lr * grads[key] / (np.sqrt(self.h[key]) + 1e-7)</pre><p>1e-7を加算している意味は、分母が0になることを防ぐためです。</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565344220311-ada_grad.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><div title=\"Page
      194\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp;&nbsp;<p>最小値に向かって効率的に動いているのが分かります。y 軸方向へは勾配が大きいため、最初は大きく動きますが、その大きな動きに比例し
      て、更新のステップが小さくなるように調整が行われます。そのため、y 軸方向への 更新度合いは弱められていき、ジグザグの動きが軽減されます。</p></div><p><br></p><h2>RMSProp</h2><hr><p>AdaGradの無限に学習するとパラメータの更新が行われなくなるという問題を解決したのが<strong>RMSProp</strong></p><p>勾配の2乗の<strong>指数移動平均</strong>をとるようにパラメータが更新されていく。つまり過去のAdaGradのようにすべての勾配を均一に加算するのではなく、<strong>新しい勾配の情報が大きく反映されるよう</strong>に加算する。</p><p>過去の勾配情報に0.9を何回も掛けたものを足しているので徐々に古いものの影響は小さくなる。</p><p><br></p><pre>class
      RMSprop:\r\n\r\n\r\n    <span style=\"color: rgb(163, 143, 132);\">&quot;&quot;&quot;RMSprop&quot;&quot;&quot;</span>\r\n\r\n\r\n 
        def __init__(self, lr=0.01, decay_rate = 0.99):\r\n        self.lr = lr\r\n 
            self.decay_rate = decay_rate\r\n        self.h = None\r\n        \r\n 
        def update(self, params, grads):\r\n        if self.h is None:\r\n       
          self.h = {}\r\n            for key, val in params.items():\r\n         
            self.h[key] = np.zeros_like(val)\r\n            \r\n        for key in
      params.keys():\r\n            self.h[key] *= self.decay_rate\r\n           
      self.h[key] += (1 - self.decay_rate) * grads[key] * grads[key]\r\n         
        params[key] -= self.lr * grads[key] / (np.sqrt(self.h[key]) + 1e-7)</pre><p><br></p><h2>Adam</h2><hr><p>Momentum(お椀を転がる)とAdagrad(適応的に更新ステップを調整)の融合</p><p>もっともよく使われている最適化アルゴリズムである。</p><p>RMSprop
      の改良版であり，勾配に関しても以前の情報を指数的減衰させながら伝えることで，次元量の問題に対処している</p><p><br></p><p>式&nbsp;</p><p>$$初期値\\
      &eta;=0.001,\\beta _{ 1 }=0.9,\\beta _{ 2 }=0.999,\\ \\epsilon= 10 ^{ -8 } \\\\m
      _{ t }=\\beta _{ 1 }m_{ t-1 }\\ + (1-\\beta _{ 1 })g_{ t }\\\\v _{ t }=\\beta
      _{ 2 }v_{ t-1 }\\ + (1-\\beta _{ 2 })g_{ t }^{ 2 } \\\\\\hat{ {m _{ t }} }=\\frac{
      m _{ t } }{ 1-\\beta _{ 1 }^{ t } } \\\\\\hat{ {v _{ t }} }=\\frac{ v _{ t }
      }{ 1-\\beta _{ 2 }^{ t } } \\\\ \\theta _{ t+1 }= \\theta _{ t } - &nbsp;\\dfrac{
      &eta; }{ &nbsp;\\sqrt{ \\hat{ {v _{ t }} } &nbsp;}+ \\epsilon &nbsp; } \\hat{
      {m _{ t }} }\\\\ここで\\hat{ {m _{ t }} },\\hat{ {v _{ t }} }は勾配，二乗勾配の不偏推定量となるように調整したものである\\\\\\beta
      _{ 1 }は一次モーメント用の係数, \\beta _{ 2 }は二次モーメント用の係数$$</p><p><br></p><p><br></p><p>Adam
      の実装(common/optimizer.py)</p><pre>class Adam:\r\n\r\n\r\n    <span style=\"color:
      rgb(163, 143, 132);\">&quot;&quot;&quot;Adam (http://arxiv.org/abs/1412.6980v8)&quot;&quot;&quot;</span>\r\n\r\n\r\n 
        def __init__(self, lr=0.001, beta1=0.9, beta2=0.999):\r\n        <span style=\"color:
      rgb(243, 121, 52);\">self</span>.lr = lr\r\n        <span style=\"color: rgb(243,
      121, 52);\">self</span>.beta1 = beta1\r\n        <span style=\"color: rgb(243,
      121, 52);\">self</span>.beta2 = beta2\r\n        <span style=\"color: rgb(243,
      121, 52);\">self</span>.iter = 0\r\n        <span style=\"color: rgb(243, 121,
      52);\">self</span>.m = None\r\n        <span style=\"color: rgb(243, 121, 52);\">self</span>.v
      = None\r\n        \r\n    def update(self, params, grads):\r\n        if self.m
      is None:\r\n            self.m, self.v = {}, {}\r\n            for key, val
      in params.items():\r\n                self.m[key] = np.zeros_like(val)\r\n 
                    self.v[key] = np.zeros_like(val)\r\n        \r\n        self.iter
      += 1\r\n        lr_t  = self.lr * np.sqrt(1.0 - self.beta2**self.iter) / (1.0
      - self.beta1**self.iter)         \r\n        \r\n        for key in params.keys():\r\n 
                <span style=\"color: rgb(163, 143, 132);\">#self.m[key] = self.beta1*self.m[key]
      + (1-self.beta1)*grads[key]\r\n            #self.v[key] = self.beta2*self.v[key]
      + (1-self.beta2)*(grads[key]**2)</span>\r\n            <span style=\"color:
      rgb(243, 121, 52);\">self</span>.m[key] += (1 - self.beta1) * (grads[key] -
      self.m[key])\r\n            <span style=\"color: rgb(243, 121, 52);\">self</span>.v[key]
      += (1 - self.beta2) * (grads[key]**2 - self.v[key])\r\n            \r\n     
            params[key] -= lr_t * self.m[key] / (np.sqrt(self.v[key]) + 1e-7)\r\n 
                \r\n            <span style=\"color: rgb(163, 143, 132);\">#unbias_m
      += (1 - self.beta1) * (grads[key] - self.m[key]) # correct bias\r\n         
        #unbisa_b += (1 - self.beta2) * (grads[key]*grads[key] - self.v[key]) # correct
      bias\r\n            #params[key] += self.lr * unbias_m / (np.sqrt(unbisa_b)
      + 1e-7)</span></pre><p><br></p><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565351572761-adam.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><div title=\"Page
      196\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp;&nbsp;<p>この図だけを見ると AdaGrad が一番良さそうですが、これは解くべき問題に よって結果が変わるので注意が必要である。</p><p>ハイパーパ
      ラメータ(学習係数など)の設定値によっても結果が変わる</p><p><br></p></div><p><br></p><div title=\"Page
      196\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp;&nbsp;<h2>MNIST データセットによる更新手法の比較</h2><hr><div title=\"Page
      196\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp;&nbsp;<p>&nbsp;4 つの手法―― SGD、Momentum、 AdaGrad、Adam――の経路を比較</p></div><p>(ソースコードは
      ch06/optimizer_compare_naive.py)</p><pre>import sys, os\r\nsys.path.append(os.pardir)
       # 親ディレクトリのファイルをインポートするための設定\r\nimport numpy as np\r\nimport matplotlib.pyplot
      as plt\r\nfrom collections import OrderedDict\r\nfrom common.optimizer import
      *\r\n\r\ndef f(x, y):\r\n    return x**2 / 20.0 + y**2\r\n\r\ndef df(x, y):\r\n 
        return x / 10.0, 2.0*y\r\n\r\n<span style=\"color: rgb(243, 121, 52);\">init_pos</span>
      = (-7.0, 2.0)\r\nparams = {}\r\nparams[&#39;x&#39;], params[&#39;y&#39;] = <span
      style=\"color: rgb(243, 121, 52);\">init_pos</span>[0], <span style=\"color:
      rgb(243, 121, 52);\">init_pos</span>[1]\r\ngrads = {}\r\ngrads[&#39;x&#39;],
      grads[&#39;y&#39;] = 0, 0\r\n\r\n<span style=\"color: rgb(65, 168, 95);\">optimizers</span>
      = OrderedDict()\r\n<span style=\"color: rgb(65, 168, 95);\">optimizers</span>[&quot;SGD&quot;]
      = SGD(lr=0.95)\r\n<span style=\"color: rgb(65, 168, 95);\">optimizers</span>[&quot;Momentum&quot;]
      = Momentum(lr=0.1)\r\n<span style=\"color: rgb(65, 168, 95);\">optimizers</span>[&quot;AdaGrad&quot;]
      = AdaGrad(lr=1.5)\r\n<span style=\"color: rgb(65, 168, 95);\">optimizers</span>[&quot;Adam&quot;]
      = Adam(lr=0.3)\r\n\r\n<span style=\"color: rgb(250, 197, 28);\">idx</span> =
      1\r\nfor key in <span style=\"color: rgb(65, 168, 95);\">optimizers</span>:\r\n 
        <span style=\"color: rgb(26, 188, 156);\">optimizer</span> = <span style=\"color:
      rgb(65, 168, 95);\">optimizers</span>[key]\r\n    x_history = []\r\n    y_history
      = []\r\n    params[&#39;x&#39;], params[&#39;y&#39;] = <span style=\"color:
      rgb(243, 121, 52);\">init_pos</span>[0], <span style=\"color: rgb(243, 121,
      52);\">init_pos</span>[1]\r\n    \r\n    for i in range(30):\r\n        x_history.append(params[&#39;x&#39;])\r\n 
            y_history.append(params[&#39;y&#39;])\r\n        \r\n        grads[&#39;x&#39;],
      grads[&#39;y&#39;] = df(params[&#39;x&#39;], params[&#39;y&#39;])\r\n       
      <span style=\"color: rgb(26, 188, 156);\">optimizer</span>.update(params, grads)\r\n 
        \r\n    x = np.arange(-10, 10, 0.01)\r\n    y = np.arange(-5, 5, 0.01)\r\n 
        \r\n    X, Y = np.meshgrid(x, y) \r\n    Z = f(X, Y)\r\n    \r\n    <span
      style=\"color: rgb(163, 143, 132);\"># for simple contour line  </span>\r\n 
        mask = Z &gt; 7\r\n    Z[mask] = 0\r\n    \r\n    # plot \r\n    plt.subplot(2,
      2, <span style=\"color: rgb(250, 197, 28);\">idx</span>)\r\n    <span style=\"color:
      rgb(250, 197, 28);\">idx</span> += 1\r\n    plt.plot(x_history, y_history, &#39;o-&#39;,
      color=&quot;red&quot;)\r\n    plt.contour(X, Y, Z)\r\n    plt.ylim(-10, 10)\r\n 
        plt.xlim(-10, 10)\r\n    plt.plot(0, 0, &#39;+&#39;)\r\n    #colorbar()\r\n 
        #spring()\r\n    plt.title(key)\r\n    plt.xlabel(&quot;x&quot;)\r\n    plt.ylabel(&quot;y&quot;)\r\n 
        \r\nplt.show()</pre></div><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565351867284-optimizer_compare_naive.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><div title=\"Page
      196\"><p><br></p><p>学習の進み具合を比べる</p></div><p>(ソースコードは ch06/optimizer_compare_mnist.py)</p><pre>import
      os\r\nimport sys\r\nsys.path.append(os.pardir)  <span style=\"color: rgb(163,
      143, 132);\"># 親ディレクトリのファイルをインポートするための設定</span>\r\nimport matplotlib.pyplot
      as plt\r\nfrom dataset.mnist import load_mnist\r\nfrom common.util import smooth_curve\r\nfrom
      common.multi_layer_net import MultiLayerNet\r\nfrom common.optimizer import
      *\r\n\r\n<span style=\"color: rgb(163, 143, 132);\"># 0:MNISTデータの読み込み==========</span>\r\n(x_train,
      t_train), (x_test, t_test) = load_mnist(normalize=True)\r\n\r\ntrain_size =
      x_train.shape[0]\r\nbatch_size = 128\r\nmax_iterations = 2000\r\n\r\n<span style=\"color:
      rgb(163, 143, 132);\"># 1:実験の設定==========</span>\r\n<span style=\"color: rgb(65,
      168, 95);\">optimizers</span> = {}\r\n<span style=\"color: rgb(65, 168, 95);\">optimizers</span>[&#39;SGD&#39;]
      = SGD()\r\n<span style=\"color: rgb(65, 168, 95);\">optimizers</span>[&#39;Momentum&#39;]
      = Momentum()\r\n<span style=\"color: rgb(65, 168, 95);\">optimizers</span>[&#39;AdaGrad&#39;]
      = AdaGrad()\r\n<span style=\"color: rgb(65, 168, 95);\">optimizers</span>[&#39;Adam&#39;]
      = Adam()\r\n<span style=\"color: rgb(163, 143, 132);\">#optimizers[&#39;RMSprop&#39;]
      = RMSprop()</span>\r\n\r\n<span style=\"color: rgb(41, 105, 176);\">networks</span>
      = {}\r\ntrain_loss = {}\r\nfor key in optimizers.keys():\r\n    <span style=\"color:
      rgb(41, 105, 176);\">networks</span>[key] = MultiLayerNet(\r\n        input_size=784,
      hidden_size_list=[100, 100, 100, 100],\r\n        output_size=10)\r\n    train_loss[key]
      = []    \r\n\r\n<span style=\"color: rgb(163, 143, 132);\"># 2:訓練の開始==========</span>\r\nfor
      i in range(max_iterations):\r\n    batch_mask = np.random.choice(train_size,
      batch_size)\r\n    x_batch = x_train[batch_mask]\r\n    t_batch = t_train[batch_mask]\r\n 
        \r\n    for key in <span style=\"color: rgb(65, 168, 95);\">optimizers</span>.keys():\r\n 
            grads = <span style=\"color: rgb(41, 105, 176);\">networks</span>[key].gradient(x_batch,
      t_batch)\r\n        <span style=\"color: rgb(65, 168, 95);\">optimizers</span>[key].update(<span
      style=\"color: rgb(41, 105, 176);\">networks</span>[key].params, grads)\r\n 
        \r\n        loss = <span style=\"color: rgb(41, 105, 176);\">networks</span>[key].loss(x_batch,
      t_batch)\r\n        train_loss[key].append(loss)\r\n    \r\n    if i % 100 ==
      0:\r\n        print( &quot;===========&quot; + &quot;iteration:&quot; + str(i)
      + &quot;===========&quot;)\r\n        for key in <span style=\"color: rgb(65,
      168, 95);\">optimizers</span>.keys():\r\n            loss = <span style=\"color:
      rgb(41, 105, 176);\">networks</span>[key].loss(x_batch, t_batch)\r\n       
          print(key + &quot;:&quot; + str(loss))\r\n\r\n<span style=\"color: rgb(163,
      143, 132);\"># 3.グラフの描画==========</span>\r\nmarkers = {&quot;SGD&quot;: &quot;o&quot;,
      &quot;Momentum&quot;: &quot;x&quot;, &quot;AdaGrad&quot;: &quot;s&quot;, &quot;Adam&quot;:
      &quot;D&quot;}\r\nx = np.arange(max_iterations)\r\nfor key in <span style=\"color:
      rgb(65, 168, 95);\">optimizers</span>.keys():\r\n    plt.plot(x, smooth_curve(train_loss[key]),
      marker=markers[key], markevery=100, label=key)\r\nplt.xlabel(&quot;iterations&quot;)\r\nplt.ylabel(&quot;loss&quot;)\r\nplt.ylim(0,
      1)\r\nplt.legend()\r\nplt.show()</pre><p><br></p><p><br></p><p><br></p><p><br></p><div
      title=\"Page 197\"><p>5 層のニューラルネットワーク、各層100 個のニューロンを持つネットワーク、活性化関数はReLU を使用</p></div><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565353584366-optimizer_compare_mnist.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><div title=\"Page
      197\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp;&nbsp;<p>上図より、SGD よりも他の手法が速く学習できていることが分かる。</p><p>中でも、
      AdaGrad の学習が少しだけ速く行われている。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p><p>実験の注意点: 学習係数のハイパーパラメータや、ニューラルネットワークの構造(何層の深さ
      か、など)によって結果は変化する。</p><div title=\"Page 197\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<p><span style=\"font-family:
      Impact, Charcoal, sans-serif; font-size: 24px;\">ただし、<span style=\"color: rgb(184,
      49, 47);\"><u>一般に SGD よりも他 の 3 つの手法のほうが速く学習でき、時には最終的な認識性能も高くなる。</u></span></span></p><p><br></p><div
      title=\"Page 197\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<h2>重みの初期値</h2><hr><p>重みの初期値の設定で学習の成否が別れることは実際によくある。</p><p>推奨される重みの初期値について説明し、実験によって実際にニューラルネットワークの学習が速やかに行われることを確認する。</p><p><br></p><h3>・重みの初期値を均一にした時の問題点(0も含む)</h3><p>誤差逆伝播法によって、全ての重みの値が均一に更新されてしまい、たくさんの重みを持つ意味がなくなってしまう。</p><p><br></p><p>ここでは<span
      style=\"color: rgb(184, 49, 47);\"><u><span style=\"font-size: 30px;\">対称性を破ることが不可欠</span></u></span>であり、パフォーマンスの理由ではありません。</p><p>多層パーセプトロン（入力層と隠れ層）の最初の2つの層を想像してください。</p><p>順方向伝搬中、隠れ層のユニットは、入力の合計に対応する重みを掛け合わせます。</p><p>今度は、すべての重みを同じ値（0または1など）に初期化するとします。この場合、各隠れユニットは全く同じ信号を得るでしょう。</p><p>すべての重みが1に初期化されると、各ユニットは全て、入力の合計に等しい信号を得る(xの総和)。</p><p>すべての重みがゼロである場合、それはさらに悪化し、すべての隠れ層のユニットはゼロ信号を得る。</p><p><span
      style=\"font-size: 30px; color: rgb(184, 49, 47);\">入力が何であっても、すべての重みが同じであれば、隠れ層のすべてのユニットも同じになります。</span></p><div
      title=\"Page 199\"><u>出力値も重みも同じだと,重みの更新量も同じになり、正しい学習ができない。 &nbsp;&nbsp;</u>&nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<p>重みの対称的な構造を崩す――ために、ランダムな初期値が必要なのです。</p></div><p><br></p><p><br></p><h3><u>・過学習を抑え、汎化性能を高めるテクニック、Weight
      decay（荷重減衰）</u></h3><p>Weight decay：重みパラメータの値を小さくするように学習を行うことを目的とした手法。</p><p>重みの値を小さくすることで、過学習が起きにくくなる。</p><p>実際、これまでの重みの初期値、0.01
      * np.random.randn(10, 100)だった。<br>（標準偏差が0.01のガウス分布）</p><p><br></p><h3>重みの初期値のベストプラクティス</h3><p>結論を先に述べると以下になる</p><ul><li>活性化関数にReLUを使う場合は「Heの初期値」</li><li>sigmoidやtanhなどのS字カーブの時は「Xavierの初期値」</li></ul><p><br></p><p>前層のノードの個数がnの際に</p><p>$$Xavierの初期値：標準偏差が
      \\dfrac{ 1 }{ &nbsp;\\sqrt{ n } &nbsp;} の標準偏差を持つガウス分布$$</p><p>$$Heの初期値：標準偏差が\\dfrac{
      2 }{ &nbsp;\\sqrt{ n } &nbsp;}の標準偏差を持つガウス分布$$</p><p><br></p><p><br></p><p><br></p><h2>隠れ層のアクティベーション分布（活性化関数の後の出力データ）</h2><hr><div
      title=\"Page 199\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<p><span style=\"font-size: 18px;\">重みの初期値によって隠れ層のアクティベーションがどのように変化するかを調べる。</span></p><p><br></p><h3>①.
      重みの初期値: 標準偏差が 1 のガウス分布</h3><p>5 つの層があり、それぞれの層は 100 個のニューロンを持つものとする(活性化関数にシグモイド関数を使用)</p><p><br></p><p>(ch06/weight_init_activation_
      histogram.py)</p><pre>import numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\ndef
      sigmoid(x):\r\n    return 1 / (1 + np.exp(-x))\r\n\r\ndef ReLU(x):\r\n    return
      np.maximum(0, x)\r\n\r\ndef tanh(x):\r\n    return np.tanh(x)\r\n    \r\ninput_data
      = np.random.randn(1000, 100)  <span style=\"color: rgb(163, 143, 132);\"># 1000個のデータ</span>\r\nnode_num
      = 100  <span style=\"color: rgb(163, 143, 132);\"># 各隠れ層のノード（ニューロン）の数</span>\r\nhidden_layer_size
      = 5  <span style=\"color: rgb(163, 143, 132);\"># 隠れ層が5層</span>\r\nactivations
      = {}  <span style=\"color: rgb(163, 143, 132);\"># ここにアクティベーション(活性化関数の後の出力データ)の結果を格納する</span>\r\n\r\nx
      = input_data\r\n\r\nfor i in range(hidden_layer_size):\r\n    if i != 0:\r\n 
            x = activations[i-1]\r\n\r\n    <span style=\"color: rgb(163, 143, 132);\">#
      初期値の値をいろいろ変えて実験しよう！</span>\r\n    w = np.random.randn(node_num, node_num) *
      1\r\n    <span style=\"color: rgb(163, 143, 132);\"># w = np.random.randn(node_num,
      node_num) * 0.01\r\n    # w = np.random.randn(node_num, node_num) * np.sqrt(1.0
      / node_num)\r\n    # w = np.random.randn(node_num, node_num) * np.sqrt(2.0 /
      node_num)</span>\r\n\r\n    a = np.dot(x, w)\r\n\r\n    <span style=\"color:
      rgb(163, 143, 132);\"># 活性化関数の種類も変えて実験しよう！</span>\r\n    z = sigmoid(a)\r\n 
        <span style=\"color: rgb(163, 143, 132);\"># z = ReLU(a)\r\n    # z = tanh(a)</span>\r\n\r\n 
        activations[i] = z\r\n\r\n<span style=\"color: rgb(163, 143, 132);\"># ヒストグラムを描画</span>\r\nfor
      i, a in activations.items():\r\n    plt.subplot(1, len(activations), i+1)\r\n 
        plt.title(str(i+1) + &quot;-layer&quot;)\r\n    if i != 0: plt.yticks([],
      [])\r\n    <span style=\"color: rgb(163, 143, 132);\"># plt.xlim(0.1, 1)\r\n
      \   # plt.ylim(0, 7000)</span>\r\n    plt.hist(a.flatten(), 30, range=(0,1))\r\nplt.show()</pre><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565421835231-weight_init_activation_histogram.png\"><span
      class=\"fr-inner\">重みの初期値として標準偏差 1 のガウス分布を用いたときの、各層のアクティベーション の分布</span></span></span></p><div
      title=\"Page 201\"><p><br></p><p><span style=\"font-size: 18px;\"><u>各層のアクティベーションは
      0 と 1 に偏った分布になっている。</u></span></p><p><span style=\"font-size: 18px;\">-&gt;
      0 と 1 に偏ったデータ分布では、逆伝播 での勾配の値がどんどん小さくなって消えてしまう。</span></p><p><span style=\"color:
      rgb(184, 49, 47); font-size: 30px;\"><u>勾配消失</u>(gradient vanishing)</span><span
      style=\"font-size: 30px;\">が起きる</span></p><p><br></p></div><div title=\"Page
      200\"><h3>②. 重みの初期値: 標準偏差が 0.01</h3><pre># w = np.random.randn(node_num, node_num)
      * 1\r\nw = np.random.randn(node_num, node_num) * 0.01</pre><p><br></p><p><br></p></div><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565422540091-weight_init_activation_histogram_2.png\"><span
      class=\"fr-inner\"></span></span></span></p><div title=\"Page 201\">重みの初期値として標準偏差
      0.01 のガウス分布を用いたときの、各層のアクティベーションの分布</div><p><br></p><p><br></p><p><u><span
      style=\"font-size: 18px;\">各層のアクティベーションは0.5付近に集中する分布になっている。</span></u></p><p>0と1の偏りがないため、勾配消失の問題が起きないが...</p><p><br></p><p><span
      style=\"font-size: 18px;\">アクティベーションに偏りがある</span></p><p><span style=\"font-size:
      18px;\">-&gt; ほとんど同じ値を出力するとすれば、複数のニューロンが存在する意味がなくなってしまう。</span></p><p><span
      style=\"color: rgb(184, 49, 47); font-size: 30px;\"><u>「表現力が制限される」</u></span></p></div><p><br></p><h3>③.
      重みの初期値: 「Xavierの初期値」</h3><p><br></p><p><span class=\"fr-img-caption fr-fic fr-dib
      fr-fil\" style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565425878481-Xavier.png\"><span
      class=\"fr-inner\"></span></span></span></p><div title=\"Page 202\">&nbsp;Xavier
      の初期値:前層から n 個のノードの接続がある場合、1/&radic;n の標準偏差を持つ分布を初期値として使う。</div><div title=\"Page
      202\"><br></div><div title=\"Page 202\"><br></div><div title=\"Page 202\"><br></div><div
      title=\"Page 202\">重みの初期設定を書き換えるだけ &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<pre>node_num
      = 100 # 前層のノードの数\r\nw = np.random.randn(node_num, node_num) / np.sqrt(node_num)</pre><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565426236540-weight_init_activation_histogram3.png\"><span
      class=\"fr-inner\"></span></span></span></p><div title=\"Page 203\">重みの初期値として「Xavier
      の初期値」を用いたときの、各層のアクティベーションの分布</div><p><br></p><p><br></p><p><span style=\"font-size:
      18px;\">これまでよりも、広がりを持った分布になる</span></p><p><span style=\"font-size: 18px;\">-&gt;
      効率的に学習が行える</span></p><div title=\"Page 203\"><br></div><div title=\"Page 203\"><br></div><div
      title=\"Page 203\"><h2>ReLU の場合の重みの初期値</h2><span style=\"font-size: 18px;\"><hr><p>「Xavier
      の初期値」は、活性化関数が線形であることを前提に導いた結果。</p><p>sigmoid 関数や tanh 関数は左右対称で中央付近が線形関数として見なせるので、
      「Xavier の初期値」が適している。</p></span><p><span style=\"font-size: 18px;\">一方、ReLU
      を用いる場合は、ReLU に特化した初期値を用いることが推奨されている。</span></p><p><br></p><p><span style=\"font-size:
      18px;\"><span class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565429240851-relu_std_min.png\"
      style=\"width: 600px;\"><span class=\"fr-inner\"><span contenteditable=\"false\"
      draggable=\"false\"><span contenteditable=\"true\">標準偏差が0.01のガウス分布を重みの初期値とした場合</span></span></span></span></span></span></p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565429349196-Relu_Xavier.png\"
      style=\"width: 600px;\"><span class=\"fr-inner\"><span contenteditable=\"false\"
      draggable=\"false\"><span contenteditable=\"true\">「Xavierの初期値」の場合</span></span></span></span></span></p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565429387227-Relu_He.png\"
      style=\"width: 600px;\"><span class=\"fr-inner\"><span contenteditable=\"false\"
      draggable=\"false\"><span contenteditable=\"true\">「Heの初期値」の場合</span></span><br><br></span></span></span></p><div
      title=\"Page 204\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<h2>・MNIST データセットによる重み初期値の比較</h2><div title=\"Page
      204\"><p>重みの初期値の与え方の違いによって、ニューラルネッ トワークの学習にどれだけ影響を与えるか見てみる</p><p><br></p><p>(ch06/wight_init_compare.py)</p></div><pre>#
      coding: utf-8\r\nimport os\r\nimport sys\r\n\r\n\r\nsys.path.append(os.pardir)
       # 親ディレクトリのファイルをインポートするための設定\r\nimport numpy as np\r\nimport matplotlib.pyplot
      as plt\r\nfrom dataset.mnist import load_mnist\r\nfrom common.util import smooth_curve\r\nfrom
      common.multi_layer_net import MultiLayerNet\r\nfrom common.optimizer import
      SGD\r\n\r\n\r\n\r\n\r\n# 0:MNISTデータの読み込み==========\r\n(x_train, t_train), (x_test,
      t_test) = load_mnist(normalize=True)\r\n\r\n\r\ntrain_size = x_train.shape[0]\r\nbatch_size
      = 128\r\nmax_iterations = 2000\r\n\r\n\r\n\r\n\r\n# 1:実験の設定==========\r\nweight_init_types
      = {&#39;std=0.01&#39;: 0.01, &#39;Xavier&#39;: &#39;sigmoid&#39;, &#39;He&#39;:
      &#39;relu&#39;}\r\noptimizer = SGD(lr=0.01)\r\n\r\n\r\nnetworks = {}\r\ntrain_loss
      = {}\r\nfor key, weight_type in weight_init_types.items():\r\n    networks[key]
      = MultiLayerNet(input_size=784, hidden_size_list=[100, 100, 100, 100],\r\n 
                                      output_size=10, weight_init_std=weight_type)\r\n 
        train_loss[key] = []\r\n\r\n\r\n\r\n\r\n# 2:訓練の開始==========\r\nfor i in range(max_iterations):\r\n 
        batch_mask = np.random.choice(train_size, batch_size)\r\n    x_batch = x_train[batch_mask]\r\n 
        t_batch = t_train[batch_mask]\r\n    \r\n    for key in weight_init_types.keys():\r\n 
            grads = networks[key].gradient(x_batch, t_batch)\r\n        optimizer.update(networks[key].params,
      grads)\r\n    \r\n        loss = networks[key].loss(x_batch, t_batch)\r\n   
          train_loss[key].append(loss)\r\n    \r\n    if i % 100 == 0:\r\n       
      print(&quot;===========&quot; + &quot;iteration:&quot; + str(i) + &quot;===========&quot;)\r\n 
            for key in weight_init_types.keys():\r\n            loss = networks[key].loss(x_batch,
      t_batch)\r\n            print(key + &quot;:&quot; + str(loss))\r\n\r\n\r\n\r\n\r\n#
      3.グラフの描画==========\r\nmarkers = {&#39;std=0.01&#39;: &#39;o&#39;, &#39;Xavier&#39;:
      &#39;s&#39;, &#39;He&#39;: &#39;D&#39;}\r\nx = np.arange(max_iterations)\r\nfor
      key in weight_init_types.keys():\r\n    plt.plot(x, smooth_curve(train_loss[key]),
      marker=markers[key], markevery=100, label=key)\r\nplt.xlabel(&quot;iterations&quot;)\r\nplt.ylabel(&quot;loss&quot;)\r\nplt.ylim(0,
      2.5)\r\nplt.legend()\r\nplt.show()</pre><p><span class=\"fr-img-caption fr-fic
      fr-dib fr-fil\" style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565428900966-He_Xavier_Std.png\"><span
      class=\"fr-inner\">MNIST テータセットに対する「重みの初期値」による比較:横軸は学習の繰り返し回数 (iterations)、縦軸は損失関数の値(loss)</span></span></span></p><p><br></p><p>5
      層のニューラルネットワーク(各層 100 個のニューロン)で、活性化関数として ReLU を使用</p><p><br></p><p>「std=0.01」の場合はほとんど学習が進んでいおらず</p><p>He、Xavierの際にはサクサク学習が進んでいる</p><p>そして、「He
      の初期値」のほうが、学習の進みが速い</p><p><span style=\"color: rgb(184, 49, 47);\"><u><span
      style=\"font-size: 24px;\">&rarr;初期値の問題はとても重要ということがわかる</span></u></span></p><p><br></p><h2>Batch
      Normalization</h2><hr><p><span style=\"font-size: 14px;\">各層のアクティベーションの分布が適度な広がりを持つように&rdquo;強制的&rdquo;にアクティベーションの調整を行う</span></p><p><br></p><p>Batch
      Normalizationの利点</p><ul><li>学習を早く進行させることができる（学習係数を大きくすることができる）</li><li>初期値にそれほど依存しない（初期値に対してそこまで神経質にならなくて良い）</li><li>過学習を抑制する（Dropoutなどの必要性を減らす）</li></ul></div><p>&nbsp;</p><h3>Batch
      Normalizationアルゴリズム</h3><h3><span style=\"font-size: 14px;\">各層のアクティベーションの分布が適度な広がりを持つように調整する<br>&rarr;つまりデータ分布の正規化(平均が0、分散が1の分布）を行うレイヤをニューラルネットワークに挿入する</span></h3><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565430367065-BatchNorm.png\"><span
      class=\"fr-inner\">Batch Normalization を使用したニューラルネットワークの例(Batch Norm レイヤは背景
      をオレンジで描画)</span></span></span></p><p>さらにBath Normレイヤは、この正規化されたデータに対して、固有のスケールとシフトで変換を行います。<br>&gamma;、&beta;はパラメータで、最初は&gamma;=1、&beta;=0からスタートして、学習によって適した値に調整されていきます。</p><p><br></p><h3><br>Batch
      Normalizationの評価</h3><hr><p>Batch Norm レイヤを使って、実験する。</p><p>ソースコードは、ch06/batch_norm_test.py)</p><pre>import
      sys, os\r\nsys.path.append(os.pardir)  # 親ディレクトリのファイルをインポートするための設定\r\nimport
      numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom dataset.mnist import
      load_mnist\r\nfrom common.multi_layer_net_extend import MultiLayerNetExtend\r\nfrom
      common.optimizer import SGD, Adam\r\n\r\n(x_train, t_train), (x_test, t_test)
      = load_mnist(normalize=True)\r\n\r\n# 学習データを削減\r\nx_train = x_train[:1000]\r\nt_train
      = t_train[:1000]\r\n\r\nmax_epochs = 20\r\ntrain_size = x_train.shape[0]\r\nbatch_size
      = 100\r\nlearning_rate = 0.01\r\n\r\ndef __train(weight_init_std):\r\n    bn_network
      = MultiLayerNetExtend(input_size=784, hidden_size_list=[100, 100, 100, 100,
      100], output_size=10, \r\n                                    weight_init_std=weight_init_std,
      use_batchnorm=True)\r\n    network = MultiLayerNetExtend(input_size=784, hidden_size_list=[100,
      100, 100, 100, 100], output_size=10,\r\n                                weight_init_std=weight_init_std)\r\n 
        optimizer = SGD(lr=learning_rate)\r\n    \r\n    train_acc_list = []\r\n 
        bn_train_acc_list = []\r\n    \r\n    iter_per_epoch = max(train_size / batch_size,
      1)\r\n    epoch_cnt = 0\r\n    \r\n    for i in range(1000000000):\r\n     
        batch_mask = np.random.choice(train_size, batch_size)\r\n        x_batch =
      x_train[batch_mask]\r\n        t_batch = t_train[batch_mask]\r\n    \r\n   
          for _network in (bn_network, network):\r\n            grads = _network.gradient(x_batch,
      t_batch)\r\n            optimizer.update(_network.params, grads)\r\n    \r\n 
            if i % iter_per_epoch == 0:\r\n            train_acc = network.accuracy(x_train,
      t_train)\r\n            bn_train_acc = bn_network.accuracy(x_train, t_train)\r\n 
                train_acc_list.append(train_acc)\r\n            bn_train_acc_list.append(bn_train_acc)\r\n 
        \r\n            print(&quot;epoch:&quot; + str(epoch_cnt) + &quot; | &quot;
      + str(train_acc) + &quot; - &quot; + str(bn_train_acc))\r\n    \r\n         
        epoch_cnt += 1\r\n            if epoch_cnt &gt;= max_epochs:\r\n         
            break\r\n                \r\n    return train_acc_list, bn_train_acc_list\r\n\r\n#
      3.グラフの描画==========\r\nweight_scale_list = np.logspace(0, -4, num=16)\r\nx =
      np.arange(max_epochs)\r\n\r\nfor i, w in enumerate(weight_scale_list):\r\n 
        print( &quot;============== &quot; + str(i+1) + &quot;/16&quot; + &quot; ==============&quot;)\r\n 
        train_acc_list, bn_train_acc_list = __train(w)\r\n    \r\n    plt.subplot(4,4,i+1)\r\n 
        plt.title(&quot;W:&quot; + str(w))\r\n    if i == 15:\r\n        plt.plot(x,
      bn_train_acc_list, label=&#39;Batch Normalization&#39;, markevery=2)\r\n   
          plt.plot(x, train_acc_list, linestyle = &quot;--&quot;, label=&#39;Normal(without
      BatchNorm)&#39;, markevery=2)\r\n    else:\r\n        plt.plot(x, bn_train_acc_list,
      markevery=2)\r\n        plt.plot(x, train_acc_list, linestyle=&quot;--&quot;,
      markevery=2)\r\n\r\n    plt.ylim(0, 1.0)\r\n    if i % 4:\r\n        plt.yticks([])\r\n 
        else:\r\n        plt.ylabel(&quot;accuracy&quot;)\r\n    if i &lt; 12:\r\n 
            plt.xticks([])\r\n    else:\r\n        plt.xlabel(&quot;epochs&quot;)\r\n 
        plt.legend(loc=&#39;lower right&#39;)\r\n    \r\nplt.show()</pre><p><br></p><p>重みの初期値の標準偏差をさまざまな値に変えたときの学習経過のグラフを描画。</p><p>ほとんどすべてのケースで、Batch
      Norm を使用したほうが学習の進みが速い。</p><p>Batch Norm を用いない場合は、良い初期値のスケールを与えないと、まったく学習が進まない。</p><p>Batch
      Norm を使用することで、学習の進行を促進させる ことができ、また、重みの初期値にロバストになります(「初期値にロバスト」とは、 初期値にそれほど依存しない、ということを表します)</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565585180030-batch_norm_test.png\"><span
      class=\"fr-inner\">グラフの実線が Batch Norm を使用した場合の結果、点線が Batch Norm を使用しなかった
      場合の結果:図のタイトルに重みの初期値の標準偏差を表記する</span></span></span></p><p><br></p><h2>正則化</h2><hr><h3>過学習</h3><h3><span
      style=\"font-size: 14px;\">訓練データだけに適応しすぎてしまい、訓練データに含まれない他のデータに対応できない状態</span></h3><p><br></p><p><span
      style=\"font-size: 18px;\">過学習が起きる原因</span></p><ul><li><span style=\"font-size:
      18px;\">パラメータを大量に持ち、表現力の高いモデルである事(あまりに厳密な予測モデルになってしまう)</span></li><li><span
      style=\"font-size: 18px;\">訓練データが少ない事(幅広いパターンに対応できない)</span></li></ul><p><br></p><p>過学習をわざと発生させる(該当ファイルは
      ch06/overfit_weight_ decay.py)</p><pre>import os\r\nimport sys\r\nsys.path.append(os.pardir)
       # 親ディレクトリのファイルをインポートするための設定\r\nimport numpy as np\r\nimport matplotlib.pyplot
      as plt\r\nfrom dataset.mnist import load_mnist\r\nfrom common.multi_layer_net
      import MultiLayerNet\r\nfrom common.optimizer import SGD\r\n\r\n(x_train, t_train),
      (x_test, t_test) = load_mnist(normalize=True)\r\n\r\n# 過学習を再現するために、学習データを削減\r\nx_train
      = x_train[:300]\r\nt_train = t_train[:300]\r\n\r\n# weight decay（荷重減衰）の設定 =======================\r\n<span
      style=\"color: rgb(184, 49, 47);\"><u>weight_decay_lambda = 0</u></span> <span
      style=\"color: rgb(163, 143, 132);\"># weight decayを使用しない場合</span>\r\n<span
      style=\"color: rgb(163, 143, 132);\">#weight_decay_lambda = 0.1</span>\r\n#
      ====================================================\r\n\r\nnetwork = MultiLayerNet(input_size=784,
      hidden_size_list=[100, 100, 100, 100, 100, 100], output_size=10,\r\n       
                      weight_decay_lambda=weight_decay_lambda)\r\noptimizer = SGD(lr=0.01)\r\n\r\nmax_epochs
      = 201\r\ntrain_size = x_train.shape[0]\r\nbatch_size = 100\r\n\r\ntrain_loss_list
      = []\r\ntrain_acc_list = []\r\ntest_acc_list = []\r\n\r\niter_per_epoch = max(train_size
      / batch_size, 1)\r\nepoch_cnt = 0\r\n\r\nfor i in range(1000000000):\r\n   
      batch_mask = np.random.choice(train_size, batch_size)\r\n    x_batch = x_train[batch_mask]\r\n 
        t_batch = t_train[batch_mask]\r\n\r\n    grads = network.gradient(x_batch,
      t_batch)\r\n    optimizer.update(network.params, grads)\r\n\r\n    if i % iter_per_epoch
      == 0:\r\n        train_acc = network.accuracy(x_train, t_train)\r\n        test_acc
      = network.accuracy(x_test, t_test)\r\n        train_acc_list.append(train_acc)\r\n 
            test_acc_list.append(test_acc)\r\n\r\n        print(&quot;epoch:&quot;
      + str(epoch_cnt) + &quot;, train acc:&quot; + str(train_acc) + &quot;, test
      acc:&quot; + str(test_acc))\r\n\r\n        epoch_cnt += 1\r\n        if epoch_cnt
      &gt;= max_epochs:\r\n            break\r\n\r\n# 3.グラフの描画==========\r\nmarkers
      = {&#39;train&#39;: &#39;o&#39;, &#39;test&#39;: &#39;s&#39;}\r\nx = np.arange(max_epochs)\r\nplt.plot(x,
      train_acc_list, marker=&#39;o&#39;, label=&#39;train&#39;, markevery=10)\r\nplt.plot(x,
      test_acc_list, marker=&#39;s&#39;, label=&#39;test&#39;, markevery=10)\r\nplt.xlabel(&quot;epochs&quot;)\r\nplt.ylabel(&quot;accuracy&quot;)\r\nplt.ylim(0,
      1.0)\r\nplt.legend(loc=&#39;lower right&#39;)\r\nplt.show()</pre><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565589256377-+over-learning.png\"><span
      class=\"fr-inner\">訓練データ(train)とテストデータ(test)の認識精度の推移</span></span></span></p><p>訓練データを用いて計測した認識精度は、100
      エポックを過ぎたあたりから、ほとんど 100% です。しかし、テストデータに対しては100% の認識精度からは大きな隔たりがあります。このような認識精度の大きな隔たりは、訓練データだけに適応しすぎてしまった結果です。</p><p><br></p><h3>Weight
      decay</h3><hr><p>Weight decay:荷重減衰</p><p>重みの２重ノルム（L２ノルム）を損失関数に加算してあげれば、重みが大きくなる事を抑えられる(過学習を抑制する)</p><p>重みWとすれば、L２ノルムのWeight
      decayは <span style=\"font-size: 18px;\"><u>1/2 &lambda;W</u></span><sup><span
      style=\"font-size: 18px;\"><u>2</u></span></sup></p><p><span style=\"font-size:
      14px;\">(&lambda;は正則化の強さをコントロールするハイパーパラメータ、大きくするほど大きな重みへのペナルティを課す)</span></p><p><br></p><p>L2ノルム</p><p>式&nbsp;</p><p>$$
      \\sqrt{ w _{ 1 } ^{ 2 } + w _{ 2 } ^{ 2 } + ... + w _{ n } ^{ 2 } } $$</p><p><br></p><p><br></p><p>L１ノルム</p><p>式</p><p>$$|
      &nbsp;w _{ 1 } &nbsp;| + | &nbsp;w _{ 2 } &nbsp;| + \\ ... \\ + &nbsp;| &nbsp;w
      _{ n } &nbsp;|$$</p><p><br></p><p><br></p><div title=\"Page 213\">&nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp;<p>荷重限数を使った時、重みの勾配を求める計算では、これまでの誤差逆伝播法による結果に、正則化項の微分 &lambda;W
      を加算</p></div><p>一般的によく用いられる L2 ノルムで実験</p><p>(Weight decay に対応したネットワークは common/multi_layer_net.py
      に、実験用のコードは ch06/overfit_weight_decay.py)</p><p><br></p><p>(common/multi_layer_net.py)</p><pre>import
      sys, os\r\nsys.path.append(os.pardir)  # 親ディレクトリのファイルをインポートするための設定\r\nimport
      numpy as np\r\nfrom collections import OrderedDict\r\nfrom common.layers import
      *\r\nfrom common.gradient import numerical_gradient\r\n\r\nclass MultiLayerNet:\r\n 
        <span style=\"color: rgb(163, 143, 132);\">&quot;&quot;&quot;全結合による多層ニューラルネットワーク\r\n\r\n 
        Parameters\r\n    ----------\r\n    input_size : 入力サイズ（MNISTの場合は784）\r\n 
        hidden_size_list : 隠れ層のニューロンの数のリスト（e.g. [100, 100, 100]）\r\n    output_size
      : 出力サイズ（MNISTの場合は10）\r\n    activation : &#39;relu&#39; or &#39;sigmoid&#39;\r\n 
        weight_init_std : 重みの標準偏差を指定（e.g. 0.01）\r\n        &#39;relu&#39;または&#39;he&#39;を指定した場合は「Heの初期値」を設定\r\n 
            &#39;sigmoid&#39;または&#39;xavier&#39;を指定した場合は「Xavierの初期値」を設定\r\n    weight_decay_lambda
      : Weight Decay（L2ノルム）の強さ\r\n    &quot;&quot;&quot;</span>\r\n    def __init__(self,
      input_size, hidden_size_list, output_size,\r\n                 activation=&#39;relu&#39;,
      weight_init_std=&#39;relu&#39;, weight_decay_lambda=<span style=\"color: rgb(184,
      49, 47);\"><u>0.1</u></span>): <span style=\"color: rgb(184, 49, 47);\"><u>#
      0から0.1に変える</u></span>\r\n        self.input_size = input_size\r\n        self.output_size
      = output_size\r\n        self.hidden_size_list = hidden_size_list\r\n       
      self.hidden_layer_num = len(hidden_size_list)\r\n        self.weight_decay_lambda
      = weight_decay_lambda\r\n        self.params = {}\r\n\r\n        # 重みの初期化\r\n 
            self.__init_weight(weight_init_std)\r\n\r\n        # レイヤの生成\r\n       
      activation_layer = {&#39;sigmoid&#39;: Sigmoid, &#39;relu&#39;: Relu}\r\n   
          self.layers = OrderedDict()\r\n        for idx in range(1, self.hidden_layer_num+1):\r\n 
                self.layers[&#39;Affine&#39; + str(idx)] = Affine(self.params[&#39;W&#39;
      + str(idx)],\r\n                                                      self.params[&#39;b&#39;
      + str(idx)])\r\n            self.layers[&#39;Activation_function&#39; + str(idx)]
      = activation_layer[activation]()\r\n\r\n        idx = self.hidden_layer_num
      + 1\r\n        self.layers[&#39;Affine&#39; + str(idx)] = Affine(self.params[&#39;W&#39;
      + str(idx)],\r\n            self.params[&#39;b&#39; + str(idx)])\r\n\r\n   
          self.last_layer = SoftmaxWithLoss()\r\n\r\n    def __init_weight(self, weight_init_std):\r\n 
            &quot;&quot;&quot;重みの初期値設定\r\n\r\n        Parameters\r\n        ----------\r\n 
            weight_init_std : 重みの標準偏差を指定（e.g. 0.01）\r\n            &#39;relu&#39;または&#39;he&#39;を指定した場合は「Heの初期値」を設定\r\n 
                &#39;sigmoid&#39;または&#39;xavier&#39;を指定した場合は「Xavierの初期値」を設定\r\n   
          &quot;&quot;&quot;\r\n        all_size_list = [self.input_size] + self.hidden_size_list
      + [self.output_size]\r\n        for idx in range(1, len(all_size_list)):\r\n 
                scale = weight_init_std\r\n            if str(weight_init_std).lower()
      in (&#39;relu&#39;, &#39;he&#39;):\r\n                scale = np.sqrt(2.0 /
      all_size_list[idx - 1])  # ReLUを使う場合に推奨される初期値\r\n            elif str(weight_init_std).lower()
      in (&#39;sigmoid&#39;, &#39;xavier&#39;):\r\n                scale = np.sqrt(1.0
      / all_size_list[idx - 1])  # sigmoidを使う場合に推奨される初期値\r\n\r\n            self.params[&#39;W&#39;
      + str(idx)] = scale * np.random.randn(all_size_list[idx-1], all_size_list[idx])\r\n 
                self.params[&#39;b&#39; + str(idx)] = np.zeros(all_size_list[idx])\r\n\r\n 
        def predict(self, x):\r\n        for layer in self.layers.values():\r\n   
              x = layer.forward(x)\r\n\r\n        return x\r\n\r\n    def loss(self,
      x, t):\r\n        &quot;&quot;&quot;損失関数を求める\r\n\r\n        Parameters\r\n 
            ----------\r\n        x : 入力データ\r\n        t : 教師ラベル\r\n\r\n        Returns\r\n 
            -------\r\n        損失関数の値\r\n        &quot;&quot;&quot;\r\n        y =
      self.predict(x)\r\n\r\n        weight_decay = 0\r\n        for idx in range(1,
      self.hidden_layer_num + 2):\r\n            W = self.params[&#39;W&#39; + str(idx)]\r\n 
                weight_decay += 0.5 * self.weight_decay_lambda * np.sum(W ** 2)\r\n\r\n 
            return self.last_layer.forward(y, t) + weight_decay\r\n\r\n    def accuracy(self,
      x, t):\r\n        y = self.predict(x)\r\n        y = np.argmax(y, axis=1)\r\n 
            if t.ndim != 1 : t = np.argmax(t, axis=1)\r\n\r\n        accuracy = np.sum(y
      == t) / float(x.shape[0])\r\n        return accuracy\r\n\r\n    def numerical_gradient(self,
      x, t):\r\n        &quot;&quot;&quot;勾配を求める（数値微分）\r\n\r\n        Parameters\r\n 
            ----------\r\n        x : 入力データ\r\n        t : 教師ラベル\r\n\r\n        Returns\r\n 
            -------\r\n        各層の勾配を持ったディクショナリ変数\r\n            grads[&#39;W1&#39;]、grads[&#39;W2&#39;]、...は各層の重み\r\n 
                grads[&#39;b1&#39;]、grads[&#39;b2&#39;]、...は各層のバイアス\r\n        &quot;&quot;&quot;\r\n 
            loss_W = lambda W: self.loss(x, t)\r\n\r\n        grads = {}\r\n     
        for idx in range(1, self.hidden_layer_num+2):\r\n            grads[&#39;W&#39;
      + str(idx)] = numerical_gradient(loss_W, self.params[&#39;W&#39; + str(idx)])\r\n 
                grads[&#39;b&#39; + str(idx)] = numerical_gradient(loss_W, self.params[&#39;b&#39;
      + str(idx)])\r\n\r\n        return grads\r\n\r\n    def gradient(self, x, t):\r\n 
            &quot;&quot;&quot;勾配を求める（誤差逆伝搬法）\r\n\r\n        Parameters\r\n       
      ----------\r\n        x : 入力データ\r\n        t : 教師ラベル\r\n\r\n        Returns\r\n 
            -------\r\n        各層の勾配を持ったディクショナリ変数\r\n            grads[&#39;W1&#39;]、grads[&#39;W2&#39;]、...は各層の重み\r\n 
                grads[&#39;b1&#39;]、grads[&#39;b2&#39;]、...は各層のバイアス\r\n        &quot;&quot;&quot;\r\n 
            # forward\r\n        self.loss(x, t)\r\n\r\n        # backward\r\n   
          dout = 1\r\n        dout = self.last_layer.backward(dout)\r\n\r\n       
      layers = list(self.layers.values())\r\n        layers.reverse()\r\n        for
      layer in layers:\r\n            dout = layer.backward(dout)\r\n\r\n        #
      設定\r\n        grads = {}\r\n        for idx in range(1, self.hidden_layer_num+2):\r\n 
                grads[&#39;W&#39; + str(idx)] = self.layers[&#39;Affine&#39; + str(idx)].dW
      + self.weight_decay_lambda * self.layers[&#39;Affine&#39; + str(idx)].W\r\n 
                grads[&#39;b&#39; + str(idx)] = self.layers[&#39;Affine&#39; + str(idx)].db\r\n\r\n 
            return grads</pre><p><br></p><p>(ch06/overfit_weight_ decay.py)</p><p>weight_decay_lambda
      を 0-&gt; 1にする</p><pre>...\r\n# weight decay（荷重減衰）の設定 =======================\r\n<span
      style=\"color: rgb(163, 143, 132);\">weight_decay_lambda = 0 # weight decayを使用しない場合</span>\r\n<span
      style=\"color: rgb(184, 49, 47);\"><u>weight_decay_lambda = 0.1</u></span>\r\n#
      ====================================================\r\n...</pre><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565589519562-overfit_weight_+decay.png\"><span
      class=\"fr-inner\">Weight decay を用いた訓練データ(train)とテストデータ(test)の認識精度の推移</span></span></span></p><p><br></p><p><span
      contenteditable=\"true\">「訓練データ(train)とテストデータ(test)の認識精度の推移」で描画した時と比較すると、隔たりが小さくなっている。</span></p><p><span
      contenteditable=\"true\">-&gt; 過学習が抑制されてテストデータの精度が高まった。</span></p><p><br></p><p>訓練データの認識精度が
      100%に到達していない</p><p>-&gt; 過剰な表現力が和らいだ。</p><p><br></p><h2>Dropout</h2><hr><p>Dropout:ニューロンをランダムに消去しながら学習する手法(過学習を抑制)</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565591849580-dropout_neuron.png\"><span
      class=\"fr-inner\">Dropout の概念図(文献 [14] より引用):左が通常のニューラルネットワーク、右が Dropout
      を適用したネットワーク。Dropout はランダムにニューロンを選び、そのニューロンを消去すること で、その先の信号の伝達をストップする</span></span></span></p><p><br></p><pre>class
      Dropout:\r\n    def __init__(self, dropout_ratio=0.5):\r\n        self.dropout_ratio
      = dropout_ratio\r\n        self.mask = None\r\n    def forward(self, x, train_flg=True):\r\n 
            if train_flg:\r\n            self.mask = np.random.rand(*x.shape) &gt;
      self.dropout_ratio\r\n            return x * self.mask\r\n        else:\r\n 
                return x * (1.0 - self.dropout_ratio)\r\n    def backward(self, dout):\r\n 
            return dout * self.mask</pre><p>順伝播&nbsp;</p><p>self.mask に消去するニューロンを
      False として格納するということです。self.mask は、x と同じ形状の配列をランダムに 生成し、その値が dropout_ratio
      よりも大きい要素だけを True とします。</p><p>逆伝播</p><p>ReLU と同じです。つまり、順伝播で信号を通したニューロンは、逆伝播の際に伝わる信号をそのまま通し、順伝播で信号を通さなかったニューロンは、逆伝播では信号がそこでストップします。</p><p><br></p><p>MNIST
      データセットで検証(common/trainer.py および ch06/overfit_dropout.py)</p><p><br></p><p>trainer.py</p><pre>import
      sys, os\r\nsys.path.append(os.pardir)  <span style=\"color: rgb(163, 143, 132);\">#
      親ディレクトリのファイルをインポートするための設定</span>\r\nimport numpy as np\r\nfrom common.optimizer
      import *\r\n\r\nclass Trainer:\r\n    <span style=\"color: rgb(163, 143, 132);\">&quot;&quot;&quot;ニューラルネットの訓練を行うクラス\r\n
      \   &quot;&quot;&quot;</span>\r\n    def __init__(self, network, x_train, t_train,
      x_test, t_test,\r\n                 epochs=20, mini_batch_size=100,\r\n     
                 optimizer=&#39;SGD&#39;, optimizer_param={&#39;lr&#39;:0.01}, \r\n 
                     evaluate_sample_num_per_epoch=None, verbose=True):\r\n       
      self.network = network\r\n        self.verbose = verbose\r\n        self.x_train
      = x_train\r\n        self.t_train = t_train\r\n        self.x_test = x_test\r\n 
            self.t_test = t_test\r\n        self.epochs = epochs\r\n        self.batch_size
      = mini_batch_size\r\n        self.evaluate_sample_num_per_epoch = evaluate_sample_num_per_epoch\r\n\r\n\r\n 
            # optimizer\r\n        optimizer_class_dict = {&#39;sgd&#39;:SGD, &#39;momentum&#39;:Momentum,
      &#39;nesterov&#39;:Nesterov,\r\n                                &#39;adagrad&#39;:AdaGrad,
      &#39;rmsprpo&#39;:RMSprop, &#39;adam&#39;:Adam}\r\n        self.optimizer =
      optimizer_class_dict[optimizer.lower()](**optimizer_param)\r\n        \r\n 
            self.train_size = x_train.shape[0]\r\n        self.iter_per_epoch = max(self.train_size
      / mini_batch_size, 1)\r\n        self.max_iter = int(epochs * self.iter_per_epoch)\r\n 
            self.current_iter = 0\r\n        self.current_epoch = 0\r\n        \r\n 
            self.train_loss_list = []\r\n        self.train_acc_list = []\r\n     
        self.test_acc_list = []\r\n\r\n    def train_step(self):\r\n        batch_mask
      = np.random.choice(self.train_size, self.batch_size)\r\n        x_batch = self.x_train[batch_mask]\r\n 
            t_batch = self.t_train[batch_mask]\r\n        \r\n        grads = self.network.gradient(x_batch,
      t_batch)\r\n        self.optimizer.update(self.network.params, grads)\r\n   
          \r\n        loss = self.network.loss(x_batch, t_batch)\r\n        self.train_loss_list.append(loss)\r\n 
            if self.verbose: print(&quot;train loss:&quot; + str(loss))\r\n        \r\n 
            if self.current_iter % self.iter_per_epoch == 0:\r\n            self.current_epoch
      += 1\r\n            \r\n            x_train_sample, t_train_sample = self.x_train,
      self.t_train\r\n            x_test_sample, t_test_sample = self.x_test, self.t_test\r\n 
                if not self.evaluate_sample_num_per_epoch is None:\r\n           
          t = self.evaluate_sample_num_per_epoch\r\n                x_train_sample,
      t_train_sample = self.x_train[:t], self.t_train[:t]\r\n                x_test_sample,
      t_test_sample = self.x_test[:t], self.t_test[:t]\r\n                \r\n   
              train_acc = self.network.accuracy(x_train_sample, t_train_sample)\r\n 
                test_acc = self.network.accuracy(x_test_sample, t_test_sample)\r\n 
                self.train_acc_list.append(train_acc)\r\n            self.test_acc_list.append(test_acc)\r\n\r\n 
                if self.verbose: print(&quot;=== epoch:&quot; + str(self.current_epoch)
      + &quot;, train acc:&quot; + str(train_acc) + &quot;, test acc:&quot; + str(test_acc)
      + &quot; ===&quot;)\r\n        self.current_iter += 1\r\n\r\n    def train(self):\r\n 
            for i in range(self.max_iter):\r\n            self.train_step()\r\n\r\n 
            test_acc = self.network.accuracy(self.x_test, self.t_test)\r\n\r\n   
          if self.verbose:\r\n            print(&quot;=============== Final Test Accuracy
      ===============&quot;)\r\n            print(&quot;test acc:&quot; + str(test_acc))</pre><p><br></p><p>overfit_dropout.py</p><p>ドロップアウト無し</p><pre>import
      os\r\nimport sys\r\nsys.path.append(os.pardir)  <span style=\"color: rgb(163,
      143, 132);\"># 親ディレクトリのファイルをインポートするための設定</span>\r\nimport numpy as np\r\nimport
      matplotlib.pyplot as plt\r\nfrom dataset.mnist import load_mnist\r\nfrom common.multi_layer_net_extend
      import MultiLayerNetExtend\r\nfrom common.trainer import Trainer\r\n\r\n\r\n(x_train,
      t_train), (x_test, t_test) = load_mnist(normalize=True)\r\n\r\n\r\n<span style=\"color:
      rgb(163, 143, 132);\"># 過学習を再現するために、学習データを削減</span>\r\nx_train = x_train[:300]\r\nt_train
      = t_train[:300]\r\n\r\n\r\n<span style=\"color: rgb(163, 143, 132);\"># Dropuoutの有無、割り合いの設定
      ========================</span>\r\nuse_dropout = <span style=\"color: rgb(41,
      105, 176);\"><u>False</u></span>  # Dropoutなしのときの場合はFalseに\r\ndropout_ratio
      = 0.2\r\n<span style=\"color: rgb(163, 143, 132);\"># ====================================================</span>\r\n\r\nnetwork
      = MultiLayerNetExtend(input_size=784, hidden_size_list=[100, 100, 100, 100,
      100, 100],\r\n                              output_size=10, use_dropout=use_dropout,
      dropout_ration=dropout_ratio)\r\ntrainer = Trainer(network, x_train, t_train,
      x_test, t_test,\r\n                  epochs=301, mini_batch_size=100,\r\n   
                    optimizer=&#39;sgd&#39;, optimizer_param={&#39;lr&#39;: 0.01},
      verbose=True)\r\ntrainer.train()\r\n\r\ntrain_acc_list, test_acc_list = trainer.train_acc_list,
      trainer.test_acc_list\r\n\r\n<span style=\"color: rgb(163, 143, 132);\"># グラフの描画==========</span>\r\nmarkers
      = {&#39;train&#39;: &#39;o&#39;, &#39;test&#39;: &#39;s&#39;}\r\nx = np.arange(len(train_acc_list))\r\nplt.plot(x,
      train_acc_list, marker=&#39;o&#39;, label=&#39;train&#39;, markevery=10)\r\nplt.plot(x,
      test_acc_list, marker=&#39;s&#39;, label=&#39;test&#39;, markevery=10)\r\nplt.xlabel(&quot;epochs&quot;)\r\nplt.ylabel(&quot;accuracy&quot;)\r\nplt.ylim(0,
      1.0)\r\nplt.legend(loc=&#39;lower right&#39;)\r\nplt.show()</pre><p><br></p><p>ドロップアウト有り</p><pre>#
      Dropuoutの有無、割り合いの設定 ========================\r\nuse_dropout = <span style=\"color:
      rgb(184, 49, 47);\"><u>True</u></span># False-&gt;Trueに変える\r\ndropout_ratio
      = 0.2\r\n# ====================================================</pre><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565593260950-none_dropout.png\"><span
      class=\"fr-inner\">ドロップアウト無し</span></span></span></p></div><p><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565593289291-use_dropout.png\"><span
      class=\"fr-inner\">ドロップアウト有り(dropout_ratio = 0.2)</span></span></span></p><p>ドロップアウト有りの時の方が訓練データとテストデータの隔たりが小さくなった。</p><p><br></p><h2>ハイパーパラメータの検証</h2><hr><p>これまでのハイパーパラメータ例</p><p>・各層のニューロンの数</p><p>・バッチサイズ</p><p>・学習係数</p><p>・Weight
      decay</p><p><br></p><h3>検証データ</h3><p>ハイパーパラメータはテストデータで性能を評価してはいけない<br>&rarr;過学習を起こす起こす事になるから(テストデータだけに適合するようにハイパーパラメータの値が調整されてしまう)</p><p>&nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp;</p><ul><li>訓練データは、パラメータ(重みやバイアス)の学習に利用</li><li>検証データは、ハイパーパラメータの性能を評価するために利用</li><li>テストデータ
      は汎化性能をチェックするために、最後に(理想的には一度だけ)利用</li></ul><p><br></p><p>データセットによっては、あらかじめ訓練データ・検証データ・テストデータの
      3つに分離されているものもあるが、訓練データとテストデータだけのものもある。</p><p><br></p><p>訓練データの中から 20% 程度を検証データとして先に分離する</p><pre>(x_train,
      t_train), (x_test, t_test) = load_mnist()\r\n\r\n# 訓練データをシャッフル\r\nx_train, t_train
      = shuffle_dataset(x_train, t_train)\r\n\r\n# 検証データの分割\r\nvalidation_rate = 0.20\r\nvalidation_num
      = int(x_train.shape[0] * validation_rate)\r\n\r\nx_val - x_train[:validation_num]\r\nt_val
      - t_train[:validation_num]\r\nx_train - x_train[validation_num:]\r\nt_train
      - t_train[validation_num:]</pre><p><br></p><h2>ハイパーパラメータの最適化</h2><hr><p>ハイパーパラメータの最適化には次のステップを繰り返す</p><ul><li><p>STEP0<br>ハイパーパラメータの範囲を指定する：最初はざっくりと指定(例:
      10<sup>-3</sup>から10<sup>3</sup>)</p></li><li><p>STEP1<br>設定されたハイパーパラメータの範囲からランダムにサンプリングする</p></li><li><p>STEP2<br>STEP1でサンプリングされたハイパーパラメータの値を使用して学習を行い、<br>喧騒データの認識精度を評価する<br>（ただし、エポックは小さく設定）</p></li><li><p>STEP3<br>STEP2とSTEP2
      をある回数（１００回など）繰り返し、それらの認識精度の結果から<br>ハイパーパラメータの範囲を狭める</p></li></ul><p><br></p><p>上記を繰り返し行い、ハイパーパラメータの範囲を絞り込んでいき、ある程度絞り込んだ段階で、その絞り込んだ範囲からハイパーパラメータの値をひとつ選び出す。</p><p><br></p><h2>ハイパーパラメータ最適化の実装</h2><hr><p><br></p><p>ハイパーパラメータのランダムサンプリング(Weight
      decay係数 10<sup>-8</sup>~10<sup>-4</sup>, 学習係数 10<sup>-6</sup>~10<sup>-2</sup>)</p><pre>wight_decay
      = 10 ** np.random.uniform(-8, -4)\r\nlr = 10 ** np.random.uniform(-6, -2)</pre><p><br></p><p>(ch06/hyperparameter_optimization.py)</p><pre>import
      sys, os\r\nsys.path.append(os.pardir)  # 親ディレクトリのファイルをインポートするための設定\r\nimport
      numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom dataset.mnist import
      load_mnist\r\nfrom common.multi_layer_net import MultiLayerNet\r\nfrom common.util
      import shuffle_dataset\r\nfrom common.trainer import Trainer\r\n\r\n\r\n(x_train,
      t_train), (x_test, t_test) = load_mnist(normalize=True)\r\n\r\n\r\n# 高速化のため訓練データの削減\r\nx_train
      = x_train[:500]\r\nt_train = t_train[:500]\r\n\r\n\r\n# 検証データの分離\r\nvalidation_rate
      = 0.20\r\nvalidation_num = int(x_train.shape[0] * validation_rate)\r\nx_train,
      t_train = shuffle_dataset(x_train, t_train)\r\nx_val = x_train[:validation_num]\r\nt_val
      = t_train[:validation_num]\r\nx_train = x_train[validation_num:]\r\nt_train
      = t_train[validation_num:]\r\n\r\n\r\n\r\n\r\ndef __train(lr, weight_decay,
      epocs=50):\r\n    network = MultiLayerNet(input_size=784, hidden_size_list=[100,
      100, 100, 100, 100, 100],\r\n                            output_size=10, weight_decay_lambda=weight_decay)\r\n 
        trainer = Trainer(network, x_train, t_train, x_val, t_val,\r\n           
                epochs=epocs, mini_batch_size=100,\r\n                      optimizer=&#39;sgd&#39;,
      optimizer_param={&#39;lr&#39;: lr}, verbose=False)\r\n    trainer.train()\r\n\r\n\r\n 
        return trainer.test_acc_list, trainer.train_acc_list\r\n\r\n\r\n\r\n\r\n#
      ハイパーパラメータのランダム探索======================================\r\noptimization_trial
      = 100\r\nresults_val = {}\r\nresults_train = {}\r\nfor _ in range(optimization_trial):\r\n 
        # 探索したハイパーパラメータの範囲を指定===============\r\n    weight_decay = 10 ** np.random.uniform(-8,
      -4)\r\n    lr = 10 ** np.random.uniform(-6, -2)\r\n    # ================================================\r\n\r\n\r\n 
        val_acc_list, train_acc_list = __train(lr, weight_decay)\r\n    print(&quot;val
      acc:&quot; + str(val_acc_list[-1]) + &quot; | lr:&quot; + str(lr) + &quot;,
      weight decay:&quot; + str(weight_decay))\r\n    key = &quot;lr:&quot; + str(lr)
      + &quot;, weight decay:&quot; + str(weight_decay)\r\n    results_val[key] =
      val_acc_list\r\n    results_train[key] = train_acc_list\r\n\r\n\r\n# グラフの描画========================================================\r\nprint(&quot;===========
      Hyper-Parameter Optimization Result ===========&quot;)\r\ngraph_draw_num = 20\r\ncol_num
      = 5\r\nrow_num = int(np.ceil(graph_draw_num / col_num))\r\ni = 0\r\n\r\n\r\nfor
      key, val_acc_list in sorted(results_val.items(), key=lambda x:x[1][-1], reverse=True):\r\n 
        print(&quot;Best-&quot; + str(i+1) + &quot;(val acc:&quot; + str(val_acc_list[-1])
      + &quot;) | &quot; + key)\r\n\r\n\r\n    plt.subplot(row_num, col_num, i+1)\r\n 
        plt.title(&quot;Best-&quot; + str(i+1))\r\n    plt.ylim(0.0, 1.0)\r\n    if
      i % 5: plt.yticks([])\r\n    else: plt.yticks(np.arange(0.0, 1.2, 0.2))\r\n 
        plt.xticks([])\r\n    x = np.arange(len(val_acc_list))\r\n    plt.plot(x,
      val_acc_list)\r\n    plt.plot(x, results_train[key], &quot;--&quot;)\r\n   
      i += 1\r\n\r\n\r\n    if i &gt;= graph_draw_num:\r\n        break\r\n\r\n\r\nplt.show()</pre><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565598352449-hyperparameter_optimization.png\"><span
      class=\"fr-inner\"><span contenteditable=\"true\">実線は検証データの認識精度、点線は訓練データの認識精度</span></span></span></span></p><p><br></p><p>これを見ると、「Best-5」ぐらいまでは順調に学習が進んでいることが分かります。&nbsp;</p><p>そこで、「Best-5」までのハイパーパラメータの値(学習係数と
      Weight decay 係数) を見てみることにします。</p><p>結果は、次のようになります。</p><p>=========== Hyper-Parameter
      Optimization Result ===========</p><p>Best-1(val acc:0.74) | lr:0.006122975949705087,
      weight decay:4.690616950485899e-06</p><p>Best-2(val acc:0.72) | lr:0.005573546740364351,
      weight decay:2.9035359797864116e-06</p><p>Best-3(val acc:0.64) | lr:0.006482289721036491,
      weight decay:7.200405044009874e-06</p><p>Best-4(val acc:0.56) | lr:0.003986587050968818,
      weight decay:2.0943590408712787e-06</p><p>Best-5(val acc:0.56) | lr:0.004401355290764625,
      weight decay:1.6830975160518582e-08</p><p>この結果を見ると、うまく学習が進んでいるのは、学習係数が 0.001
      から 0.01、 Weight decay 係数が 10<sup>-8</sup>から 10<sup>-6</sup> ぐらいということが分かります。よって、学習係数の幅とWeight
      decayの幅を変更し、再度絞り込みを繰り返します。</p><p><br></p><p>weight_decay = 10 ** np.random.uniform(-8,
      -6)<br>lr = 10 ** np.random.uniform(-4, -2)</p><p><br></p><p>このように、 うまくいきそうなハイパーパラメータの範囲を観察し、値の範囲を小さくしていく作業を繰り返していくのです。</p><p>そのようにし
      て、適切なハイパーパラメータの存在範囲を狭め、ある段階で最終的なハイパラメータの値をひとつピックアップします。</p><p><br></p><h2>まとめ</h2><hr><p>●
      パラメータの更新方法には、SGD の他に、有名なものとして、Momentum や AdaGrad、Adam などの手法がある。</p><p>● 重みの初期値の与え方は、正しい学習を行う上で非常に重要である。</p><p>●
      重みの初期値として、「Xavier の初期値」や「He の初期値」などが有効</p><p>である。</p><p>● Batch Normalization
      を用いることで、学習を速く進めることができ、ま</p><p>&nbsp; た、初期値に対してロバストになる。</p><p>● 過学習を抑制するための正則化の技術として、Weight
      decay や Dropout</p><p>がある。</p><p>● ハイパーパラメータの探索は、良い値が存在する範囲を徐々に絞りながら</p><p>&nbsp;
      進めるのが効率の良い方法である。</p><p><br></p></div></div></div></div></div>"
    - '2019-08-06 17:27:54.365035'
    - '2019-08-18 13:35:17.801947'
  - - 196
    - ゼロから作る Deep Learning 第7章
    - "<h1 style=\"text-align: center;\">畳み込みニューラルネットワーク</h1><p><br></p><p>この章では、CNN
      のメカニズム について詳しく説明し、その処理内容を Python で実装する</p><p><br></p><h2>全体の構造</h2><hr><p>CNNはこれまで見てきたニューラルネットワークと同じで、レゴブロックのようにレイヤを組み合わせて作ることが可能です。<br>新たに次が登場</p><ul><li>Convolutionレイヤ（畳み込み層）</li><li>Poolingレイヤ（プーリング層）</li></ul><p><br></p><p>これまで見てきたニューラルネットワークは隣接する層のすべてのニューロン間で結合があった。これを全結合と呼び、Affineレイヤとい名前で実装してきた。</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565682174600-both_affine_and_cnn.png\"
      style=\"width: 800px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>一般的なCNNの特徴</p><ul><li>「Convolution
      - ReLU - (Pooling)」という流れ(Pooling レイヤは省略されることもある)</li><li>「Affine - ReLU」というつながりが、「Convolution
      - ReLU - (Pooling)」 に置き換わったと考えることができる</li><li>出力に近い層では「Affine - ReLU」という組み合わせが用いられる</li><li>最後の出力層は「Affine
      - Softmax」の組み合わせ</li></ul><p><br></p><h2>畳み込み層</h2><hr><h3>全結合層の問題点</h3><p><br></p><p>全結合の問題点とは
      <strong><span style=\"font-size: 18px;\">データの構造が&quot;無視&quot;されて、形状による情報を生かすことができない&nbsp;</span></strong>こと</p><p>形状には大切な情報が含まれていると思われるが、形状を無視して全てのデータを同じ次元のニューロンとして扱うので、形状による情報を生かすことができない。</p><p><br></p><p>例えば入力データが画像のとき、データは縦・横・チャンネル方向の３次元形状</p><p>MNIST
      データセットを使った例では、入力画像は (1, 28, 28)―― 1 チャンネル、縦 28 ピクセル、 横 28 ピクセル――の形状だったが、それを
      1 列に並べた 784 個のデータを最初の Affine レイヤへ入力する</p><p>全結合層に入力するときに「3 次元のデータを平ら ―― 1
      次元のデータ――にする」必要があるが、</p><p>平らにされて失うこの形状には大切な空間情報が含まれていると思われる。</p><p><br></p><ul><li>空間的に近いピクセルは似たような値なのでは？</li><li>RBGの各チャンネルの間にはそれぞれに密接な関係があるのでは？</li></ul><p>など...</p><p><br></p><p>CNN
      では、画像などの形状を有したデータを正しく理解できる(可能性がある)</p><p><br></p><p>CNNの畳み込み層において、</p><ul><li>入出力データを<strong>特徴マップ</strong>(feature
      map)</li><li>入力データを<strong>入力特徴マップ</strong>(feature map)</li><li>出力データを<strong>出力特徴マップ</strong>(feature
      map)</li></ul><p><br></p><p><br></p><h2>畳み込み演算</h2><hr><p><br></p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565687949573-ConvolutionCalculation.png\"><span
      class=\"fr-inner\">畳み込み演算の例:畳み込み演算を「⊛」記号で表記</span></span></span></p><p><br></p><p>「畳み込み演算」</p><p>画像処理でいうところ「フィルター処理」に相当</p><p>文献によっては「フィルター」という用語は「カーネル」と言う表現されることもある</p><p>このフィルターに使用するパラメータが、全結合のニューラルネットワークにおける「重み」に対応する</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565688214362-ConvolutionCaluculationFlow.png\"><span
      class=\"fr-inner\">畳み込み演算の計算手順</span></span></span></p><p>これにバイアスを加えると以下のようになる。</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565688323523-ConvolutionAddBias.png\"><span
      class=\"fr-inner\">畳み込み演算のバイアス:フィルターの適用後の要素に固定の値(バイアス)を加算する</span></span></span></p><p><br></p><h2>パディング</h2><hr><p>パティング：入力データの周囲に固定データ（例えば0）を埋めること</p><p>下図は周囲を幅1ピクセルの0で埋めています</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565688584201-padding.png\"><span
      class=\"fr-inner\">畳み込み演算のパディング処理:入力データの周囲に 0 を埋める(図ではパディングを破線で表し、中身の「0」の記載は省略する)</span></span></span></p><p>パディングを使う主な理由は出力サイズを調整すること。</p><p><br></p><p><br></p><h2>ストライド</h2><hr><p><br></p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565689059267-stride.png\"><span
      class=\"fr-inner\">ストライドが2の畳み込み演算の例</span></span></span></p><p><br></p><h3>出力サイズの計算</h3><p>入力サイズを(H,
      W)<br>フィルターサイズを(FH, FW)<br>出力サイズを(OH, OW)<br>パディングをP<br>ストライドをS<br>とした際の出力サイズは次の通り</p><p><br></p><p>$$OH=
      \\frac{ H+2P-FH }{ S } + 1\\\\ OW= \\frac{ W+2P-FW }{ S } + 1\\\\$$</p><p><br></p><p>計算例:</p><p>入力サイズ:(4,
      4)、パディング:1、ストライド:1、フィルターサイズ:(3, 3)の時</p><p>$$OH= \\frac{ 4+2 \\cdot 1 -3
      }{ 1 } + 1=4\\\\ OW= \\frac{ 4+2\\cdot 1 -3 }{ 1 } + 1=4$$</p><p><br></p><p>入力サイズ:(7,
      7)、パディング:0、ストライド:2、フィルターサイズ:(3, 3)</p><p>$$OH= \\frac{ 7+2 \\cdot 0 -3
      }{ 2 } + 1=3\\\\ OW= \\frac{ 7+2\\cdot 0 -3 }{ 2 } + 1=3$$</p><p><br></p><p>入力サイズ:(28,
      31)、パディング:2、ストライド:3、フィルターサイズ: (5, 5)</p><p>$$OH= \\frac{ 28+2 \\cdot 2
      -5 }{ 3 } + 1=10\\\\ OW= \\frac{ 31+2\\cdot 2 -5 }{ 3 } + 1=11$$</p><p><br></p><h2>3次元データの畳み込み演算</h2><hr><p>これまで見てきた畳み込み演算の例は、縦方向と横方向の
      2 次元の形状を対象としたものでした。しかし、画像の場合、縦・横方向に加えてチャンネル方向も合わせた 3 次元のデータを扱う必要があります。チャンネル
      方向も合わせた 3 次元データに対して畳み込み演算を行う例を見ていきます。</p><p><br></p><p><br><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565689987461-3d_convolution_calculation.png\"><span
      class=\"fr-inner\">3次元データに対する畳み込み演算の例</span></span></span></p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565690053267-3d_convolution_calculation_flow.png\"><span
      class=\"fr-inner\">3次元データに対する畳み込み演算の計算手順</span></span></span></p><p><br></p><p>3次元の畳み込み演算で注意するのは、<u>入力データとフィルターのチャンネル数を同じ値にする</u>ということ。</p><p><br></p><h2>ブロックで考える</h2><hr><p><br></p><p>チャンネル数C,
      高さH, 横幅Wのデータの形状を(C, H, W)とかく。</p><p><br></p><p><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565691677347-convolution_block.png\"><span
      class=\"fr-inner\">畳み込み演算をブロックで考える。ブロックの形状に注意</span></span></span></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565692329527-multiple_filter.png\"><span
      class=\"fr-inner\">複数のフィルターによる畳み込み演算の例</span></span></span></p><p><br></p><p>バイアス項を追加すると以下のようになる</p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565692914107-convolution_block_with_bias.png\"><span
      class=\"fr-inner\">畳み込み演算の処理フロー(バイアス項も追加)</span></span></span></p><p><br></p><h2>バッチ処理</h2><hr><p>畳み込み演算でのバッチ処理</p><p>N個のデータに対してバッチ処理を行う際にはデータの形状は同じ</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565693770836-convolution_batch.png\"><span
      class=\"fr-inner\">畳み込み演算のバッチ処理のフロー</span></span></span></p><p><br></p><h2>プーリング層</h2><hr><p>プーリング：縦・横方向の空烏瞰を小さくする演算</p><p>下図では2&times;2の領域を一つの要素に集約するような処理を行って、空間サイズを小さくする。</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565693901156-pooling.png\"><span
      class=\"fr-inner\">Max プーリングの処理手順</span></span></span></p><p>この例では、2&times;2のMaxプーリングをスライド2で行った場合の処理である。</p><p>Maxプーリング：対象領域から最大値を取る計算</p><p>Avarage
      プーリング : 対象領域の平均を計算</p><p>また一般的にプーリングのウィンドウサイズとスライドは同じ値に設定する。</p><p><br></p><h2>プーリング層の特徴</h2><hr><h3>学習するパラメータがない</h3><p>対象領域から最大値(もしくは平均値)を取るだけの処理なので学習するパラメータを持たない</p><p>プーリングは、対象から最大値（もしくは平均値）をとるだけの処理なので学習すべきパラメータは存在しない</p><h3><br></h3><h3>チャンネル数は変化しない</h3><p>プーリングの演算によって、入力データを出力データのチャンネル数は変化しない。</p><p>チャンネル毎に独立して計算が行われる。</p><p>（OHとOWは変化するがFNは変化しません）</p><p><br></p><h3>微小な位置変化に対してロバスト（頑強）</h3><p>入力データの小さなズレに対して、プーリングは同じような結果を返す。</p><p>そのため、入力データの微小なズレに対してロバストです。</p><p><br></p><h2>Convolution/Poolingレイヤの実装</h2><hr><h3><a
      href=\"https://qiita.com/yakof11/items/2e187f7d9f253b500295#4%E6%AC%A1%E5%85%83%E9%85%8D%E5%88%97\"></a></h3><p>畳み込み層とプーリング層の二つの層をpythonで実装する。</p><p><br></p><h3>4次元配列</h3><p>CNNでは、各層を流れるデータは4次元のデータ。</p><p>たとえば、データの形状が
      (10, 1, 28, 28) だとすると、これは高さ 28・横幅 28 で 1 チャンネルのデータが 10 個ある場合に対応する。</p><p><br></p><p>Python
      での実装</p><pre><span style=\"color: rgb(163, 143, 132);\"># ランダムにデータを生成</span>\r\nx
      = np.random.rand(10,1,28,28)\r\nx.shape\r\n<span style=\"color: rgb(163, 143,
      132);\"># (10, 1, 28, 28)</span>\r\n\r\nx[0].shape\r\n<span style=\"color: rgb(163,
      143, 132);\"># (1, 28, 28)</span>\r\nx[1].shape\r\n<span style=\"color: rgb(163,
      143, 132);\"># (1, 28, 28)</span>\r\n\r\nx[0, 0].shape <span style=\"color:
      rgb(163, 143, 132);\"># もしくは、x[0][0]</span>\r\n<span style=\"color: rgb(163,
      143, 132);\"># (28, 28)</span></pre><p><br></p><h3>im2colによる展開</h3><p>畳み込みの実装は、真面目に行うとfor文の幾重にも組み合わせた実装になるが、そのような実装はやや面倒であり、またNumPyではfor文を使うと処理が遅くなる。</p><p>そのためfor文ではなく、im2colという便利な関数を使った実装を行う。<br>im2colはフィルター(重み)にとって都合が良いように入力データを展開する関数である。</p><p><br></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565696247824-im2col.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>im2colのメリットデメリット</p><p>メリット：行列計算に帰着させることが可能のため、線形代数のライブラリを有効に活用可能(大きな行列の計算を高速に行う)</p><p>デメリット：通常よりも多くのメモリを消費する(展開後の要素の数は元のブロックの要素数よりも多くなるから)</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565696610075-im2col_flow.png\"><span
      class=\"fr-inner\">畳み込み演算のフィルター処理の詳細:フィルターを縦方向に 1 列に展開して並べ、im2col で展開したデータと行列の内積を計算する。最後に、出力データのサイズに整形(reshape)する</span></span></span></p><p><br></p><h3>Convolutionレイヤの実装</h3><p><br></p><p>im2colは次のインターフェースを持ちます。</p><p>im2col(input_data,
      filter_h, filter_w, stride=1, pad=0)</p><ul><li>input_data ―― (データ数, チャンネル,
      高さ, 横幅) の 4 次元配列から なる入力データ&nbsp;</li><li>filter_h ―― フィルターの高さ&nbsp;</li><li>filter_w
      ―― フィルターの横幅&nbsp;</li><li>stride ―― ストライド</li><li>pad ―― パディング</li></ul><p><br></p><p>(common/util.py)</p><pre>#----------------------------------------------------\r\n#
      Parameters\r\n#   input_data : (データ数,チャンネル,高さ,横幅)の4次元配列からなる入力データ\r\n#   filter_h
      : フィルターの高さ\r\n#   filter_w : フィルターの横幅\r\n#   stride : ストライド\r\n#   pad : パディング\r\n#
      Returns\r\n#   col : 2次元配列 \r\n#----------------------------------------------------\r\ndef
      im2col(input_data, filter_h, filter_w, stride=1, pad=0):\r\n\r\n    N, C, H,
      W = input_data.shape\r\n    out_h = (H + 2*pad - filter_h)//stride + 1\r\n    out_w
      = (W + 2*pad - filter_w)//stride + 1\r\n\r\n    img = np.pad(input_data, [(0,0),
      (0,0), (pad, pad), (pad, pad)], &#39;constant&#39;)\r\n    col = np.zeros((N,
      C, filter_h, filter_w, out_h, out_w))\r\n\r\n    for y in range(filter_h):\r\n
      \       y_max = y + stride*out_h\r\n        for x in range(filter_w):\r\n            x_max
      = x + stride*out_w\r\n            col[:, :, y, x, :, :] = img[:, :, y:y_max:stride,
      x:x_max:stride]\r\n\r\n    col = col.transpose(0, 4, 5, 1, 2, 3).reshape(N*out_h*out_w,
      -1)\r\n    return col</pre><p>im2colを使って見る</p><div data-lang=\"py\"><pre>import
      sys, os\r\nsys.path.append(os.pardir)\r\nfrom common.util import im2col\r\n\r\nx1
      = np.random.rand(1, 3, 7, 7)\r\ncol1 = im2col(x1, 5, 5, stride=1, pad=0)\r\nprint(col1.shape)
      # (9, 75)\r\n\r\nx2 = np.random.rand(10, 3, 7, 7)\r\ncol2 = im2col(x2, 5, 5,
      stride=1, pad=0)\r\nprint(col2.shape) # (90, 75)</pre></div><p>x1がバッチサイズが1で、チャンネル数が3の7&times;7のデータ<br>x2がバッチサイズが10で、チャンネル数が3の7&times;7のデータ</p><p>両方とも2次元目の要素数が75になるが、これはフィルターの要素数の総和にあたる。（チャンネル3、サイズ5&times;5）</p><p><br></p><p>im2colを使って畳み込み層を実装</p><p>(common/layers.py)</p><pre>class
      Convolution:\r\n    def __init__(self, W, b, stride=1, pad=0):\r\n        self.W
      = W\r\n        self.b = b\r\n        self.stride = stride\r\n        self.pad
      = pad\r\n        \r\n        # 中間データ（backward時に使用）\r\n        self.x = None
        \r\n        self.col = None\r\n        self.col_W = None\r\n        \r\n 
            # 重み・バイアスパラメータの勾配\r\n        self.dW = None\r\n        self.db = None\r\n\r\n 
        def forward(self, x):\r\n        FN, C, FH, FW = self.W.shape\r\n        N,
      C, H, W = x.shape\r\n        out_h = 1 + int((H + 2*self.pad - FH) / self.stride)\r\n 
            out_w = 1 + int((W + 2*self.pad - FW) / self.stride)\r\n\r\n        col
      = im2col(x, FH, FW, self.stride, self.pad)\r\n        col_W = self.W.reshape(FN,
      -1).T\r\n\r\n        out = np.dot(col, col_W) + self.b\r\n        out = out.reshape(N,
      out_h, out_w, -1).transpose(0, 3, 1, 2)\r\n\r\n        self.x = x\r\n       
      self.col = col\r\n        self.col_W = col_W\r\n\r\n        return out\r\n\r\n 
        def backward(self, dout):\r\n        FN, C, FH, FW = self.W.shape\r\n     
        dout = dout.transpose(0,2,3,1).reshape(-1, FN)\r\n\r\n        self.db = np.sum(dout,
      axis=0)\r\n        self.dW = np.dot(self.col.T, dout)\r\n        self.dW = self.dW.transpose(1,
      0).reshape(FN, C, FH, FW)\r\n\r\n        dcol = np.dot(dout, self.col_W.T)\r\n 
            dx = col2im(dcol, self.x.shape, FH, FW, self.stride, self.pad)\r\n\r\n 
            return dx</pre><p><br></p><p><br></p><h3>Poolingレイヤの実装</h3><p>Convolutionレイヤと同じく、im2colを使って入力データを展開して実装する</p><p>ただし、プーリングの場合は、チャンネル方向には独立である点が異なる</p><p>(common/layers.py)</p><pre>class
      Pooling:\r\n    def __init__(self, pool_h, pool_w, stride=1, pad=0):\r\n   
          self.pool_h = pool_h\r\n        self.pool_w = pool_w\r\n        self.stride
      = stride\r\n        self.pad = pad\r\n        \r\n        self.x = None\r\n 
            self.arg_max = None\r\n\r\n\r\n    def forward(self, x):\r\n        N,
      C, H, W = x.shape\r\n        out_h = int(1 + (H - self.pool_h) / self.stride)\r\n 
            out_w = int(1 + (W - self.pool_w) / self.stride)\r\n\r\n\r\n        col
      = im2col(x, self.pool_h, self.pool_w, self.stride, self.pad)\r\n        col
      = col.reshape(-1, self.pool_h*self.pool_w)\r\n\r\n\r\n        arg_max = np.argmax(col,
      axis=1)\r\n        out = np.max(col, axis=1)\r\n        out = out.reshape(N,
      out_h, out_w, C).transpose(0, 3, 1, 2)\r\n\r\n\r\n        self.x = x\r\n   
          self.arg_max = arg_max\r\n\r\n\r\n        return out\r\n\r\n\r\n    def
      backward(self, dout):\r\n        dout = dout.transpose(0, 2, 3, 1)\r\n     
        \r\n        pool_size = self.pool_h * self.pool_w\r\n        dmax = np.zeros((dout.size,
      pool_size))\r\n        dmax[np.arange(self.arg_max.size), self.arg_max.flatten()]
      = dout.flatten()\r\n        dmax = dmax.reshape(dout.shape + (pool_size,)) \r\n 
            \r\n        dcol = dmax.reshape(dmax.shape[0] * dmax.shape[1] * dmax.shape[2],
      -1)\r\n        dx = col2im(dcol, self.x.shape, self.pool_h, self.pool_w, self.stride,
      self.pad)\r\n        \r\n        return dx</pre><p><br></p><h2>CNNの実装</h2><p><br></p><p>引数</p><ul><li>input_dim
      ―― 入力データの (チャンネル, 高さ, 幅) の次元</li><li>conv_param ―― 畳み込み層のハイパーパラメータ(ディクショナリ)。ディクショナリのキーは下記のとおり</li></ul><p>&ndash;
      filter_num ―― フィルターの数&nbsp;</p><p>&ndash; filter_size ―― フィルターのサイズ</p><p>&ndash;
      stride ―― ストライド&nbsp;</p><p>&ndash; pad ―― パディング&nbsp;</p><ul><li>hidden_size
      ―― 隠れ層(全結合)のニューロンの数</li><li>output_size ―― 出力層(全結合)のニューロンの数</li><li>weight_init_std
      ―― 初期化の際の重みの標準偏差</li></ul><p><br></p><p>(ch07/simple_convnet.py)</p><pre>import
      sys, os\r\nsys.path.append(os.pardir)  # 親ディレクトリのファイルをインポートするための設定\r\nimport
      pickle\r\nimport numpy as np\r\nfrom collections import OrderedDict\r\nfrom
      common.layers import *\r\nfrom common.gradient import numerical_gradient\r\n\r\n\r\n\r\n\r\nclass
      SimpleConvNet:\r\n    &quot;&quot;&quot;単純なConvNet\r\n\r\n\r\n    conv - relu
      - pool - affine - relu - affine - softmax\r\n    \r\n    Parameters\r\n    ----------\r\n 
        input_size : 入力サイズ（MNISTの場合は784）\r\n    hidden_size_list : 隠れ層のニューロンの数のリスト（e.g.
      [100, 100, 100]）\r\n    output_size : 出力サイズ（MNISTの場合は10）\r\n    activation :
      &#39;relu&#39; or &#39;sigmoid&#39;\r\n    weight_init_std : 重みの標準偏差を指定（e.g.
      0.01）\r\n        &#39;relu&#39;または&#39;he&#39;を指定した場合は「Heの初期値」を設定\r\n       
      &#39;sigmoid&#39;または&#39;xavier&#39;を指定した場合は「Xavierの初期値」を設定\r\n    &quot;&quot;&quot;\r\n 
        def __init__(self, input_dim=(1, 28, 28), \r\n                 conv_param={&#39;filter_num&#39;:30,
      &#39;filter_size&#39;:5, &#39;pad&#39;:0, &#39;stride&#39;:1},\r\n         
             hidden_size=100, output_size=10, weight_init_std=0.01):\r\n        filter_num
      = conv_param[&#39;filter_num&#39;]\r\n        filter_size = conv_param[&#39;filter_size&#39;]\r\n 
            filter_pad = conv_param[&#39;pad&#39;]\r\n        filter_stride = conv_param[&#39;stride&#39;]\r\n 
            input_size = input_dim[1]\r\n        conv_output_size = (input_size -
      filter_size + 2*filter_pad) / filter_stride + 1\r\n        pool_output_size
      = int(filter_num * (conv_output_size/2) * (conv_output_size/2))\r\n\r\n\r\n 
            # 重みの初期化\r\n        self.params = {}\r\n        self.params[&#39;W1&#39;]
      = weight_init_std * \\\r\n                            np.random.randn(filter_num,
      input_dim[0], filter_size, filter_size)\r\n        self.params[&#39;b1&#39;]
      = np.zeros(filter_num)\r\n        self.params[&#39;W2&#39;] = weight_init_std
      * \\\r\n                            np.random.randn(pool_output_size, hidden_size)\r\n 
            self.params[&#39;b2&#39;] = np.zeros(hidden_size)\r\n        self.params[&#39;W3&#39;]
      = weight_init_std * \\\r\n                            np.random.randn(hidden_size,
      output_size)\r\n        self.params[&#39;b3&#39;] = np.zeros(output_size)\r\n\r\n\r\n 
            # レイヤの生成\r\n        self.layers = OrderedDict()\r\n        self.layers[&#39;Conv1&#39;]
      = Convolution(self.params[&#39;W1&#39;], self.params[&#39;b1&#39;],\r\n     
                                           conv_param[&#39;stride&#39;], conv_param[&#39;pad&#39;])\r\n 
            self.layers[&#39;Relu1&#39;] = Relu()\r\n        self.layers[&#39;Pool1&#39;]
      = Pooling(pool_h=2, pool_w=2, stride=2)\r\n        self.layers[&#39;Affine1&#39;]
      = Affine(self.params[&#39;W2&#39;], self.params[&#39;b2&#39;])\r\n        self.layers[&#39;Relu2&#39;]
      = Relu()\r\n        self.layers[&#39;Affine2&#39;] = Affine(self.params[&#39;W3&#39;],
      self.params[&#39;b3&#39;])\r\n\r\n\r\n        self.last_layer = SoftmaxWithLoss()\r\n\r\n\r\n 
        def predict(self, x):\r\n        for layer in self.layers.values():\r\n   
              x = layer.forward(x)\r\n\r\n\r\n        return x\r\n\r\n\r\n    def
      loss(self, x, t):\r\n        &quot;&quot;&quot;損失関数を求める\r\n        引数のxは入力データ、tは教師ラベル\r\n 
            &quot;&quot;&quot;\r\n        y = self.predict(x)\r\n        return self.last_layer.forward(y,
      t)\r\n\r\n\r\n    def accuracy(self, x, t, batch_size=100):\r\n        if t.ndim
      != 1 : t = np.argmax(t, axis=1)\r\n        \r\n        acc = 0.0\r\n        \r\n 
            for i in range(int(x.shape[0] / batch_size)):\r\n            tx = x[i*batch_size:(i+1)*batch_size]\r\n 
                tt = t[i*batch_size:(i+1)*batch_size]\r\n            y = self.predict(tx)\r\n 
                y = np.argmax(y, axis=1)\r\n            acc += np.sum(y == tt) \r\n 
            \r\n        return acc / x.shape[0]\r\n\r\n\r\n    def numerical_gradient(self,
      x, t):\r\n        &quot;&quot;&quot;勾配を求める（数値微分）\r\n\r\n\r\n        Parameters\r\n 
            ----------\r\n        x : 入力データ\r\n        t : 教師ラベル\r\n\r\n\r\n     
        Returns\r\n        -------\r\n        各層の勾配を持ったディクショナリ変数\r\n            grads[&#39;W1&#39;]、grads[&#39;W2&#39;]、...は各層の重み\r\n 
                grads[&#39;b1&#39;]、grads[&#39;b2&#39;]、...は各層のバイアス\r\n        &quot;&quot;&quot;\r\n 
            loss_w = lambda w: self.loss(x, t)\r\n\r\n\r\n        grads = {}\r\n 
            for idx in (1, 2, 3):\r\n            grads[&#39;W&#39; + str(idx)] = numerical_gradient(loss_w,
      self.params[&#39;W&#39; + str(idx)])\r\n            grads[&#39;b&#39; + str(idx)]
      = numerical_gradient(loss_w, self.params[&#39;b&#39; + str(idx)])\r\n\r\n\r\n 
            return grads\r\n\r\n\r\n    def gradient(self, x, t):\r\n        &quot;&quot;&quot;勾配を求める（誤差逆伝搬法）\r\n\r\n\r\n 
            Parameters\r\n        ----------\r\n        x : 入力データ\r\n        t : 教師ラベル\r\n\r\n\r\n 
            Returns\r\n        -------\r\n        各層の勾配を持ったディクショナリ変数\r\n         
        grads[&#39;W1&#39;]、grads[&#39;W2&#39;]、...は各層の重み\r\n            grads[&#39;b1&#39;]、grads[&#39;b2&#39;]、...は各層のバイアス\r\n 
            &quot;&quot;&quot;\r\n        # forward\r\n        self.loss(x, t)\r\n\r\n\r\n 
            # backward\r\n        dout = 1\r\n        dout = self.last_layer.backward(dout)\r\n\r\n\r\n 
            layers = list(self.layers.values())\r\n        layers.reverse()\r\n   
          for layer in layers:\r\n            dout = layer.backward(dout)\r\n\r\n\r\n 
            # 設定\r\n        grads = {}\r\n        grads[&#39;W1&#39;], grads[&#39;b1&#39;]
      = self.layers[&#39;Conv1&#39;].dW, self.layers[&#39;Conv1&#39;].db\r\n     
        grads[&#39;W2&#39;], grads[&#39;b2&#39;] = self.layers[&#39;Affine1&#39;].dW,
      self.layers[&#39;Affine1&#39;].db\r\n        grads[&#39;W3&#39;], grads[&#39;b3&#39;]
      = self.layers[&#39;Affine2&#39;].dW, self.layers[&#39;Affine2&#39;].db\r\n\r\n\r\n 
            return grads\r\n        \r\n    def save_params(self, file_name=&quot;params.pkl&quot;):\r\n 
            params = {}\r\n        for key, val in self.params.items():\r\n       
          params[key] = val\r\n        with open(file_name, &#39;wb&#39;) as f:\r\n 
                pickle.dump(params, f)\r\n\r\n\r\n    def load_params(self, file_name=&quot;params.pkl&quot;):\r\n 
            with open(file_name, &#39;rb&#39;) as f:\r\n            params = pickle.load(f)\r\n 
            for key, val in params.items():\r\n            self.params[key] = val\r\n\r\n\r\n 
            for i, key in enumerate([&#39;Conv1&#39;, &#39;Affine1&#39;, &#39;Affine2&#39;]):\r\n 
                self.layers[key].W = self.params[&#39;W&#39; + str(i+1)]\r\n     
            self.layers[key].b = self.params[&#39;b&#39; + str(i+1)]</pre><p><br></p><p>(train_convnet.py)</p><pre>import
      sys, os\r\nsys.path.append(os.pardir)  # 親ディレクトリのファイルをインポートするための設定\r\nimport
      numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom dataset.mnist import
      load_mnist\r\nfrom simple_convnet import SimpleConvNet\r\nfrom common.trainer
      import Trainer\r\n\r\n\r\n# データの読み込み\r\n(x_train, t_train), (x_test, t_test)
      = load_mnist(flatten=False)\r\n\r\n\r\n# 処理に時間のかかる場合はデータを削減 \r\n#x_train, t_train
      = x_train[:5000], t_train[:5000]\r\n#x_test, t_test = x_test[:1000], t_test[:1000]\r\n\r\n\r\nmax_epochs
      = 20\r\n\r\n\r\nnetwork = SimpleConvNet(input_dim=(1,28,28), \r\n           
                  conv_param = {&#39;filter_num&#39;: 30, &#39;filter_size&#39;: 5,
      &#39;pad&#39;: 0, &#39;stride&#39;: 1},\r\n                        hidden_size=100,
      output_size=10, weight_init_std=0.01)\r\n                        \r\ntrainer
      = Trainer(network, x_train, t_train, x_test, t_test,\r\n                  epochs=max_epochs,
      mini_batch_size=100,\r\n                  optimizer=&#39;Adam&#39;, optimizer_param={&#39;lr&#39;:
      0.001},\r\n                  evaluate_sample_num_per_epoch=1000)\r\ntrainer.train()\r\n\r\n\r\n#
      パラメータの保存\r\nnetwork.save_params(&quot;params.pkl&quot;)\r\nprint(&quot;Saved
      Network Parameters!&quot;)\r\n\r\n\r\n# グラフの描画\r\nmarkers = {&#39;train&#39;:
      &#39;o&#39;, &#39;test&#39;: &#39;s&#39;}\r\nx = np.arange(max_epochs)\r\nplt.plot(x,
      trainer.train_acc_list, marker=&#39;o&#39;, label=&#39;train&#39;, markevery=2)\r\nplt.plot(x,
      trainer.test_acc_list, marker=&#39;s&#39;, label=&#39;test&#39;, markevery=2)\r\nplt.xlabel(&quot;epochs&quot;)\r\nplt.ylabel(&quot;accuracy&quot;)\r\nplt.ylim(0,
      1.0)\r\nplt.legend(loc=&#39;lower right&#39;)\r\nplt.show()</pre><p><br></p><p>...</p><p>train
      loss:0.0008943811980456424</p><p>train loss:0.0007073603700735564</p><p>===============
      Final Test Accuracy ===============</p><p>test acc:0.9868</p><p>Saved Network
      Parameters!</p><p><br></p><p>テストデータの認識率がおよそ 99% というのは、比較的小さなネットワークにしては、とても高い認識率ではないでしょうか。なお、次章
      では、さらに層を重ねてディープにすることで、テストデータの認識率が 99% を超えるネットワークを実現します。</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565936727904-simpleConvNet.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><h2>CNNの可視化</h2><hr><p>学習前：フィルターがランダムに初期化されているため白黒の濃淡に規則性がない</p><p>学習後：規則性がある</p><p><br></p><p>このような規則性があるフィルターは&quot;何を見ている&quot;のか</p><p>畳み込み層のフィルターは、エッジやブロブなどのプリミティブな情報を抽出する</p><p>・<strong>エッジ</strong>：色が変化する境目</p><p>・<strong>ブロブ</strong>：局所的に塊のある領域</p><p><br></p><p>(ch07/visualize_filter.python)</p><pre>import
      numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom simple_convnet import
      SimpleConvNet\r\n\r\n\r\ndef filter_show(filters, nx=8, margin=3, scale=10):\r\n 
        <span style=\"color: rgb(163, 143, 132);\">&quot;&quot;&quot;\r\n    c.f.
      https://gist.github.com/aidiary/07d530d5e08011832b12#file-draw_weight-py\r\n
      \   &quot;&quot;&quot;</span>\r\n    FN, C, FH, FW = filters.shape\r\n    ny
      = int(np.ceil(FN / nx))\r\n\r\n\r\n    fig = plt.figure()\r\n    fig.subplots_adjust(left=0,
      right=1, bottom=0, top=1, hspace=0.05, wspace=0.05)\r\n\r\n\r\n    for i in
      range(FN):\r\n        ax = fig.add_subplot(ny, nx, i+1, xticks=[], yticks=[])\r\n 
            ax.imshow(filters[i, 0], cmap=plt.cm.gray_r, interpolation=&#39;nearest&#39;)\r\n 
        plt.show()\r\n\r\n\r\n\r\n\r\nnetwork = SimpleConvNet()\r\n<span style=\"color:
      rgb(163, 143, 132);\"># ランダム初期化後の重み</span>\r\nfilter_show(network.params[&#39;W1&#39;])\r\n\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># 学習後の重み</span>\r\nnetwork.load_params(&quot;params.pkl&quot;)\r\nfilter_show(network.params[&#39;W1&#39;])</pre><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565937481038-visualizeBoforeLearning.png\"><span
      class=\"fr-inner\">学習前</span></span><span class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565937495258-visualizeAfterLearning.png\"><span
      class=\"fr-inner\">学習後</span></span></span></p><p><br></p><h2>階層構造による情報抽出</h2><hr><p>1層目の畳み込み：エッジやブロブなどの低レベルの情報が抽出</p><p>畳み込み層を何層も重ねる：より複雑で抽象化された情報が抽出</p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1565938182912-cnn_abstract_info.png\"><span
      class=\"fr-inner\">[画像は以下文献より引用]</span></span></span></p><p>Donglai Wei, Bolei
      Zhou, Antonio Torralba, William T. Freeman(2015): mNeuron: A Matlab Plugin to
      Visualize Neurons from Deep Models (http://vision03.csail.mit.edu/cnn_art/index.html#v_single)
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><p><br></p><p>Cov1:エッジ、ブロブ（Edge+Blob）</p><p>Cov3:テキスチャ（Texture）</p><p>Cov5:物体のパーツ（Object
      Parts）</p><p>Fc8:犬や猫などの物体のクラス（Object Classes） &nbsp; &nbsp;</p><p><br></p><p>従って、<strong>層が深くなるに連れて、ニューロンは単純な形状から&quot;高度&quot;な情報へと変化</strong>していく。</p><p><br></p><p><br></p><h2>代表的なCNN</h2><hr><p>特に重要なネットワークを2つ紹介</p><p>・1998年に初めて提案されたCNNの元祖LeNet<br>・ディープラーニングが注目を集めるに至った2012年のAlexNet</p><p><br></p><h3>LeNet</h3><p>「現在のCNN」と比較すると次の点が異なる<br>・活性化関数にシグモイド関数を使用(現在はReLU関数)<br>・サブサンプリングによって中間データのサイズ縮小を行っている(現在はMaxプーリング)</p><p><br></p><h3>AlexNet</h3><p>AlexNetは畳み込み層とプーリング層を重ねて、最後に全結合層を経由して結果を出力する<br>LeNetとの以下の点が異なる<br>・活性化関数にReLU関数を用いる<br>・LRN(Local
      Response Normalization)と言う局所的正規化を行う層を用いる<br>・Dropoutを使用する</p><p><br></p><h3>当時と今</h3><p>ネットワーク構成にはLeNet、AlexNeには大きな違いはありませんが、コンピュータ技術に大きな進歩があった<br>具体的には<br>・大量のデータを誰でも入手できるようになった<br>・大量の並列計算を得意とするGPUが普及し、大量の演算を高速に行うことが可能になった</p><p><br></p><h2>本章で学んだこと</h2><hr><ul><li>CNN
      は、これまでの全結合層のネットワークに対して、<span style=\"color: rgb(184, 49, 47);\"><u>畳み込み層</u></span>と<span
      style=\"color: rgb(41, 105, 176);\"><u>プーリング層</u></span>が新たに加わる</li><li>畳み込み層とプーリング層は、im2col(画像を行列に展開する関数)を用
      いるとシンプルで効率の良い実装ができる</li><li>CNN の可視化によって、<em><span style=\"color: rgb(184,
      49, 47);\">層が深くなるにつれて高度な情報が抽出</span></em>されて いく様子が分かる</li><li>CNN の代表的なネットワークには、<span
      style=\"color: rgb(184, 49, 47);\"><u>LeNet</u></span> と <span style=\"color:
      rgb(41, 105, 176);\"><u>AlexNet</u></span> がある</li><li>ディープラーニングの発展に、<span
      style=\"color: rgb(41, 105, 176);\"><u>ビッグデータと GPU が大きく貢献</u></span>している。</li></ul><p><br></p><p><br></p><p><br></p>"
    - '2019-08-13 18:27:22.014765'
    - '2019-08-18 13:35:27.195342'
  - - 197
    - ゼロから作る Deep Learning 第8章
    - "<h1 style=\"text-align: center;\">ゼロから作る Deep Learning 第8章</h1><p><br></p><h2>ネットワークをより深く</h2><hr><p>CNNのネットワークを深くしたものをVGGという</p><ul><li>3
      &times; 3 の小さなフィルターによる畳み込み層</li><li>活性化関数は ReLU</li><li>全結合層の後に Dropout レイヤを使用</li><li>Adam
      による最適化</li><li>重みの初期値として「He の初期値」を使用</li></ul><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566104240795-VGG.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>(ch08/deep_convnet.py)</p><pre>#
      coding: utf-8\r\nimport sys, os\r\nsys.path.append(os.pardir)  <span style=\"color:
      rgb(163, 143, 132);\"># 親ディレクトリのファイルをインポートするための設定</span>\r\nimport pickle\r\nimport
      numpy as np\r\nfrom collections import OrderedDict\r\nfrom common.layers import
      *\r\n\r\n\r\n\r\n\r\nclass DeepConvNet:\r\n<span style=\"color: rgb(163, 143,
      132);\">    &quot;&quot;&quot;認識率99%以上の高精度なConvNet\r\n\r\n\r\n    ネットワーク構成は下記の通り\r\n 
            conv - relu - conv- relu - pool -\r\n        conv - relu - conv- relu
      - pool -\r\n        conv - relu - conv- relu - pool -\r\n        affine - relu
      - dropout - affine - dropout - softmax\r\n    &quot;&quot;&quot;</span>\r\n 
        def __init__(self, input_dim=(1, 28, 28),\r\n                 conv_param_1
      = {&#39;filter_num&#39;:16, &#39;filter_size&#39;:3, &#39;pad&#39;:1, &#39;stride&#39;:1},\r\n 
                     conv_param_2 = {&#39;filter_num&#39;:16, &#39;filter_size&#39;:3,
      &#39;pad&#39;:1, &#39;stride&#39;:1},\r\n                 conv_param_3 = {&#39;filter_num&#39;:32,
      &#39;filter_size&#39;:3, &#39;pad&#39;:1, &#39;stride&#39;:1},\r\n         
             conv_param_4 = {&#39;filter_num&#39;:32, &#39;filter_size&#39;:3, &#39;pad&#39;:2,
      &#39;stride&#39;:1},\r\n                 conv_param_5 = {&#39;filter_num&#39;:64,
      &#39;filter_size&#39;:3, &#39;pad&#39;:1, &#39;stride&#39;:1},\r\n         
             conv_param_6 = {&#39;filter_num&#39;:64, &#39;filter_size&#39;:3, &#39;pad&#39;:1,
      &#39;stride&#39;:1},\r\n                 hidden_size=50, output_size=10):\r\n 
            <span style=\"color: rgb(163, 143, 132);\"># 重みの初期化===========\r\n        #
      各層のニューロンひとつあたりが、前層のニューロンといくつのつながりがあるか（TODO:自動で計算する）</span>\r\n        pre_node_nums
      = np.array([1*3*3, 16*3*3, 16*3*3, 32*3*3, 32*3*3, 64*3*3, 64*4*4, hidden_size])\r\n 
            weight_init_scales = np.sqrt(2.0 / pre_node_nums)  <span style=\"color:
      rgb(163, 143, 132);\"># ReLUを使う場合に推奨される初期値</span>\r\n        \r\n        self.params
      = {}\r\n        pre_channel_num = input_dim[0]\r\n        for idx, conv_param
      in enumerate([conv_param_1, conv_param_2, conv_param_3, conv_param_4, conv_param_5,
      conv_param_6]):\r\n            self.params[&#39;W&#39; + str(idx+1)] = weight_init_scales[idx]
      * np.random.randn(conv_param[&#39;filter_num&#39;], pre_channel_num, conv_param[&#39;filter_size&#39;],
      conv_param[&#39;filter_size&#39;])\r\n            self.params[&#39;b&#39; +
      str(idx+1)] = np.zeros(conv_param[&#39;filter_num&#39;])\r\n            pre_channel_num
      = conv_param[&#39;filter_num&#39;]\r\n        self.params[&#39;W7&#39;] = weight_init_scales[6]
      * np.random.randn(64*4*4, hidden_size)\r\n        self.params[&#39;b7&#39;]
      = np.zeros(hidden_size)\r\n        self.params[&#39;W8&#39;] = weight_init_scales[7]
      * np.random.randn(hidden_size, output_size)\r\n        self.params[&#39;b8&#39;]
      = np.zeros(output_size)\r\n\r\n\r\n        <span style=\"color: rgb(163, 143,
      132);\"># レイヤの生成===========</span>\r\n        self.layers = []\r\n        self.layers.append(Convolution(self.params[&#39;W1&#39;],
      self.params[&#39;b1&#39;], \r\n                           conv_param_1[&#39;stride&#39;],
      conv_param_1[&#39;pad&#39;]))\r\n        self.layers.append(Relu())\r\n     
        self.layers.append(Convolution(self.params[&#39;W2&#39;], self.params[&#39;b2&#39;], \r\n 
                               conv_param_2[&#39;stride&#39;], conv_param_2[&#39;pad&#39;]))\r\n 
            self.layers.append(Relu())\r\n        self.layers.append(Pooling(pool_h=2,
      pool_w=2, stride=2))\r\n        self.layers.append(Convolution(self.params[&#39;W3&#39;],
      self.params[&#39;b3&#39;], \r\n                           conv_param_3[&#39;stride&#39;],
      conv_param_3[&#39;pad&#39;]))\r\n        self.layers.append(Relu())\r\n     
        self.layers.append(Convolution(self.params[&#39;W4&#39;], self.params[&#39;b4&#39;],\r\n 
                               conv_param_4[&#39;stride&#39;], conv_param_4[&#39;pad&#39;]))\r\n 
            self.layers.append(Relu())\r\n        self.layers.append(Pooling(pool_h=2,
      pool_w=2, stride=2))\r\n        self.layers.append(Convolution(self.params[&#39;W5&#39;],
      self.params[&#39;b5&#39;],\r\n                           conv_param_5[&#39;stride&#39;],
      conv_param_5[&#39;pad&#39;]))\r\n        self.layers.append(Relu())\r\n     
        self.layers.append(Convolution(self.params[&#39;W6&#39;], self.params[&#39;b6&#39;],\r\n 
                               conv_param_6[&#39;stride&#39;], conv_param_6[&#39;pad&#39;]))\r\n 
            self.layers.append(Relu())\r\n        self.layers.append(Pooling(pool_h=2,
      pool_w=2, stride=2))\r\n        self.layers.append(Affine(self.params[&#39;W7&#39;],
      self.params[&#39;b7&#39;]))\r\n        self.layers.append(Relu())\r\n       
      self.layers.append(Dropout(0.5))\r\n        self.layers.append(Affine(self.params[&#39;W8&#39;],
      self.params[&#39;b8&#39;]))\r\n        self.layers.append(Dropout(0.5))\r\n 
            \r\n        self.last_layer = SoftmaxWithLoss()\r\n\r\n\r\n    def predict(self,
      x, train_flg=False):\r\n        for layer in self.layers:\r\n            if
      isinstance(layer, Dropout):\r\n                x = layer.forward(x, train_flg)\r\n 
                else:\r\n                x = layer.forward(x)\r\n        return x\r\n\r\n\r\n 
        def loss(self, x, t):\r\n        y = self.predict(x, train_flg=True)\r\n 
            return self.last_layer.forward(y, t)\r\n\r\n\r\n    def accuracy(self,
      x, t, batch_size=100):\r\n        if t.ndim != 1 : t = np.argmax(t, axis=1)\r\n\r\n\r\n 
            acc = 0.0\r\n\r\n\r\n        for i in range(int(x.shape[0] / batch_size)):\r\n 
                tx = x[i*batch_size:(i+1)*batch_size]\r\n            tt = t[i*batch_size:(i+1)*batch_size]\r\n 
                y = self.predict(tx, train_flg=False)\r\n            y = np.argmax(y,
      axis=1)\r\n            acc += np.sum(y == tt)\r\n\r\n\r\n        return acc
      / x.shape[0]\r\n\r\n\r\n    def gradient(self, x, t):\r\n        # forward\r\n 
            self.loss(x, t)\r\n\r\n\r\n        # backward\r\n        dout = 1\r\n 
            dout = self.last_layer.backward(dout)\r\n\r\n\r\n        tmp_layers =
      self.layers.copy()\r\n        tmp_layers.reverse()\r\n        for layer in tmp_layers:\r\n 
                dout = layer.backward(dout)\r\n\r\n\r\n        <span style=\"color:
      rgb(163, 143, 132);\"># 設定</span>\r\n        grads = {}\r\n        for i, layer_idx
      in enumerate((0, 2, 5, 7, 10, 12, 15, 18)):\r\n            grads[&#39;W&#39;
      + str(i+1)] = self.layers[layer_idx].dW\r\n            grads[&#39;b&#39; + str(i+1)]
      = self.layers[layer_idx].db\r\n\r\n\r\n        return grads\r\n\r\n\r\n    def
      save_params(self, file_name=&quot;params.pkl&quot;):\r\n        params = {}\r\n 
            for key, val in self.params.items():\r\n            params[key] = val\r\n 
            with open(file_name, &#39;wb&#39;) as f:\r\n            pickle.dump(params,
      f)\r\n\r\n\r\n    def load_params(self, file_name=&quot;params.pkl&quot;):\r\n 
            with open(file_name, &#39;rb&#39;) as f:\r\n            params = pickle.load(f)\r\n 
            for key, val in params.items():\r\n            self.params[key] = val\r\n\r\n\r\n 
            for i, layer_idx in enumerate((0, 2, 5, 7, 10, 12, 15, 18)):\r\n     
            self.layers[layer_idx].W = self.params[&#39;W&#39; + str(i+1)]\r\n   
              self.layers[layer_idx].b = self.params[&#39;b&#39; + str(i+1)]</pre><p><br></p><p>(ch08/train_deepnet.py)</p><pre>#
      coding: utf-8\r\nimport sys, os\r\nsys.path.append(os.pardir)  # 親ディレクトリのファイルをインポートするための設定\r\nimport
      numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom dataset.mnist import
      load_mnist\r\nfrom deep_convnet import DeepConvNet\r\nfrom common.trainer import
      Trainer\r\n\r\n\r\n(x_train, t_train), (x_test, t_test) = load_mnist(flatten=False)\r\n\r\n\r\nnetwork
      = DeepConvNet()  \r\ntrainer = Trainer(network, x_train, t_train, x_test, t_test,\r\n 
                      epochs=20, mini_batch_size=100,\r\n                  optimizer=&#39;Adam&#39;,
      optimizer_param={&#39;lr&#39;:0.001},\r\n                  evaluate_sample_num_per_epoch=1000)\r\ntrainer.train()\r\n\r\n\r\n#
      パラメータの保存\r\nnetwork.save_params(&quot;deep_convnet_params.pkl&quot;)\r\nprint(&quot;Saved
      Network Parameters!&quot;)</pre><p><br></p><h2>さらに認識精度を高めるための手法</h2><hr><ul><li>アンサンブル学習</li><li>学習係数の減衰</li><li>Data
      Augmentation(データ拡張)</li></ul><p><br></p><p><span class=\"fr-img-caption fr-fic
      fr-dib fr-fil\" style=\"width: 500px;\"><span class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566105578254-data_augmentation.png\"><span
      class=\"fr-inner\">Data Augmentaion の例</span></span></span></p><p><span contenteditable=\"true\">Data
      Augmentaionは、</span>上記の移動や回転の他にも、画像の中から一部を切り出す「crop 処理」や、 左右をひっくり返す「flip 処理」など様々な方法で拡張できる。</p><p>＊
      flip 処理は、画像の対称性を考慮する必要のない場合にのみ有効です。</p><p><br></p><h2>層を深くすることのモチベーション</h2><hr><p>層を深くすることの重要性について、理論的に多くのことはわからない</p><ul><li>ただ、層を深くすることで階層的に情報を渡せる(前の層で抽出した特徴を次層で情報として使えるためより高度な学習ができる)</li><li>層を深くするメリットは、ネットワークのパラメータ数を少なくできる<ul><li>層を深くすれば学習データを少なく、高速に学習ができる(層を深くすると学習する問題を階層的に分解することができる)</li></ul></li></ul><p><br></p><h2>ディープラーニングの小歴史</h2><hr><p>2012
      年に開催された大規模画像認識のコンペティション ILSVRC(ImageNet Large Scale Visual Recognition Challenge)で、ディープラーニングによる手法――通称、AlexNet――が、圧倒的な成績
      で優勝し、これまでの画像認識に対するアプローチを根底から覆した。まさに、 転換点となった 2012 年のディープラーニングの逆襲により、それ以降のコンペティ
      ションでは、常にディープラーニングが主役に躍り出た。</p><p><br></p><p>本節ではIVSVRCを軸に、最近のディープラーニングのトレーニングをみる</p><p><br></p><h3>ImageNet</h3><p>100
      万枚を超える画像のデータセットです。さまざまな種類の画像が含まれており、それぞれの画像にはラベル(クラス名) が紐付けられています。この巨大なデータセットを使って、ILSVRC
      という画像認識のコンペティションが毎年行われる</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566106601486-imageNet.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>以下文献より引用 J. Deng,
      W. Dong, R. Socher, L.J. Li, Kai Li, and Li Fei-Fei (2009):ImageNet: A large-scale
      hierarchical image database. In IEEE Conference on Computer Vision and Pattern
      Recognition, 2009. CVPR 2009. 248&ndash;255. DOI:(http://dx.doi.org/10.1109/CVPR.2009.5206848)</p><p><br></p><p><br></p><p>ここ最近の
      ILSVRC のクラス分類部門の結果</p><p><br></p><p><span class=\"fr-img-caption fr-fic fr-dib
      fr-fil\" style=\"width: 500px;\"><span class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566106800895-ILSVRC.png\"><span
      class=\"fr-inner\">ILSVRC における優秀チームの成績の推移:縦軸は誤認識率、横軸は各年。横軸の括弧内には、チーム名または手法名を示す</span></span></span></p><p><br></p><p>2012
      年を境にディープラーニングによる手法 が常にトップに立っている。</p><p><br></p><p>VGG、GoogLeNet、ResNet
      の有名な3つのネットワークを紹介する</p><h3><br></h3><h3>・VGG</h3><p>基本的なCNNだが、小さなフィルタによる畳み込み層が連続しているのが特徴</p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566200584099-VGG_image.png\"><span
      class=\"fr-inner\">文献[1]を参考に作成された</span></span></span></p><p><br></p><p>2014年のコンペティションで2位</p><p>VGG
      で注目すべきポイントは、3 &times; 3 の小さなフィルターによる畳み込み層を連続して行っている点。畳み込み層を 2 回から 4回連続し、プー
      リング層でサイズを半分にするという処理を繰り返し行い、最後に全結合層を経由して結果を出力する。</p><p><br></p><h3>・GoogleNet</h3><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566201734520-googlenet01.png\"><span
      class=\"fr-inner\">文献[2]より引用</span></span></span></p><p><br></p><p>ネットワークが縦方向の深さだけではなく、横方向にも深さ(広がり)を持っているという点が特徴</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566200965089-GoogleNet.png\"><span
      class=\"fr-inner\">GoogLeNet のインセプション構造(文献[2]より引用)</span></span></span></p><p><br></p><h3>・Residual
      Network (ResNet)</h3><p><br></p><p>層をまたいで出力に合算する<strong>スキップ構造</strong>が特徴</p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566202227764-ResNet.png\"><span
      class=\"fr-inner\">ResNet の構成要素(文献 [3] より引用):ここで「weight layer」とは畳み込み層を指す</span></span></span></p><p><br></p><p>スキップ構造を取り入れることで、層を深くしても効率良く学習することができます。これは、逆伝播の際に、スキップ構造によって信号が減衰することなく伝わっていくから。</p><p>スキップ構造は入力データを&ldquo;そのまま&rdquo;流すだけ&nbsp;</p><p>-&gt;
      勾配が小さくなったり(または大きくなりすぎたり)する心配がなく、層を深くすることで勾配が小さくなる勾配消失問題が軽減</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566203495372-ResNet2.png\"><span
      class=\"fr-inner\">ResNet(文献 [3] より引用):ブロックが 3 &times; 3 の畳み込み層に対応。層をまたぐスキップ構造が特徴</span></span></span></p><p>ResNetは上記写真の右「3-4
      layer residual」</p><p>畳み込み層を 2 層おきにスキップしてつなぎ、 層を深くしていきます。なお、実験によって、150 層以上に深くしても認識精度は向上し続けることが分かりました。そして、ILSVRC
      のコンペティションでは、誤認 識率(上位 5 クラス以内に正解が含まれる精度の誤認識率)が 3.5% という、驚異的な結果を出した。</p><p><br></p><p><code>ImageNet
      の巨大なデータセットを使って学習した重みデータを有効活用する ということが実践的によく行われます。これは転移学習と言って、学習済みの 重み(の一部)を別のニューラルネットワークにコピーして、再学習を行いま
      す。たとえば、VGG と同じ構成のネットワークを用意し、学習済みの重みを 初期値とし、新しいデータセットを対象に、再学習(fine tuning)を行います。
      転移学習は、手元にあるデータセットが少ない場合において、特に有効な手法 です。</code></p><p><br></p><h2>ディープラーニングの高速化</h2><hr><p>ビッグデータとネットワークの大規模化により、ディープラーニングでは大量の演算を行う必要がある。</p><p><br></p><ul><li>ディープラーニングのフレームワークの多くはGPUをサポート
      -&gt; 大量の演算を高速に処理</li><li>複数のGPUや複数のマシン -&gt; 分散学習で負荷を分散</li><li>演算精度のビット削減<ul><li>通常の64ビットや32ビットの浮動小数点数ではなく、16ビットの<strong>半浮動小数点数</strong>を使う</li><li>Google
      TPUは8ビットの計算ユニットで計算を行う</li><li>最近では重みや中間データを1ビットで表現する手法も提案されている (文献[4])</li></ul></li></ul><p><br></p><h2>ディープラーニングの実用例</h2><hr><h3>物体検出</h3><p>画像中から物体の位置の特定を含めてクラス分類を行う問題（複数のクラスも検出する）</p><p>画像中から物体の種類と物体の位置を特定する。</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566204835427-object_recongnization.png\"><span
      class=\"fr-inner\">物体検出の例(文献 [5] より引用)</span></span></span></p><p><br></p><p>R-CNNと呼ばれる手法が有名で、最初に物体と物体以外を識別する「候補領域抽出」を行い、抽出された領域に対してCNNでクラス分類を行っている</p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566204986551-RCNN_flow.png\"><span
      class=\"fr-inner\">R-CNN の処理フロー(文献 [6] より引用)</span></span></span></p><p><br></p><h3>セグメンテーション</h3><p>画像に対してピクセルレベルでクラス分類を行う。</p><p>ピクセル単位でオブジェクトごとに色ずけれられた教師データを使って学習を行う。</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566205911044-segmentation.png\"><span
      class=\"fr-inner\">セグメンテーションの例(文献 [5] より引用):左が入力画像、右が教師用のラベリング画像</span></span></span></p><p><br></p><p>FCN
      (Fully Convolutional Network＝全てが畳み込み層のネットワーク)という手法が有名で、1回のforward処理ですべてのピクセルに対してクラス分類を行い、中間データの空間ボリュームを保持したまま最後の出力まで処理する。<br>また、最後にバイリニア補間による拡大をデコンボリューション（逆畳み込み演算）によって実現する。</p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566205927634-FCN.png\"><span
      class=\"fr-inner\">FCN の全体図(文献 [7] より引用)</span></span></span></p><p><br></p><h3>画像キャプション生成</h3><p><br></p><p>画像を与えると、その画像を説明する文章を自動で生成する研究<br>NIC
      (Neural Image Caption) ではCNNで画像認識、RNN（再帰的なネットワーク）で言語生成を行っている</p><p><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566206512613-image_caption.png\"><span
      class=\"fr-inner\">ディープラーニングによる画像のキャプション生成の例(文献 [8] より引用)</span></span></span></p><p><br></p><p>画像キャプションを生成する代表的な方法に、NIC
      (Neural Image Caption)と呼ばれるモデルがある</p><p>NIC は、画像から CNN によって特徴を抽出し、その特徴を RNN
      に渡す。</p><p>基本 的には、NIC は 2 つのニューラルネットワーク―― CNN と RNN――を組み合わせ たシンプルな構成です。それによって、驚くほど高精度な画像キャプションの生成が行える。</p><p>なお、画像と自然言語といったような、複数の種類の情報を組み合わせて処理することをマルチモーダル処理と言う。</p><p><br></p><h2>ディープラーニングの未来</h2><hr><h3>・画像スタイル変換</h3><p>以下の図で示す例は、2
      つの画像を入力し、新しい画像を生成する という研究です</p><p><span class=\"fr-img-caption fr-fic fr-dib
      fr-fil\" style=\"width: 500px;\"><span class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566207016712-image_style_change.png\"><span
      class=\"fr-inner\">論文「A Neural Algorithm of Artistic Style」による画像スタイル変換の例:左上が「スタイ
      ル画像」、右上が「コンテンツ画像」、下の画像が新たに生成された画像(画像は文献 [9] より引用)&nbsp;</span></span></span></p><p>ゴッホの描画スタイルを、コンテンツ画像に適用するように指定すれば、ディープラーニングが、指定されたとおりに新しい絵画を描いてくれ
      る。</p><p>これは「A Neural Algorithm of Artistic Style」[9] という論文の研究で、発表されるやいなや世界中で多くの注目を集めた。</p><p><br></p><h3>・画像生成</h3><p>新しい画像を生成する際に、何の画像も必要とせ
      ずに新たな画像を描き出すといった研究も行われている。</p><p><span class=\"fr-img-caption fr-fic fr-dib
      fr-fil\" style=\"width: 500px;\"><span class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566207470713-+DCGAN.png\"><span
      class=\"fr-inner\">DCGAN によって新たに生成されたベッドルームの画像(文献 [10] より引用)</span></span></span></p><p>画像は本物の写真のように見えるかもしれませんが、これらの画像は、
      DCGAN によって新たに生成された画像です。つまり、DCGAN が描き出す画像 は、まだ誰も見たことがない画像(学習データには存在しない画像)であり、ゼロから新たに生成された画像なのです。</p><p><br></p><p>DCGAN
      は、Generator(生成する人)と Discriminator(識別する人)の 2 つの ニューラルネットワークを利用している。</p><p>Generator
      が本物そっくりの画像を生成</p><p>-&gt; Discriminator は、 Generator が生成した画像 か、それとも実際に撮影された本物の画像か――を判定</p><p>両者を競わせるように学習させていくことで、Generator
      は、より精巧な騙し画像の技術 を学習し、Discriminator は、より高精度に見破ることができる鑑定師のように成長していく</p><p><br></p><p>切磋琢磨して成長した
      Generator は、最終的には本物と見間違うほどの画像を描き出せる能力を身につける場合がある。</p><p><br></p><h3>・自動運転</h3><p>CNNベースのSegNetは走路環境のセグメンテーションを高精度で行う。</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566290795119-automatic_drive.png\"><span
      class=\"fr-inner\">ディープラーニングによる画像のセグメンテーションの例:道路や車、建物や歩道などが高 精度に認識されている(文献
      [11] より引用)&nbsp;</span></span></span></p><p>上記画像に示すように、入力画像に対してセグメンテーション(ピクセルレベルの
      判定)を行っている。</p><p>結果を見ると、道路や建物、歩道や木、車やバイクなどを、 ある程度正確に判別していることが分かる。</p><p><br></p><h3>・Deep
      Q-Network(強化学習)</h3><p>強化学習では、エージェントと呼ばれるものが、環境の状況に応じて行動を選択し、その行動によって環境が変化するというのが基本的な枠組み。</p><p>環境の変化に
      よって、エージェントは何らかの報酬を得る。強化学習での目的は、より良い報酬が得られるようにエージェントの行動指針を決めるという点にある</p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566292296112-reinforcement_learning.png\"><span
      class=\"fr-inner\">強化学習の基本的な枠組み:エージェントは、より良い報酬を目指して自立的に学習する</span></span></span></p><p><br></p><p>ディープラーニングを使った強化学習の手法として、Deep
      Q-Network(通称、 DQN)[44] という手法がある</p><p>DQNは、動作に対する価値観数をCNNで近似することで、画像に対しての動作を最適化する学習を行う</p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 500px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566292564904-deep_Q_network.png\"><span
      class=\"fr-inner\">[12] Volodymyr Mnih et al(2015):Human-level control through
      deep reinforcement learning. Nature 518, 7540 (2015), 529 &ndash; 533.</span></span></span></p><p>人工知能である
      AlphaGo [13] が<u>囲碁のチャンピオンを破った</u>というニュース は大きな注目を集めました。<u>この AlphaGo という技術の内部でも、ディープラーニングと強化学習が用いられています。</u>AlphaGo
      では、3,000 万個のプロの棋譜を与えて学習させ、さらに、AlphaGo 自身が自分自身と対戦することを何度も繰り返しながら、学習を積み重ねたそうです。なお、AlphaGo
      と DQN は両方とも、Google の Deep Mind 社によって行われた研究です。今後も、Deep Mind 社の活躍には目が離せません。</p><p><br></p><h3>まとめ</h3><hr><p>本章では、ディープな
      CNN を実装し、手書き数字認識において 99% を超 える高精度な認識結果を得た。</p><p>ディープラーニングのトレンドや実用例、また、高速化に向けた研究や未来を感じさせる研究例を紹介した。</p><p>世界中の研究者や技術者たちは、これからも活発に研究を続け、そして、今では想像もつかないような技術が現実化されるでしょう。</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p>[1]
      Karen Simonyan and Andrew Zisserman（2014）：Very Deep Convolutional Networks for
      Large-Scale Image Recognition. arXiv:1409.1556［cs］(September 2014).&nbsp;</p><p>[2]
      Christian Szegedy et al（2015）：Going Deeper With Convolutions. In The IEEE Conference
      on Computer Vision and Pattern Recognition (CVPR).&nbsp;</p><p>[3] Kaiming He,
      Xiangyu Zhang, Shaoqing Ren, and Jian Sun（2015）：Deep Residual Learning for Image
      Recognition. arXiv:1512.03385［cs］(December 2015).</p><p>[4] Matthieu Courbariaux
      and Yoshua Bengio（2016）：Binarized Neural Networks: Training Deep Neural Networks
      with Weights and Activations Constrained to +1 or -1. arXiv preprint arXiv:1602.02830
      (2016).</p><p>[5] Visual Object Classes Challenge 2012 (VOC2012)(http://host.robots.ox
      .ac.uk/pascal/VOC/voc2012/)</p><p>[6] Ross Girshick, Jeff Donahue, Trevor Darrell,
      and Jitendra Malik（2014）：Rich Feature Hierarchies for Accurate Object Detection
      and Semantic Segmentation. In 580&ndash;587.</p><p>[7] Jonathan Long, Evan Shelhamer,
      and Trevor Darrell(2015):Fully Convolutional Networks for Semantic Segmentation.
      In The IEEE Conference on Computer Vision and Pattern Recognition (CVPR).</p><p>[8]
      Oriol Vinyals, Alexander Toshev, Samy Bengio, and Dumitru Erhan（2015）：Show and
      Tell: A Neural Image Caption Generator. In The IEEE Conference on Computer Vision
      and Pattern Recognition (CVPR).</p><p>[9] neural-style &quot;Torch implementation
      of neural style algorithm&quot;(https: //github.com/jcjohnson/neural-style/)</p><p>[10]
      Alec Radford, Luke Metz, and Soumith Chintala(2015):Unsupervised Representation
      Learning with Deep Convolutional Generative Adversarial Networks. arXiv:1511.06434[cs](November
      2015).</p><p>[11] SegNet Demo page(http://mi.eng.cam.ac.uk/projects/segnet/)</p><p>[12]
      Volodymyr Mnih et al(2015):Human-level control through deep reinforcement learning.
      Nature 518, 7540 (2015), 529 &ndash; 533.</p><p>[13] David Silver et al(2016):Mastering
      the game of Go with deep neural networks and tree search. Nature 529, 7587 (2016),
      484 &ndash; 489.</p>"
    - '2019-08-18 14:49:33.688466'
    - '2019-08-20 19:05:55.742312'
  - - 198
    - R のインストール
    - '<h1 style="text-align: center;">Rのインストール</h1><p><br></p><h2>Rとは</h2><hr><p><strong>R言語</strong>（あーるげんご）はオープンソース・フリーソフトウェアの統計解析向けのプログラミング言語及びその開発実行環境である。</p><p>(wikipedia引用)</p><p>統計学者が使う言語で、データの可視化に優れている。</p><p><br></p><h2>手順</h2><hr><p><br></p><p><a
      href="https://cran.r-project.org/">https://cran.r-project.org/</a> こちらから自分のOSに合わせてRをインストールする</p><p><br></p><ul><li><a
      href="https://cran.r-project.org/bin/linux/">Download R for Linux</a></li><li><a
      href="https://cran.r-project.org/bin/macosx/">Download R for (Mac) OS X</a></li><li><a
      href="https://cran.r-project.org/bin/windows/">Download R for Windows</a></li></ul><p><br></p><p>Macユーザーはインストールしたらアプリケーションの中に入るので、アプリケーションからクリックして開きましょう。</p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1566705496330-R_mac.png"
      style="width: 500px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><br></p><p><br></p><p><br></p>'
    - '2019-08-25 12:58:35.577934'
    - '2019-08-25 13:05:59.95745'
  - - 199
    - R 入門
    - "<h1 style=\"text-align: center;\">R 入門</h1><p><br></p><h2>目次</h2><pre><span
      style=\"font-size: 24px;\">・<a href=\"#variable_insert\">変数への代入</a>\r\n・<a href=\"#basic_calculation\">基本的な計算</a>\r\nデータ構造\r\n・<a
      href=\"#vector\">ベクトル</a>\r\n・<a href=\"#matrix\">行列</a>\r\n・<a href=\"#data_frame\">データフレーム</a>\r\n・</span><a
      href=\"#list\"><span style=\"font-size: 24px;\">リスト</span></a></pre><h2><br></h2><h2><br></h2><h2><br></h2><h2
      id=\"variable_insert\">変数の代入</h2><hr><p>代入では =(イコール)か &lt;-, -&gt;(矢印)を使う。</p><p>どちらを使っても構わない。</p><pre>a=1
      <span style=\"color: rgb(44, 130, 201);\">&gt;  a=1</span>\r\nb=2 <span style=\"color:
      rgb(44, 130, 201);\">&gt; b=2</span>\r\na+b <span style=\"color: rgb(44, 130,
      201);\">[1] 3</span>\r\nc &lt;- 4\r\n5 -&gt; d\r\nc+d <span style=\"color: rgb(44,
      130, 201);\">&lt; [1] 9</span></pre><p><br></p><h2 id=\"basic_calculation\">基本的な計算</h2><hr><pre>a=1
      <span style=\"color: rgb(44, 130, 201);\">&gt;  a=1</span>\r\nb=2 <span style=\"color:
      rgb(44, 130, 201);\">&gt; b=2</span>\r\na+b # 足し算\r\na-b # 引き算\r\na*b # 掛け算\r\na/b
      # 割り算\r\na**b # べき乗\r\na^b # 同じくべき乗</pre><p><br></p><h2>データ構造</h2><hr><h3 id=\"vector\">・ベクトル</h3><h4>ベクトルの生成</h4><pre><span
      style=\"color: rgb(44, 130, 201);\">&gt; x=1:5\r\n&gt; x</span>\r\n[1] 1 2 3
      4 5\r\n<span style=\"color: rgb(44, 130, 201);\">&gt; y=c(1,3,5,7,9)\r\n&gt;
      y</span>\r\n[1] 1 3 5 7 9\r\n<span style=\"color: rgb(44, 130, 201);\">&gt;
      z=c(&quot;A&quot;,&quot;あ&quot;,1)\r\n&gt; z</span>\r\n[1] &quot;A&quot;  &quot;あ&quot;
      &quot;1&quot; </pre><p><br></p><h4>ベクトルの四則演算</h4><pre><span style=\"color: rgb(44,
      130, 201);\">&gt; x=1:5\r\n&gt; x</span>\r\n[1] 1 2 3 4 5\r\n<span style=\"color:
      rgb(44, 130, 201);\">&gt; y=c(1,2,1,2,1)\r\n&gt; y</span>\r\n[1] 1 2 1 2 1</pre><h4>足し算</h4><pre><span
      style=\"color: rgb(44, 130, 201);\">&gt; x+y</span>\r\n[1] 2 4 4 6 6</pre><p><br></p><h4>引き算</h4><pre><span
      style=\"color: rgb(44, 130, 201);\">&gt; x-y</span>\r\n[1] 0 0 2 2 4</pre><p><br></p><h4>掛け算</h4><pre><span
      style=\"color: rgb(44, 130, 201);\">&gt; x*y</span>\r\n[1] 1 4 3 8 5</pre><p><br></p><h4>べき乗</h4><pre><span
      style=\"color: rgb(44, 130, 201);\">&gt; x**y</span>\r\n[1] 1 4 3 16 5</pre><p><br></p><h4>割り算</h4><pre><span
      style=\"color: rgb(44, 130, 201);\">&gt; x/y</span>\r\n[1] 1 1 3 2 5</pre><p><br></p><h4>内積</h4><pre><span
      style=\"color: rgb(44, 130, 201);\">&gt; x%*%y</span>\r\n[,1]\r\n[1,]   21</pre><p><br></p><h3
      id=\"matrix\">・行列</h3><h4>行列(matrux)の生成</h4><pre><span style=\"color: rgb(44,
      130, 201);\">&gt; m=matrix(1:12,3,4) # 3行4列\r\n&gt; m</span>\r\n     [,1] [,2]
      [,3] [,4]\r\n[1,]    1    4    7   10\r\n[2,]    2    5    8   11\r\n[3,]  
       3    6    9   12\r\n\r\n<span style=\"color: rgb(44, 130, 201);\">&gt; n=matrix(2:13,3,4)\r\n&gt;
      n</span>\r\n     [,1] [,2] [,3] [,4]\r\n[1,]    2    5    8   11\r\n[2,]    3
         6    9   12\r\n[3,]    4    7   10   13</pre><p><br></p><h4>足し算</h4><p><span
      style=\"color: rgb(44, 130, 201);\">&gt; m+n</span></p><p><br></p><h4>引き算</h4><pre><span
      style=\"color: rgb(44, 130, 201);\">&gt; m-n</span>\r\n     [,1] [,2] [,3] [,4]\r\n[1,]
        -1   -1   -1   -1\r\n[2,]   -1   -1   -1   -1\r\n[3,]   -1   -1   -1   -1</pre><p><br></p><h4>掛け算</h4><pre><span
      style=\"color: rgb(44, 130, 201);\">&gt; m*n</span>\r\n     [,1] [,2] [,3] [,4]\r\n[1,]
         2   20   56  110\r\n[2,]    6   30   72  132\r\n[3,]   12   42   90  156</pre><p><br></p><h4>割り算</h4><p><span
      style=\"color: rgb(44, 130, 201);\">&gt; m/n</span></p><p><br></p><h3 id=\"data_frame\">・データフレーム</h3><p>行列と見た目は似ているが、列ごとの変数の型(実数型や文字型)を別個に管理したい場合に用いる。</p><p><br></p><h4>データフレームの生成</h4><pre><span
      style=\"color: rgb(44, 130, 201);\">&gt; X=data.frame(parson=c(&quot;C&quot;,&quot;C&quot;,&quot;D&quot;,&quot;D&quot;,&quot;D&quot;),
      height=c(160,165,170,175,180),weight=c(50,65,60,55,70))\r\n&gt; x</span>\r\n[1]
      1 2 3 4 5\r\n<span style=\"color: rgb(44, 130, 201);\">&gt; X</span>\r\n  parson
      height weight\r\n1    C    160     50\r\n2    C    165     65\r\n3    D    170
          60\r\n4    D    175     55\r\n5    D    180     70</pre><p><br></p><h4>データフレームを行列に変換</h4><pre><span
      style=\"color: rgb(44, 130, 201);\">&gt; Y=as.matrix(X)\r\n&gt; Y</span>\r\n 
         parson height weight\r\n[1,] &quot;C&quot;  &quot;160&quot;  &quot;50&quot;
       \r\n[2,] &quot;C&quot;  &quot;165&quot;  &quot;65&quot;  \r\n[3,] &quot;D&quot;
       &quot;170&quot;  &quot;60&quot;  \r\n[4,] &quot;D&quot;  &quot;175&quot;  &quot;55&quot;
       \r\n[5,] &quot;D&quot;  &quot;180&quot;  &quot;70&quot;  </pre><p><br></p><h4>オブジェクトの構造を表示する関数
      <em>str</em></h4><pre><span style=\"color: rgb(44, 130, 201);\">&gt; str(X)</span>\r\n&#39;data.frame&#39;: 
        5 obs. of  3 variables:\r\n $ bird  : Factor w/ 2 levels &quot;C&quot;,&quot;D&quot;:
      1 1 2 2 2\r\n $ height: num  160 165 170 175 180\r\n $ weight: num  50 65 60
      55 70</pre><p><br></p><h4>データフレーム型の行列への変換</h4><pre><span style=\"color: rgb(44,
      130, 201);\">&gt; X=data.frame(A=1:5,B=2:6,C=3:7)\r\n&gt; X</span>\r\n  A B
      C\r\n1 1 2 3\r\n2 2 3 4\r\n3 3 4 5\r\n4 4 5 6\r\n5 5 6 7\r\n<span style=\"color:
      rgb(44, 130, 201);\">&gt; Y=as.matrix(X)\r\n&gt; Y</span>\r\n     A B C\r\n[1,]
      1 2 3\r\n[2,] 2 3 4\r\n[3,] 3 4 5\r\n[4,] 4 5 6\r\n[5,] 5 6 7\r\n\r\n&gt; heatmap(X)
      # heatmap関数は行列しか受け付けないのでエラー\r\n&gt; heatmap(Y) # 正しく、ヒートマップが作成される</pre><p><br></p><h3
      id=\"list\">・リスト</h3><p>自由にオブジェクトを並列格納させる機能</p><pre><span style=\"color: rgb(44,
      130, 201);\">&gt; a=list(1:5, matrix(1:12,3,4), data.frame(x=1:4, y=2:5))\r\n&gt;
      a</span>\r\n[[1]]\r\n[1] 1 2 3 4 5\r\n\r\n[[2]]\r\n     [,1] [,2] [,3] [,4]\r\n[1,]
         1    4    7   10\r\n[2,]    2    5    8   11\r\n[3,]    3    6    9   12\r\n\r\n[[3]]\r\n 
      x y\r\n1 1 2\r\n2 2 3\r\n3 3 4\r\n4 4 5</pre><p><br></p><h4>リストの1つ目を取り出す</h4><pre><span
      style=\"color: rgb(44, 130, 201);\">&gt; a[1] # または a[[1]]</span>\r\n[[1]]\r\n[1]
      1 2 3 4 5</pre><p><br></p><h4>リストの第1成分の2番目</h4><pre>&gt; a[[1]][2]\r\n[1] 2</pre><p><br></p><h4>リストの第2成分の2行3列目</h4><pre>&gt;
      a[[2]][2,3]\r\n[1] 8</pre><p><br></p><h4>リストの第3成分のx列を取り出す</h4><pre><span style=\"color:
      rgb(44, 130, 201);\">&gt; a[[3]]</span>\r\n  x y\r\n1 1 2\r\n2 2 3\r\n3 3 4\r\n4
      4 5\r\n<span style=\"color: rgb(44, 130, 201);\">&gt; a[[3]]$x</span>\r\n[1]
      1 2 3 4\r\n<span style=\"color: rgb(44, 130, 201);\">&gt; a[[3]]$y</span>\r\n[1]
      2 3 4 5</pre><p><br></p><h4>リストの第3成分の2行目を取り出す</h4><pre><span style=\"color:
      rgb(44, 130, 201);\">&gt; a[[3]][2,]</span>\r\n  x y\r\n2 2 3</pre><p><br></p><h4>データ構造確認</h4><pre>&gt;
      class(a)\r\n[1] &quot;list&quot;</pre><p><br></p><p><br></p><p>以上！！</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-08-25 14:13:47.300382'
    - '2019-08-25 14:16:21.35585'
  - - 200
    - Rails ページ遷移でGoogle Adsenseが表示されない
    - "<h1 style=\"text-align: center;\">ページ遷移でGoogle Adsenseが表示されない</h1><p><br></p><h2>原因</h2><hr><p>Rails5では、ルートページではgoogleAdsenseが表示されるのに、<span
      style=\"font-size: 24px;\"><span style=\"color: rgb(184, 49, 47);\"><u>ページ遷移を行うと広告が表示されなくなる</u></span></span>現象が起きます。</p><p>これはデフォルトで入っている
      <span style=\"font-size: 24px;\"><u>turbolinksによる影響&nbsp;</u></span>で、ページ遷移をAjaxで行いjs,cssをコンパイルさせないため非常に高速で動いてくれるものの、広告が読み込まれずに表示できないという状態です。</p><p><br>turbolinksを無効にすれば解決はするのですが、デフォルトで入っているものは推奨されているからであり、極力省かないほうが良いです。<br>それで、今回は別の方法、根本的に解決する方法,ミドルウエアのRackを修正する方法を記載します。</p><p><br></p><h2>解決手順</h2><hr><h2>1.
      gemのインストール</h2><p>Gemfileに以下を追記して $ bundle install を行う。</p><pre data-lang=\"Ruby\"><code>gem
      &#39;rack-cors&#39;</code></pre><p><br></p><h2>2. application.rbに設定を追記</h2><p>(config/application.rb)</p><pre>module
      YourApp\r\n  class Application &lt; Rails::Application\r\n    # ...\r\n    \r\n
      \   <span style=\"color: rgb(184, 49, 47);\"># Rails 5 の場合、以下を追記</span>\r\n
      \   <span style=\"color: rgb(184, 49, 47);\">config.middleware.insert_before
      0, Rack::Cors do\r\n      allow do\r\n        origins &#39;*&#39;\r\n        resource
      &#39;*&#39;, headers: :any, methods: [:get, :post, :options]\r\n      end\r\n
      \   end</span>\r\n\r\n    <span style=\"color: rgb(44, 130, 201);\"># Rails
      3/4 の場合、以下を追記</span>\r\n\r\n    <span style=\"color: rgb(44, 130, 201);\">config.middleware.insert_before
      0, &quot;Rack::Cors&quot; do\r\n      allow do\r\n        origins &#39;*&#39;\r\n
      \       resource &#39;*&#39;, headers: :any, methods: [:get, :post, :options]\r\n
      \     end\r\n    end</span>\r\n  end\r\nend</pre><p><br></p><h2>3. 確認</h2><p>サーバーを再起動してページにアクセスしてください。ページ遷移を行なっても正しく表示されます！</p><p><br></p><p>当たり前ですけど、すでにAdesense広告を表示するコードは該当する箇所に貼ってある状態を想定しています。</p><pre><code>&lt;script
      async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n
      \    (adsbygoogle = window.adsbygoogle || []).push({\r\n          google_ad_client:
      &quot;ca-pub-xxxxxxxxxxxxxxxxx&quot;,\r\n          enable_page_level_ads: true\r\n
      \    });\r\n&lt;/script&gt;</code></pre><p><br></p><h2>まとめ</h2><hr><p>今回使ったのは
      <a href=\"https://github.com/cyu/rack-cors\">rack-cors</a> というgemです。</p><p>RackはRubyでWEBアプリケーションを開発する時に利用する、ミドルウエアです。</p><p>$
      rails middleware でミドルウェア一覧を確認できます。</p><p>コンピュータの基本的な制御を行うオペレーティングシステム(OS)と、各業務処理を行うアプリケーションソフトウェアとの中間に入るソフトウェアのことです。</p><p><span
      style=\"font-size: 18px;\"><u>ミドルウエアが、アプリケーションの起動・停止・監視などを含めた制御をします。</u></span></p><p>今回はRackの<code>Cors</code>
      というミドルウエアを新しく追加し、オリジン以外のサーバー(今回はgoogleAdsenseサーバー)からデータを取得してクロスドメイン通信を許可して広告を表示させました。</p><p><br></p><p><br></p>"
    - '2019-09-06 11:49:42.574403'
    - '2019-09-06 11:49:42.574403'
  - - 201
    - scikitのインストール
    - "<h1 style=\"text-align: center;\">scikitのインストール</h1><p><br></p><h2>scikit-learnについて解説</h2><hr><p><strong>scikit-learn</strong>
      (サイキット・ラーン) はPythonのオープンソース機械学習ライブラリである。サポートベクターマシン、ランダムフォレスト、Gradient Boosting、k近傍法、DBSCANなどを含む様々な分類、回帰、クラスタリングアルゴリズムを備えており、Pythonの数値計算ライブラリのNumPyとSciPyとやり取りするよう設計されている。(<a
      href=\"https://ja.wikipedia.org/wiki/Scikit-learn\">wiki引用</a>)</p><p><br></p><h2>インストール</h2><hr><pre><code>#
      pipでインストールする場合\r\n$ pip install scikit-learn\r\n\r\n# anacondaでインストールする場合\r\n$
      conda install scikit-learn</code></pre><p><br></p><p>筆者はpipにてインストールした。</p><pre>$
      pip install scikit_learn\r\nCollecting scikit_learn\r\n  Downloading https://files.pythonhosted.org/packages/e9/57/8a9889d49d0d77905af5a7524fb2b468d2ef5fc723684f51f5ca63efed0d/scikit_learn-0.21.3-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl
      (10.5MB)\r\n     |████████████████████████████████| 10.5MB 3.0MB/s \r\nRequirement
      already satisfied: numpy&gt;=1.11.0 in ./.pyenv/versions/3.7.3/lib/python3.7/site-packages
      (from scikit_learn) (1.16.3)\r\nRequirement already satisfied: scipy&gt;=0.17.0
      in ./.pyenv/versions/3.7.3/lib/python3.7/site-packages (from scikit_learn) (1.3.0)\r\nCollecting
      joblib&gt;=0.11 (from scikit_learn)\r\n  Downloading https://files.pythonhosted.org/packages/cd/c1/50a758e8247561e58cb87305b1e90b171b8c767b15b12a1734001f41d356/joblib-0.13.2-py2.py3-none-any.whl
      (278kB)\r\n     |████████████████████████████████| 286kB 3.8MB/s \r\nInstalling
      collected packages: joblib, scikit-learn\r\nSuccessfully installed joblib-0.13.2
      scikit-learn-0.21.3\r\n\r\n\r\n$ pip list\r\nPackage                       Version
       \r\n----------------------------- ---------\r\n.\r\n.\r\nscikit-learn      
                 0.21.3\r\n.\r\n.</pre>"
    - '2019-09-09 14:05:04.671202'
    - '2019-09-09 14:05:04.68577'
  - - 202
    - pandas 複数のcsvファイルの読み込み
    - "<h1 style=\"text-align: center;\">pandas 複数のcsvファイルの読み込み</h1><p><br></p><h2>実現したいこと</h2><hr><p>私の大学の8つの学科の成績データを使用してます。8つのExelファイルを合体させて1つのExelファイルにまとめることが目的です。</p><p>なおpandasの関数を使い、csvファイルでもxlsxファイルでも問題なく合体できます。</p><p><br></p><h2>環境</h2><hr><p>Python
      3.7.3</p><p>pandas 0.25.1</p><p>jupyter notebook</p><p><br></p><h2>合体方法</h2><hr><p>合体させたい8つのExelファイルは、カラムが同一のものもあれば、違うものもあります。例えば、「期末試験」のカラムはどの学科の成績ファイルのも存在するものの、「ブロックプログラミング」のカラムは一部の学科にしか存在しません。</p><p>データを合体させる際、8つのExelファイルで全ての学科に存在する共通のカラムのみを取り出し、合体ファイルを作成します</p><p><br></p><h2>実践</h2><hr><p>Exelファイルを取り込むのではなくcsvファイルを取り込むかたは</p><p
      skip=\"true\"><span style=\"color: rgb(184, 49, 47);\">pd.read_excel</span>
      ではなく <span style=\"color: rgb(41, 105, 176);\">pd.read_csv</span>を使ってください。</p><p><br></p><p>データフレームをExelファイルに出力するではなくcsvファイルを出力する方は</p><p><span
      style=\"color: rgb(184, 49, 47);\">DataFrame.to_excel</span> ではなく <span style=\"color:
      rgb(41, 105, 176);\">DataFrame.to_csv</span> を使ってください</p><pre>import pandas
      as pd\r\nimport glob\r\n\r\npath =&#39;/path/to/your_folder&#39;\r\nallFiles
      = glob.glob(path + &quot;/*.xlsx&quot;) <span style=\"color: rgb(163, 143, 132);\">#
      指定したフォルダーの全エクセルファイルを変数に代入します</span>\r\nframe = pd.DataFrame()\r\nlist_ = []\r\nfor
      file_ in allFiles:\r\n    df = pd.<span style=\"color: rgb(184, 49, 47);\">read_excel</span>(file_,index_col=None,
      header=0) <span style=\"color: rgb(163, 143, 132);\"># エクセルをデータフレームとして読み込む</span>\r\n 
        list_.append(df)\r\nframe = pd.concat(list_, join=&#39;inner&#39;) <span style=\"color:
      rgb(163, 143, 132);\"># joinをinnerに指定</span>\r\n\r\nframe.<span style=\"color:
      rgb(184, 49, 47);\">to_excel</span>(&quot;/path/to/download/all_concat.xlsx&quot;,
      encoding=&quot;utf-8-sig&quot;)</pre><p><br></p><h3>＊＊＊重要＊＊＊</h3><p>pandasのDataFrame.concat
      はデフォルトでは、join=&#39;outer&#39;が指定されており、共通しないカラムも同時に表示させてしまう。</p><p>join=&#39;outer&#39;とjoin=&#39;inner&#39;の違いを例で示す。</p><pre>(例)\r\n&gt;&gt;&gt;
      import pandas as pd\r\n&gt;&gt;&gt; df_1 = pd.DataFrame({&#39;A&#39;: [&#39;A1&#39;,
      &#39;A2&#39;, &#39;A3&#39;, &#39;A4&#39;],\r\n...                     &#39;B&#39;:
      [&#39;B1&#39;, &#39;B2&#39;, &#39;B3&#39;, &#39;B4&#39;],\r\n...            
              &#39;C&#39;: [&#39;C1&#39;, &#39;C2&#39;, &#39;C3&#39;, &#39;C4&#39;],\r\n...
                          &#39;D&#39;: [&#39;D1&#39;, &#39;D2&#39;, &#39;D3&#39;,
      &#39;D4&#39;]},\r\n...                    index=[1, 2, 3, 4])\r\n&gt;&gt;&gt; \r\n&gt;&gt;&gt;
      df_2 = pd.DataFrame({&#39;B&#39;: [&#39;B2&#39;, &#39;B3&#39;, &#39;B6&#39;,
      &#39;B7&#39;],\r\n...                     &#39;D&#39;: [&#39;D2&#39;, &#39;D3&#39;,
      &#39;D6&#39;, &#39;D7&#39;],\r\n...                     &#39;F&#39;: [&#39;F2&#39;,
      &#39;F3&#39;, &#39;F6&#39;, &#39;F7&#39;]},\r\n...                    index=[5,
      6, 7, 8])\r\n\r\n\r\n&gt;&gt;&gt; pd.concat([df_1, df_2])\r\n     A   B    C
        D    F\r\n1   A1  B1   C1  D1  NaN\r\n2   A2  B2   C2  D2  NaN\r\n3   A3  B3
        C3  D3  NaN\r\n4   A4  B4   C4  D4  NaN\r\n5  NaN  B2  NaN  D2   F2\r\n6  NaN
       B3  NaN  D3   F3\r\n7  NaN  B6  NaN  D6   F6\r\n8  NaN  B7  NaN  D7   F7\r\n\r\n\r\n&gt;&gt;&gt;
      pd.concat([df_1, df_2], join=&quot;inner&quot;)\r\n    B   D\r\n1  B1  D1\r\n2
       B2  D2\r\n3  B3  D3\r\n4  B4  D4\r\n5  B2  D2\r\n6  B3  D3\r\n7  B6  D6\r\n8
       B7  D7</pre><p>innerの時は共通カラムのBとDだけ表示されている。</p><p>この挙動はSQLのinner joinやouter
      joinと同じである。</p><p><br></p><h2>まとめ</h2><hr><p>複数のcsv(またはxlsx)ファイルを結合させる時は、pd.concatで結合する。</p><p>共通カラムのみ表示した時はinner
      join, 全てのカラムを表示させたいならouter joinを指定する。</p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-09-22 19:55:23.797124'
    - '2019-09-22 19:55:23.827022'
  - - 203
    - pandas concat関数 ドキュメント
    - "<h1 itemprop=\"name headline\" style=\"text-align: center;\">pandas concat関数</h1><p><br></p><p>Python
      3.7.3</p><p>pandas 0.25.1</p><p><br></p><h2>pandas.concat</h2><hr><p><code>pandas.concat(<em>objs</em>,
      <em>axis=0</em>, <em>join=&#39;outer&#39;</em>, <em>join_axes=None</em>, <em>ignore_index=False</em>,
      <em>keys=None</em>, <em>levels=None</em>, <em>names=None</em>, <em>verify_integrity=False</em>,
      <em>sort=None</em>, <em>copy=True</em>)</code></p><p><br></p><h2>オプション</h2><hr><pre
      data-placeholder=\"翻訳\" dir=\"ltr\"><span lang=\"ja\" tabindex=\"0\">objs：</span>\r\n<span
      lang=\"ja\" tabindex=\"0\">SeriesまたはDataFrameオブジェクトのシーケンスまたはマッピング\r\ndictが渡された場合、ソートされたキーはキー引数として使用されます。ただし、渡されない場合、値が選択されます（以下を参照）。
      Noneオブジェクトは、すべてNoneでない限り、静かにドロップされます。その場合、ValueErrorが発生します。</span>\r\n\r\naxis
      : \r\n{0/&rsquo;インデックス&rsquo;, 1/&rsquo;カラム&rsquo;}, デフォルト 0\r\n<span lang=\"ja\"
      tabindex=\"0\">連結する軸。</span>\r\n\r\njoin : \r\n{&lsquo;inner&rsquo;, &lsquo;outer&rsquo;},
      デフォルト &lsquo;outer&rsquo;\r\n他の軸（または軸）のインデックスを処理する方法\r\n\r\n<span lang=\"ja\"
      tabindex=\"0\">join_axes：</span>\r\n<span lang=\"ja\" tabindex=\"0\">インデックスオブジェクトのリスト\r\nバージョン0.25.0以降廃止されました。\r\n内部/外部セットロジックを実行する代わりに、他のn-1軸に使用する特定のインデックス。置換として連結の前後に.reindex（）を使用します。</span>\r\n<span
      lang=\"ja\" tabindex=\"0\">\r\nignore_index：</span>\r\n<span lang=\"ja\" tabindex=\"0\">bool、デフォルトはFalse\r\nTrueの場合、連結軸に沿ってインデックス値を使用しないでください。結果の軸には0、&hellip;、n-1というラベルが付けられます。これは、連結軸に意味のあるインデックス情報がないオブジェクトを連結する場合に便利です。他の軸のインデックス値は結合で引き続き考慮されることに注意してください。\r\n\r\nkeys：</span>\r\nsequence,
      デフォルト None<span lang=\"ja\" tabindex=\"0\">\r\n複数のレベルが渡された場合、タプルを含める必要があります。渡されたキーを最外部レベルとして使用して、階層インデックスを構築します。\r\n\r\nlevels：</span>\r\n<span
      lang=\"ja\" tabindex=\"0\">シーケンスのリスト、デフォルトNone\r\nMultiIndexの構築に使用する特定のレベル（一意の値）。それ以外の場合は、キーから推測されます。\r\n\r\nnames：</span>\r\n<span
      lang=\"ja\" tabindex=\"0\">リスト、デフォルトNone\r\n結果の階層インデックスのレベルの名前。\r\n\r\nverify_integrity：</span>\r\n<span
      lang=\"ja\" tabindex=\"0\">bool、デフォルトはFalse\r\n新しい連結軸に重複が含まれているかどうかを確認します。これは、実際のデータ連結に比べて非常に高価になる可能性があります。\r\n\r\nsort：</span>\r\n<span
      lang=\"ja\" tabindex=\"0\">bool、デフォルトNone\r\n</span><span lang=\"ja\" tabindex=\"0\">結合が「外部」であるときに、まだ連結されていない場合、非連結軸をソートします。現在のデフォルトのソートは非推奨であり、今後のバージョンのパンダではソートなしに変更されます。</span><span
      lang=\"ja\" tabindex=\"0\">\r\n明示的にsort = Trueを渡して、警告とソートを黙らせます。明示的にsort = Falseを渡すと、警告は表示されず、ソートされませ\r\njoin
      = &#39;inner&#39;の場合、これは効果がありません。これはすでに非連結軸の順序を保持しています。\r\nバージョン0.23.0の新機能。\r\n\r\ncopy：bool、デフォルトはTrue\r\nFalseの場合、データを不必要にコピーしないでください。</span></pre><p><br></p><h2>返り値</h2><hr><p>オブジェクト、オブジェクトのタイプ\r\nインデックス（軸=
      0）に沿ってすべてのシリーズを連結すると、シリーズが返されます。 objsに少なくとも1つのDataFrameが含まれている場合、DataFrameが返されます。列（axis
      = 1）に沿って連結すると、DataFrameが返されます。</p><p><br></p><h2>例</h2><hr><p>2つのSeriesの結合</p><pre>&gt;&gt;&gt;
      s1 = pd.Series([&#39;a&#39;, &#39;b&#39;])\r\n&gt;&gt;&gt; s2 = pd.Series([&#39;c&#39;,
      &#39;d&#39;])\r\n&gt;&gt;&gt; pd.concat([s1, s2])\r\n0    a\r\n1    b\r\n0    c\r\n1
      \   d\r\ndtype: object</pre><p><br>ignore_indexオプションをTrueに設定して、<span style=\"background-color:
      rgb(247, 218, 100);\">既存のインデックスをクリアし、結果でリセット</span>します。</p><pre>&gt;&gt;&gt;
      pd.concat([s1, s2], ignore_index=True)\r\n0    a\r\n1    b\r\n2    c\r\n3    d\r\ndtype:
      object</pre><p><br>キーオプションを使用して、データの最も外側のレベルに階層インデックスを追加します。</p><pre>&gt;&gt;&gt;
      pd.concat([s1, s2], keys=[&#39;s1&#39;, &#39;s2&#39;])\r\ns1  0    a\r\n    1
      \   b\r\ns2  0    c\r\n    1    d\r\ndtype: object</pre><p><br>namesオプションを使用して、作成したインデックスキーにラベルを付けます。</p><pre>&gt;&gt;&gt;
      pd.concat([s1, s2], keys=[&#39;s1&#39;, &#39;s2&#39;],\r\n...           names=[&#39;Series
      name&#39;, &#39;Row ID&#39;])\r\nSeries name  Row ID\r\ns1           0         a\r\n
      \            1         b\r\ns2           0         c\r\n             1         d\r\ndtype:
      object</pre><p><br>2つのDataFrameオブジェクトを同一の列と組み合わせます。</p><pre>&gt;&gt;&gt; df1
      = pd.DataFrame([[&#39;a&#39;, 1], [&#39;b&#39;, 2]],\r\n...                    columns=[&#39;letter&#39;,
      &#39;number&#39;])\r\n&gt;&gt;&gt; df1\r\n  letter  number\r\n0      a       1\r\n1
      \     b       2\r\n&gt;&gt;&gt; df2 = pd.DataFrame([[&#39;c&#39;, 3], [&#39;d&#39;,
      4]],\r\n...                    columns=[&#39;letter&#39;, &#39;number&#39;])\r\n&gt;&gt;&gt;
      df2\r\n  letter  number\r\n0      c       3\r\n1      d       4\r\n&gt;&gt;&gt;
      pd.concat([df1, df2])\r\n  letter  number\r\n0      a       1\r\n1      b       2\r\n0
      \     c       3\r\n1      d       4</pre><p><br>重複する列を持つDataFrameオブジェクトを組み合わせて、すべてを返します。交差点の外側の列にはNaN値が入力されます。</p><pre>&gt;&gt;&gt;
      df3 = pd.DataFrame([[&#39;c&#39;, 3, &#39;cat&#39;], [&#39;d&#39;, 4, &#39;dog&#39;]],\r\n...
      \                   columns=[&#39;letter&#39;, &#39;number&#39;, &#39;animal&#39;])\r\n&gt;&gt;&gt;
      df3\r\n  letter  number animal\r\n0      c       3    cat\r\n1      d       4
      \   dog\r\n&gt;&gt;&gt; pd.concat([df1, df3], sort=False)\r\n  letter  number
      animal\r\n0      a       1    NaN\r\n1      b       2    NaN\r\n0      c       3
      \   cat\r\n1      d       4    dog</pre><p><br>重複する列を持つDataFrameオブジェクトを結合し、innerをjoinキーワード引数に渡すことで共有されているオブジェクトのみを返します。</p><pre>&gt;&gt;&gt;
      pd.concat([df1, df3], join=&quot;inner&quot;)\r\n  letter  number\r\n0      a
      \      1\r\n1      b       2\r\n0      c       3\r\n1      d       4</pre><p><br>axis
      = 1を渡すことにより、DataFrameオブジェクトをx軸に沿って水平に結合します。</p><pre>&gt;&gt;&gt; df4 = pd.DataFrame([[&#39;bird&#39;,
      &#39;polly&#39;], [&#39;monkey&#39;, &#39;george&#39;]],\r\n...                    columns=[&#39;animal&#39;,
      &#39;name&#39;])\r\n&gt;&gt;&gt; pd.concat([df1, df4], axis=1)\r\n  letter  number
      \ animal    name\r\n0      a       1    bird   polly\r\n1      b       2  monkey
      \ george</pre><p><br>verify_integrityオプションを使用して、重複するインデックス値が結果に含まれないようにします。</p><pre>&gt;&gt;&gt;
      df5 = pd.DataFrame([1], index=[&#39;a&#39;])\r\n&gt;&gt;&gt; df5\r\n   0\r\na
      \ 1\r\n&gt;&gt;&gt; df6 = pd.DataFrame([2], index=[&#39;a&#39;])\r\n&gt;&gt;&gt;
      df6\r\n   0\r\na  2\r\n&gt;&gt;&gt; pd.concat([df5, df6], verify_integrity=True)\r\nTraceback
      (most recent call last):\r\n    ...\r\nValueError: Indexes have overlapping
      values: [&#39;a&#39;]</pre><p>なお、verify_integrityはデフォルトはFalse</p><pre>&gt;&gt;&gt;
      pd.concat([df5, df6])\r\n   0\r\na  1\r\na  2</pre><p><br></p><p><br></p><p>本記事は
      <a href=\"https://pandas.pydata.org/pandas-docs/stable/index.html\">pandas0.25.1のドキュメント</a>
      の中のconcat関数を日本語でまとめたものです。</p>"
    - '2019-09-22 20:30:04.117121'
    - '2019-09-22 20:32:56.406278'
  - - 204
    - pandas 正規化
    - "<h1 style=\"text-align: center;\">pandas 正規化</h1><h2>実現したいこと</h2><hr><p>Exelファイルを正規化する。(筆者は多重回帰分析を行う)</p><p><br></p><h2>正規化のメリット(多重回帰分析)</h2><hr><p>正規化をすると、値が意味する絶対量を相対量に変換するため、単位が関係なくなり、各因子の係数(偏回帰係数)が、「寄与率」のように比較できる。</p><p>また、私の場合、大学生の期末試験のデータを扱ったりしましたが、試験の満点が各学科で違ったりしても、正規化することで他の学科との平等な生徒の比較ができるようになる。</p><p><br></p><h2>正規化の式</h2><hr><h3>最小値0、最大値1に正規化</h3><p>Min-Max
      Normalization。</p><p>$$ x&#39;= \\frac{ x - min(x) }{ max(x) - min(x) } $$</p><p><br></p><h3>平均0、分散1に標準化(正規化と表現したりもする)</h3><p>平均を&mu;,
      標準偏差を&sigma;とする</p><p>$$x&#39;= \\frac{ x - &nbsp;\\mu &nbsp;}{ &nbsp;\\sigma
      &nbsp;}$$</p><p><br></p><p>標準偏差について</p><p>$$s= &nbsp;\\sqrt{ &nbsp;s ^{ 2 }
      &nbsp;} =\\frac{ 1 }{ n } \\sum_{i=1}^N &nbsp;(x _{ i } - &nbsp;\\mu )^2 \\\\
      { ここで、s ^{ 2 }は分散,\\ nはデータの総数,\\ x _{ i } は個々の数値,\\ \\muは平均値を表します。 } $$</p><p><br></p><h2>環境</h2><hr><p>python
      3.7.3</p><p>scikit 0.21.3</p><p><br></p><h2>実装</h2><hr><h3>最小値0、最大値1に正規化</h3><pre>&gt;&gt;&gt;
      from sklearn import preprocessing\r\n&gt;&gt;&gt; data = [[-1, 2], [-0.5, 6],
      [0, 10], [1, 18]]\r\n&gt;&gt;&gt; norm = preprocessing.minmax_scale(data)\r\n&gt;&gt;&gt;
      norm\r\narray([[0.  , 0.  ],\r\n       [0.25, 0.25],\r\n       [0.5 , 0.5 ],\r\n 
           [1.  , 1.  ]])\r\n&gt;&gt;&gt; </pre><p><br></p><h3>その他の手法</h3><p>sklearn
      の <strong>StandardScaler</strong> と <strong>MinMaxScaler</strong> がそれぞれ <strong>標準化</strong>
      と <strong>正規化</strong> のモジュールです。主に使うメソッドは次の 3 つです。</p><ul><li><strong>fit</strong><br>パラメータ（平均や標準偏差
      etc）計算</li><li><strong>transform</strong><br>パラメータをもとにデータ変換</li><li><strong>fit_transform</strong><br>パラメータ計算とデータ変換をまとめて実行</li></ul><p><br></p><p>２次元正規分布の乱数を
      50 個用意し、標準化、正規化を行う</p><pre>import matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom sklearn.preprocessing import MinMaxScaler\r\n \r\n#
      元データ\r\nnp.random.seed(seed=1)\r\ndata = np.random.multivariate_normal( [5, 5],  [[5, 0],[0, 2]],  50 )\r\n \r\n#
      標準化\r\nsc = StandardScaler()\r\ndata_std = sc.fit_transform(data)\r\n \r\n#
      正規化\r\nms = MinMaxScaler()\r\ndata_norm = ms.fit_transform(data)\r\n \r\n# プロット\r\nmin_x = min(data[:,0])\r\nmax_x = max(data[:,0])\r\n \r\nmin_y = min(data[:,1])\r\nmax_y = max(data[:,1])\r\n \r\nplt.figure(figsize=(5, 6))\r\nplt.subplot(2,1,1)\r\nplt.title(&#39;標準化&#39;)\r\nplt.xlim([-4, 10])\r\nplt.ylim([-4, 10])\r\nplt.scatter(data[:, 0], data[:, 1], c=&#39;red&#39;, marker=&#39;x&#39;, s=30, label=&#39;スケール前&#39;)\r\nplt.scatter(data_std[:, 0], data_std[:, 1], c=&#39;blue&#39;, marker=&#39;x&#39;, s=30, label=&#39;標準化
      &#39;)\r\nplt.legend(loc=&#39;upper left&#39;)\r\nplt.hlines(0,xmin=-4, xmax=10, colors=&#39;#888888&#39;, linestyles=&#39;dotted&#39;)\r\nplt.vlines(0,ymin=-4, ymax=10, colors=&#39;#888888&#39;, linestyles=&#39;dotted&#39;)\r\n \r\nplt.subplot(2,1,2)\r\nplt.title(&#39;正規化&#39;)\r\nplt.xlim([-4, 10])\r\nplt.ylim([-4, 10])\r\nplt.scatter(data[:, 0], data[:, 1], c=&#39;red&#39;, marker=&#39;x&#39;, s=30, label=&#39;スケール前&#39;)\r\nplt.scatter(data_norm[:, 0], data_norm[:, 1], c=&#39;green&#39;, marker=&#39;x&#39;, s=30, label=&#39;正規化&#39;)\r\nplt.legend(loc=&#39;upper
      left&#39;)\r\nplt.hlines(0,xmin=-4, xmax=10, colors=&#39;#888888&#39;, linestyles=&#39;dotted&#39;)\r\nplt.vlines(0,ymin=-4,
      ymax=10, colors=&#39;#888888&#39;, linestyles=&#39;dotted&#39;)\r\nplt.show()</pre><p><br><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1569237398936-stand_minmax_scale.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><h2>データフレームの正規化...</h2><h3>・特定の列だけ正規化するとき</h3><pre><code>&gt;&gt;&gt;
      import pandas as pd\r\n&gt;&gt;&gt; from sklearn.preprocessing import MinMaxScaler\r\n&gt;&gt;&gt;
      scaler = MinMaxScaler()\r\n&gt;&gt;&gt; dfTest = pd.DataFrame({&#39;A&#39;:[14.00,90.20,90.95,96.27,91.21],\r\n
      \                          &#39;B&#39;:[103.02,107.26,110.35,114.23,114.68],</code>\r\n<code> 
                               <code>&#39;C&#39;:[23.76,10.26,10.35,14.31,42.81],</code>\r\n
      \                          &#39;D&#39;:[&#39;big&#39;,&#39;small&#39;,&#39;big&#39;,&#39;small&#39;,&#39;small&#39;]})\r\n\r\n<span
      style=\"font-size: 14px;\">&gt;&gt;&gt; <u>dfTest[[&#39;A&#39;, &#39;B&#39;]]
      = scaler.fit_transform(dfTest[[&#39;A&#39;, &#39;B&#39;]])</u><span style=\"color:
      rgb(163, 143, 132);\"> </span></span><span style=\"color: rgb(184, 49, 47);
      font-size: 14px;\"># A, Bカラムのみを正規化</span></code>\r\n<span style=\"color: rgb(163,
      143, 132);\"># dfTest.loc[:,[&#39;A&#39;, &#39;B&#39;]] = scaler.fit_transform(dfTest[[&#39;A&#39;,
      &#39;B&#39;]]) でも可</span><code>\r\n&gt;&gt;&gt; dfTest\r\n</code>          A
              B      C      D\r\n0  0.000000  0.000000  23.76    big\r\n1  0.926219  0.363636  10.26  small\r\n2  0.935335  0.628645  10.35 
        big\r\n3  1.000000  0.961407  14.31  small\r\n4  0.938495  1.000000  42.81
       small</pre><p><br></p><h3>・すべての列を正規化するとき</h3><pre>&gt;&gt;&gt; dfTest = pd.DataFrame({&#39;A&#39;:[14.00,90.20,90.95,96.27,91.21],\r\n 
                               &#39;B&#39;:[103.02,107.26,110.35,114.23,114.68],\r\n
                                &#39;C&#39;:[23.76,10.26,10.35,14.31,42.81]})\r\n&gt;&gt;&gt;
      dfTest\r\n       A       B      C\r\n0  14.00  103.02  23.76\r\n1  90.20  107.26  10.26\r\n2  90.95  110.35  10.35\r\n3  96.27  114.23  14.31\r\n4  91.21  114.68  42.81\r\n<span
      style=\"font-size: 14px;\">&gt;&gt;&gt; <u>dfTest.loc[:,:] = scaler.fit_transform(dfTest)</u></span><span
      style=\"color: rgb(184, 49, 47); font-size: 14px;\"> # 全カラムを正規化</span>\r\n&gt;&gt;&gt;
      dfTest\r\n          A         B         C\r\n0  0.000000  0.000000  0.414747\r\n1  0.926219  0.363636  0.000000\r\n2  0.935335  0.628645  0.002765\r\n3  1.000000  0.961407  0.124424\r\n4
       0.938495  1.000000  1.000000</pre><p><br></p><h2>・注意点</h2><p>直接代入するとデータフレームからndarrayになってカラムが消える。</p><pre>&gt;&gt;&gt;
      dfTest = scaler.fit_transform(dfTest) <span style=\"color: rgb(163, 143, 132);\">#
      dfTestに直接代入</span>\r\n&gt;&gt;&gt; dfTest\r\narray([[0.        , 0.        ,
      0.41474654],\r\n       [0.92621855, 0.36363636, 0.        ],\r\n       [0.93533487,
      0.62864494, 0.00276498],\r\n       [1.        , 0.96140652, 0.12442396],\r\n 
           [0.9384952 , 1.        , 1.        ]])\r\n\r\n&gt;&gt;&gt; dfTest.columns\r\nTraceback
      (most recent call last):\r\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\nAttributeError:
      &#39;numpy.ndarray&#39; object has no attribute &#39;columns&#39;</pre><p><br></p><h3>理由は、fit_transformされたオブジェクトはndarrayだから！</h3><pre>&gt;&gt;&gt;
      type(scaler.fit_transform(dfTest))\r\n&lt;class &#39;numpy.ndarray&#39;&gt;</pre><p><br></p><p>たとえ、全ての列を正規化したくても、DataFrame.locなどを使って代入する</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-09-23 18:42:01.274077'
    - '2019-12-03 20:21:24.102703'
  - - 205
    - pandas データフレームの行や列を削除
    - "<h1 style=\"text-align: center;\">pandas データフレームの行や列を削除</h1><p><br></p><h2>実現したいこと</h2><hr><p>pandasでデータフレームの行や列を削除する動作を行う。</p><p><br></p><h2>環境</h2><hr><p>python
      3.7.3</p><p>pandas 0.25.1</p><p><br></p><h2>実装</h2><hr><pre>&gt;&gt;&gt; df=pd.DataFrame(np.arange(12).reshape(3,
      4),columns=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;])\r\n&gt;&gt;&gt;
      df\r\n   A  B   C   D\r\n0  0  1   2   3\r\n1  4  5   6   7\r\n2  8  9  10  11</pre><p><br></p><h3>カラムの削除</h3><pre>&gt;&gt;&gt;
      df.drop([&#39;B&#39;, &#39;C&#39;], <span style=\"color: rgb(184, 49, 47);\">axis=1</span>)
      # axis: 0がインデックス(デフォルト) 1がカラム\r\n   A   D\r\n0  0   3\r\n1  4   7\r\n2  8  11</pre><pre>&gt;&gt;&gt;
      df.drop(columns=[&#39;B&#39;, &#39;C&#39;])\r\n   A   D\r\n0  0   3\r\n1  4
      \  7\r\n2  8  11</pre><p><br></p><p>pythonでdel statementでも実現できる</p><pre>&gt;&gt;&gt;
      del df[&quot;B&quot;]\r\nや\r\n&gt;&gt;&gt; del (df[&quot;B&quot;],df[&quot;C&quot;])</pre><p>のように使う</p><p><br></p><h3>インデックスで行の削除</h3><pre>&gt;&gt;&gt;
      df.drop([0, 1]) # インデックス0と1の行を削除\r\n   A  B   C   D\r\n2  8  9  10  11</pre><p><br></p><h3>特定の値を含む行を削除</h3><pre>&gt;&gt;&gt;
      df = pd.DataFrame({&#39;氏名&#39;: [&#39;匿名&#39;, &#39;ジャイヤン&#39;, &#39;スネ夫&#39;,
      &#39;匿名&#39;],\r\n... &#39;性別&#39;: [&#39;男&#39;, &#39;男&#39;, &#39;男&#39;,
      &#39;女&#39;],\r\n... &#39;恋人&#39;: [&#39;しずか&#39;, &#39;妹&#39;, &#39;ママ&#39;,
      &#39;のび太&#39;],\r\n... &#39;性格&#39;: [&#39;アホ&#39;, &#39;横柄&#39;, &#39;ナルシスト&#39;,
      &#39;良い子&#39;]},\r\n... index=[1, 2, 3, 4])\r\n\r\n&gt;&gt;&gt; df\r\n      氏名
      性別   恋人     性格\r\n1     匿名  男  しずか     アホ\r\n2  ジャイヤン  男    妹     横柄\r\n3    スネ夫  男
        ママ  ナルシスト\r\n4     匿名  女  のび太    良い子</pre><p>氏名カラムに&quot;匿名&quot;が入っている行を全て削除する</p><pre>df.drop(df.index[df[&#39;氏名&#39;]
      == &#39;匿名&#39;], inplace=True)\r\n&gt;&gt;&gt; df\r\n      氏名 性別  恋人     性格\r\n2  ジャイヤン  男
        妹     横柄\r\n3    スネ夫  男  ママ  ナルシスト\r\n&gt;&gt;&gt; </pre><p><br></p><h3>NaNが含まれる行を削除する</h3><pre>&gt;&gt;&gt;
      df = pd.DataFrame([\r\n... [1 , 2, None, None],\r\n... [None, 1, 2, None],\r\n...
      [None, None, None, None],\r\n... ])</pre><h4><br></h4><h4>・すべてNaNな行を削除</h4><pre>&gt;&gt;&gt;
      df.dropna(how=&quot;all&quot;)\r\n     0    1    2   3\r\n0  1.0  2.0  NaN NaN\r\n1  NaN  1.0  2.0
      NaN\r\n&gt;&gt;&gt; </pre><p><br></p><h4>・一つでもNaNがある行を削除</h4><pre>&gt;&gt;&gt;
      df = pd.DataFrame([\r\n... [1 , 2, None, None],\r\n... [None, 1, 2, None],\r\n...
      [1, 3, 11, -3],\r\n... ])\r\n&gt;&gt;&gt; df\r\n     0  1     2    3\r\n0  1.0  2
        NaN  NaN\r\n1  NaN  1   2.0  NaN\r\n2  1.0  3  11.0 -3.0\r\n&gt;&gt;&gt;\r\n&gt;&gt;&gt;
      df.dropna(how=&quot;any&quot;)\r\n     0  1     2    3\r\n2  1.0  3  11.0 -3.0</pre><p><br></p><h4>・指定カラムの中でNaNがある行を削除</h4><pre>&gt;&gt;&gt;
      df = pd.DataFrame([[1,2,3],[4,5,6],[None,8,9],[10,None,12],[None,14.15]], columns=[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;])\r\n&gt;&gt;&gt;
      df\r\n      A      B     C\r\n0   1.0   2.00   3.0\r\n1   4.0   5.00   6.0\r\n2
        NaN   8.00   9.0\r\n3  10.0    NaN  12.0\r\n4   NaN  14.15   NaN\r\n\r\n&gt;&gt;&gt;
      df.dropna(subset=[&#39;A&#39;], inplace=True) # AカラムのNaNがある行を削除\r\n&gt;&gt;&gt;
      df\r\n      A    B     C\r\n0   1.0  2.0   3.0\r\n1   4.0  5.0   6.0\r\n3  10.0
       NaN  12.0</pre><pre>df = pd.DataFrame([[1,2,3],[4,5,6],[None,8,9],[10,None,12],[None,14.15]],
      columns=[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;])\r\n&gt;&gt;&gt; df\r\n      A
      \     B     C\r\n0   1.0   2.00   3.0\r\n1   4.0   5.00   6.0\r\n2   NaN   8.00
      \  9.0\r\n3  10.0    NaN  12.0\r\n4   NaN  14.15   NaN\r\n\r\n&gt;&gt;&gt; df.dropna(subset=[&#39;A&#39;,&#39;B&#39;],
      inplace=True) # AカラムとBカラムでNaNがある行を全て削除\r\n&gt;&gt;&gt; df\r\n     A    B    C\r\n0  1.0  2.0  3.0\r\n1
       4.0  5.0  6.0</pre><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-09-24 15:31:37.233413'
    - '2019-09-24 15:36:10.665748'
  - - 206
    - Ruby クイックソート
    - "<h1 style=\"text-align: center;\">Ruby クイックソート</h1><h2>クイックソートとは</h2><hr><p>他のソート法と比べて、一般的に最も高速だといわれているが対象のデータの並びやデータの数によっては必ずしも速いわけではない。また数々の変種がある。
      <a href=\"https://ja.wikipedia.org/wiki/%E5%AE%89%E5%AE%9A%E3%82%BD%E3%83%BC%E3%83%88\"
      title=\"安定ソート\">安定ソート</a>ではない。[<a href=\"https://ja.wikipedia.org/wiki/%E3%82%AF%E3%82%A4%E3%83%83%E3%82%AF%E3%82%BD%E3%83%BC%E3%83%88\">wikipedia引用</a>]</p><p><br></p><h2>アルゴリズム</h2><hr><blockquote><p>1.
      適当な数（<strong><span title=\"リンク先の項目はまだありません。新規の執筆や他言語版からの翻訳が望まれます。\">ピボット</span></strong>という）を選択する（この場合はデータの総数の中央値が望ましい）</p><p>2.
      ピボットより小さい数を前方、大きい数を後方に移動させる （分割）</p><p>3. 二分割された各々のデータを、それぞれソートする</p><p>実際にこれを実現するためのアルゴリズムは色々考えられるが、一例を挙げると以下のようなものがある。</p><p>1.
      ピボットとして一つ選びそれをPとする。</p><p>2. 左から順に値を調べ、P以上のものを見つけたらその位置をiとする。</p><p>3. 右から順に値を調べ、P以下のものを見つけたらその位置をjとする。</p><p>4.
      iがjより左にあるのならばその二つの位置を入れ替え、2に戻る。ただし、次の2での探索はiの一つ右、次の3での探索はjの一つ左から行う。</p><p>5.
      2に戻らなかった場合、iの左側を境界に分割を行って2つの領域に分け、そのそれぞれに対して再帰的に1からの手順を行う。要素数が1以下の領域ができた場合、その領域は確定とする。</p></blockquote><p>[<a
      href=\"https://ja.wikipedia.org/wiki/%E3%82%AF%E3%82%A4%E3%83%83%E3%82%AF%E3%82%BD%E3%83%BC%E3%83%88\">wikipedia引用</a>]</p><p><br></p><h2>実装</h2><hr><p>Ruby
      のソートメソッドは、クイックソートを使っている。</p><p>当然だが、今回はsortメソッドを使わない。</p><p><br></p><pre>def
      med3(x, y, z)\r\n    if x &lt; y\r\n        if y &lt; z\r\n            return
      y\r\n        elsif z &lt; x\r\n            return x\r\n        else\r\n     
            return z\r\n        end\r\n    else\r\n        if z &lt; y\r\n       
          return y\r\n        elsif x &lt; z\r\n            return x\r\n        else\r\n 
                return z\r\n        end\r\n    end\r\nend\r\n\r\n# /* クイックソート\r\n#
       * a     : ソートする配列\r\n#  * left  : ソートするデータの開始位置\r\n#  * right : ソートするデータの終了位置\r\n#
       */\r\ndef quicksort(a, left, right)\r\n    if left &lt; right\r\n        i,
      j = left, right\r\n        pivot = med3(a[i], a[i + (j - i) / 2], a[j])\r\n 
            while true\r\n            while a[i] &lt; pivot do\r\n               
      i+=1\r\n            end\r\n            while pivot &lt; a[j] do\r\n         
            j-=1\r\n            end\r\n            break if i &gt;= j\r\n         
        tmp = a[i]\r\n            a[i] = a[j]\r\n            a[j] = tmp\r\n       
          i+=1\r\n            j-=1\r\n        end\r\n        quicksort(a, left, i
      - 1)\r\n        quicksort(a, j + 1, right)\r\n    end\r\nend\r\n\r\narr=[3,25,5,2,24,5,1]\r\nquicksort(arr,
      0, arr.length-1)\r\np arr</pre><p><br></p><p>&lt;出力結果&gt;</p><p><code>[1, 2,
      3, 5, 5, 24, 25]</code></p><p><br></p><p>無事、ソートされているのが確認できました。</p><p><br></p><p>乱数を使ってテストするとこんな感じです</p><pre><span
      style=\"color: rgb(184, 49, 47);\">class</span> QuickSort\r\n    <span style=\"color:
      rgb(184, 49, 47);\">def</span> initialize(n)\r\n        @target = Array.new(n)\r\n 
        <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n\r\n\r\n    <span style=\"color:
      rgb(184, 49, 47);\">def</span> main\r\n        puts &quot;準備中&quot;\r\n\r\n\r\n 
            @target.each_index do |i|\r\n            @target[i] = rand(1000)\r\n 
            end\r\n        p @target\r\n\r\n\r\n        puts &quot;クイックソート開始&quot;\r\n 
            quickSort(@target, 0, N-1)\r\n        puts &quot; 終了&quot;\r\n        p
      @target\r\n    <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n    \r\n 
        <span style=\"color: rgb(184, 49, 47);\">private</span>\r\n    <span style=\"color:
      rgb(184, 49, 47);\">def</span> med3(x, y, z)\r\n        <span style=\"color:
      rgb(184, 49, 47);\">if</span> x &lt; y\r\n            <span style=\"color: rgb(184,
      49, 47);\">if</span> y &lt; z\r\n                return y\r\n            <span
      style=\"color: rgb(184, 49, 47);\">elsif</span> z &lt; x\r\n               
      return x\r\n            <span style=\"color: rgb(184, 49, 47);\">else</span>\r\n 
                    return z\r\n            <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n 
            <span style=\"color: rgb(184, 49, 47);\">else</span>\r\n            <span
      style=\"color: rgb(184, 49, 47);\">if</span> z &lt; y\r\n                return
      y\r\n            <span style=\"color: rgb(184, 49, 47);\">elsif</span> x &lt;
      z\r\n                return x\r\n            <span style=\"color: rgb(184, 49,
      47);\">else</span>\r\n                return z\r\n            <span style=\"color:
      rgb(184, 49, 47);\">end</span>\r\n        <span style=\"color: rgb(184, 49,
      47);\">end</span>\r\n    <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n 
        \r\n    <span style=\"color: rgb(184, 49, 47);\">def</span> quickSort(a, left,
      right)\r\n        <span style=\"color: rgb(184, 49, 47);\">if</span> left &lt;
      right\r\n            i, j = left, right\r\n            pivot = med3(a[i], a[i
      + (j - i) / 2], a[j])\r\n            <span style=\"color: rgb(184, 49, 47);\">while</span>
      true\r\n                <span style=\"color: rgb(184, 49, 47);\">while</span>
      a[i] &lt; pivot do\r\n                    i+=1\r\n                <span style=\"color:
      rgb(184, 49, 47);\">end</span>\r\n                <span style=\"color: rgb(184,
      49, 47);\">while</span> pivot &lt; a[j] do\r\n                    j-=1\r\n 
                    <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n       
              break if i &gt;= j\r\n                tmp = a[i]\r\n               
      a[i] = a[j]\r\n                a[j] = tmp\r\n                i+=1\r\n       
              j-=1\r\n            <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n 
                quickSort(a, left, i - 1)\r\n            quickSort(a, j + 1, right)\r\n 
            <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n    <span style=\"color:
      rgb(184, 49, 47);\">end</span>\r\n<span style=\"color: rgb(184, 49, 47);\">end</span>\r\n\r\n\r\nN
      = 10\r\nquick = QuickSort.new(N)\r\nquick.main</pre><p><br></p><p>&lt;実行結果&gt;</p><p
      skip=\"true\"><code>乱数で準備中<br>[779, 386, 633, 866, 864, 252, 709, 890, 248,
      980]<br>クイックソート開始<br> 終了<br>[248, 252, 386, 633, 709, 779, 864, 866, 890, 980]</code></p><p
      skip=\"true\"><br></p><p skip=\"true\">バッチリ！！以上！！！</p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-09-27 13:14:09.961947'
    - '2019-09-27 13:59:30.983069'
  - - 207
    - Ruby バブルソート
    - "<h1 style=\"text-align: center;\">Ruby バブルソート</h1><h2>バブルソートとは</h2><hr><p><strong>バブルソート</strong>
      (<strong>bubble sort</strong>) は、<a href=\"https://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%BC%E3%83%88\"
      title=\"ソート\">ソート</a>の<a href=\"https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0\"
      title=\"アルゴリズム\">アルゴリズム</a>の一つ。隣り合う要素の大小を比較しながら整列させること。最悪計算時間が<a href=\"https://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%B3%E3%83%80%E3%82%A6%E3%81%AE%E8%A8%98%E5%8F%B7\"
      title=\"ランダウの記号\">O</a>(n<sup>2</sup>)と遅いが、アルゴリズムが単純で実装が容易なため、また並列処理との親和性が高いことから、しばしば用いられる。<a
      href=\"https://ja.wikipedia.org/wiki/%E5%AE%89%E5%AE%9A%E3%82%BD%E3%83%BC%E3%83%88\"
      title=\"安定ソート\">安定</a>な内部ソート。<strong>基本交換法</strong>、<strong>隣接交換法</strong>ともいう。（単に<strong>交換法</strong>と言う場合もある）[<a
      href=\"https://ja.wikipedia.org/wiki/%E3%83%90%E3%83%96%E3%83%AB%E3%82%BD%E3%83%BC%E3%83%88\">wikipedea引用</a>]</p><p><br></p><h2>基本的な考え方</h2><hr><p>1.
      先頭から順に見ていって、左右の並びがおかしいところがあれば、入れ替える。</p><p>2. 最後までたどり着いたら再び先頭に戻って、同じように見ていく。</p><p>3.
      1度も並び替えをすることなく先頭から最後まで見終わったら完了。</p><p><br></p><h2>実装</h2><hr><p><br></p><pre>class
      BubbleSort\r\n  def initialize(array)\r\n    @target = array\r\n  end\r\n\r\n 
      def sort\r\n    flag = nil\r\n    # flagがtrueである間,左右の比較交換を繰り返す\r\n    begin\r\n 
          flag = false\r\n      (@target.size - 1).times do |i|\r\n        if @target[i]
      &gt; @target[i + 1]\r\n          flag = true\r\n          j = @target[i]\r\n 
              @target[i] =@target[i + 1]\r\n          @target[i + 1] = j\r\n     
        end\r\n      end\r\n    end while(flag)\r\n  end\r\nend\r\n\r\n\r\n# ----------
      Main\r\nif __FILE__ == $0\r\n  N = 10\r\n  puts &quot;乱数を生成します&quot;\r\n  array
      = Array.new(N)\r\n  array.each_index do |i|\r\n    array[i] = rand(1000)\r\n 
      end\r\n\r\n\r\n  p array\r\n  s = BubbleSort.new(array)\r\n\r\n\r\n      puts
      &quot;並び替え開始&quot;\r\n  s.sort\r\n  puts &quot;終了&quot;\r\n  p array\r\nend</pre><p><br></p><p>&lt;実行結果&gt;</p><pre><code>乱数を生成します\r\n[590,
      441, 544, 452, 867, 362, 593, 11, 456, 217]\r\n並び替え開始\r\n終了\r\n[11, 217, 362,
      441, 452, 456, 544, 590, 593, 867]</code></pre>"
    - '2019-09-27 13:44:37.156489'
    - '2019-09-27 13:44:37.156489'
  - - 208
    - Ruby マージソート
    - "<h1 style=\"text-align: center;\">Ruby マージソート</h1><p><br></p><h2>マージソートとは</h2><hr><p><strong>マージソート</strong>は、ソートのアルゴリズムで、既に整列してある複数個の列を1個の列にマージする際に、小さいものから先に新しい列に並べれば、新しい列も整列されている、というボトムアップの分割統治法による。大きい列を多数の列に分割し、そのそれぞれをマージする作業は並列化できる。</p><p>n個のデータを含む配列をソートする場合、最悪計算量O(n
      log n)である。分割と統合の実装にもよるが、一般に安定なソートを実装できる。インプレースな（すなわち入力の記憶領域を出力にも使うので、追加の作業記憶領域を必要としない）バリエーションも提案されているが、一般には、O(n)の追加の作業記憶領域を必要とする。</p><p>（ナイーブな）クイックソートと比べると、最悪計算量は少ない。ランダムなデータでは通常、クイックソートのほうが速い。</p><p>[<a
      href=\"https://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%BC%E3%82%B8%E3%82%BD%E3%83%BC%E3%83%88\">wikipedea引用</a>]</p><p><br></p><h2>アルゴリズム</h2><hr><p>1.
      先頭から順に見ていって、左右の並びがおかしいところがあれば、入れ替える。</p><p>2. 最後までたどり着いたら再び先頭に戻って、同じように見ていく。</p><p>3.
      1度も並び替えをすることなく先頭から最後まで見終わったら完了。</p><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1569640048175-merge_sort.png\"
      style=\"width: 800px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><h2>実装</h2><hr><p><br></p><pre><span
      style=\"color: rgb(184, 49, 47);\">class</span> MergeSort\r\n  <span style=\"color:
      rgb(184, 49, 47);\">def</span> initialize( n )\r\n    @target = Array.new(n)\r\n 
      <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n  \r\n  <span style=\"color:
      rgb(184, 49, 47);\">def</span> main\r\n    puts &quot;準備中&quot;\r\n    \r\n 
        @target.each_index <span style=\"color: rgb(184, 49, 47);\">do</span> |i|\r\n 
          @target[i] = rand(1000)\r\n    <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n 
        \r\n    p @target\r\n    \r\n    puts &quot;並び替え開始&quot;\r\n    mergeSort(@target.size,
      @target, 0)\r\n    puts &quot;終了&quot;\r\n    \r\n    p @target\r\n  <span style=\"color:
      rgb(184, 49, 47);\">end</span>\r\n  \r\n  <span style=\"color: rgb(184, 49,
      47);\">private</span>\r\n  # ----- ソートアルゴリズム\r\n  <span style=\"color: rgb(184,
      49, 47);\">def</span> mergeSort( n, x, offset )\r\n    return if n &lt;= 1\r\n 
        m = n / 2\r\n    # ブロックを2分割する\r\n    mergeSort(m, x, offset)\r\n    mergeSort(n
      - m, x, offset + m)\r\n    \r\n    <span style=\"color: rgb(163, 143, 132);\">#
      併合操作\r\n    # 分割した左側をbufferにメモ</span>\r\n    buffer = Array.new(m)\r\n    buffer
      = x[offset, m]\r\n    \r\n    <span style=\"color: rgb(163, 143, 132);\"># iは左半分のインデックス\r\n 
        # jは右半分のインデックス\r\n    # kはxのインデックス</span>\r\n    i, j, k = 0, m, 0\r\n    \r\n 
        <span style=\"color: rgb(163, 143, 132);\"># 左半分と右半分のデータ列の先頭同士を比べ、小さい方をデータ列から取り出して更新</span>\r\n 
        <span style=\"color: rgb(184, 49, 47);\">while</span> (i &lt; m &amp;&amp;
      j &lt; n) <span style=\"color: rgb(184, 49, 47);\">do</span>\r\n      <span
      style=\"color: rgb(184, 49, 47);\">if</span> buffer[i] &lt;= x[offset + j]\r\n 
            x[offset + k] = buffer[i]\r\n        i += 1\r\n      <span style=\"color:
      rgb(184, 49, 47);\">else</span>\r\n        x[offset + k] = x[offset + j]\r\n 
            j += 1\r\n      <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n 
          k += 1\r\n    <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n    \r\n<span
      style=\"color: rgb(163, 143, 132);\">#    if i == m # 左半分をxに移動し尽くした場合、右半分も順番にxに入れていく\r\n# 
            while (j &lt; n) do\r\n#            x[offset + k] = x[offset + j]\r\n# 
                k += 1\r\n#            j += 1\r\n#        end\r\n#    else\r\n#   
          while (i &lt; m) do # 右半分をxに移動し尽くした場合、左半分も順番にxに入れていく\r\n#            x[offset
      + k] = buffer[i]\r\n#            k += 1\r\n#            i += 1\r\n#        end\r\n#
      \   end</span>\r\n\r\n<span style=\"color: rgb(184, 49, 47);\">    </span><span
      style=\"color: rgb(163, 143, 132);\"># 上記の代わりにこっちを使う</span><span style=\"color:
      rgb(184, 49, 47);\">\r\n    while </span>(i &lt; m) <span style=\"color: rgb(184,
      49, 47);\">do</span> <span style=\"color: rgb(163, 143, 132);\"># 右半分をxに移動し尽くしたので、左半分も順番にxに入れていく</span><span
      style=\"color: rgb(184, 49, 47);\">\r\n      </span>x[offset + k] = buffer[i]\r\n
      \     k += 1\r\n      i += 1<span style=\"color: rgb(184, 49, 47);\">\r\n   
      end</span>\r\n    \r\n    p x\r\n  <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n<span
      style=\"color: rgb(184, 49, 47);\">end</span>\r\n\r\n\r\nN = 10\r\nmerge = MergeSort.new(N)\r\nmerge.main</pre><p><br></p><p>&lt;実行結果&gt;</p><pre><code>並び替え開始\r\n[188,
      543, 805, 241, 421, 996, 417, 95, 912, 771]\r\n[188, 543, 805, 241, 421, 996,
      417, 95, 912, 771]\r\n[188, 543, 241, 421, 805, 996, 417, 95, 912, 771]\r\n[188,
      241, 421, 543, 805, 996, 417, 95, 912, 771]\r\n[188, 241, 421, 543, 805, 417,
      996, 95, 912, 771]\r\n[188, 241, 421, 543, 805, 417, 996, 95, 771, 912]\r\n[188,
      241, 421, 543, 805, 417, 996, 95, 771, 912]\r\n[188, 241, 421, 543, 805, 95,
      417, 771, 912, 996]\r\n[95, 188, 241, 417, 421, 543, 771, 805, 912, 996]\r\n終了\r\n[95,
      188, 241, 417, 421, 543, 771, 805, 912, 996]</code></pre><p><br></p><p>上記のコメントした部分</p><blockquote><p>#
      &nbsp; &nbsp;if i == m # 左半分をxに移動し尽くした場合、右半分も順番にxに入れていく<br># while (j &lt; n)
      do<br># x[offset + k] = x[offset + j]<br># k += 1<br># j += 1<br># end<br>#
      else<br># while (i &lt; m) do # 右半分をxに移動し尽くした場合、左半分も順番にxに入れていく<br># x[offset
      + k] = buffer[i]<br># k += 1<br># i += 1<br># end<br># end</p></blockquote><p>これは、分割した左半分と右半分のデータ列の先頭同士を比べ、小さい方をデータ列から取り出して更新するときに、先に左側がなくなった場合、残りの右側を余ったインデックスに入れ、逆に先に右がなくなった場合、残りの左側を余ったインデックスに入れるという処理である。</p><p>しかしこれは以下コードで代用した。</p><blockquote><p>while
      (i &lt; m) do # 右半分をxに移動し尽くしたので、左半分も順番にxに入れていく<br>x[offset + k] = buffer[i]<br>k
      += 1<br>i += 1<br>end</p></blockquote><p>この処理は、先ほどの処理から、左側を移動し尽くした場合の処理が抜けただけの処理である。</p><p>マージソートで大事なのは、1度でもマージされたブロックの要素は昇順になっていることである。</p><p>左側を移動し尽くした場合、右側が余るが、すでに余った要素は配列の最後のインデックスまで大きい順で並んであるため、更新する必要はなく、結果は変わらない。</p><p>であれば、無駄な処理を省いた後者のコードを採用した。</p><p><br></p><p><br></p><p><br></p>"
    - '2019-09-27 22:01:12.030286'
    - '2019-09-28 12:43:17.202067'
  - - 209
    - Ruby コームソート
    - "<h1 style=\"text-align: center;\">Ruby コームソート</h1><p><br></p><h2>コームソートとは</h2><hr><p><strong>コムソート</strong>（英:
      <span lang=\"en\">comb sort</span>）や<strong>コームソート</strong>や<strong>櫛（くし）ソート</strong>は、ソートのアルゴリズムの一つ。1980年に
      Włodzimierz Dobosiewicz が発表し<sup><a href=\"https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%A0%E3%82%BD%E3%83%BC%E3%83%88#cite_note-2\">[2]</a></sup><sup><a
      href=\"https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%A0%E3%82%BD%E3%83%BC%E3%83%88#cite_note-BB-1\">[1]</a></sup>、1991年に
      Stephen Lacey と Richard Box が再発見しコムソートと命名した。</p><p>バブルソートの改良版。内部ソートだが、安定ソートではない。実行速度は、ほぼO(n
      log n)になる。[<a href=\"https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%A0%E3%82%BD%E3%83%BC%E3%83%88\">wikipedia引用</a>]</p><p><br></p><h2>アルゴリズム</h2><hr><p>挿入ソートをシェルソートに改良したときと同様の改良を施す。適当な間隔で整列後、間隔を少しずつ狭めて整列していく。</p><ol><li>総数
      n を 1.3 で割り、小数点以下を切り捨てた数を間隔 h とする。</li><li>i=0 とする。</li><li>i 番目と i+h 番目を比べ、i+h
      番目が小さい場合入れ替える。</li><li>i=i+1 とし、i+h&gt;n となるまで3を繰り返す。</li><li>hがすでに1になっている場合は入れ替えが発生しなくなるまで上の操作を繰り返す。</li><li>h
      を 1.3 で割り、小数点以下を切り捨てた数を新たに間隔 h とし、操作を繰り返す。[<a href=\"https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%A0%E3%82%BD%E3%83%BC%E3%83%88\">wikipedia引用</a>]</li></ol><p><br></p><h2>実装</h2><hr><p><br></p><pre><span
      style=\"color: rgb(184, 49, 47);\">def</span> combSort(data)\r\n    h = data.length
      * 10 / 13; # <span style=\"color: rgb(163, 143, 132);\">総数 n を 1.3 で割り、小数点以下を切り捨てた数を間隔
      h</span>\r\n    \r\n    <span style=\"color: rgb(184, 49, 47);\">while</span>
      (true) <span style=\"color: rgb(184, 49, 47);\">do</span>\r\n        swaps =
      0;\r\n        <span style=\"color: rgb(163, 143, 132);\"># i+hが h番目から総数のインデックス番目(data.length-1)まで=&gt;iが0~(data.length-1-h)</span>\r\n 
            (data.length-h).times <span style=\"color: rgb(184, 49, 47);\">do</span>
      |i|\r\n            <span style=\"color: rgb(184, 49, 47);\">if</span> (data[i]
      &gt; data[i + h])\r\n                swap(data, i, i + h) <span style=\"color:
      rgb(163, 143, 132);\"># dataのi番目とi+h番目を交換</span>\r\n                swaps+=1\r\n 
                <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n        <span
      style=\"color: rgb(184, 49, 47);\">end</span>\r\n\r\n<span style=\"color: rgb(184,
      49, 47);\">        </span><span style=\"color: rgb(163, 143, 132);\"># hが1で、一回も交換が行われなかったとき、ソートが完了する</span>\r\n<span
      style=\"color: rgb(163, 143, 132);\">        # hが1だが、交換が発生した場合、ここはスキップされて、入れ替えが発生しなくなるまで比較が繰り返される</span>\r\n<span
      style=\"color: rgb(163, 143, 132);\">        # hがまだ1じゃないとき、hを更新して比較が繰り返される</span>\r\n 
            <span style=\"color: rgb(184, 49, 47);\">if</span> (h == 1) \r\n     
            <span style=\"color: rgb(184, 49, 47);\">if</span> (swaps == 0)\r\n   
                  break\r\n            <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n 
            <span style=\"color: rgb(184, 49, 47);\">else</span>\r\n            h
      = h * 10 / 13\r\n        <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n 
        <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n<span style=\"color:
      rgb(184, 49, 47);\">end</span>\r\n\r\n<span style=\"color: rgb(184, 49, 47);\">def</span>
      swap(a, i, j)\r\n    t = a[i]\r\n    a[i] = a[j]\r\n    a[j] = t\r\n<span style=\"color:
      rgb(184, 49, 47);\">end</span>\r\n\r\narr=<code>[588, 836, 378, 16, 295, 448,
      767, 648, 447, 147]</code>\r\ncombSort(data)\r\np arr</pre><p><br></p><p>&lt;実行結果&gt;</p><pre><code>[94,
      198, 243, 351, 408, 740, 761, 767, 796, 996]</code></pre><p>きちんとソートされました。</p><p><br></p><p><br></p><p>今度は乱数でテストしてみる。</p><p><br></p><pre><span
      style=\"color: rgb(184, 49, 47);\">class</span> CombSort\r\n  <span style=\"color:
      rgb(184, 49, 47);\">def</span> initialize( n )\r\n    @target = Array.new(n)\r\n 
      <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n  \r\n  <span style=\"color:
      rgb(184, 49, 47);\">def</span> main\r\n    puts &quot;準備中&quot;\r\n    \r\n 
        @target.each_index <span style=\"color: rgb(184, 49, 47);\">do</span> |i|\r\n 
          @target[i] = rand(1000)\r\n    <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n 
        \r\n    p @target\r\n    \r\n    puts &quot;並び替え開始&quot;\r\n    combSort(@target)\r\n 
        puts &quot;終了&quot;\r\n    \r\n    p @target\r\n  <span style=\"color: rgb(184,
      49, 47);\">end</span>\r\n  \r\n  private\r\n  # ----- ソートアルゴリズム\r\n  <span style=\"color:
      rgb(184, 49, 47);\">def</span> combSort(data)\r\n    h = data.length * 10 /
      13;\r\n    \r\n    <span style=\"color: rgb(184, 49, 47);\">while</span> (true)
      <span style=\"color: rgb(184, 49, 47);\">do</span>\r\n        swaps = 0;\r\n 
            (data.length-h).times <span style=\"color: rgb(184, 49, 47);\">do</span>
      |i|\r\n            <span style=\"color: rgb(184, 49, 47);\">if</span> (data[i]
      &gt; data[i + h])\r\n                swap(data, i, i + h)\r\n               
      swaps+=1\r\n            <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n 
            <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n        <span style=\"color:
      rgb(184, 49, 47);\">if</span> (h == 1) \r\n            <span style=\"color:
      rgb(184, 49, 47);\">if</span> (swaps == 0)\r\n                break\r\n     
            <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n        <span style=\"color:
      rgb(184, 49, 47);\">else</span>\r\n            h = h * 10 / 13\r\n        <span
      style=\"color: rgb(184, 49, 47);\">end</span>\r\n    <span style=\"color: rgb(184,
      49, 47);\">end</span>\r\n  <span style=\"color: rgb(184, 49, 47);\">end</span>\r\n  \r\n 
      <span style=\"color: rgb(184, 49, 47);\">def</span> swap(a, i, j)\r\n      t
      = a[i]\r\n      a[i] = a[j]\r\n      a[j] = t\r\n  <span style=\"color: rgb(184,
      49, 47);\">end</span>\r\n<span style=\"color: rgb(184, 49, 47);\">end</span>\r\n\r\n\r\nN
      = 100\r\ncomb = CombSort.new(N)\r\ncomb.main</pre><p><br></p><p>&lt;実行結果&gt;</p><p><code>準備中<br>[566,
      803, 958, 633, 914, 703, 480, 900, 765, 806]<br>並び替え開始<br>終了<br>[480, 566, 633,
      703, 765, 803, 806, 900, 914, 958]</code></p><p><br></p><p>バッチリ、コームソートできました！！以上です。</p><p><br></p>"
    - '2019-09-28 14:59:32.298168'
    - '2019-09-28 14:59:32.298168'
  - - 210
    - ユークリッドの互除法
    - "<h1 style=\"text-align: center;\">ユークリッドの互除法</h1><p><br></p><h2>ユークリッドの互除法の例</h2><hr><p>ユークリッドの互除法では，以下の<strong>重要な性質</strong>を使って最大公約数の計算を行います。</p><p><strong>重要な性質：</strong></p><p>割り算の等式:
      a = bq + r において</p><p>「aとbの最大公約数」 = 「bとrの最大公約数」</p><p><br></p><h2>例</h2><hr><p>390と273の最大公約数を求める</p><p><u>a=390</u>,
      <u>b=273</u>とすると</p><p>390=273・1+117</p><p>であり、<u>q=1</u>, <u>r=117</u></p><p>「390とb273の最大公約数」
      = 「273と117の最大公約数」</p><p><br></p><p>273と117の最大公約数を求める</p><p><u>a=273</u>, <u>b=117</u></p><p>273=117・2+39</p><p><u>q=2</u>,
      <u>r=39</u></p><p>「273と117の最大公約数」 = 「117と39の最大公約数」</p><p><br></p><p>117と39の最大公約数を求める</p><p><u>a=117</u>,
      <u>b=39</u></p><p>117=39・23</p><p>よって、117と39の最大公約数は 23 となり、</p><p>390と273の最大公約数は
      23 になる。</p><p><br></p><h2>ユークリッドの互除法の証明</h2><hr><p>以降、最大公約数(Greatest Common
      Division) を gcd という記号で表し、aとbの最大公約数を gcd(a, b) と表す。</p><p><br></p><p>aをbで割った商をq,
      余りをrとすると (0 &lt; r &lt; b)</p><p><strong>a = bq+r ・・・①</strong></p><p>aとbがGの公約数を持つ時</p><p><strong>a
      = Ga&#39;, b = Gb&#39; ・・・②</strong></p><p><br></p><p>②を①に代入すると</p><p>G(a&#39;-b&#39;q)
      = r となり、</p><p>r&#39; = a&#39;-b&#39;q とすると</p><p><strong>r = Gr&#39; ・・・③</strong></p><p><br></p><p>②,
      ③ より、<strong>aとbの公約数は、bとr の公約数となる・・・④</strong></p><p><br></p><p>次に、bとrがGの公約数を持つ時</p><p>①より、aもGの倍数となる</p><p>すなわち、<strong>bとrの公約数は、aとb
      の公約数となる・・・⑤</strong></p><p><br></p><p><strong>④、⑤より、a,bとb,r は全く同じ約数をもち、最大公約数も同じになる。</strong></p><p>以上より、</p><p><strong><u>「割られる数と割る数の最大公約数と割る数とあまりの最大公約数は一致する」(ユークリッドの互除法証明終了)</u></strong></p><p><br></p><h2>実装</h2><hr><p>xとyの最大公約数を返す関数</p><p><br></p><p>Python(ループを使う)</p><pre
      data-lang=\"python\" data-unlink=\"\">def gcd(a, b):\r\n    while b != 0:\r\n
      \       a, b = b, a%b # 割る数を割られる数、割られる数を余りに変える\r\n    return a</pre><p><br></p><p>Python(再帰関数を使う)</p><pre>def
      gcd(a, b): <span style=\"color: rgb(163, 143, 132);\"># a(割られる数), b(割る数)</span>\r\n 
      if b==0: return a <span style=\"color: rgb(163, 143, 132);\"># 余りが0だった場合、割る数が最大公約数</span>\r\n 
      return gcd(b, a%b) <span style=\"color: rgb(163, 143, 132);\"># b(割る数), a%b(余り)</span></pre><p>解説すると、</p><p><code>関数gcdは
      <u>割られる数(第一引数)と割る数(第二引数)から最大公約数</u><u>を返す</u>関数</code></p><p><code>第一引数に<strong><u>割る数</u></strong>、第二引数に<strong><u>割られる数</u></strong>を指定しても、最大公約数は同じになる</code></p><p><code>すなわち、</code></p><p><code><strong><em><span
      style=\"font-size: 24px;\">gcd(a,b) = gcd(b, a%b) の関係が成り立つ</span></em></strong></code></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-09-29 21:01:41.60037'
    - '2019-09-29 21:01:41.60037'
  - - 211
    - 素因数分解（試し割り法)
    - "<h1 style=\"text-align: center;\">素因数分解（試し割り法)</h1><p><br></p><h2>試し割り法</h2><hr><p><strong>試し割り法</strong>(ためしわりほう、英:
      <span lang=\"en\">trial division</span>)は最も面倒ではあるが、最も理解しやすい素数判定（素因数分解）アルゴリズムである。基本的な考え方は、素因数分解しようとする整数<em>n</em>を小さい順に割ってみて、割り切れるかどうかを調べる手法である。例えば、12という整数は、1,
      2, 3, 4, 6, 12で割り切ることが可能である。</p><p><br></p><h2>方法</h2><hr><p>与えられた整数 <em>n</em>
      (<em>n</em> はこれから素因数分解する整数）に対して、<em>n</em>より小さい数で割り切れるかどうかを順番に確かめることで素数判定を行う。<em>n</em>が2で割り切れる確率は、<em>n</em>が3で割り切れる確率より高いため、小さい数から順に素因数の候補として割り切れるかを確かめると効率的である。また、<em>n</em>が何らかの数<em>p</em>で割り切れる場合、<em>n</em>=<em>pq</em>であり、p&lt;qの時、p&lt;\\(\\sqrt
      {n}\\)であるから、nの素因数の前半は\\(\\sqrt {n}\\)までで十分ある。前半がわかれば、nをpで限界まで割ることで、同時に後半もわかるため、素数判定を行う判定は\\(\\sqrt
      {n}\\)までで良い。</p><p><br></p><h2>筆者の考え方</h2><hr><pre>N=p*q (p&lt;q) の時\r\np&lt;=&radic;N\r\n\r\n\r\n<span
      style=\"color: rgb(184, 49, 47);\"><strong><u><span style=\"font-size: 18px;\">Nが素因数を持つ時、&quot;最小の素因数&quot;は、&radic;N以下に必ず存在する</span></u></strong></span>\r\n-&gt;&radic;N以下の範囲の最小の素因数でNを割れるだけ割って、この値をN(0)とする\r\n\r\n\r\nN(0)が素因数を持つ時、最小の素因数は、&radic;N(0)以下に必ず存在する\r\n-&gt;&radic;N(0)以下の範囲の最小の素因数で割れるだけ割って、更新した値をN(1)とする\r\n\r\n\r\nN(1)が素因数を持つ時、最小の素因数は、&radic;N(1)以下に必ず存在する\r\n-&gt;&radic;N(1)以下の範囲の最小の素因数で割れるだけ割って、更新した値をN(2)とする\r\n\r\n\r\n...\r\n\r\n\r\nN(2)が素因数を持つ時、最小の素因数は、&radic;N(2)以下に必ず存在する\r\n-&gt;&radic;N(i)以下の範囲の最小の素因数で割れるだけ割って、更新した値をN(2)とする\r\n\r\n\r\n...\r\n\r\n\r\nNは更新するたびに順当に最小の素因数で割られていくので、いずれ&radic;N以下に素因数が存在しなくなる\r\n\r\n\r\n[&radic;N&#39;以下にもう素因数が存在しない]\r\n-&gt;N&#39;は前半(&radic;N&#39;以下)に因数を持たないのでN&#39;=pqでは表せない。\r\n1
      か 素数 のどちらかである</pre><p><br></p><p>試し割り法は、最小の素因数を順当に取り除いていって、&radic;Nを超えた時点で最後の素数判定を行い、全ての素因数を取得する方法。</p><p>ポイントは、素因数で割って、Nを更新し、<span
      style=\"color: rgb(226, 80, 65); font-size: 24px;\"><u>その度に、&quot;最小の素因数は&radic;N以下に存在する&quot;という規則を利用していること。</u></span></p><p>これを気づくのに丸一日使いました。</p><p>しっかり理屈を覚えましょう。</p><p><br></p><p><br></p><h2>実装</h2><hr><h3>素因数分解</h3><h3><br></h3><p>List[int]で素因数を返すやり方</p><p>python</p><pre><span
      style=\"color: rgb(184, 49, 47);\">def</span> factorize(n):\r\n    b = 2\r\n 
        fct = []\r\n    <span style=\"color: rgb(163, 143, 132);\"># 素因数の前半部分を探す</span>\r\n 
        <span style=\"color: rgb(184, 49, 47);\">while</span> b * b &lt;= n:\r\n 
            <span style=\"color: rgb(184, 49, 47);\">while</span> n % b == 0:\r\n 
                n //= b\r\n            fct.append(b)\r\n        b = b + 1\r\n\r\n
      \   <span style=\"color: rgb(163, 143, 132);\"># 素因数の後半部分を追加</span>\r\n    <span
      style=\"color: rgb(184, 49, 47);\">if</span> n &gt; 1:\r\n        fct.append(n)\r\n 
        return fct\r\n\r\n\r\nn = 2**2 * 3 * 5**3\r\nprint(factorize(n))</pre><p><code>出力結果</code></p><p><code>[2,
      2, 3, 5, 5, 5]</code></p><p><br></p><p><br></p><p>List[Tuple[int, int]]で素因数を返すやり方</p><p>python</p><pre><code><span
      style=\"color: rgb(184, 49, 47);\">def</span> factorize(n):\r\n    fct = []\r\n
      \   b, e = 2, 0  <span style=\"color: rgb(163, 143, 132);\"># 素因数, 塁上</span>\r\n
      \   <span style=\"color: rgb(184, 49, 47);\">while</span> b * b &lt;= n:\r\n
      \       while n % b == 0:\r\n            n //= b\r\n            e = e + 1\r\n
      \       if e &gt; 0:\r\n            fct.append((b, e))\r\n        b, e = b +
      1, 0\r\n    <span style=\"color: rgb(184, 49, 47);\">if</span> n &gt; 1:\r\n
      \       fct.append((n, 1))\r\n    return fct\r\n\r\n</code>n = 2**2 * 3 * 5**3<code>\r\nprint(factorize(n))</code></pre><p><code>出力結果</code></p><p><code>[(2,
      2), (3, 1), (5, 3)]</code></p><p><br></p><p>一つ解説すると、 while b * b &lt;= n: の部分はb&lt;=\\(\\sqrt
      {n}\\)を表し、あえて、平方根を取らないのは、コンピュータによっては意外とsinやcos, ルートの処理は重かったりするからである。</p><p><br></p>"
    - '2019-09-30 13:21:49.341907'
    - '2019-09-30 17:19:11.498987'
  - - 212
    - MathJax 表示スタイル
    - "<h1 style=\"text-align: center;\">MathJax 表示スタイル</h1><p><br></p><h2>MathJaxLaTeX</h2><hr><p><strong>MathJax</strong>
      はMathML、LaTeX、<span title=\"リンク先の項目はまだありません。新規の執筆や他言語版からの翻訳が望まれます。\">ASCIIMathML</span>で記述された数式をウェブブラウザ上で表示する<span
      title=\"リンク先の項目はまだありません。新規の執筆や他言語版からの翻訳が望まれます。\">クロスブラウザ</span>のJavaScriptライブラリであるMathJaxはApache
      Licenseのもとでオープンソースソフトウェアとしてリリースされている。</p><p><br></p><h2>導入</h2><hr><p>CDNを使用して、簡単に導入できる。</p><pre>&lt;script
      type=&quot;text/javascript&quot; async\r\n  src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML&quot;&gt;\r\n&lt;/script&gt;\r\n&lt;script
      type=&quot;text/x-mathjax-config&quot;&gt;\r\n MathJax.Hub.Config({\r\n tex2jax:
      {\r\n inlineMath: [[&quot;\\\\(&quot;,&quot;\\\\)&quot;] ],\r\n displayMath:
      [ [&#39;$$&#39;,&#39;$$&#39;], [&quot;\\\\[&quot;,&quot;\\\\]&quot;] ]\r\n }\r\n });\r\n&lt;/script&gt;</pre><p><br></p><p>人によっては、inlineMathの記号を</p><pre><code>inlineMath:
      [[&#39;$&#39;,&#39;$&#39;], [&#39;\\\\(&#39;,&#39;\\\\)&#39;]],</code></pre><p>のように$も使えるようにしている人もいるかもしれませんが、僕は$は使わずに記事を書いているのでご了承ください。</p><p><br></p><h2>表示スタイル</h2><hr><h3>身の上の心配アール参上:
      \\frac{ 4 }{ 3 } &nbsp; \\pi r ^{ 3 }</h3><h3><br></h3><h3>例1：インライン数式</h3><p>文章に埋め込んだ形で自然に表示される</p><pre>
      inlineMath: [[&quot;\\\\(&quot;,&quot;\\\\)&quot;] ],</pre><p>の場合、<code>\\(Mathjaxのコード\\)</code>
      のように、前後で覆う。</p><p><br></p><pre>身の上の心配アール参上: \\(\\frac{ 4 }{ 3 }   \\pi r ^{
      3 }\\)</pre><p><span style=\"color: rgb(184, 49, 47);\">表示結果</span></p><p>身の上の心配アール参上:
      \\(\\frac{ 4 }{ 3 } &nbsp; \\pi r ^{ 3 }\\)</p><p><br></p><h3>例2: ディスプレイ数式</h3><p>改行されて中央よせになる</p><pre>displayMath:
      [ [&#39;$$&#39;,&#39;$$&#39;], [&quot;\\\\[&quot;,&quot;\\\\]&quot;] ]</pre><p>の場合、<code>\\[Mathjaxのコード\\]</code>
      か<code>$$Mathjaxのコード$$</code>のように、前後で覆う。</p><p><br></p><pre>身の上の心配アール参上: \\[\\frac{
      4 }{ 3 }   \\pi r ^{ 3 }\\]</pre><p><span style=\"color: rgb(184, 49, 47);\">表示結果</span></p><p>身の上の心配アール参上:
      \\[\\frac{ 4 }{ 3 } &nbsp; \\pi r ^{ 3 }\\]</p><p><br></p><h3>その他、AMSmathやマクロ、タイポなど、色々あるのだが、とりあえず上の二つ知ってれば、さほど困ることはない。</h3><p><br></p><h2>最後に</h2><hr><p>いつも私が参考にさせていただいているコード表です。</p><p><a
      href=\"http://if1.tech/g-mathjax\">http://if1.tech/g-mathjax</a></p><p>めちゃくちゃ便利。</p><p>唯一の問題はアプー！がめちゃくちゃ邪魔なこと。</p>"
    - '2019-09-30 14:31:11.082762'
    - '2019-09-30 15:19:36.165924'
  - - 213
    - Kaggle 住宅価格予測 (回帰分析)
    - '<h1 style="text-align: center;">Kaggle 住宅価格予測 (回帰分析)</h1><p><br></p><h2>環境</h2><hr><p><u>python
      3.7.3</u></p><p><u>pandas 0.25.1 (数表や時系列データを操作するためのライブラリ)</u></p><p><u>matplotlib
      3.0.3 (グラフ描画の為のライブラリ)</u></p><h3>グラフの種類 <a href="https://www.kaggle.com/katotaka/kaggle-prediction-house-prices#%E3%82%B0%E3%83%A9%E3%83%95%E3%81%AE%E7%A8%AE%E9%A1%9E"
      target="_self"></a></h3><ul><li>折れ線グラフ</li><li>散布図</li><li>ヒストグラム</li><li>ヒートマップ</li><li>3Dグラフ</li></ul><p><u>seaborn
      0.9.0 (Matplotlibの機能を<strong>より美しく、またより簡単</strong>に実現するためのライブラリ)</u></p><h3>グラフの種類</h3><ul><li>折れ線グラフ</li><li>散布図</li><li>ヒストグラム</li><li>ヒートマップ</li></ul><p><u>numpy
      1.16.3 (Pythonにおいて数値計算を効率的に行うためのライブラリ)</u></p><p><u>scikit-learn &#39;0.21.3&#39;
      (Pythonのオープンソース機械学習ライブラリ。 Pythonの数値計算ライブラリのNumPyとSciPyとやり取りするよう設計されている)</u></p><p><br></p><h2>データセット</h2><hr><p>Kaggleが提供しているデータセットを使用します。</p><p>ダウンロード先のurlを掲示しておきます。</p><p><a
      href="https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data">https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data</a></p><p><br></p><h2>モデル作成</h2><hr><p><br></p><p>(真下にjupyter
      notebookが表示されてなかったらリロードしてください)</p><script src="https://gist.github.com/NakajiTatsuya/fccc8d433e1abdd8153574050b99bddb.js"></script><h2>最後に</h2><hr><p>スコアはどうやら、対数平均二乗誤差（RMSLE)のようなので、この値が0に近ければちかほど、良いモデルが作れたということになります。</p><p>変数を正規化したり、回帰分析でしようする変数の数をもっと増やすなど、改善の余地はまだまだありますが、今回の提出結果は4453位/4612でした。</p><p><br></p><p><br></p><p><br></p>'
    - '2019-10-05 17:47:45.367511'
    - '2019-10-10 19:00:21.586277'
  - - 214
    - jupyter_contrib_nbextensionsのインストール
    - '<h1 style="text-align: center;">jupyter_contrib_nbextensions</h1><p><br></p><h2>jupyter_contrib_nbextensions</h2><hr><p>jupyterの拡張機能で、目次の自動生成やコード補完、スニペットの登録などをできるようになります。(<span
      lang="ja" tabindex="0">ユーザーと開発者のグループによって独立して維持されており、IPython開発チームと公式には関係していません。</span>)</p><p>ドキュメント<a
      href="https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/index.html">&nbsp;https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/index.html</a></p><p><br></p><h2>インストール</h2><hr><h2>1.
      pythonパッケージのインストール</h2><p><br></p><h3>・pipでインストール</h3><p>PyPiから現在のversionをインストールするために、以下のコマンドをタイプします</p><pre>pip
      install jupyter_contrib_nbextensions</pre><p><br></p><p>もしくは、このレポジトリ の現在のブランチから直接インストールすることもできます。</p><pre>pip
      install <a href="https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tarball/master">https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tarball/master</a></pre><p><br></p><h3>・Condaでインストール</h3><p
      data-placeholder="翻訳" dir="ltr"><span lang="ja" tabindex="0">ノートブック拡張用のcondaパッケージと、conda-forgeから入手可能なjupyter_nbextensions_configuratorがあります。両方を使用してインストールできます</span></p><pre>conda
      install -c conda-forge jupyter_contrib_nbextensions</pre><p>ここで、</p><p><br></p><p><code>jupyter
      contrib nbextension install --sys-prefix</code></p><p>&nbsp;のコマンドを使用すると、cssファイル、javascriptファイルも同時にインストールし、手順2をやらなくて済みます。</p><p><br></p><h3>・クローンされたレポジトリ
      からインストール</h3><pre>git clone <a href="https://github.com/ipython-contrib/jupyter_contrib_nbextensions.git">https://github.com/ipython-contrib/jupyter_contrib_nbextensions.git</a></pre><p>それから、編集可能なpip
      installコマンドを行う(-e)</p><pre>pip install -e jupyter_contrib_nbextensions</pre><p
      data-placeholder="翻訳" dir="ltr"><br></p><h2 data-placeholder="翻訳" dir="ltr">2.
      javascriptとcssファイルをインストール</h2><pre>jupyter contrib nbextension install --user</pre><p
      data-placeholder="翻訳" dir="ltr"><br></p><h2>3. extensionsを使用可、使用不可にする</h2><p><br></p><p>extnsionを使用可にするために、jupyterのサブコマンドを使用できる</p><pre>jupyter
      nbextension enable &lt;nbextension require path&gt;</pre><p data-placeholder="翻訳"
      dir="ltr">例えば</p><pre>jupyter nbextension enable codefolding/main</pre><p><br></p><p>使用不可にするとき</p><pre>jupyter
      nbextension disable &lt;nbextension require path&gt;</pre><p data-placeholder="翻訳"
      dir="ltr">例えば</p><pre>jupyter nbextension disable　codefolding/main</pre><p data-placeholder="翻訳"
      dir="ltr"><br></p><p data-placeholder="翻訳" dir="ltr">より詳しい内容は、公式ドキュメント参照</p><p><a
      href="https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/install.html#install-the-python-package">公式ドキュメント</a></p><p><br></p><p><br></p><p><br></p><p><br></p>'
    - '2019-10-08 18:33:05.83606'
    - '2019-10-08 18:33:05.83606'
  - - 215
    - froala scriptが取り除かれてしまう問題を解決
    - "<h1 style=\"text-align: center;\">froala scriptが取り除かれてしまう問題を解決</h1><p><br></p><h2>デフォルト仕様</h2><hr><p>froalaエディターでは&lt;style&gt;,
      &nbsp;&lt;script&gt;タグはアップロードしても取り除かれるようになっています。</p><p>これは、XSS attack(クロスサイトスクリプティング攻撃)
      を防ぐ目的のようです。</p><p>なので、この設定を変えるのは非推奨のようです。</p><p>ですが、例えば、Gistを埋め込んだり、特定のページのみgoogle
      analyticsのトラッキングコードを埋め込む時など、&lt;script&gt;を使いたいときはあると思います。</p><p>以下、この問題の解決手段を記します。</p><p><br></p><h2>解決策</h2><hr><h3>方法1.
      デフォルト設定を変えて、&lt;script&gt;を取り除かないようにする</h3><h3>htmlRemoveTags</h3><table style=\"margin-right:
      calc(69%); width: 31%;\"><tbody><tr><td style=\"width: 47.5584%;\">Type:</td><td
      style=\"width: 52.2293%;\">Array</td></tr><tr><td style=\"width: 47.5584%;\">Default:</td><td
      style=\"width: 52.2293%;\">[&#39;script&#39;, &#39;style&#39;]</td></tr></tbody></table><h4><br></h4><h4>CODE
      EXAMPLE</h4><pre>new FroalaEditor(&#39;.selector&#39;, {\r\n  htmlRemoveTags:
      [&#39;style&#39;, &#39;base&#39;] <span style=\"color: rgb(163, 143, 132);\">#
      scriptを外す</span>\r\n});</pre><p><br></p><p>これで、簡単にscriptが取り除かれなくなります。</p><p><span
      style=\"color: rgb(184, 49, 47);\">＊＊＊この方法は、公式の開発者グループの非推奨です</span></p><p><br></p><p>...一応、ワードプレスやはてなブログは初めから&lt;script&gt;タグを取り除かない仕様なので、特別危険なことをしているというわけではないです。(ただ、方法2でやったほうが、セキュリティに侵入された時のリスクが小さい)</p><p><br></p><h3>方法2.
      カスタムボタンを作る</h3><p><br></p><p><a href=\"https://www.froala.com/wysiwyg-editor/docs/concepts/custom/popup\">カスタムボタン</a></p><p>scriptのコードを要求するポップアップのカスタムボタンを作成する</p><p>この方法により、XSSインジェクションから安全になり、&lt;script&gt;を埋め込むのも楽になる。</p><p><span
      style=\"color: rgb(41, 105, 176);\">＊＊＊この方法は、公式の開発者グループの推奨です</span></p><p><br></p><h2>最後に</h2><hr><p>臨時解決策で、解決策1、長期使用を考えて解決策2って感じですね。</p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2019-10-08 19:42:43.268154'
    - '2019-10-08 19:42:43.268154'
  - - 216
    - Google Collaboratory で kaggle を扱う
    - "<h1 style=\"text-align: center;\">Google Collaboratory で kaggle を扱う</h1><p><br></p><h2>Google
      Colaboratory</h2><hr><p>完全にクラウドで実行される Jupyter ノートブック環境です。設定不要で、無料でご利用になれます。</p><p>Colaboratory
      を使用すると、コードの記述と実行、解析の保存や共有、強力なコンピューティング リソースへのアクセスなどをブラウザか</p><p>らすべて無料で行えます。</p><p><br></p><h2>Kaggle</h2><hr><p><strong>Kaggle</strong>は企業や研究者がデータを投稿し、世界中の統計家やデータ分析家がその最適モデルを競い合う、予測モデリング及び分析手法関連プラットフォーム及びその運営会社である。
      モデル作成にクラウドソーシング手法が採用される理由としては、いかなる予測モデリング課題には無数の戦略が適用可能であり、どの分析手法が最も効果的であるか事前に把握することは不可能であることに拠る。</p><p><br></p><h2>メリット</h2><hr><p>CPUだけのPCでは、計算に時間がかかりすぎたり、データをダウンロードする空きがなかったりする。</p><p>そこで、Colabortoryでレンタルマシンを使って、kaggleの機械学習を行う。</p><p><br></p><h2>手順</h2><hr><h3>1.
      kaggle.jsonをkaggleからダウンロード</h3><p><br></p><p><a href=\"https://www.kaggle.com/\"
      rel=\"nofollow noopener\" target=\"_blank\">https://www.kaggle.com/</a></p><p>よりログインして、右上のプロフィール画像、&quot;My
      Account&quot;の順にクリックする</p><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1578570427172-kaggle_json_1.png\"
      class=\"fr-fic fr-dib fr-fil\" style=\"width: 600px;\"></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1578570489689-kaggle_json_2.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>これでkaggle.jsonがダウンロードされます。</p><p><br></p><p>(kaggle.json)</p><pre>{&quot;username&quot;:&quot;######&quot;,&quot;key&quot;:&quot;xxxxx&quot;}</pre><p><br></p><p><br></p><p><br></p><h3>2.
      Google Colaboratory に kaggle.jsonを配置</h3><h4><span style=\"font-size: 14px;\">やり方は2通りある。</span></h4><p><span
      style=\"font-size: 14px;\">なお、jupyter notebookのセルからコマンドを実行するときは ! を先頭につける</span></p><p><br></p><h3>・method_1
      .kaggleに配置</h3><p><br></p><p>コマンドのインストール</p><pre>!pip install kaggle</pre><p><br></p><p><span
      style=\"font-size: 14px;\">ダウンロードしたkaggle.jsonを<code>~/.kaggle/kaggle.json</code>に設置して、以下のコマンドを実行</span></p><pre>!chmod
      600 ~/.kaggle/kaggle.json</pre><p><br></p><p>以上でkaggleコマンドが使えるようになる。コマンドについて、詳しくは以下のドキュメントを見る。</p><p><a
      href=\"https://github.com/Kaggle/kaggle-api\">https://github.com/Kaggle/kaggle-api</a></p><p><br></p><p><br></p><h3>・method_2.
      環境変数に渡す</h3><p>kaggle.jsonの usernameパラメータを&quot;KAGGLE_USERNAME&quot;という環境変数に、</p><p>とkeyパラメータを&quot;KAGGLE_KEY&quot;という環境変数に渡す。</p><p><br></p><pre>export
      KAGGLE_USERNAME=##########\r\nexport KAGGLE_KEY=xxxxxxxxxxxxxx</pre><p>もしくは、</p><pre>import
      os\r\nos.environ[&#39;KAGGLE_USERNAME&#39;] = #######\r\nos.environ[&#39;KAGGLE_KEY&#39;] = xxxxxxxxxxx\r\n# print(&quot;KAGGLE_USERNAME: &quot; + os.environ[&quot;KAGGLE_USERNAME&quot;])\r\n#
      print(&quot;KAGGLE_KEY: &quot; + os.environ[&quot;KAGGLE_KEY&quot;])</pre><p>以上でkaggleコマンドが使えるようになる。</p><p><br></p><h3>[method_1のメリットとデメリット]</h3><p>メリットは、とにかく簡単。.kaggleフォルダを作って配置するだけ。</p><p>デメリットは、Google
      Colaboratoryが再起動したり、初期化されるたびに、わざわざkaggle.jsonを配置しなければならない。(フォルダやファイルは消えて初期状態に戻るため)</p><p>しかし、Google
      Colaboratoryではなく自分の実機パソコンでkaggleを行う場合、初期化はされないため、間違いなくこのやり方が良い。</p><p><br></p><h3>[method_2のメリットとデメリット]</h3><p>&nbsp;メリットは、Google
      Colaboratoryが再起動したり、初期化されようが、再び実行するだけでよい(ファイルをいちいち手動で配置する必要がない)</p><p>デメリットは、ファイルの内容が他人に見せられない。理由は、環境変数で渡す時に、kaggle.jsonの内容が含まれているから。</p><p><br></p><p>そこでどうする...</p><p><br></p><h2>筆者のやり方</h2><hr><p><span
      style=\"font-size: 24px;\">[Google Driveにkaggle.jsonを配置]</span></p><p><br></p><p><span
      style=\"font-size: 14px;\">Google DriveのMy Driveにkaggleフォルダを作り、kaggle.jsonを配置</span></p><p>当然ながら、colaboratoryが初期化されても、GoogleDriveは初期化されないので、毎回jsonファイルを読み込んで環境変数で渡せば良い。</p><p><br></p><h3>[コード公開]</h3><p>Google
      Driveに接続</p><pre><span style=\"color: rgb(235, 107, 86);\">from</span> google.colab
      <span style=\"color: rgb(235, 107, 86);\">import</span> drive\r\ndrive.mount(<span
      style=\"color: rgb(184, 49, 47);\">&#39;/content/drive&#39;</span>)</pre><p>GoogleDriveの「My
      Drive/kaggle/kaggle.json」から読み込んで、環境変数に渡す</p><pre><span style=\"color: rgb(235,
      107, 86);\">import</span> os\r\n<span style=\"color: rgb(235, 107, 86);\">import</span> json\r\nf
      = open(<span style=\"color: rgb(184, 49, 47);\">&quot;/content/drive/My Drive/kaggle/kaggle.json&quot;</span>, <span
      style=\"color: rgb(184, 49, 47);\">&#39;r&#39;</span>)\r\njson_data = json.load(f) <span
      style=\"color: rgb(163, 143, 132);\">#JSON形式で読み込む</span>\r\nos.environ[<span
      style=\"color: rgb(184, 49, 47);\">&#39;KAGGLE_USERNAME&#39;</span>] = json_data[<span
      style=\"color: rgb(184, 49, 47);\">&#39;username&#39;</span>]\r\nos.environ[<span
      style=\"color: rgb(184, 49, 47);\">&#39;KAGGLE_KEY&#39;</span>] = json_data[<span
      style=\"color: rgb(184, 49, 47);\">&#39;key&#39;</span>]\r\n<span style=\"color:
      rgb(163, 143, 132);\"># print(&quot;KAGGLE_USERNAME: &quot; + os.environ[&quot;KAGGLE_USERNAME&quot;])\r\n#
      print(&quot;KAGGLE_KEY: &quot; + os.environ[&quot;KAGGLE_KEY&quot;])</span></pre><p><u>これでkaggleコマンドが使える。</u></p><p><u>Google
      Colaboratoryが初期化されてもGoogle Driveから読み込むので問題なし。</u></p><p><u>認証トークンもバレずに済む！</u></p><p><br></p><h2>よく使うコマンドのおまけ</h2><hr><p>・kaggleデータセットのダウンロード</p><p><u>!kaggle
      competitions download -c &quot;コンペ名&quot; -p &quot;ダウンロードファイルが置かれるパス&quot;</u></p><p><br></p><p>・ダウンロードファイルがzip形式の時に開封する</p><p><u>!unzip
      -u &quot;zipファイルのパス&quot;</u></p><p><br></p><p>・データをデータフレームで読み込む</p><pre>import
      pandas\r\nimport os\r\nDATA_FOLDER = &#39;/root/dataset&#39;\r\n<span style=\"color:
      rgb(163, 143, 132);\"># DATA_FOLDER = &#39;~/dataset&#39; # 上と同じ意味 ~は /rootを意味する</span>\r\ntrain
      = pd.read_csv(os.path.join(DATA_FOLDER, &#39;train.csv&#39;))\r\ntest = pd.read_csv(os.path.join(DATA_FOLDER,
      &#39;test.csv&#39;))</pre><p><br></p><p>・データフレームで読み込んだ後はきちんと確認</p><pre>print(<span
      style=\"color: rgb(184, 49, 47);\">&quot;----------先頭データ----------&quot;</span>)\r\nprint(train.head(5))\r\nprint(<span
      style=\"color: rgb(184, 49, 47);\">&quot;-----------統計情報-----------&quot;</span>)\r\nprint(train.info())\r\nprint(<span
      style=\"color: rgb(184, 49, 47);\">&quot;-----------データの型-----------&quot;</span>)\r\nprint(train.dtypes)\r\nprint(<span
      style=\"color: rgb(184, 49, 47);\">&quot;----------非存在-----------&quot;</span>)\r\nprint(train.isnull().sum())\r\nprint(<span
      style=\"color: rgb(184, 49, 47);\">&quot;----------欠損値-----------&quot;</span>)\r\nprint(train.isna().sum())\r\nprint(<span
      style=\"color: rgb(184, 49, 47);\">&quot;----------Shape----------&quot;</span>)\r\nprint(train.shape)</pre><p><br></p><p>・kaggleに予測結果のcsvファイルを提出するとき</p><p><u>!kaggle
      competitions submit -c &quot;提出するコンペ名&quot; -f &quot;提出するファイル&quot; -m &quot;メッセージ&quot;</u></p><p><br></p><p>・データフレームをcsvファイルで出力(pandas)</p><p><u>MySubmissionDataframe.to_csv(&#39;submission.csv&#39;,
      index=False)</u></p><p><br></p><p>・データフレームをpickleファイルとして保存(python)</p><p>TrainingData.to_pickle(&#39;train.pkl&#39;)</p><p>pd.read_pickle(&#39;train.pkl&#39;)で読み込み</p><p><br></p><p>・配列や変数をpickleファイルとして保存(python)</p><p>pickle.dump(Y_predict,
      open(&#39;Y_predict.pickle&#39;, &#39;wb&#39;))</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2020-01-09 22:25:10.527989'
    - '2020-01-09 22:25:10.527989'
  - - 217
    - How to prevent Google Colaboratory from disconnecting
    - "<h1 style=\"text-align: center;\">prevent Google Colaboratory from disconnecting</h1><p><br></p><p><br></p><h2>Cause</h2><hr><div
      style=\"background-color:#FFFFCC;\">Google Colab notebooks have an idle timeout
      of 90 minutes and absolute timeout of 12 hours. This means, if user does not
      interact with his Google Colab notebook for more than 90 minutes, its instance
      is automatically terminated. Also, maximum lifetime of a Colab instance is 12
      hours.</div><p><br></p><p><span style=\"color: rgb(226, 80, 65);\">90分でセッションが切れて、12時間で完全にタイムアウトを起こす。</span></p><p><br></p><h2>Solution</h2><hr><p>Set
      a javascript interval to click on the connect button every 60 seconds.&nbsp;</p><p><br></p><p>1.
      Open chrome developer-settings (in your web-browser) with Ctrl+Shift+I (windows)
      (in case of mac, press Option+Command+I)</p><p><span style=\"color: rgb(235,
      107, 86);\">Chromeのディベロッパーツールを開く</span></p><p><br></p><p>&nbsp;2. click on &quot;console&quot;
      tab and type under code on the console and press enter.</p><p><span style=\"color:
      rgb(235, 107, 86);\">Chromeのディベロッパーツールのコンソールに以下のjavascriptを打ち込む</span></p><p><br></p><pre><code>function
      ConnectButton(){\r\n    console.log(&quot;Connect pushed&quot;); \r\n    document.querySelector(&quot;#connect&quot;).click()
      \r\n}\r\nsetInterval(ConnectButton,60000); <span style=\"color: rgb(163, 143,
      132);\"># 60000ms means 60s</span></code></pre><p><br></p><p>Set a javascript
      interval to click on the connect button every 60 seconds (60000 ms)</p><p><span
      style=\"color: rgb(235, 107, 86);\">60秒毎に接続ボタンが押されるので90分経ってもタイムアウトしない。</span></p><p><br></p><h2>Finally...</h2><hr><p>Sometimes,
      complex code miss cause as timeout inspite of code error.</p><p>Time out isn&#39;t
      always caused by session out or run time out.</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2020-01-13 19:14:10.594727'
    - '2020-01-13 19:14:10.594727'
  - - 218
    - Google Cloud SDKインストール [Mac]
    - "<h2 style=\"text-align: center;\">Google Cloud SDKインストール [MAC]</h2><p><br></p><p><br></p><h2>Google
      Cloud SDK</h2><hr><p>Google Cloud SDK は、Google Cloud Platform にホストされているリソースとアプリケーションの管理に使用できるツールセット。<a
      href=\"https://cloud.google.com/sdk/gcloud/reference/?hl=ja\"><code>gcloud</code></a>、<a
      href=\"https://cloud.google.com/storage/docs/gsutil?hl=ja\"><code>gsutil</code></a>、<a
      href=\"https://cloud.google.com/bigquery/bq-command-line-tool?hl=ja\"><code>bq</code></a>
      などのコマンドライン ツールもその一部。</p><p><br></p><h2>前提</h2><hr><p>・GCPアカウントが既に開設済であり、任意のプロジェクトが作成されている</p><p>・Macユーザー</p><p><br></p><p><br></p><h2>手順</h2><hr><p>導入は以下の公式ドキュメントに沿って行います。</p><p>しかし、ドキュメントが簡潔に書かれ過ぎている手前、戸惑うか箇所がいくつかあったので、一部始終の手順を残します。</p><p>・<i
      class=\"fa fa-sticky-note\" aria-hidden=\"true\"></i><a href=\"https://cloud.google.com/sdk/docs/?hl=ja#install_the_latest_cloud_tools_version_cloudsdk_current_version\">&nbsp;Google
      Cloud SDK ドキュメント</a></p><p><br></p><h3>1. Python 2.7.9 以降の Python 2 が必要</h3><pre>$
      python -V\r\n<span style=\"color: rgb(163, 143, 132);\">Python 2.7.15</span></pre><p><br></p><h3>2.
      インストーラを公式ページリンクからダウンロード＆解凍。</h3><p>ドキュメントにはインストーラーは任意の場所に配置とあるが、今回はホームディレクトリ配下にgcpというフォルダを作成し、その配下に導入する形で進める。</p><p><br></p><p>インストーラーは、macOS
      64 ビット（x86_64）の場合、google-cloud-sdk-245.0.0-darwin-x86.tar.gz</p><pre>$ cd ~/\r\n$
      pwd\r\n<span style=\"color: rgb(163, 143, 132);\">/Users/myusername  myusernameをホームディレクトリと呼ぶ</span>\r\n$
      mkdir gcp\r\n$ mv /Users/myusername/Downloads/google-cloud-sdk-245.0.0-darwin-x86.tar.gz
      /Users/myusername/gcp/\r\n$ cd gcp\r\n$ tar xvf google-cloud-sdk-245.0.0-darwin-x86_64.tar.gz</pre><p><br></p><h3>3.
      google-cloud-sdk/install.sh を実行</h3><p>中に含まれているインストールスクリプト(./google-cloud-sdk/install.sh)を実行。途中幾つかYes/Noを聞かれるので、回答しつつ導入を進める。終盤には必要な「環境変数の指定」に関する設定の記述先の追記も行われている。</p><p><br></p><pre>MacBook-Pro:gcp
      $ ./google-cloud-sdk/install.sh \r\n<span style=\"color: rgb(163, 143, 132);\">Welcome
      to the Google Cloud SDK!\r\npyenv: python2: command not found\r\n\r\n\r\nThe
      `python2&#39; command exists in these Python versions:\r\n  2.7.15</span></pre><p>筆者はpyenvでバージョン
      3.7.1を固定していたので、エラーが出たが、gcpフォルダ配下では2.7.15を固定にする。</p><pre>MacBook-Pro:gcp$ pyenv
      local 2.7.15</pre><p><br></p><pre>MacBook-Pro:gcp$ ./google-cloud-sdk/install.sh \r\nWelcome
      to the Google Cloud SDK!\r\n\r\n\r\nTo help improve the quality of this product,
      we collect anonymized usage data\r\nand anonymized stacktraces when crashes
      are encountered; additional information\r\nis available at &lt;https://cloud.google.com/sdk/usage-statistics&gt;.
      You may choose\r\nto opt out of this collection now (by choosing &#39;N&#39;
      at the below prompt), or at\r\nany time in the future by running the following
      command:\r\n\r\n\r\n    gcloud config set disable_usage_reporting true\r\n\r\n\r\nDo
      you want to help improve the Google Cloud SDK (Y/n)?  Y\r\n\r\n\r\n\r\n\r\nYour
      current Cloud SDK version is: 245.0.0\r\nThe latest available version is: 276.0.0\r\n\r\n\r\n┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────┐\r\n│
                                                        Components               
                                        │\r\n├──────────────────┬──────────────────────────────────────────────────────┬──────────────────────────┬──────────┤\r\n│ 
          Status      │                         Name                         │   
              ID            │   Size   │\r\n├──────────────────┼──────────────────────────────────────────────────────┼──────────────────────────┼──────────┤\r\n│
      Update Available │ BigQuery Command Line Tool                           │ bq
                            │  &lt; 1 MiB │\r\n│ Update Available │ Cloud SDK Core
      Libraries                             │ core                     │ 12.8 MiB
      │\r\n│ Update Available │ Cloud Storage Command Line Tool                   
        │ gsutil                   │  3.6 MiB │\r\n│ Not Installed    │ App Engine
      Go Extensions                             │ app-engine-go            │  4.8
      MiB │\r\n│ Not Installed    │ Appctl                                        
            │ appctl                   │ 18.6 MiB │\r\n│ Not Installed    │ Cloud
      Bigtable Command Line Tool                     │ cbt                      │  7.3
      MiB │\r\n│ Not Installed    │ Cloud Bigtable Emulator                       
            │ bigtable                 │  6.6 MiB │\r\n│ Not Installed    │ Cloud
      Datalab Command Line Tool                      │ datalab                  │  &lt;
      1 MiB │\r\n│ Not Installed    │ Cloud Datastore Emulator                    
              │ cloud-datastore-emulator │ 18.4 MiB │\r\n│ Not Installed    │ Cloud
      Firestore Emulator                             │ cloud-firestore-emulator │
      40.4 MiB │\r\n│ Not Installed    │ Cloud Pub/Sub Emulator                  
                  │ pubsub-emulator          │ 34.9 MiB │\r\n│ Not Installed    │
      Cloud SQL Proxy                                      │ cloud_sql_proxy     
          │  3.7 MiB │\r\n│ Not Installed    │ Emulator Reverse Proxy            
                        │ emulator-reverse-proxy   │ 14.5 MiB │\r\n│ Not Installed 
        │ Google Cloud Build Local Builder                     │ cloud-build-local 
            │  5.9 MiB │\r\n│ Not Installed    │ Google Container Registry&#39;s Docker
      credential helper │ docker-credential-gcr    │  1.8 MiB │\r\n│ Not Installed 
        │ Minikube                                             │ minikube        
              │ 20.1 MiB │\r\n│ Not Installed    │ Skaffold                      
                            │ skaffold                 │ 13.3 MiB │\r\n│ Not Installed 
        │ gcloud Alpha Commands                                │ alpha           
              │  &lt; 1 MiB │\r\n│ Not Installed    │ gcloud Beta Commands        
                              │ beta                     │  &lt; 1 MiB │\r\n│ Not
      Installed    │ gcloud app Java Extensions                           │ app-engine-java 
              │ 62.0 MiB │\r\n│ Not Installed    │ gcloud app PHP Extensions     
                            │ app-engine-php           │ 21.9 MiB │\r\n│ Not Installed 
        │ gcloud app Python Extensions                         │ app-engine-python 
            │  6.1 MiB │\r\n│ Not Installed    │ gcloud app Python Extensions (Extra
      Libraries)       │ app-engine-python-extras │ 27.1 MiB │\r\n│ Not Installed 
        │ kubectl                                              │ kubectl         
              │  &lt; 1 MiB │\r\n└──────────────────┴──────────────────────────────────────────────────────┴──────────────────────────┴──────────┘\r\nTo
      install or remove components at your current SDK version [245.0.0], run:\r\n  $
      gcloud components install COMPONENT_ID\r\n  $ gcloud components remove COMPONENT_ID\r\n\r\n\r\nTo
      update your SDK installation to the latest version [276.0.0], run:\r\n  $ gcloud
      components update\r\n\r\n\r\n\r\n\r\nModify profile to update your $PATH and
      enable shell command \r\ncompletion?\r\n\r\n\r\nDo you want to continue (Y/n)?  Y\r\n\r\n\r\nThe
      Google Cloud SDK installer will now prompt you to update an rc \r\nfile to bring
      the Google Cloud CLIs into your environment.\r\n\r\n\r\nEnter a path to an rc
      file to update, or leave blank to use \r\n[/Users/myusername/.bash_profile]:
       \r\nBacking up [/Users/myusername/.bash_profile] to [/Users/myusername/.bash_profile.backup].\r\n[/Users/myusername/.bash_profile]
      has been updated.\r\n\r\n\r\n==&gt; Start a new shell for the changes to take
      effect.\r\n\r\n\r\n\r\n\r\nFor more information on how to get started, please
      visit:\r\n  https://cloud.google.com/sdk/docs/quickstarts</pre><p><br></p><p>上記手順で追記された内容を確認する</p><pre>MacBook-Pro:gcp
      $ cat /Users/myusername/.bash_profile\r\n\r\n...\r\n# The next line updates
      PATH for the Google Cloud SDK.\r\nif [ -f &#39;/Users/myusername/gcp/google-cloud-sdk/path.bash.inc&#39;
      ]; then . &#39;/Users/myusername/gcp/google-cloud-sdk/path.bash.inc&#39;; fi\r\n\r\n\r\n#
      The next line enables shell command completion for gcloud.\r\nif [ -f &#39;/Users/myusername/gcp/google-cloud-sdk/completion.bash.inc&#39;
      ]; then . &#39;/Users/myusername/gcp/google-cloud-sdk/completion.bash.inc&#39;;
      fi</pre><p><br></p><h3>4. gcloud initコマンド を実行して Cloud SDKの初期化を実施</h3><p><br></p><p>途中、利用したいプロジェクト名を聞かれるので対応する番号を入力して[Enter]を押下します。途中、認証のためにログインを促されるので合わせて実施します。</p><p><br></p><pre>MacBook-Pro:gcp
      $ ./google-cloud-sdk/bin/gcloud init\r\nWelcome! This command will take you
      through the configuration of gcloud.\r\n\r\n\r\nYour current configuration has
      been set to: [default]\r\n\r\n\r\nYou can skip diagnostics next time by using
      the following flag:\r\n  gcloud init --skip-diagnostics\r\n\r\n\r\nNetwork diagnostic
      detects and fixes local network connection issues.\r\nChecking network connection...done.
                                                 \r\nReachability Check passed.\r\nNetwork
      diagnostic passed (1/1 checks passed).\r\n\r\n\r\nYou must log in to continue.
      Would you like to log in (Y/n)?  Y\r\n\r\n\r\nYour browser has been opened to
      visit:\r\n\r\n\r\n    https://accounts.google.com/o/oauth2/auth?xxxxxxxxxxxxxxxxxxxxx</pre><p>ここで一旦、ブラウザにフォーカスが移りログインを促されるので実施する。また、アカウント選択等も対応するものを選択して進める。</p><p><br></p><p>画面操作が完了すると、利用するプロジェクトの選択を促される。選択したプロジェクトやその他情報が出力されるとコマンドのインストールは完了。</p><p><br></p><pre>Updates
      are available for some Cloud SDK components.  To install them,\r\nplease run:\r\n  $
      gcloud components update\r\n \r\nYou are logged in as: [GCPにアクセスしているGMailアカウント].\r\n \r\nPick
      cloud project to use: \r\n [1] your_project1\r\n [2] your_project2\r\n [3] Create
      a new project\r\nPlease enter numeric choice or text value (must exactly match
      list \r\nitem):  1\r\n \r\nYour current project has been set to: [your_project1].\r\n \r\nYour
      project default Compute Engine zone has been set to [asia-northeast1-b].\r\nYou
      can change it by running [gcloud config set compute/zone NAME].\r\n \r\nYour
      project default Compute Engine region has been set to [asia-northeast1].\r\nYou
      can change it by running [gcloud config set compute/region NAME].\r\n \r\nCreated
      a default .boto configuration file at [/Users/myusername/.boto]. See this file
      and\r\n[https://cloud.google.com/storage/docs/gsutil/commands/config] for more\r\ninformation
      about configuring Google Cloud Storage.\r\nYour Google Cloud SDK is configured
      and ready to use!\r\n \r\n* Commands that require authentication will use (GCPにアクセスしているGMailアカウント)
      by default\r\n* Commands will reference project `your_project1` by default\r\n*
      Compute Engine commands will use region `asia-northeast1` by default\r\n* Compute
      Engine commands will use zone `asia-northeast1-b` by default\r\n \r\nRun `gcloud
      help config` to learn how to change individual settings\r\n \r\nThis gcloud
      configuration is called [default]. You can create additional configurations if
      you work with multiple accounts and/or projects.\r\nRun `gcloud topic configurations`
      to learn more.\r\n \r\nSome things to try next:\r\n \r\n* Run `gcloud --help`
      to see the Cloud Platform services you can interact with. And run `gcloud help
      COMMAND` to get help on any gcloud command.\r\n* Run `gcloud topic --help` to
      learn about advanced features of the SDK like arg files and output formatting\r\n$ \r\n\r\n</pre><p><br></p><p>コマンドラインツールのバージョン確認はgcloud
      versionで行います。</p><pre>MacBook-Pro:gcp myusername$ ./google-cloud-sdk/bin/gcloud
      version\r\nGoogle Cloud SDK 245.0.0\r\nbq 2.0.43\r\ncore 2019.05.03\r\ngsutil
      4.38\r\nUpdates are available for some Cloud SDK components.  To install them,\r\nplease
      run:\r\n  $ gcloud components update</pre><p><br></p><p>また、コマンドラインツールのアップデートはgcloud
      components updateで行う。</p><p><br></p><pre>MacBook-Pro:gcp myusername$ ./google-cloud-sdk/bin/gcloud
      components update\r\n\r\n\r\n\r\n\r\nYour current Cloud SDK version is: 245.0.0\r\nYou
      will be upgraded to version: 277.0.0\r\n\r\n\r\n┌─────────────────────────────────────────────────────────────────────────────┐\r\n│
                           These components will be updated.                      │\r\n├─────────────────────────────────────────────────────┬────────────┬──────────┤\r\n│
                              Name                        │  Version   │   Size  
      │\r\n├─────────────────────────────────────────────────────┼────────────┼──────────┤\r\n│
      BigQuery Command Line Tool                          │     2.0.52 │  &lt; 1 MiB
      │\r\n│ BigQuery Command Line Tool (Platform Specific)      │     2.0.51 │  &lt;
      1 MiB │\r\n│ Cloud SDK Core Libraries                            │ 2020.01.17
      │ 12.9 MiB │\r\n│ Cloud SDK Core Libraries (Platform Specific)        │ 2019.12.17
      │  &lt; 1 MiB │\r\n│ Cloud Storage Command Line Tool                     │  
          4.47 │  3.6 MiB │\r\n│ Cloud Storage Command Line Tool (Platform Specific)
      │       4.46 │  &lt; 1 MiB │\r\n│ gcloud cli dependencies                  
                │ 2020.01.10 │  3.3 MiB │\r\n└─────────────────────────────────────────────────────┴────────────┴──────────┘\r\n\r\n\r\nA
      lot has changed since your last upgrade.  For the latest full release notes,\r\nplease
      visit:\r\n  https://cloud.google.com/sdk/release_notes\r\n\r\n\r\nDo you want
      to continue (Y/n)?  y\r\n\r\n\r\n╔════════════════════════════════════════════════════════════╗\r\n╠═
      Creating update staging area                             ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Uninstalling: BigQuery Command Line Tool                 ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Uninstalling: BigQuery Command Line Tool (Platform Sp... ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Uninstalling: Cloud SDK Core Libraries                   ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Uninstalling: Cloud SDK Core Libraries (Platform Spec... ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Uninstalling: Cloud Storage Command Line Tool            ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Uninstalling: Cloud Storage Command Line Tool (Platfo... ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Uninstalling: gcloud cli dependencies                    ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Installing: BigQuery Command Line Tool                   ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Installing: BigQuery Command Line Tool (Platform Spec... ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Installing: Cloud SDK Core Libraries                     ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Installing: Cloud SDK Core Libraries (Platform Specific) ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Installing: Cloud Storage Command Line Tool              ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Installing: Cloud Storage Command Line Tool (Platform... ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Installing: gcloud cli dependencies                      ═╣\r\n╠════════════════════════════════════════════════════════════╣\r\n╠═
      Creating backup and activating new installation          ═╣\r\n╚════════════════════════════════════════════════════════════╝\r\n\r\n\r\nPerforming
      post processing steps...done.                                              
                      \r\n\r\n\r\nUpdate done!\r\n\r\n\r\nTo revert your SDK to the
      previously installed version, you may run:\r\n  $ gcloud components update --version
      245.0.0\r\n\r\n</pre><p><br></p><h2>まとめ</h2><hr><p>以上で、Google Cloud SDKのインストール完了です。</p><p>GoogleCloudPlatformを使う上で、とても便利で、gcloudコマンドを通じてsshやインスタンスの作成など、多くのことがCLIでできてしまいます。</p><p>サクッとやってGCPを有効活用できるようになりましょう。</p><p><br></p><p><br></p>"
    - '2020-01-22 18:06:40.265761'
    - '2020-01-22 18:06:40.265761'
  - - 219
    - Google Cloud Platform (GCP) の deep learnig VM で機械学習
    - "<h1 style=\"text-align: center;\">Google Cloud Platform の deep learnig VM で機械学習</h1><p><br></p><h2>Google
      Cloed Platform とは</h2><hr><p>Google Cloud Platform（GCP） とは、Google がクラウド上で提供するサービス群の総称です。<br>Google
      社内で使われているものと同じテクノロジーやインフラを使用して、お客様のインフラ環境をクラウド化できます。<br>基本的な構成要素が初めから各種サービスとして用意されているため、それらを使用してすばやく開発を行うことができます。</p><p><br></p><h2>Deep
      Learning VM とは</h2><hr><p>AI Platform Deep Learning VM Image は、データサイエンスや機械学習タスク用に最適化された
      Debian 9 ベースの Compute Engine 仮想マシンイメージのセットです。すべてのイメージに主要な ML フレームワークとツールがプリインストールされています。また、GPU
      を持つインスタンスですぐに使用でき、データ処理タスクを高速化できます。</p><p><br></p><h2>筆者の経緯</h2><hr><p>kaggleなどのコンペや大量のデータを扱う研究では、Google
      Colaboratoryやkaggleのコンソールではメモリーが足りなくなります。</p><p>Google Colaboratoryはとても優れたサービスで、GPUやTPUまで無料でつけられますが、筆者はRAMが不足してしまったがためにコードを実行できなくなったので、必要に応じてGPUやマシンタイプを変更できる、GCP
      にたどり着きました。(AWSやmicrosoft Azureもあります)</p><p><br></p><h2>他のVMと何が違うの？？</h2><hr><p>このVMでなくても実行環境を作ることはできますが、インスタンスを起動する前の初期設定が、ある程度機械学習向けに設定されており、主要な
      ML フレームワークとツールがプリインストールされています。</p><p>GPUやメモリをどう設定していけばいいか、細かい設定をどうするかにあまり悩まされない分、機械学習目的のユーザーにおすすめです。</p><p><br></p><h2>手順</h2><hr><p>はじめに、Google
      Cloud SDK の導入が必要です。Google Cloud SDKを導入していない人は先に以下の記事から準備を済ませてください。</p><p><a
      href=\"/articles/218\">Google Cloud SDK の導入</a></p><p><br></p><h3>手順1. deep
      learning VMをデプロイする</h3><p><br></p><p>Compute Engineのマーケットプレイスからdeep learning
      VMで検索</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1579871055633-deep_learning_vm.png\"
      style=\"width: 800px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p>COMPUTE
      ENGINEで起動をクリック</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1579871089491-deep_learning_vm2.png\"
      style=\"width: 800px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p>必要に応じて変える</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1579872703329-vm_setting.png\"
      style=\"width: 800px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1579872775113-vm_setting_2.png\"
      style=\"width: 800px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1579872791167-vm_setting_3.png\"
      style=\"width: 800px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><span
      style=\"font-size: 18px;\">デプロイして無事に起動すれば手順1は終了</span></p><p>うまくいかない場合は、だいたい
      IAMの管理-&gt;割り当て でGPUの上限数が選択した個数より低くなっている。</p><p>割り当てを一切触っていないユーザーは、全て割り当ての上限は0になっているはず。</p><p>上限をあげて、デプロイする。</p><p><br></p><h3>手順2.
      Compute Engineのメタデータからキーと値を保存</h3><p><br></p><p>以下の画像のように書き込んで保存する</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1579873060382-metadeta_ssh.png\"
      style=\"width: 800px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p><br></p><p><br></p><h3>手順3.
      deep learning VMにライブラリやデータなど必要なものを入れる</h3><p><br></p><h4>3-1. はじめにローカルのパソコンからSSH接続でインスタンスの中に入る</h4><pre>$
      gcloud compute ssh [vmの名前] --zone=[vmのゾーン]  -- -L 8888:localhost:8888</pre><p><br></p><h4>3-2.
      anacondaの導入</h4><p><a href=\"https://repo.anaconda.com/archive/\">https://repo.anaconda.com/archive/</a>
      から最新のanacondaを探す</p><pre>xxxxxx:<strong>~</strong>$ wget https://repo.anaconda.com/archive/Anaconda3-2019.03-Linux-x86_64.sh\r\nxxxxxx:<strong>~</strong>$
      bash Anaconda3-2019.03-Linux-x86_64.sh\r\n\r\nDo you accept the license terms?
      [yes|no]\r\n[no] &gt;&gt;&gt; yes\r\nAnaconda3 will now be installed into this
      location:\r\n/home/aaa@gmail.com/anaconda3\r\n\r\n\r\n  - Press ENTER to confirm
      the location\r\n  - Press CTRL-C to abort the installation\r\n  - Or specify
      a different location below\r\n\r\n\r\n[/home/aaa@gmail.com/anaconda3] &gt;&gt;&gt; \r\nPREFIX=/home/aaa@gmail.com/anaconda3\r\nxxxxxx</pre><p><br></p><p>.bashrcの内容を保存</p><pre>$
      source ~/.bashrc</pre><p><br></p><p>バージョン確認</p><pre>$ conda -V\r\nconda 4.6.11</pre><p>-bash:
      conda: command not found と出る場合はpathが通ってないだけなので、以下のようにする</p><p>パスが通ってないみたい</p><pre>$
      export PATH=/home/aaa@gmail.com/anaconda3/bin:$PATH (これは自分の設定するパス)</pre><p><br></p><p>conda自体を更新</p><pre>$
      conda update -n base -c defaults conda</pre><p><br></p><p>仮想環境を構築</p><p>pythonバージョン</p><pre>(base)
      <strong>aaa_gmail_com</strong><strong>@xxxx-vm</strong>:<strong>~</strong>$
      python --version\r\nPython 3.7.3</pre><p>仮想環境を例えば、kaggle_envという名前で構築</p><pre>$
      conda create --name kaggle_env python=3.6</pre><pre>(base) <strong>aaa_gmail_com</strong><strong>@xxxx-vm</strong>:<strong>~</strong>$
      conda activate kaggle_env\r\n(kaggle_env) <strong>aaa_gmail_com</strong><strong>@xxxx-vm</strong>:<strong>~</strong>$</pre><p><br></p><p>仮想環境に変わったのでpythonの環境も3.6になっている</p><pre>(kaggle_env)
      <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$ python --version\r\nPython
      3.6.10 :: Anaconda, Inc.</pre><p><br></p><p>ちなみに、$ conda deactivate で仮想環境無効化できる。sshから抜けてもdeactivateした状態(base)に戻るので、sshした際はactivateコマンドを再度行う</p><p><br></p><p>infoコマンドで作成済の仮想環境一覧を確認</p><pre>(kaggle_env)
      <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$ conda info -e</pre><p><br></p><p>Jupyter
      Notebookをインストール</p><pre>(kaggle_env) <strong>aaa_gmail_com@xxxxx-vm</strong>
      conda install jupyter</pre><p>jupyterにパスワードまで設定したい人は以下を参照</p><p>筆者は、めんどくさいのでやってないですが、時間があればやろうかと思います。</p><p><a
      href=\"https://qiita.com/hiro0822/items/44717858462366eda957\">https://qiita.com/hiro0822/items/44717858462366eda957</a></p><p><br></p><h3>手順4.
      jupyterの起動</h3><hr><p>以下のコマンドでjupyter notebookが起動する</p><p>細かいオプションは各自好みに調整</p><pre>(kaggle_env)
      <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$ jupyter notebook
      \\\r\n  --NotebookApp.allow_origin=&#39;https://colab.research.google.com&#39;
      \\\r\n  --port=8888 \\\r\n  --NotebookApp.port_retries=0 \\\r\n  --no-browser</pre><p><br></p><h2>最後に</h2><hr><p>自分のファイルを実行するのに必要なライブラリをインストール</p><p>追加で必要なライブラリを揃える</p><ul><li>pandas</li></ul><pre>(kaggle_env)
      <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$conda install pandas
      -y</pre><ul><li>seaborn</li></ul><pre>(kaggle_env) <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$conda
      install seaborn</pre><ul><li>numpy</li></ul><pre>(kaggle_env) <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$conda
      install  numpy</pre><ul><li>keras</li></ul><pre>(kaggle_env) <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$conda
      install keras</pre><ul><li>tensorflow</li></ul><pre>(kaggle_env) <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$conda
      install tensorflow</pre><ul><li>xgboost</li></ul><pre>(kaggle_env) <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$conda
      install -c anaconda py-xgboost</pre><ul><li>lightgbm</li></ul><pre>(kaggle_env)
      <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$conda install -c
      conda-forge lightgbm</pre><ul><li>tqdm</li></ul><pre>(kaggle_env) <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$conda
      install -c conda-forge tqdm</pre><p><br></p><h2>おまけ</h2><p>また、以下のように設定すればGoogle
      Colaboratoryと接続できます。</p><p><a href=\"https://research.google.com/colaboratory/local-runtimes.html\">https://research.google.com/colaboratory/local-runtimes.html</a></p><pre>(kaggle_env)
      <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$ pip install jupyter_http_over_ws\r\n(kaggle_env)
      <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$ jupyter serverextension
      enable --py jupyter_http_over_ws\r\n(kaggle_env) <strong>aaa_gmail_com@xxxxx-vm</strong>:<strong>~</strong>$
      jupyter notebook \\\r\n  --NotebookApp.allow_origin=&#39;https://colab.research.google.com&#39;
      \\\r\n  --port=8888 \\\r\n  --NotebookApp.port_retries=0 \\\r\n  --no-browser</pre><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1579875535156-local_runtime.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1579875380832-gcp_colab.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>"
    - '2020-01-24 23:30:41.189608'
    - '2020-01-26 22:17:11.431729'
  - - 220
    - python/jupyterでLINE Notify
    - "<h1 style=\"text-align: center;\">python/jupyterでLINE通知</h1><h2><br>概要</h2><hr><div
      style=\"background-color:#FFFFCC;\">機械学習なり、重い処理を用意してそれを実行してすることはpythonを使っていると割と良くあります。</div><div
      style=\"background-color:#FFFFCC;\">また、GCPやAWS, Microsoft Azureなどで仮想機械を借りて実行するときは、実行終了に気づかずインスタンスを立ち上げっぱなしだと課金時間が続いてしまいます。&nbsp;</div><div
      style=\"background-color:#FFFFCC;\">そこで、LINEに通知をおこなってくれるサービスを今回紹介します。 それを簡単にやってくれるのが
      LINE Notify です。</div><p><br></p><h2>はじめに</h2><hr><div style=\"background-color:#FFFFCC;\">LINE
      Notifyとは、LINEが提供しているメッセージングAPIのことで、ウェブサービスと連携させることでメッセージを送信することができます。pythonでなくても、rubyやphpなど、その他の言語や環境でも使用できるのでぜひ応用してください。</div><p><br></p><h2>その他の通知機能</h2><hr><ul><li><span
      style=\"font-size: 18px;\">notify-run (<a href=\"https://github.com/notify-run/notify.run\">https://github.com/notify-run/notify.run</a>)</span></li></ul><div
      style=\"background-color:#FFFFCC;\"><p>jupyterで実行するとinline上にQRコードが出てくるのでスマホなどで読みこみ、読み込んだ機体へ通知を行う。</p><p>メリット:
      超簡単で手間いらず</p><p>デメリット: pipによる導入手法しか<a href=\"https://notify.run/\">ドキュメント</a>に乗っておらず、anacondaによるインストール方法がわからず、筆者はこのサービスを使用することをやめた。また、QR一つで他の機体と接続を行うので、セキュリティには気をつけなければならない。</p></div><p><br></p><ul><li><span
      style=\"font-size: 18px;\">jupyternotify (<a href=\"https://github.com/ShopRunner/jupyter-notify\">https://github.com/ShopRunner/jupyter-notify</a>)</span></li></ul><div
      style=\"background-color:#FFFFCC;\"><p>ブラウザの右上からピロっと通知が出現します。</p><p>$ pip install
      jupyternotify や $ conda install -c conda-forge jupyternotify で簡単に導入可能。</p><p>便利ではあるが、やはり筆者としてはいつでも休日や外出時でも確認できる、スマホでの通知が良い。</p></div><p><br></p><h2>手順</h2><hr><div
      style=\"background-color:#FFFFCC;\"><ol><li><span style=\"font-size: 18px;\">アクセストークンを取得</span></li><li><span
      style=\"font-size: 18px;\">送信する画像を用意</span></li><li><span style=\"font-size:
      18px;\">コードを書いて実行</span></li></ol></div><p><br></p><h3>1. LINE Notifyのアクセストークンの取得</h3><p>1.<a
      href=\"https://notify-bot.line.me/ja/\" rel=\"nofollow noopener\" target=\"_blank\">公式サイト</a>にアクセスして、LINEのアカウントでログインし、トークンを発行</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1580118371452-line_notify_room.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1580116666763-line_token.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h3>2.
      送信する画像を用意</h3><div style=\"background-color:#FFFFCC;\"><p>メッセージとともに、アップロードする画像を用意しておく。</p><p>何でも良いです。</p></div><p><br></p><h3>3.
      実行</h3><div style=\"background-color:#FFFFCC;\"><p>ドキュメント <a href=\"https://notify-bot.line.me/doc/ja/\">https://notify-bot.line.me/doc/ja/</a>　</p><p>これを見るとわかりますが、<u>いくつかやり方があります！</u></p></div><p><br></p><h4>3-1.
      最も楽な方法</h4><p>jupyterからcurlコマンドで、APIコール</p><p>jupyter notebookではコマンド実行時は、先頭に!をつけます</p><pre>!curl
      -X POST -H &#39;Authorization: Bearer &lt;あなたの発行したトークン&gt;&#39; -F &#39;message=モデルの学習が終了しました&#39;
      \\ https://notify-api.line.me/api/notify\r\n<span style=\"color: rgb(163, 143,
      132);\">{&quot;status&quot;:200,&quot;message&quot;:&quot;ok&quot;}</span></pre><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1580121801656-comand_notify_result.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>スタンプや画像も送れます</p><p>[スタンプに関してはこちらを参照
      <a href=\"https://devdocs.line.me/files/sticker_list.pdf\">https://devdocs.line.me/files/sticker_list.pdf</a>
      ]</p><pre>curl -X POST https://notify-api.line.me/api/notify \\\r\n       -H
      &#39;Authorization: Bearer &lt;あなたの発行したトークン&gt;&#39; \\\r\n       -F &#39;message=インスタンスの学習が終了しました&#39;
      \\\r\n       -F &#39;imageFile=@/Users/username/Downloads/deep_learning_vm_image.png&#39;
      \\\r\n       -F &#39;stickerPackageId=2&#39; \\\r\n       -F &#39;stickerId=144&#39;</pre><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1580128421379-send_with_stamp.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h4>3-2.
      コードから実行</h4><p>筆者的には3-2-2の方が3-2-1よりおすすめです！！</p><p><br></p><div style=\"background-color:#FFFFCC;\"><h4>3-2-1
      ファイル内で関数をコール</h4></div><p>[1]のやり方を紹介しています。</p><pre>import requests\r\n\r\n\r\ndef
      PythonNotify(message, *args):\r\n    # 諸々の設定\r\n    line_notify_api = &#39;https://notify-api.line.me/api/notify&#39;\r\n 
        line_notify_token = &#39;<span style=\"color: rgb(184, 49, 47);\">xxxxxxxxxxxxxxxxxxxxxx</span>&#39;
      #メモしておいたアクセストークンに置換\r\n    headers = {&#39;Authorization&#39;: &#39;Bearer &#39;
      + line_notify_token}\r\n    # 通知メッセージ\r\n    payload = {&#39;message&#39;: message}\r\n 
        # 画像を含むか否か\r\n    if len(args) == 0:\r\n        requests.post(line_notify_api,
      data=payload, headers=headers)\r\n    else:\r\n        # 画像\r\n        files
      = {&quot;imageFile&quot;: open(args[0], &quot;rb&quot;)}\r\n        requests.post(line_notify_api,
      data=payload, headers=headers, files=files)\r\n\r\n\r\n\r\n\r\nif __name__==&#39;__main__&#39;:\r\n 
        PythonNotify(&#39;通知メッセージのテスト&#39;, &#39;/your/path/to/image&#39;)</pre><p><br></p><div
      style=\"background-color:#FFFFCC;\"><h4>3-2-2 親ファイルからインポートして使う</h4></div><p>[2]のやり方を紹介しています。</p><p>[1]よりも、こちらの方が良い気がします。理由は、親ファイルを1つ作っておけば、子ファイルから読み込んで関数をコールできるから効率的であるからです。</p><p><br></p><p>親ファイル
      ( line_notify_bot.py )</p><pre>import requests\r\nclass LINENotifyBot:\r\n 
        API_URL = &#39;https://notify-api.line.me/api/notify&#39;\r\n    def __init__(self,
      access_token):\r\n        self.__headers = {&#39;Authorization&#39;: &#39;Bearer
      &#39; + access_token}\r\n\r\n\r\n    def send(\r\n            self, message,\r\n 
                image=None, sticker_package_id=None, sticker_id=None,\r\n         
        ):\r\n        payload = {\r\n            &#39;message&#39;: message,\r\n 
                &#39;stickerPackageId&#39;: sticker_package_id,\r\n            &#39;stickerId&#39;:
      sticker_id,\r\n            }\r\n        files = {}\r\n        if image != None:\r\n 
                files = {&#39;imageFile&#39;: open(image, &#39;rb&#39;)}\r\n     
        r = requests.post(\r\n            LINENotifyBot.API_URL,\r\n            headers=self.__headers,\r\n 
                data=payload,\r\n            files=files,\r\n            )</pre><p><br></p><p>(子ファイルから読み込む)</p><pre>from
      line_notify_bot import LINENotifyBot\r\n\r\nbot = LINENotifyBot(access_token=&#39;<span
      style=\"color: rgb(184, 49, 47);\">xxxxxxxxxxxxxx</span>&#39;)\r\n\r\nbot.send(\r\n
      \   message=&#39;テストメッセージ&#39;,\r\n    image=&#39;/path/to/image&#39;,  # png
      or jpg\r\n    sticker_package_id=1,\r\n    sticker_id=138,\r\n    )</pre><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1580123300223-test_meesage.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>受けつけるパラメータは以下の通りです。</p><p>より詳しい説明は、ドキュメントをみてね
      <a href=\"https://notify-bot.line.me/doc/ja/\">https://notify-bot.line.me/doc/ja/</a>　</p><table
      border=\"1\" class=\"mdMN12Tbl\"><colgroup><col> <col width=\"100\"> <col width=\"160\">
      <col></colgroup><thead><tr><th>パラメータ名</th><th>必須</th><th>型</th><th>説明</th></tr></thead><tbody><tr><td>message</td><td>必須</td><td>String</td><td>最大
      1000文字</td></tr><tr><td>imageThumbnail</td><td>省略可能</td><td>HTTP/HTTPS URL</td><td>最大
      240&times;240px / JPEG のみ許可されます</td></tr><tr><td>imageFullsize</td><td>省略可能</td><td>HTTP/HTTPS
      URL</td><td>最大 2048&times;2048px / JPEG のみ許可されます</td></tr><tr><td>imageFile</td><td>省略可能</td><td>File</td><td><p
      class=\"mdMN12Desc\">LINE上の画像サーバーにアップロードします。<br>対応している画像形式は、png, jpegです。</p><p
      class=\"mdMN12Desc\">imageThumbnail/imageFullsizeと同時に指定された場合は、imageFileが優先されます。</p><p
      class=\"mdMN12Desc\">1時間にuploadできる量に制限があります。<br>詳しくは、API Rate Limitの項を見てください。</p></td></tr><tr><td>stickerPackageId</td><td>省略可能</td><td>Number</td><td>パッケージ識別子。<br>Stickerの識別子は以下を参照ください。<br><a
      href=\"https://devdocs.line.me/files/sticker_list.pdf\" target=\"_blank\">Sticker一覧</a></td></tr><tr><td>stickerId</td><td>省略可能</td><td>Number</td><td>Sticker識別子</td></tr><tr><td>notificationDisabled</td><td>省略可能</td><td>Boolean</td><td><p
      class=\"mdMN12Desc\">true: メッセージ送信時に、ユーザに通知されない。</p><p class=\"mdMN12Desc\">false:
      メッセージ送信時に、ユーザに通知される。ただし、LINEで通知をオフにしている場合は通知されません。</p>デフォルト値は false です。</td></tr></tbody></table><p><br></p><p><br></p><h2>4.
      まとめ</h2><hr><p>LINE Notify を使って、スタンプや画像、メッセージを通じて、通知する方法を紹介しました。</p><p>通知するライブラリは色々ありますが、私が知る限りではこれがNo1
      ですね！</p><p>是非是非使ってくださいな。</p><p><br></p><p><br></p><p><br></p><p><span style=\"color:
      rgb(163, 143, 132);\">参考文献</span></p><p><span style=\"color: rgb(163, 143, 132);\">[1]
      <a href=\"https://kuroyagikun.com/python-line-message-picture-send/#toc1\">https://kuroyagikun.com/python-line-message-picture-send/#toc1</a></span></p><p><span
      style=\"color: rgb(163, 143, 132);\">[2] <a href=\"https://qiita.com/moriita/items/5b199ac6b14ceaa4f7c9\">https://qiita.com/moriita/items/5b199ac6b14ceaa4f7c9</a></span></p><p><br></p><p><br></p>"
    - '2020-01-27 20:17:34.446531'
    - '2020-01-27 21:35:26.891357'
  - - 221
    - gsutilでGCS (Google Cloud Storage)を操作
    - '<h1 style="text-align: center;">GCS (Google Cloud Storage)の操作手順</h1><p><br></p><h2>概要</h2><hr><div
      style="background-color:#FFFFCC;">機械学習なり、webサービスなり、データを保管するストレージが必要な時は多々あります。
      今回は、GoogleのVMインスタンスからGCSにデータをコピーしたり、読み込みなどの操作を行うための手順を紹介します。</div><p><br></p><h2>GCS</h2><hr><div
      style="background-color:#FFFFCC;">Google Cloud Storage（以下、GCS）はGoogle Cloud
      Platform（以下、GCP）のストレージサービスの1つ。</div><div style="background-color:#FFFFCC;">ファイルの静的配信に利用できるほか、GCPの各種サービスのデータストアとしても利用可能。</div><p><br></p><h2>前提</h2><hr><div
      style="background-color:#FFFFCC;">1. Google Cloudのアカウントを所持している&nbsp;</div><div
      style="background-color:#FFFFCC;">2. VMインスタンスもしくは、自分のパソコンにGoogle Cloud SDKがインストールされている(gsutilコマンドを使用できる)</div><p><br></p><h2>手順</h2><hr><h3>1.
      <a href="https://console.cloud.google.com/storage">Google Cloud Storage</a>
      からバケットを手動で作成</h3><p>難しくないので、説明は省きます。</p><p><br></p><h3>2. オブジェクトのバージョニングの有効化</h3><p>オブジェクトのバージョニングを有効にすると、オブジェクトのライブ
      バージョンが上書きまたは削除されるたびに、Cloud Storage によってオブジェクトの<a href="https://cloud.google.com/storage/docs/object-versioning?hl=ja"><em>アーカイブ済み</em>バージョン</a>が作成されます。</p><pre>$
      gsutil versioning set on gs://[BUCKET_NAME]</pre><p><br></p><p>もし、バケットでオブジェクトのバージョニングを無効にしたい時は:</p><pre>$
      gsutil versioning set off gs://[BUCKET_NAME]</pre><p><br></p><h3>3. オブジェクトのバージョニングが有効になっているかどうかの確認</h3><pre>$
      gsutil versioning get gs://[BUCKET_NAME]</pre><p>オブジェクトのバージョニングが有効になっている場合のレスポンスは次のようになります。</p><pre>gs://[BUCKET_NAME]:
      Enabled</pre><p><br></p><h3>4. VMインスタンスのファイル(もしくはフォルダ)をコピー</h3><p><br></p><pre>$
      gsutil -m cp -r &#39;VMFolderPath&#39; gs://[BUCKET_NAME]</pre><p>例えば、 gsutil
      -m cp -r /data gs://sample_bucket とすれば、sample_bucketにdataフォルダーがコピーされます。</p><p><br></p><p><br></p><div
      style="background-color:#FFFFCC;">その他の操作が知りたい人は公式ページの以下を参照</div><div style="background-color:#FFFFCC;">&nbsp;<a
      href="https://cloud.google.com/storage/docs/using-object-versioning?hl=ja&_ga=2.192925610.-1848954084.1578919231#list">https://cloud.google.com/storage/docs/using-object-versioning?hl=ja&amp;_ga=2.192925610.-1848954084.1578919231#list</a></div><p><br></p>'
    - '2020-02-12 16:41:47.82949'
    - '2020-02-12 16:42:46.433272'
  - - 222
    - GCSを直接データフレームで操作
    - "<h1 style=\"text-align: center;\">pythonからGCSを直接操作</h1><p><br></p><h2>概要</h2><hr><div
      style=\"background-color:#FFFFCC;\"><p>GCSに大きなデータをアップしておき、そのデータをダウンロードすることなく操作したいことは機械学習をやっていると起こる。</p><p>機械学習コンペでは時に500GB以上のデータをダウンロードしなければならない。</p><p>そこで、一度GCSに保存されたデータをダウンロードせずにpythonで直接読み込み、機械学習を行うための手法を紹介する。</p></div><p><br></p><h2>手順</h2><hr><h3>1.
      ライブラリのインストール</h3><p><br></p><p>(Anacondaでのインストール)</p><pre>$ conda install -c
      conda-forge google-cloud-storage</pre><p>(pipでのインストール)</p><pre data-lang=\"python\"
      data-unlink=\"\">$ pip install google-cloud-storage</pre><p><br></p><h3>2. pythonで読み込む</h3><p><br></p><h4>パターンA.
      ファイル名で読み込む</h4><pre><span style=\"color: rgb(184, 49, 47);\">from</span> google.cloud
      <span style=\"color: rgb(184, 49, 47);\">import</span> storage <span style=\"color:
      rgb(184, 49, 47);\">as</span> gcs\r\n<span style=\"color: rgb(184, 49, 47);\">import</span>
      pandas <span style=\"color: rgb(184, 49, 47);\">as</span> pd\r\n<span style=\"color:
      rgb(184, 49, 47);\">from</span> io <span style=\"color: rgb(184, 49, 47);\">import</span>
      BytesIO\r\n\r\n\r\nbucket_name <span style=\"color: rgb(184, 49, 47);\">=</span>
      <span style=\"color: rgb(243, 121, 52);\">&quot;your_bucket&quot;</span>\r\nfname
      <span style=\"color: rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(243,
      121, 52);\">&quot;storage_file_path&quot;</span>\r\nproject_name <span style=\"color:
      rgb(184, 49, 47);\">=</span> <span style=\"color: rgb(243, 121, 52);\">&quot;your_project_name&quot;</span>\r\n\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\">#プロジェクト名を指定してclientを作成</span>\r\nclient
      <span style=\"color: rgb(184, 49, 47);\">=</span> gcs.Client(project_name)\r\n<span
      style=\"color: rgb(163, 143, 132);\">#バケット名を指定してbucketを取得</span>\r\nbucket <span
      style=\"color: rgb(184, 49, 47);\">=</span> client.get_bucket(bucket_name)\r\n<span
      style=\"color: rgb(163, 143, 132);\">#Blobを作成</span>\r\nblob <span style=\"color:
      rgb(184, 49, 47);\">=</span> gcs.Blob(fname, bucket)\r\ncontent <span style=\"color:
      rgb(184, 49, 47);\">=</span> blob.download_as_string()\r\ntrain <span style=\"color:
      rgb(184, 49, 47);\">=</span> pd.read_csv(BytesIO(content))\r\ntrain.head()</pre><p><br></p><p>特定のファイルを読み込む場合、これで問題ありません。しかし、パターン一致で検索して読み込みたい場合、google-cloud-storageでは実現できません。そこで、pythonコードで工夫し、それを実現します。</p><p>以下の手法を紹介。</p><p><br></p><p><br></p><p><br></p><h4>パターンB.
      パターンマッチのファイルを読み込む</h4><pre><span style=\"color: rgb(184, 49, 47);\">from</span>
      google.cloud <span style=\"color: rgb(184, 49, 47);\">import</span> storage
      <span style=\"color: rgb(184, 49, 47);\">as</span> gcs\r\n<span style=\"color:
      rgb(184, 49, 47);\">import</span> pandas <span style=\"color: rgb(184, 49, 47);\">as</span>
      pd\r\n<span style=\"color: rgb(184, 49, 47);\">from</span> io <span style=\"color:
      rgb(184, 49, 47);\">import</span> BytesIO\r\n\r\n\r\nbucket_name <span style=\"color:
      rgb(184, 49, 47);\">=</span> &quot;your_bucket&quot;\r\n<span style=\"color:
      rgb(163, 143, 132);\"># fname = &quot;storage_file_path&quot;</span>\r\nproject_name
      <span style=\"color: rgb(184, 49, 47);\">=</span> &quot;your_project_name&quot;\r\n\r\n\r\nclient
      <span style=\"color: rgb(184, 49, 47);\">=</span> gcs.Client(project_name)\r\nbucket
      <span style=\"color: rgb(184, 49, 47);\">=</span> client.get_bucket(bucket_name)\r\n\r\n\r\ntrain
      <span style=\"color: rgb(184, 49, 47);\">=</span> []\r\nfor blob in bucket.list_blobs():\r\n 
        <span style=\"color: rgb(184, 49, 47);\">if</span> fnmatch.fnmatch(blob.name,
      &quot;*.json&quot;):\r\n        <span style=\"color: rgb(163, 143, 132);\">#
      print(blob)</span>\r\n        content = blob.download_as_string()\r\n        tmp
      = pd.read_json(BytesIO(content))\r\n        train.append(tmp)\r\n\r\ntrain =
      pd.concat([d for d in train])\r\ntrain.head()</pre><pre><span style=\"color:
      rgb(163, 143, 132);\">          owxbbpjpch.mp4 vpmyeepbep.mp4  ... wadgdooqpl.mp4
      wwwbocaabd.mp4\r\nlabel               FAKE           REAL  ...            NaN 
                NaN\r\nsplit              train          train  ...            NaN 
                NaN\r\noriginal  wynotylpnm.mp4            NaN  ...            NaN 
                NaN\r\nlabel                NaN            NaN  ...            NaN 
                NaN\r\nsplit                NaN            NaN  ...            NaN 
                NaN\r\n\r\n\r\n[5 rows x 109127 columns]</span></pre><p><br></p><div
      style=\"background-color:#FFFFCC;\"><p>ここで注目するのは、bucket.list_blobs()で<strong>全ファイル</strong>を読み込み、pythonのfnmatchで<strong>篩(ふるい)に掛ける</strong>という仕様です。</p><p>一旦全ファイルを読み込むのは効率的ではないですが、google-cloud-storageがパターン検索に対応するまでは、現状この手法が良さそうです。</p></div><p><br></p><p><br></p><p><br></p>"
    - '2020-02-12 16:42:54.695079'
    - '2020-02-12 17:53:07.92865'
  - - 223
    - Enable ImageFolder to return image path in Pytorch
    - "<h1 style=\"text-align: center;\">torchvision.datasets.ImageFolder</h1><p><br></p><nav
      class=\"mkj\" style=\"border-radius: 3px; font-weight: 700; line-height: 1.4;
      background: rgb(255, 251, 244); padding: 0px; border: 2px solid rgb(248, 145,
      116); margin-bottom: 2em;\"><h2 style=\"padding: 8px 12px; margin: -1px; background:
      rgb(248, 145, 116); border: none; font-size: 18px; text-align: center; color:
      rgb(255, 255, 255);\"><i class=\"fa fa-th-list\"></i> Table of Contents</h2><ol
      style=\"border-radius: 3px;\"><li><a href=\"#section\" style=\"color: rgb(84,
      84, 84); padding: 8px 0px; display: block; text-decoration: none;\">Description
      of ImageFolder</a></li><li><a href=\"#section2\" style=\"color: rgb(84, 84,
      84); padding: 8px 0px; display: block; text-decoration: none;\">Solution to
      Return Image path</a></li><li><a href=\"#section3\" style=\"color: rgb(84, 84,
      84); padding: 8px 0px; display: block; text-decoration: none;\">Check By Code</a></li><li><a
      href=\"#section4\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">Finally...</a></li></ol></nav><h2><br></h2><h2
      id=\"section\">ImageFolder</h2><hr><h2><a href=\"https://pytorch.org/docs/stable/torchvision/datasets.html#imagefolder\"
      aria-label=\"Anchor\" data-anchorjs-icon=\"\" style=\"text-decoration: none;\"></a></h2><dl><dt><em>CLASS</em><code>torchvision.datasets.</code><code>ImageFolder</code>(<em>root</em>,
      <em>transform=None</em>, <em>target_transform=None</em>, <em>loader=&lt;function
      default_loader&gt;</em>, <em>is_valid_file=None</em>) <a href=\"https://pytorch.org/docs/stable/_modules/torchvision/datasets/folder.html#ImageFolder\"
      style=\"text-decoration: none;\">[SOURCE]</a> <a href=\"https://pytorch.org/docs/stable/torchvision/datasets.html#torchvision.datasets.ImageFolder\"
      aria-label=\"Anchor\" data-anchorjs-icon=\"\" style=\"text-decoration: none;\"></a></dt><dd><p>A
      generic data loader where the images are arranged in this way:</p><pre>root/dog/xxx.png\r\nroot/dog/xxy.png\r\nroot/dog/xxz.png\r\n\r\nroot/cat/123.png\r\nroot/cat/nsdf3.png\r\nroot/cat/asd932_.png</pre><dl><dt>Parameters</dt><dd><ul
      style=\"border-radius: 3px;\"><li><p><strong>root</strong> (<em>string</em>)
      &ndash; Root directory path.</p></li><li><p><strong>transform</strong> (<em>callable</em><em>,&nbsp;</em><em>optional</em>)
      &ndash; A function/transform that takes in an PIL image and returns a transformed
      version. E.g, <code>transforms.RandomCrop</code></p></li><li><p><strong>target_transform</strong>
      (<em>callable</em><em>,&nbsp;</em><em>optional</em>) &ndash; A function/transform
      that takes in the target and transforms it.</p></li><li><p><strong>loader</strong>
      (<em>callable</em><em>,&nbsp;</em><em>optional</em>) &ndash; A function to load
      an image given its path.</p></li><li><p><strong>is_valid_file</strong> &ndash;
      A function that takes path of an Image file and check if the file is a valid
      file (used to check of corrupt files)</p></li></ul></dd></dl><dl><dt><code>__getitem__</code>(<em>index</em>)
      <a href=\"https://pytorch.org/docs/stable/torchvision/datasets.html#torchvision.datasets.ImageFolder.__getitem__\"
      aria-label=\"Anchor\" data-anchorjs-icon=\"\" style=\"text-decoration: none;\"></a></dt><dd><dl><dt>Parameters</dt><dd><p><strong>index</strong>
      (<em>python:int</em>) &ndash; Index</p></dd><dt>Returns</dt><dd><p>(sample,
      target) where target is class_index of the target class.</p></dd><dt>Return
      type</dt><dd><p>tuple</p><p><br></p><p><br></p><h2 id=\"section2\">Solution&nbsp;to
      Return Image path</h2><hr><h3>make original class of image folder to return
      image path</h3><p><br></p><p>replace &quot;torchvision.datasets.ImageFolder&quot;
      to original ImageFolder to return image path.</p><p><br></p><p>below example</p><pre>import
      torch\r\nimport torchvision\r\nfrom torchvision import datasets, transforms\r\n\r\nclass
      <span style=\"color: rgb(243, 121, 52);\"><u>MyImageFolder</u></span>(datasets.ImageFolder):\r\n 
        def __getitem__(self, index):\r\n        return super(MyImageFolder, self).__getitem__(index), self.imgs[index]\r\n\r\n\r\n 
        <span style=\"color: rgb(163, 143, 132);\"># transform </span>\r\ntransform
      = transforms.Compose(\r\n    [transforms.ToTensor(),\r\n     transforms.Normalize(mean=(0.5,
      0.5, 0.5), std=(0.5, 0.5, 0.5))])\r\n# create test loader\r\ntestset = <span
      style=\"color: rgb(243, 121, 52);\">MyImageFolder</span>(root=&#39;/image_folder/test&#39;, \r\n 
                            transform=transform)\r\n\r\ntestloader = torch.utils.data.DataLoader(testset,
      batch_size=4, shuffle=False, num_workers=2)\r\n\r\nclass_names = (&#39;REAL&#39;,
      &#39;FAKE&#39;)\r\ndevice = &#39;cuda&#39; if torch.cuda.is_available() else
      &#39;cpu&#39;</pre><p><br></p><h2 id=\"section3\">Check By Code</h2><hr><p>test
      whether image path is returned now.&nbsp;</p><pre># check if path can print\r\nfor
      i, data in enumerate(testloader):\r\n(images,labels), (path,_) = data\r\nimages,
      labels = images.to(device), labels.to(device)\r\n    print(path, &quot;\\n&quot;)\r\n\r\n\r\n<code><span
      style=\"color: rgb(163, 143, 132);\">(&#39;/mtcnn_detect_resized/test/REAL/dmmvuaikkv.png&#39;,
      &#39;/mtcnn_detect_resized/test/REAL/dnmowthjcj.png&#39;, &#39;/mtcnn_detect_resized/test/REAL/doniqevxeg.png&#39;,
      &#39;/mtcnn_detect_resized/test/REAL/dozjwhnedd.png&#39;) \r\n\r\n(&#39;/mtcnn_detect_resized/test/REAL/dpevefkefv.png&#39;,
      &#39;/mtcnn_detect_resized/test/REAL/dpmgoiwhuf.png&#39;, &#39;/mtcnn_detect_resized/test/REAL/dsnxgrfdmd.png&#39;,
      &#39;/mtcnn_detect_resized/test/REAL/dtozwcapoa.png&#39;) \r\n...</span></code>\r\n<code><span
      style=\"color: rgb(163, 143, 132);\">\r\n(&#39;/mtcnn_detect_resized/test/REAL/dvkdfhrpph.png&#39;,
      &#39;/mtcnn_detect_resized/test/REAL/dvtpwatuja.png&#39;, &#39;/mtcnn_detect_resized/test/REAL/dvwpvqdflx.png&#39;,
      &#39;/mtcnn_detect_resized/test/REAL/dxfdovivlw.png&#39;)</span></code></pre><p><br></p><p><br></p><h2
      id=\"section4\">Finally</h2><hr><p>I recommend to check source code of ImageFolder
      and understand what I did now.</p><p><a href=\"https://github.com/pytorch/vision/blob/master/torchvision/datasets/folder.py#L45-L74\"
      style=\"text-decoration: none;\" target=\"_blank\">https://github.com/pytorch/vision/blob/master/torchvision/datasets/folder.py#L45-L74</a></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p></dd></dl></dd></dl></dd></dl><script>\r\n\t$(\".mkj
      h2\").css(\r\n\t{\r\n\t\t\"padding\": \"8px 12px\",\r\n\t\t\"margin\": \"-1px\",\r\n\t\t\"background\":
      \"#f89174\",\r\n\t\t\"border\": \"none\",\r\n\t\t\"font-size\": \"18px\",\r\n\t\t\"text-align\":
      \"center\",\r\n\t\t\"color\": \"#fff\"\r\n\t});\r\n\t$(\".mkj, ul, ol\").css(\r\n\t{\r\n\t\t\"border-radius\":
      \"3px\",\r\n\t});\r\n\t$(\".mkj\").css(\r\n\t{\r\n\t\t\"font-weight\": 700,\r\n\t\t\"line-height\":
      1.4,\r\n\t\t\"background\": \"#fffbf4\",\r\n\t\t\"padding\": 0,\r\n\t\t\"border\":
      \"solid 2px #f89174\",\r\n\t\t\"margin-bottom\": \"2em\"\r\n\t});\r\n\t$(\".mkj
      a\").css(\r\n\t{\r\n\t\t\"color\": \"#545454\",\r\n\t\t\"padding\": \"8px 0\",\r\n\t\t\"display\":
      \"block\"\r\n\t});\r\n\t$(\"a\").css(\r\n\t{\r\n\t\t\"text-decoration\": \"none\"\r\n\t});\r\n\r\n</script>"
    - '2020-03-01 17:35:07.069917'
    - '2020-03-01 17:40:57.536025'
  - - 224
    - Devide data into train and validation in Pytorch
    - "<h1 style=\"text-align: center;\">Devide data into train and validation in
      Pytorch</h1><p><br></p><nav class=\"mkj\" style=\"border-radius: 3px; font-weight:
      700; line-height: 1.4; background: rgb(255, 251, 244); padding: 0px; border:
      2px solid rgb(248, 145, 116); margin-bottom: 2em;\"><h2 style=\"padding: 8px
      12px; margin: -1px; background: rgb(248, 145, 116); border: none; font-size:
      18px; text-align: center; color: rgb(255, 255, 255);\"><i class=\"fa fa-th-list\"></i>
      Table of Contents</h2><ol style=\"border-radius: 3px;\"><li><a href=\"#section\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">Folder</a></li><li><a href=\"#section2\" style=\"color: rgb(84, 84,
      84); padding: 8px 0px; display: block; text-decoration: none;\">Ho to devide
      data into train and validation</a></li></ol></nav><h2><br></h2><h2 id=\"section\">Folder</h2><hr><p>Data
      Folder is like below constructure.</p><p>This is only example of animal image
      classifier.</p><h2><a href=\"https://pytorch.org/docs/stable/torchvision/datasets.html#imagefolder\"
      aria-label=\"Anchor\" data-anchorjs-icon=\"\" style=\"text-decoration: none;\"></a></h2><dl><dt><pre>root/\r\n　├
      train/\r\n　│　├ horse/\r\n　│　│　　├ 8537.png\r\n　│　│　　└ ...\r\n　│　├ butterfly/\r\n　│　│　　├
      2857.png\r\n　│　 　　└ ... \r\n　├ test/\r\n　│　├ horse/\r\n　│　│　　├ 8536.png\r\n　│　│　　└
      ...\r\n　│　├ butterfly/\r\n　│　│　　├ 2856.png\r\n　│　 　　└ ... </pre><br></dt><dd><dl><dd><dl><dd><p><br></p><h2
      id=\"section2\">How to devide data</h2><hr><h3>split data into train(0.8) and
      validation(0.2) with stratified target</h3><p><br></p><pre><span style=\"color:
      rgb(163, 143, 132);\"># load library</span>\r\nimport torch\r\nimport torchvision\r\nfrom
      torchvision import datasets, transforms\r\n\r\n<span style=\"color: rgb(163,
      143, 132);\"># transform</span>\r\ntransform = transforms.Compose(\r\n    [transforms.ToTensor(),\r\n 
         transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\r\n\r\n<span style=\"color:
      rgb(163, 143, 132);\"># ImageFolder</span>\r\ntrainset = datasets.ImageFolder(root=&#39;./train&#39;,\r\n 
                                            transform=transform)\r\n\r\n<span style=\"color:
      rgb(163, 143, 132);\"># target array</span>\r\ntargets = trainset.targets\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\"># stratified split for validation</span>\r\ntrain_idx,
      valid_idx= train_test_split(\r\n    np.arange(len(targets)),\r\n    test_size=0.2,\r\n 
        shuffle=True,\r\n    stratify=targets)\r\n\r\n<span style=\"color: rgb(184,
      49, 47);\">trainloader</span> = torch.utils.data.DataLoader(trainset, batch_size=4,
      sampler=train_sampler, num_workers=2)\r\n<span style=\"color: rgb(41, 105, 176);\">validloader</span>
      = torch.utils.data.DataLoader(trainset, batch_size=4, sampler=valid_sampler,
      num_workers=2)</pre><p><br></p><p><span style=\"font-size: 30px;\">Now, you
      have train and validation by stratified split!!</span></p><p><br></p></dd></dl></dd></dl></dd></dl><script>\r\n\t$(\".mkj
      h2\").css(\r\n\t{\r\n\t\t\"padding\": \"8px 12px\",\r\n\t\t\"margin\": \"-1px\",\r\n\t\t\"background\":
      \"#f89174\",\r\n\t\t\"border\": \"none\",\r\n\t\t\"font-size\": \"18px\",\r\n\t\t\"text-align\":
      \"center\",\r\n\t\t\"color\": \"#fff\"\r\n\t});\r\n\t$(\".mkj, ul, ol\").css(\r\n\t{\r\n\t\t\"border-radius\":
      \"3px\",\r\n\t});\r\n\t$(\".mkj\").css(\r\n\t{\r\n\t\t\"font-weight\": 700,\r\n\t\t\"line-height\":
      1.4,\r\n\t\t\"background\": \"#fffbf4\",\r\n\t\t\"padding\": 0,\r\n\t\t\"border\":
      \"solid 2px #f89174\",\r\n\t\t\"margin-bottom\": \"2em\"\r\n\t});\r\n\t$(\".mkj
      a\").css(\r\n\t{\r\n\t\t\"color\": \"#545454\",\r\n\t\t\"padding\": \"8px 0\",\r\n\t\t\"display\":
      \"block\"\r\n\t});\r\n\t$(\"a\").css(\r\n\t{\r\n\t\t\"text-decoration\": \"none\"\r\n\t});\r\n\r\n</script>"
    - '2020-03-01 18:15:00.580266'
    - '2020-03-01 19:36:57.873964'
  - - 225
    - 'RuntimeError: CUDA error: device-side assert triggered'
    - "<h1 style=\"text-align: center;\">RuntimeError: CUDA error: device-side assert
      triggered</h1><p><br></p><nav class=\"mkj\" style=\"border-radius: 3px; font-weight:
      700; line-height: 1.4; background: rgb(255, 251, 244); padding: 0px; border:
      2px solid rgb(248, 145, 116); margin-bottom: 2em;\"><h2 style=\"padding: 8px
      12px; margin: -1px; background: rgb(248, 145, 116); border: none; font-size:
      18px; text-align: center; color: rgb(255, 255, 255);\"><i class=\"fa fa-th-list\"></i>
      Table of Contents</h2><ol style=\"border-radius: 3px;\"><li><a href=\"#section\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">General Cause</a></li><li><a href=\"#section2\" style=\"color: rgb(84,
      84, 84); padding: 8px 0px; display: block; text-decoration: none;\">Cause of
      my case</a></li><li><a href=\"#section3\" style=\"color: rgb(84, 84, 84); padding:
      8px 0px; display: block; text-decoration: none;\">The Reason why I notice</a></li><li><a
      href=\"#section4\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">Solution of my case</a></li><li><a href=\"#section5\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">Check if you can&#39;t solve this problem</a></li></ol></nav><h2><br></h2><h2
      id=\"section\">General cause</h2><hr><h2><a href=\"https://pytorch.org/docs/stable/torchvision/datasets.html#imagefolder\"
      aria-label=\"Anchor\" data-anchorjs-icon=\"\" style=\"text-decoration: none;\"></a></h2><p><br></p><dl><dt><p
      data-selectable-paragraph=\"\"><span style=\"font-size: 18px;\">This error occurs
      due to the following two reasons:</span></p><ol style=\"border-radius: 3px;\"><li
      data-selectable-paragraph=\"\"><span style=\"font-size: 18px;\">Inconsistency
      between the number of labels/classes and the number of output units</span></li><li
      data-selectable-paragraph=\"\"><span style=\"font-size: 18px;\">The input of
      the loss function may be incorrect.</span></li></ol><p><br></p><p data-selectable-paragraph=\"\">The
      error messages you get when running into this error may not be very descriptive.
      To make sure you get the complete and <em>useful&nbsp;</em>stack trace, have
      this at the very beginning of your code and run it before anything else:</p><p
      data-selectable-paragraph=\"\"><code>CUDA_LAUNCH_BLOCKING=&quot;1&quot;</code></p>export
      Environment variable<br><code>$ export CUDA_LAUNCH_BLOCKING=&quot;1&quot;</code></dt><dd><dl><dd><dl><dd><p><br></p><p><br></p><h2
      id=\"section2\">Cause of my case</h2><hr><p>.ipynb_checkpoints are cause when
      my case.</p><pre>mtcnn_detect_resized/\r\n　├ train/\r\n　│　├ REAL/\r\n　│　│　　├
      8537.png\r\n　│　│　　└ ...\r\n　│　├ FAKE/\r\n　│　│　　├ 2857.png\r\n　│　| 　　└ ... \r\n　│　├
      <span style=\"color: rgb(184, 49, 47);\"><u>.ipynb_checkpoints</u></span></pre><p><br></p><p><br></p><h2
      id=\"section3\">The reason why I notice</h2><hr><p>I check train image label
      and validation image label like below code.</p><p><br></p><pre><span style=\"color:
      rgb(163, 143, 132);\"># load library</span>\r\nimport torch\r\nimport torch.nn
      as nn\r\nimport torch.optim as optim\r\nfrom torch.optim import lr_scheduler\r\nimport
      numpy as np\r\nimport torchvision\r\nfrom torchvision import datasets, models,
      transforms\r\n\r\ndata_transforms = {\r\n    &#39;train&#39;: transforms.Compose([\r\n 
            transforms.ToTensor(),\r\n        transforms.Normalize((0.5, 0.5, 0.5),
      (0.5, 0.5, 0.5))\r\n    ]),\r\n    &#39;val&#39;: transforms.Compose([\r\n 
            transforms.ToTensor(),\r\n        transforms.Normalize((0.5, 0.5, 0.5),
      (0.5, 0.5, 0.5))\r\n    ]),\r\n}\r\n\r\n\r\ndata_dir = &#39;./mtcnn_detect_resized&#39;\r\nimage_datasets
      = {\r\n    x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x])
      for x in [&#39;train&#39;, &#39;val&#39;]\r\n}\r\n\r\n\r\ndataloaders = {\r\n 
        x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4, shuffle=True,
      num_workers=4) for x in [&#39;train&#39;, &#39;val&#39;]\r\n}\r\n\r\n\r\ndataset_sizes
      = {\r\n    x: len(image_datasets[x]) for x in [&#39;train&#39;, &#39;val&#39;]\r\n}\r\n\r\n\r\nclass_names
      = image_datasets[&#39;train&#39;].classes\r\n\r\ndevice = torch.device(&quot;cuda:0&quot;
      if torch.cuda.is_available() else &quot;cpu&quot;)</pre><p><br></p><p>When I
      check train classes, label is &quot;FAKE&quot; and &quot;REAL&quot;</p><pre>image_datasets[&#39;train&#39;].classes\r\n[&#39;FAKE&#39;,
      &#39;REAL&#39;]</pre><p><br></p><p>When I check valid classes, label is &quot;FAKE&quot;
      and &quot;REAL&quot; and strange <span style=\"color: rgb(184, 49, 47);\">&quot;.ipynb_checkpoints&quot;</span>.</p><p>This
      is not label I wnat to classify.</p><pre>image_datasets[&#39;val&#39;].classes\r\n[<span
      style=\"color: rgb(184, 49, 47);\">&#39;.ipynb_checkpoints&#39;</span>,&#39;FAKE&#39;,
      &#39;REAL&#39;]</pre><p><br></p><h2 id=\"section4\">Solution of my case</h2><hr><p>Search
      .ipynb_checkpoints</p><pre>mtcnn_detect_resized/val$ sudo find ./ -name .ipynb_checkpoints\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\">./.ipynb_checkpoints</span></pre><p><br></p><p>Delete
      .ipynb_checkpoints</p><pre>mtcnn_detect_resized/val$ rm -rf ./.ipynb_checkpoints</pre><p><br></p><p><span
      style=\"font-size: 18px;\">After this, error is gone.</span></p><p><span style=\"font-size:
      18px;\">This is the solutoin of when .ipynb_checkpoints prevent pytorch classes.</span></p><p><br></p><h2
      id=\"section5\">Check if you can&#39;t solve this problem</h2><p><br></p><ol
      style=\"background: rgb(255, 255, 224); border-radius: 3px;\"><li>image shape
      is correct?</li><li>labels/classes is correct?</li><li>The input of loss function
      is correct? &nbsp;</li></ol><p><br></p><p><br></p><p><br></p></dd></dl></dd></dl></dd></dl><script>\r\n\t$(\".mkj
      h2\").css(\r\n\t{\r\n\t\t\"padding\": \"8px 12px\",\r\n\t\t\"margin\": \"-1px\",\r\n\t\t\"background\":
      \"#f89174\",\r\n\t\t\"border\": \"none\",\r\n\t\t\"font-size\": \"18px\",\r\n\t\t\"text-align\":
      \"center\",\r\n\t\t\"color\": \"#fff\"\r\n\t});\r\n\t$(\".mkj, ul, ol\").css(\r\n\t{\r\n\t\t\"border-radius\":
      \"3px\",\r\n\t});\r\n\t$(\".mkj\").css(\r\n\t{\r\n\t\t\"font-weight\": 700,\r\n\t\t\"line-height\":
      1.4,\r\n\t\t\"background\": \"#fffbf4\",\r\n\t\t\"padding\": 0,\r\n\t\t\"border\":
      \"solid 2px #f89174\",\r\n\t\t\"margin-bottom\": \"2em\"\r\n\t});\r\n\t$(\".mkj
      a\").css(\r\n\t{\r\n\t\t\"color\": \"#545454\",\r\n\t\t\"padding\": \"8px 0\",\r\n\t\t\"display\":
      \"block\"\r\n\t});\r\n\t$(\"a\").css(\r\n\t{\r\n\t\t\"text-decoration\": \"none\"\r\n\t});\r\n\r\n</script>"
    - '2020-03-01 19:06:03.288743'
    - '2020-03-01 19:06:03.288743'
  - - 226
    - coursera  ニューラルネットワークとディープラーニング
    - "<h1 style=\"text-align: center;\">ニューラルネットワークとディープラーニング</h1><p><br></p><nav
      class=\"mkj\" style=\"border-radius: 3px; font-weight: 700; line-height: 1.4;
      background: rgb(255, 251, 244); padding: 0px; border: 2px solid rgb(248, 145,
      116); margin-bottom: 2em;\"><h2 style=\"padding: 8px 12px; margin: -1px; background:
      rgb(248, 145, 116); border: none; font-size: 18px; text-align: center; color:
      rgb(255, 255, 255);\"><i class=\"fa fa-th-list\"></i> Table of Contents</h2><ol
      style=\"border-radius: 3px;\"><li><a href=\"#section\" style=\"color: rgb(84,
      84, 84); padding: 8px 0px; display: block; text-decoration: none;\">ディープラーニングの導入</a></li><li><a
      href=\"#section2\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">ニューラルネットワークに似たロジスティック回帰</a></li><li><a href=\"#section3\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">浅いニューラルネットワーク</a></li><li><a href=\"#section4\" style=\"color: rgb(84,
      84, 84); padding: 8px 0px; display: block; text-decoration: none;\">本講座について</a></li></ol></nav><h2><br></h2><h2
      id=\"section\">ディープラーニングの導入</h2><hr><h3>1. ニューラルネットワークとは</h3><p><span style=\"font-size:
      18px;\">脳機能に見られるいくつかの特性に類似した数理的モデルのこと。</span></p><p><span style=\"font-size:
      18px;\">&nbsp;</span> <a href=\"https://pytorch.org/docs/stable/torchvision/datasets.html#imagefolder\"
      aria-label=\"Anchor\" data-anchorjs-icon=\"\" style=\"text-decoration: none;\"></a></p><dl><dt><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1584711783195-neuralgraph.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></dt><dd><dl><dd><dl><dd><p><br></p><h3>2.
      ニューラルネットワークの教師あり学習</h3><p><span style=\"font-size: 18px;\">「<strong>教師あり学習</strong>」とは「入力データ」と「正解データ」がセットになった訓練データです。
      コンピュータに対して大量の「入力データ」と「正解データ」を投入することでコンピュータが入力データの特徴を読み取り、正解データを<strong>学習</strong>します。</span></p><p><br></p><p><span
      style=\"font-size: 18px;\">教師あり学習の例</span></p><table style=\"width: 100%;\"><thead><tr><th
      style=\"text-align: center;\">Input (x)</th><th style=\"text-align: center;\">Output
      (y)</th><th style=\"text-align: center;\">Application</th></tr></thead><tbody><tr><td
      style=\"width: 33.3333%;\">家の特徴</td><td style=\"width: 33.3333%;\">価格</td><td
      style=\"width: 33.3333%;\">不動産 (標準のNN)</td></tr><tr><td style=\"width: 33.3333%;\">広告、ユーザー情報</td><td
      style=\"width: 33.3333%;\">広告えおクリックするか? (0/1)</td><td style=\"width: 33.3333%;\">オンライン広告
      (標準のNN)</td></tr><tr><td style=\"width: 33.3333%;\">画像</td><td style=\"width:
      33.3333%;\">オブジェクト (1,2, ... ,1000)</td><td style=\"width: 33.3333%;\">画像タグ付け
      (CNN)</td></tr><tr><td style=\"width: 33.3333%;\">オーディオ</td><td style=\"width:
      33.3333%;\">テキスト転写</td><td style=\"width: 33.3333%;\">音声認識 (RNN)</td></tr><tr><td
      style=\"width: 33.3333%;\">英語</td><td style=\"width: 33.3333%;\">中国語</td><td
      style=\"width: 33.3333%;\">機械翻訳 (RNN)</td></tr><tr><td style=\"width: 33.3333%;\">画像、レーダー情報</td><td
      style=\"width: 33.3333%;\">他の車の位置</td><td style=\"width: 33.3333%;\">自動運転 (custom
      or complex hybrid)</td></tr></tbody></table><p><br></p><p><span style=\"font-size:
      18px;\">構築化されたデータ</span></p><div><table border=\"1\" class=\"dataframe\" style=\"margin-right:
      calc(0%); width: 100%;\"><thead><tr style=\"text-align: right;\"><th><br></th><th>size</th><th>bedrooms</th><th>...</th><th>price</th></tr></thead><tbody><tr><th
      style=\"text-align: center;\">0</th><td style=\"text-align: center;\">2104</td><td
      style=\"text-align: center;\">3</td><td><br></td><td style=\"text-align: center;\">400</td></tr><tr><th
      style=\"text-align: center;\">1</th><td style=\"text-align: center;\">3000</td><td
      style=\"text-align: center;\">3</td><td><br></td><td style=\"text-align: center;\">330</td></tr><tr><th
      style=\"text-align: center;\">2</th><td style=\"text-align: center;\">2160</td><td
      style=\"text-align: center;\">3</td><td><br></td><td style=\"text-align: center;\">369</td></tr><tr><th
      style=\"text-align: center;\">...</th><td style=\"text-align: center;\">...</td><td
      style=\"text-align: center;\">...</td><td><br></td><td style=\"text-align: center;\">...</td></tr><tr><th
      style=\"text-align: center;\">3000</th><td style=\"text-align: center;\">1600</td><td
      style=\"text-align: center;\">4</td><td><br></td><td style=\"text-align: center;\">540</td></tr></tbody></table></div><p><br></p><div><table
      border=\"1\" style=\"margin-right: calc(0%); width: 100%;\"><thead><tr><th><br></th><th
      style=\"text-align: center;\">User Age</th><th style=\"text-align: center;\">Ad
      id</th><th style=\"text-align: center;\">...</th><th style=\"text-align: center;\">click</th></tr></thead><tbody><tr><th
      style=\"text-align: center;\">0</th><td style=\"text-align: center;\">41</td><td
      style=\"text-align: center;\">93241</td><td><br></td><td style=\"text-align:
      center;\">1</td></tr><tr><th style=\"text-align: center;\">1</th><td style=\"text-align:
      center;\">80</td><td style=\"text-align: center;\">321203</td><td><br></td><td
      style=\"text-align: center;\">0</td></tr><tr><th style=\"text-align: center;\">2</th><td
      style=\"text-align: center;\">18</td><td style=\"text-align: center;\">1341</td><td><br></td><td
      style=\"text-align: center;\">1</td></tr><tr><th style=\"text-align: center;\">...</th><td
      style=\"text-align: center;\">...</td><td style=\"text-align: center;\">...</td><td><br></td><td
      style=\"text-align: center;\">...</td></tr><tr><th style=\"text-align: center;\">3000</th><td
      style=\"text-align: center;\">107</td><td style=\"text-align: center;\">14214</td><td><br></td><td
      style=\"text-align: center;\">1</td></tr></tbody></table></div><br><br><br></dd><dd><p><span
      style=\"font-size: 18px;\">構築化されていないデータ</span></p><p>オーディオ、画像、文章</p><p><br></p><h3>3.
      <span lang=\"ja\">なぜディープラーニングが始まっているのか</span></h3><p><br></p><p><span style=\"font-size:
      18px;\">・データ</span></p><p>膨大なデータを使用できるようになり、大きなNNが強力になった</p><p><br></p><p><span
      style=\"font-size: 18px;\">・計算リソース</span></p><p>CPUやGPUのおかげで大きなNNを訓練できるようになった。</p><p><br></p><p><span
      style=\"font-size: 18px;\">・アルゴリズム</span></p><p>計算を手助けする革新的なアルゴリズムが発展の手助けしている。</p><p><br></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1584752457740-aigl.png\"
      style=\"width: 700px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h2><br></h2><h2
      id=\"section2\">ニューラルネットワークに似たロジスティック回帰</h2><hr><p>ロジスティック回帰は小さなニューラルネットワークと見ることもできます。</p><p>ロジスティック回帰は中間の特徴抽出層(隠れ層)が無いので線形分類しかできないので分類精度は多層のニューラルネットワークには及びませんが、線型がゆえに結果を解釈しやすいという利点があります。</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585295427771-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-27+16.49.07.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h3>1.
      Binary Classification (2クラス分類)</h3><p>二項分類（にこうぶんるい、英: Binary classification）は、オブジェクトの集合を個々のオブジェクトがある特定の属性を持つかどうかで2種類にグループ分けする分類作業である。二値分類（にちぶんるい）、2クラス分類とも呼ばれ、多クラス分類において分類先のクラス数が2の場合と考えることができる。</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585298776521-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-27+17.45.01.png\"
      style=\"width: 700px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1584780246606-img_c.png\"
      style=\"width: 500px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h3>2.
      Logistic Regression</h3><p>ロジスティック回帰（ロジスティックかいき、英: Logistic regression）は、ベルヌーイ分布に従う変数の統計的回帰モデルの一種である。連結関数としてロジットを使用する一般化線形モデル
      (GLM) の一種でもある。</p><p><br></p><h3>3. Logistic Regression Cost Function</h3><p>ロジスティック回帰のコスト関数は、二乗和誤差関数ではなく、<strong><u>交差エントロピー誤差関数である</u></strong><strong>。</strong></p><p>理由は、二乗和誤差関数を使うと、非凸な最適化問題を解くことになり、結果的には複数の局所解を持つ最適化問題を扱うことになり、勾配降下法では一つの大域解を見つけることができない。</p><p><br></p><p>$$
      { 二乗和誤差: L(\\hat{ y }, y)= \\frac{ 1 }{ 2 } ( y- \\hat{ y })^2 \\\\ 交差エントロピー誤差:
      L= -(y\\log \\hat{ y }+(1-y)\\log (1-\\hat{ y })) } $$</p><p><br></p><p>$$ {
      交差エントロピー誤差は、ワンホットベクトルのように、ラベルごとの出力を行う場合 \\\\ n ^{ [last]}を出力層のノードのサイズ、tを教師ラベル、\\hat{
      y }を予測値として \\\\ L= - \\sum_{k=1}^{ n ^{ [last] } } t _{ k } \\log \\hat{ y }
      _{ k } \\\\ バッチ数mで処理する場合 \\\\ L= - \\frac{ 1 }{ m } \\sum_{i=1}^m \\sum_{k=1}^{
      n ^{ [last] } } t _{ k } ^{ (i) } \\log \\hat{ y } _{ k } ^{ (i) } \\\\ ロジスティック回帰の場合ラベルごとの確率は、ラベル1の確率の実測値と予測値y,
      \\hat{ y }とラベル０の確率の実測値と予測値(1-y),(1-\\hat{ y })の2つであり \\\\ L = -(y\\log \\hat{
      y }+(1-y)\\log (1-\\hat{ y })) \\\\ バッチ数mで処理する場合 \\\\ L= - \\frac{ 1 }{ m }
      \\sum_{i=1}^m (y^{ (i) }\\log \\hat{ y }^{ (i) }+(1-y^{ (i) })\\log (1-\\hat{
      y }^{ (i) })) \\\\ となる}$$</p><p><br></p><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1584786861368-logistic_cost_func.png\"
      style=\"width: 611px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h3>4.
      Gradient Decent</h3><p><br></p><p>コスト関数Jはお椀のような凸の形となり、<u>凸関数の局所最適値（極小値）は大域的にも最適（最小）である。</u></p><p>これが、ロジスティック回帰でコスト関数Jを使用する最大の理由の一つ。</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1584837413825-cost_func_logistic.png\"><span
      class=\"fr-inner\">ロジスティック回帰 コスト関数</span></span></span></p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1584838064510-logistic_sgd.png\"><span
      class=\"fr-inner\">ロジスティック回帰 勾配降下法</span></span></span></p><p><br></p><h3>5.
      ロジスティック回帰の勾配 (誤差逆伝播法)</h3><p><span class=\"fr-img-caption fr-fic fr-dib fr-fil\"
      style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585037162507-Backpropagation.png\"><span
      class=\"fr-inner\">ロジスティック回帰 勾配</span></span></span></p><h3>6. ベクトル化</h3><p>ループで一つずつ計算するより、ベクトルでまとめて計算した方が処理が早い</p><p>理由は、並列処理で計算されるため。</p><p>並列処理は
      CPUでもGPUでもできる。ただし、GPUの方が驚くほど効率的に並列処理ができる。</p><p><br></p><p>以下に速度の違いの例を示す。</p><p><br></p><pre><span
      style=\"color: rgb(184, 49, 47);\">import</span> numpy <span style=\"color:
      rgb(184, 49, 47);\">as</span> np\r\n<span style=\"color: rgb(184, 49, 47);\">import</span>
      time\r\n\r\na=np.random.rand(<span style=\"color: rgb(147, 101, 184);\">10000000</span>)\r\nb=np.random.rand(<span
      style=\"color: rgb(147, 101, 184);\">10000000</span>)\r\n\r\ntic=time.time()\r\nc=np.dot(a,b)\r\ntoc=time.<span
      style=\"color: rgb(44, 130, 201);\">time</span>()\r\n\r\n<span style=\"color:
      rgb(44, 130, 201);\">print</span>(c)\r\n<span style=\"color: rgb(44, 130, 201);\">print</span>(<span
      style=\"color: rgb(250, 197, 28);\">&quot;vectorized version: &quot;</span>+<span
      style=\"color: rgb(44, 130, 201);\">str</span>(1000*(toc-tic))+&quot;ms&quot;)\r\n\r\nc=<span
      style=\"color: rgb(147, 101, 184);\">0</span>\r\ntic=time.time()\r\nfor i in
      np.arange(<span style=\"color: rgb(147, 101, 184);\">10000000</span>):\r\n 
        c += a[i]*b[i]\r\ntoc=time.<span style=\"color: rgb(44, 130, 201);\">time</span>()\r\n\r\n\r\n<span
      style=\"color: rgb(44, 130, 201);\">print</span>(c)\r\n<span style=\"color:
      rgb(44, 130, 201);\">print</span>(<span style=\"color: rgb(250, 197, 28);\">&quot;For
      loop: &quot;</span>+<span style=\"color: rgb(44, 130, 201);\">str</span>(<span
      style=\"color: rgb(147, 101, 184);\">1000</span>*(toc-tic))+&quot;ms&quot;)</pre><p>実行結果</p><pre>2499230.9202982187\r\nvectorized
      version: 7.845163345336914ms\r\n2499230.920298015\r\nFor loop: 6281.563758850098ms</pre><p><br></p><h3>7.
      ベクトル化 ロジスティック回帰</h3><p><span class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width:
      600px;\"><span class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1584947067414-vactor_logistic.png\"><span
      class=\"fr-inner\">ループを使わないベクトルでの計算</span></span></span></p><p><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1584955295772-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-23+18.18.37.png\"><span
      class=\"fr-inner\">ベクトル化したロジスティック回帰の勾配出力</span></span></span></p><p><br></p><h3>8.
      ブロードキャスティング</h3><p><br></p><p><span class=\"fr-img-caption fr-fic fr-dib fr-fil\"
      style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1584966773041-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-23+21.29.40.png\"><span
      class=\"fr-inner\">ブロードキャスティングの例</span></span></span></p><p><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1584966923735-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-23+21.35.05.png\"><span
      class=\"fr-inner\">一般的な原理</span></span></span></p><p><br></p><h3>9. L1 and L2
      loss functions</h3><p><br></p><p><span style=\"font-size: 18px;\">L1 loss function</span></p><p>$$\\begin{align*}
      &amp; L_1(\\hat{y}, y) = \\sum_{i=0}^m|y^{(i)} - \\hat{y}^{(i)}| \\end{align*}$$</p><p><br></p><p>コード:
      yが実測値,\\(\\hat{ y }\\)が予測値</p><pre><span style=\"color: rgb(163, 143, 132);\">(python)</span>\r\n<span
      style=\"color: rgb(26, 188, 156);\"># GRADED FUNCTION: L1</span>\r\n\r\n<span
      style=\"color: rgb(65, 168, 95);\">def</span> <span style=\"color: rgb(44, 130,
      201);\">L1</span>(yhat, y):\r\n    <span style=\"color: rgb(184, 49, 47);\">&quot;&quot;&quot;\r\n 
        Arguments:\r\n    yhat -- vector of size m (predicted labels)\r\n    y --
      vector of size m (true labels)\r\n    \r\n    Returns:\r\n    loss -- the value
      of the L1 loss function defined above\r\n    &quot;&quot;&quot;</span>\r\n 
        \r\n    ### START CODE HERE ### (&asymp; 1 line of code)\r\n    loss = np.sum(abs(y-yhat))\r\n 
        <span style=\"color: rgb(26, 188, 156);\">### END CODE HERE ###</span>\r\n 
        \r\n    <span style=\"color: rgb(65, 168, 95);\">return</span> loss</pre><pre>yhat
      = np.array([.9, 0.2, 0.1, .4, .9])\r\ny = np.array([1, 0, 0, 1, 1])\r\nprint(&quot;L1
      = &quot; + str(L1(yhat,y)))</pre><p><span style=\"color: rgb(184, 49, 47);\"><u><span
      style=\"font-size: 18px;\">L1 = 1.1</span></u></span></p><p><br></p><p><span
      style=\"font-size: 18px;\">L2 loss function</span></p><p><br></p><p>$$\\begin{align*}
      &amp; L_2(\\hat{y},y) = \\sum_{i=0}^m(y^{(i)} - \\hat{y}^{(i)})^2 \\end{align*}$$</p><p>コード:
      yが実測値,\\(\\hat{y}\\)が予測値</p><pre>(python)\r\n<span style=\"color: rgb(26, 188,
      156);\"># GRADED FUNCTION: L2</span>\r\n\r\n<span style=\"color: rgb(65, 168,
      95);\">def</span> <span style=\"color: rgb(44, 130, 201);\">L2</span>(yhat,
      y):\r\n    <span style=\"color: rgb(184, 49, 47);\">&quot;&quot;&quot;\r\n 
        Arguments:\r\n    yhat -- vector of size m (predicted labels)\r\n    y --
      vector of size m (true labels)\r\n    \r\n    Returns:\r\n    loss -- the value
      of the L2 loss function defined above\r\n    &quot;&quot;&quot;</span>\r\n 
        \r\n    <span style=\"color: rgb(26, 188, 156);\">### START CODE HERE ###
      (&asymp; 1 line of code)</span>\r\n    loss = np.sum((y-yhat)**2)\r\n    <span
      style=\"color: rgb(26, 188, 156);\">### END CODE HERE ###</span>\r\n    \r\n 
        <span style=\"color: rgb(65, 168, 95);\">return</span> loss</pre><pre>yhat
      = np.array([.9, 0.2, 0.1, .4, .9])\r\ny = np.array([1, 0, 0, 1, 1])\r\nprint(&quot;L2
      = &quot; + str(L2(yhat,y)))</pre><p><span style=\"color: rgb(184, 49, 47); font-size:
      18px;\"><u>L2 = 0.43</u></span></p><p><br></p><h3>10. ベクトルの大きさ（ノルム）を計算</h3><p
      id=\"1-4-normalizing-rows\">原点などからある点までの距離（大きさ）をノルム</p><p><span style=\"font-size:
      18px;\"><u>L0ノルム: 0以外の値を持つ次元の数</u></span></p><p><u><span style=\"font-size:
      18px;\">L1ノルム: 各次元の値の絶対値の和 「マンハッタン距離」という距離の考え方と同じ計算式</span></u></p><p><span
      style=\"font-size: 18px;\"><u>L2ノルム: 各次元の値を2乗した和の平方根</u></span></p><p><br></p><p>以下のベクトルを例にする</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585044418104-quiver.png\"
      style=\"width: 400px;\" class=\"fr-fic fr-dib fr-fil\"></p><p>(グラフのコード)</p><pre>import
      numpy as np\r\nimport matplotlib.pyplot as plt\r\n \r\nplt.figure()\r\n \r\n#
      矢印（ベクトル）の始点\r\nO = np.array([0,0])\r\n# 矢印（ベクトル）の成分\r\nX = np.array([4,3])\r\nX2
      = np.array([-3,2])\r\nX3 = np.array([4,-1])\r\n \r\n# 矢印（ベクトル）\r\nplt.quiver(O[0],O[1],\r\n 
               X[0],X[1], \r\n           angles=&#39;xy&#39;,scale_units=&#39;xy&#39;,scale=1)\r\n\r\n\r\nplt.quiver(O[0],O[1],\r\n 
               X2[0],X2[1], \r\n           angles=&#39;xy&#39;,scale_units=&#39;xy&#39;,scale=1)\r\n\r\n\r\nplt.quiver(O[0],O[1],\r\n 
               X3[0],X3[1], \r\n           angles=&#39;xy&#39;,scale_units=&#39;xy&#39;,scale=1)\r\n\r\n\r\n#
      グラフ表示\r\nplt.xlim([-5,5])\r\nplt.ylim([-5,5])\r\nplt.grid()\r\nplt.draw()\r\nplt.show()</pre><p><br></p><pre>X
      = np.array([4,3])\r\nX2 = np.array([-3,2])\r\nX3 = np.array([4,-1])\r\nX_batch
      = np.array([X, X2, X3])\r\n<span style=\"color: rgb(163, 143, 132);\">&gt;&gt;&gt;
      X_batch\r\narray([[ 4,  3],\r\n       [-3,  2],\r\n       [ 4, -1]])</span>\r\nnp.linalg.norm(X_batch,
      ord=0, axis=1, keepdims=True)</pre><p><br></p><p><span style=\"font-size: 18px;\"><u>L0ノルム</u></span></p><p><span
      style=\"font-size: 14px;\">X, X2, X3の中で0でない値はそれぞれ2つ</span></p><pre>&gt;&gt;&gt;
      np.linalg.norm(X_batch, <span style=\"color: rgb(184, 49, 47);\"><u>ord=0</u></span>,
      axis=1, keepdims=True)\r\n<span style=\"color: rgb(163, 143, 132);\">array([[2.],\r\n 
           [2.],\r\n       [2.]])</span></pre><p><br></p><p><u><span style=\"font-size:
      18px;\">L1ノルム</span></u></p><p>X, X2, X3それぞれで、各成分の絶対値を足し合わせる</p><pre>&gt;&gt;&gt;
      np.linalg.norm(X_batch, <span style=\"color: rgb(184, 49, 47);\"><u>ord=1</u></span>,
      axis=1, keepdims=True)\r\n<span style=\"color: rgb(163, 143, 132);\">array([[7.],\r\n 
           [5.],\r\n       [5.]])</span></pre><p><br></p><p><u><span style=\"font-size:
      18px;\">L2ノルム</span></u></p><p>X, X2, X3それぞれで、各成分の2乗和のルートを計算</p><pre>&gt;&gt;&gt;
      np.linalg.norm(X_batch, ord=2, axis=1, keepdims=True)\r\n<span style=\"color:
      rgb(163, 143, 132);\">array([[5.        ],\r\n       [3.60555128],\r\n       [4.12310563]])</span></pre><p>または</p><pre>&gt;&gt;&gt;
      np.sqrt(np.sum(np.abs(X_batch**2),axis=1, keepdims=True))\r\n<span style=\"color:
      rgb(163, 143, 132);\">array([[5.        ],\r\n       [3.60555128],\r\n       [4.12310563]])</span></pre><p><br></p><p>L2正則化されたベクトル</p><pre>&gt;&gt;&gt;
      l2_norm = np.linalg.norm(X_batch, ord=2, axis=1, keepdims=True)\r\n&gt;&gt;&gt;
      X_batch / l2_norm \r\n<span style=\"color: rgb(163, 143, 132);\">array([[ 0.8
      \      ,  0.6       ],\r\n       [-0.83205029,  0.5547002 ],\r\n       [ 0.9701425
      , -0.24253563]])</span></pre><p><br></p><p><span style=\"color: rgb(243, 121,
      52);\">X1は [ 0.8 &nbsp; &nbsp; &nbsp; , &nbsp;0.6 &nbsp; &nbsp; &nbsp; ]</span></p><p><span
      style=\"color: rgb(243, 121, 52);\">X2は [-0.83205029, &nbsp;0.5547002 ]</span></p><p><span
      style=\"color: rgb(243, 121, 52);\">X3は [ 0.9701425 , -0.24253563]</span></p><p><span
      style=\"color: rgb(243, 121, 52);\">にL2正則化された</span></p><p><br></p><h2 id=\"section3\">浅いニューラルネットワーク</h2><hr><h3>1.
      ニューラルネットワークの概要</h3><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585353860296-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-28+8.57.18.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h3>2.
      ニューラルネットワークの表現</h3><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585356700638-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-28+9.48.27.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h3>3.
      ニューラルネットワークの出力計算</h3><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585359610765-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-28+10.34.36.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h3>4.
      バッチの<span lang=\"ja\">ベクトルでの要約</span></h3><p><br></p><p><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585365722709-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-28+12.16.20.png\"><span
      class=\"fr-inner\">ニューラルネットのベクトル化の要約</span></span></span></p><p><br></p><h3>5.
      活性化関数</h3><p>活性化関数は層により異なることもある。</p><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585367097688-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-28+12.38.40.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><ul style=\"border-radius:
      3px;\"><li>シグモイド活性化関数</li></ul><p>まず使わない。<u><strong>例外は出力層で2値分類をしている場合</strong></u>。</p><p>それ以外ではtanh関数がいつも常に優れている。</p><p>0~1の値を出力するので、2値分類では理にかなっている。</p><p><br></p><ul
      style=\"border-radius: 3px;\"><li>ハイパボリックタンジェント(tanh(z))関数</li></ul><p>シグモイド関数よりほとんどいつも良い。</p><p>-1~1の範囲を取り、活性化関数の平均が0に近いので、出力の平均が0に近くなり、データをより中央に揃えるため、次の層での学習が簡単になる。</p><p><br></p><p><em><span
      style=\"background-color: rgb(247, 218, 100);\">sigmoidとtanh関数の問題点は、zがとても小さい時やとても大きい時に、関数の勾配、微分、傾きがとても小さくなること。</span></em></p><p><span
      style=\"background-color: rgb(247, 218, 100);\"><em>勾配が小さすぎると、学習が難しくなる状態になる。次の層、またその次の層、と徐々に勾配が小さくなっていく問題を<strong>勾配消失問題</strong>と呼ぶ。<br></em></span></p><p><em><strong><span
      style=\"background-color: rgb(247, 218, 100);\">NNの勾配消失問題を改善するために、活性化関数に正規化機能の無いReLU関数（ランプ関数）を使う</span></strong></em></p><p><br></p><ul
      style=\"border-radius: 3px;\"><li>ReLU(Rectified Liner Unit)関数 (正規化線形関数)</li></ul><p><br></p><ul
      style=\"border-radius: 3px;\"><li>Leaky ReLU</li></ul><p><br></p><h3>6. 活性化関数が必要な理由</h3><p><br></p><p>活性化関数を用いるとモデルの表現力を増すため。</p><p>表現力が増す理由は、入力の加重和に対して、活性化関数を用いて変換を行うと様々な値の出力が行えます。様々な値の出力を持つパーセプトロンを組み合わせるとより複雑な表現が可能になります。</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585384863492-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-28+15.57.52.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h3>7.
      活性化関数の勾配</h3><p><br></p><p>$$ { シグモイド関数: g(z)= \\frac{ 1 }{ 1+ e ^{ -z } } \\\\
      \\ \\frac{ d }{ dz } g(z) = \\frac{ 1 }{ 1+e ^{ -z } } \\left( { 1-\\frac{ 1
      }{ 1+e ^{ -z } } } \\right) =g(z)(1-g(z)) \\\\ \\\\ ハイパボリックタンジェント関数: g(z)=tanh(z)=
      \\frac{ e ^{ z }-e ^{ -z } }{ e ^{ z }+e ^{ -z } } \\\\ \\ \\frac{ d }{ dz }
      g(z) = 1-(tanh(z)) ^{ 2 }=1-g(z) ^{ 2 } \\\\ \\\\ ReLU関数: g(z) = max(0,z)=\\begin{cases}
      0 &amp; (z&lt;=0) \\\\ z &amp; (z&gt;0) \\end{cases} \\\\ \\ \\frac{ d }{ dz
      } g(z) = \\begin{cases} 0 &amp; (z&lt;=0) \\\\ 1 &amp; (z&gt;0) \\end{cases}
      \\\\ \\\\ Leaky ReLU関数: g(z) = max(0.01z, z) = \\begin{cases} 0.01z &amp; (z&lt;=0)
      \\\\ z &amp; (z&gt;0) \\end{cases} \\\\ \\ \\frac{ d }{ dz } g(z) = \\begin{cases}
      0.01 &amp; (z&lt;=0) \\\\ 1 &amp; (z&gt;0) \\end{cases} \\\\ \\\\ } $$</p><p><br></p><h3>8.
      ニューラルネットワークの勾配</h3><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585387879787-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-28+18.31.06.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585452082337-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-29+11.56.16.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585556903392-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-29+12.23.54.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585558847242-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-30+17.37.11.png\"><span
      class=\"fr-inner\">ベクトル計算の行列の形状確認</span></span></span></p><h3>9. 重みの初期化</h3><p>重みを<strong>均一な値</strong>にすることはNGです。(例えば、重みを全て0)<br>順伝播時に全て同じ値が伝達されてしまうため、全て同じように更新されてしまうため、各層に複数のニューロンを持つ意味が全くなくなる。</p><p><br>これでは、<u><span
      style=\"font-size: 18px;\">たくさんの重みを持つ意味がなくなってしまう</span></u>。</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585479929360-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-29+18.32.43.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585474733745-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-03-29+18.32.43.png\"><span
      class=\"fr-inner\">重みとバイアス初期化</span></span></span></p><p><br></p><p>重みは (ガウス分布の乱数)&times;0.01、バイアスは0で初期化</p><p><span
      style=\"font-size: 18px;\">重みの初期化に、ガウス分布の乱数に0.01をかける理由</span></p><p>たとえ出力層だけであっても、シグモイドやtanhを使用する場合、zの値(z=WX+b)がとても大きい、もしくは小さくなり、シグモイドやtanhの勾配が非常に小さくなるため、学習に時間がかかるから。</p><p><br></p><p><br></p><p><br></p><h2
      id=\"section4\">Deep Neural Network (DNN)</h2><hr><h3>1. ディープネットワークにおける順伝播</h3><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585788606861-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-02+9.45.35.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>順伝播の各層の出力計算は、一つ前の層の計算結果を使用するため、ベクトルではなくforループで計算するしかないので、forループを使って構わない。</p><p><br></p><h3>2.
      なぜ深い表現か</h3><p>深層ネットワークが良い成績を上げる理由の2つ。</p><p><br></p><p><span style=\"font-size:
      18px;\">1つ目:&nbsp;</span><span style=\"font-size: 18px; color: rgb(184, 49,
      47);\">初めの層で細かいレベルの簡単な特徴を学び、後の深めの層では検出した簡単なものを組み合わせて、より複雑なものを検出できるようにするため。</span></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585867358564-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-03+7.19.02.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><span
      style=\"font-size: 18px;\">上記の顔検出器の場合</span></p><p><span style=\"font-size:
      18px;\">隠れ層1: どの向きに境界があるのかを見つけている。</span></p><p><span style=\"font-size: 18px;\">隠れ層2:
      検出した境界を使ってグループ化して顔の部分を形成</span></p><p><span style=\"font-size: 18px;\">隠れ層3:
      目や耳、鼻や顎などの様々な部品を組み合わせることで、様々な種類の顔を認識したり検出することができる</span></p><p><br></p><p><span
      style=\"font-size: 18px;\">2つ目:</span> <span style=\"font-size: 18px; color:
      rgb(44, 130, 201);\">狭くて(隠れユニットの数が比較的少ない)深いニューラルネットワークで計算する関数があるが、浅いネットワーク(十分な隠れ層がない)で同じような関数を作って計算する場合は指数関数的により多くの隠れユニットが必要となる。</span></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585869701083-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-03+8.04.27.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>上記の画像は、深いニューラルネットと同じ計算をする場合、浅いニューラルネットワークが指数関数的に隠れユニットを必要とすることの一例。</p><p>入力が(X1,X2,X3,
      ... Xn)でXORから出力計算をする時、狭いニューラルネットワークの層の数はlognであり、浅いニューラルネットワークの場合は2のn乗(または2のn-1乗)である。</p><p><br></p><h3>2.
      DNNの誤差逆伝播</h3><p><br></p><p>画像左側がバッチ無しの時の計算</p><p>右側がバッチ数mでの計算</p><p><br></p><p>&nbsp;\\(a
      ^{ [l] }はl層目の出力であり、入力xは入力層(0層目)の出力と言えるので、a ^{ [0] } とも表現できる\\)　</p><p><br></p><p><span
      style=\"font-size: 18px;\">逆伝播する勾配は、バッチ数m列の行列で伝播していくが、W や bなどの<span style=\"color:
      rgb(184, 49, 47);\"><u>学習を行うパラメータの勾配のみ、バッチ数で平均化する</u></span>。</span></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1585986313573-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-04+16.30.01.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p><br></p><p><br></p><h2
      id=\"section5\">本講座について</h2><hr><p>ニューラルネットワークの理論と実装をわかりやすく説明された講座でした。</p><p>書籍でニューラルネットワークを勉強するよりも、僕はこの講座の方がお勧めできます。</p><p>自信持ってお勧めできるので、初心者~中級者くらいで、ニューラルネットワークを勉強しようと思っている人は是非！</p><p>今回の講座はこちら！！</p><p><a
      href=\"https://www.coursera.org/learn/neural-networks-deep-learning/\" style=\"text-decoration:
      none;\">https://www.coursera.org/learn/neural-networks-deep-learning/</a></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p></dd></dl></dd></dl></dd></dl>"
    - '2020-03-21 10:00:39.608817'
    - '2020-06-20 20:02:27.277651'
  - - 227
    - 'Coursera ディープニューラルネットワークの改善: ハイパーパラメータのチューニング, 正則化, 最適化'
    - "<h1 style=\"text-align: center;\">ディープニューラルネットワークの改善</h1><p><br></p><nav class=\"mkj\"
      style=\"border-radius: 3px; font-weight: 700; line-height: 1.4; background:
      rgb(255, 251, 244); padding: 0px; border: 2px solid rgb(248, 145, 116); margin-bottom:
      2em;\"><h2 style=\"padding: 8px 12px; margin: -1px; background: rgb(248, 145,
      116); border: none; font-size: 18px; text-align: center; color: rgb(255, 255,
      255);\"><i class=\"fa fa-th-list\"></i> Table of Contents</h2><ol style=\"border-radius:
      3px;\"><li><a href=\"#section\" style=\"color: rgb(84, 84, 84); padding: 8px
      0px; display: block; text-decoration: none;\">1週目</a></li><li><a href=\"#section2\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">2週目</a></li><li><a href=\"#section3\" style=\"color: rgb(84, 84, 84);
      padding: 8px 0px; display: block; text-decoration: none;\">3週目</a></li><li><a
      href=\"#section4\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">本講座について</a></li></ol></nav><p><br></p><h2 id=\"section\">1週目</h2><hr><h3>1.
      Train/dev/test set</h3><p><br></p><p>データは多くの場合、訓練、開発、テストに分割される。</p><p>開発セットの目的:
      様々なアリゴリズムを比較し、どれが一番よく機能するか調べるため。</p><p><br></p><p><span style=\"font-size: 18px;\">訓練/開発/テストセットの分割では以下のパターンがすごく一般的</span></p><ul><li><span
      style=\"font-size: 18px; color: rgb(184, 49, 47);\">訓練 70%, テスト30%</span></li><li><span
      style=\"font-size: 18px; color: rgb(184, 49, 47);\">訓練 60%, 開発20%, テスト20%</span></li></ul><p><br></p><p>数年前までは、データ数が100~10000ぐらいだったので理にかなっていたが、<span
      style=\"font-size: 18px;\">現代はビッグデータ時代</span>になり、比率が変わってきた。</p><p><br></p><p><span
      style=\"font-size: 18px;\">総データが100万以上の場合の適用例</span></p><ul><li><span style=\"font-size:
      18px; color: rgb(41, 105, 176);\">訓練セット 98%, 開発セット 1%, テストセット 1%</span></li><li><span
      style=\"color: rgb(41, 105, 176);\"><span style=\"font-size: 18px;\">訓練セット 99.5%,
      開発セット 0.25%, テストセット 0.25%</span></span></li><li><span style=\"font-size: 18px;
      color: rgb(41, 105, 176);\">訓練セット 99.5%, 開発セット 0.4%, テストセット 0.1%</span></li></ul><p><br></p><h4>データを用意する上でよくない例</h4><ul><li>訓練セット、開発セット、テストセットで、不一致の属性を使用する</li></ul><p><br></p><p>(よくない例)</p><p>訓練セット:
      <span style=\"color: rgb(243, 121, 52);\">webページ</span>から取得して利用</p><p>開発セット、テストセット:
      <span style=\"color: rgb(243, 121, 52);\">アプリ</span>を使用しているユーザーから取得して利用</p><p><br></p><h3>2.
      バイアスと分散</h3><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1586065076679-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-05+14.28.25.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1586065788581-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-05+14.38.38.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h3>3.
      ディープラーニングの基本的な秘訣</h3><p><br></p><p><span style=\"font-size: 18px;\">高バイアスの時</span></p><ul><li><span
      style=\"font-size: 18px;\">より大きいネットワークにする</span></li><li><span style=\"font-size:
      18px;\">より長い訓練を行う</span></li></ul><p>(ニューラルネットワークのアーキテクチャーの検索)</p><p><br></p><p><span
      style=\"font-size: 18px;\">高分散の時</span></p><ul><li><span style=\"font-size:
      18px;\">より多くのデータ<br></span></li><li><span style=\"font-size: 18px;\">正則化</span></li></ul><p>(ニューラルネットワークのアーキテクチャーの検索)</p><p><br></p><h3>4.
      正則化</h3><p>過学習が疑われるとき、つまり高分散の時にまず試すべきは、正則化</p><p>高分散に対処する別に方法は、訓練データをより集めることだが、いつでも多くのデータを集めれるわけではないし、多くのデータを集めるにはお金がかかる</p><p>正則化することで、過学習を防ぎ、誤差を減らせる。</p><p><br></p><p>L2（Ridge）正則化</p><p><strong>損失関数にパラメータの２乗ノルムを加える。</strong></p><p><br></p><p>L1（Lasso）正則化</p><p><strong>スパース性(回帰係数の多くを0と推定する性質)がある</strong></p><p><br></p><p>過学習の抑制においてはL2正則化の方が効果があり、ほとんどL2正則化が使われる。</p><p><br></p><p>wのみに正則化を施し、bに正則化をしないのは、実際には入れてもいいのだが、wは非常に高次元のベクトルで高分散の問題が起きやすい。</p><p>bはwに比べて低次元で、大量のパラメータの１つに過ぎないのでわざわざ入れる必要はない。一般的には省略。</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1586305037441-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-08+9.13.58.png\"><span
      class=\"fr-inner\">ロジスティック回帰の場合の正則化</span></span></span></p><p><br></p><p>次に、ニューラルネットワークのL2正則化</p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1586307081393-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-08+9.34.08.png\"><span
      class=\"fr-inner\">ニューラルネットワークのL2正則化</span></span></span></p><p>L2正則化が荷重減衰と呼ばれる理由は、通常の勾配降下で重みを更新する際、誤差逆伝播から得られた元の勾配の&alpha;倍を引くようなものだから。</p><p><br></p><h3>4.
      正則化が過学習を防ぐ理由</h3><p><br></p><p>過学習が起きる主な原因は、以下の３つ</p><pre><strong>（１）重みの値が大きいこと(あまり捉えなくて良い、細かな特徴量まで捉えてしまう)</strong>\r\n<strong>（２）ニューロンの数が多いこと（=重みパラメータの数が多いこと）</strong>\r\n<strong>（３）訓練データが少ないこと</strong></pre><p><br></p><p>正則化は<span
      style=\"background-color: rgb(255, 255, 204);\"><strong>（１）に対する解決策</strong></span>となる</p><p>ちなみに、（２）は各層のニューロンの数を手動で調節すること。</p><p>（３）は訓練データを増やすことで解決できる。</p><p><br></p><p>&lambda;は正則化の効果の強さをコントロールするための値。</p><p>大きければ大きいほど、損失関数の値が大きくなってしまうため、その分重みは小さくなろうとすることで整合性を保とうとする。</p><p>正則化は重みを0に近づけることで、過学習を防いでいる。</p><p><br></p><h3>5.
      ドロップアウト</h3><p>ドロップアウトはランダムに任意のニューロン（次元）を何割か無視してしまう技術である。入力データを増やせずとも、次元を減らすことで解の有意性を上げることができる。ドロップアウトして得た学習結果は、テスト時には同時に使用し、結果は平均して用いる。これはRandom
      forestと同様、検出率の低い識別器でも並列化することで信頼度を上げることができるためである。</p><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1586689371391-dropout_calculation.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><h4><br></h4><h3
      data-placeholder=\"翻訳\" dir=\"ltr\">テストセットでの予測時について</h3><p data-placeholder=\"翻訳\"
      dir=\"ltr\"><span lang=\"ja\">ドロップアウトを適用せず（ランダムにユニットを排除しない）、トレーニングセット時のように(1/keep-prob)で割らない。</span></p><p><br></p><p><strong>ドロップアウト率を重みの値に掛けてやる</strong></p><p>ドロップアウト率0.5で学習データを訓練させた場合、テスト時には、ノードをドロップアウトさせることはせず、全てのノードを用いてデータを学習するが、その代わり各ノードの重みに0.5を掛けて値を小さくする。</p><p>ドロップアウトを使うと１つ１つのノードの重みが大きくなる。この状態でテスト時に全ノードを使って学習してしまうと、重みの値が大きすぎて正しい数値が計算できないので、重み全体をドロップアウト率で掛けてその値を小さくしている。</p><p><br></p><p>Hiltonの論文によれば、この方法を使えばドロップアウトしたのとほぼ同じ値が算出可能のようである。</p><p><br></p><h3>6.
      ドロップアウトが過学習を抑える理由</h3><p><br></p><p>ドロップアウトはニューラルネットワークの学習時に、一定割合のノードを不活性化させながら学習を行うことで過学習を防ぎ（緩和し）、精度をあげるために手法。</p><p>学習時に特定のノードを不活性化させて、学習を進めていくことで、過学習を抑えながらパラメーターの更新を行える。</p><p><br></p><h3>7.
      その他の正則化</h3><p><br></p><p><span style=\"font-size: 18px;\">データを増やす</span></p><p>過学習を抑えるためには、データを増やすことが有効</p><p>データを入手するにはお金がかかるが、以下の方法で無料でデータを増やすことができる</p><ul><li>画像を左右反転させる</li><li>画像をランダムに切り取る</li><li>回転させる</li><li>ランダムに拡大する</li><li>ランダムにねじれさせる</li></ul><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1586602859829-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-11+19.58.37.png\"><span
      class=\"fr-inner\">データの増大</span></span></span></p><p><br></p><p><span style=\"font-size:
      18px;\">早期打ち切り (early stopping)</span></p><p>学習の反復において、訓練データと評価データの両方の評価値を監視し、評価データでの評価値が悪化し始める所で学習を早期に打ち切る方法</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1586603046490-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-11+20.02.22.png\"><span
      class=\"fr-inner\">誤差の変位と早期打ち切り</span></span></span></p><p><br></p><h3>8. 入力の正規化</h3><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1586604896120-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-11+20.20.44.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><span
      style=\"font-size: 18px;\">正規化が必要な理由</span></p><p><br></p><p>正規化をしていないとw, bから見たコスト関数は細長い関数になり,
      最適解にたどり着くまでに, 学習率をとても小さな値に設定して、多くのステップを踏まなければならない。</p><p>正規化をしていると、よりシンメトリーな関数になり、学習が進みやすい。</p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1586607083635-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-11+21.01.20.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><h3>9.
      勾配消失・勾配爆発</h3><p><br></p><p>シグモイド関数の微分は次の式</p><p>&nbsp;\\( \\sigma &#39; (x)
      = &nbsp;\\sigma (x)(1- \\sigma (x)) \\)</p><p>シグモイド関数は0~1の出力をおこなう関数なので、逆伝播法で下流に流す勾配は上記の式より、1未満になる</p><p>逆伝播法で下流に流す勾配はだんだんと小さくなっていき消失してしまう。</p><p><br></p><p>ハイパボリックタンジェント関数の微分は次の式</p><p>$$
      { y=tanh(x)= \\frac{ e ^{ x } - e ^{ -x } }{ &nbsp;e ^{ x } + e ^{ -x } &nbsp;}
      \\\\ y&#39;=1- y ^{ 2 } &nbsp;} $$</p><p>tanh関数を微分した値も1より小さい値となるため、逆伝播法で下流に流す勾配はだんだんと小さくなっていき消失してしまう。</p><p><br></p><p>勾配爆発と勾配消失を理解するために、L層のニューラルネットワークで考える。</p><p>簡単にするために、バイアスは0,
      0層からL-1層までの重みは同じものとする。</p><p><span class=\"fr-img-caption fr-fic fr-dib fr-fil\"
      style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1586669162100-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-12+13.53.56.png\"><span
      class=\"fr-inner\">深層ネットワークにおける勾配爆発と勾配消失</span></span></span></p><p>重みが単位行列より大きい時、出力が指数関数的に大きくなり、単位行列より小さい時、出力が指数関数的に小さくなる。</p><p>同じく、誤差逆伝播法で勾配を下流に流すときも、Zの勾配にW.Tをかけて前の層に流していくため、指数関数的に大きくまたは小さくなる。</p><p><br></p><p><span
      style=\"color: rgb(44, 130, 201);\">■行列の乗法の性質</span></p><p>行列の積が定義できるとき，一般に</p><p><span
      style=\"font-size: 18px;\">１　</span><span style=\"font-size: 14px;\">(積に関する)結合法則が成立します。</span></p><p><span
      style=\"color: rgb(243, 121, 52);\">（ＡＢ）Ｃ=Ａ（ＢＣ）</span></p><p>［ｐ&times;ｑ型］［ｑ&times;ｒ型］［ｒ&times;ｓ型］&rarr;[ｐ&times;ｓ型]となります。(しりとりのルールです。)</p><p><br></p><p>２　(和の上への積の)分配法則が成立します。</p><p><span
      style=\"color: rgb(184, 49, 47);\">(Ａ＋Ｂ)Ｃ=ＡＣ＋ＢＣ</span></p><p><span style=\"color:
      rgb(184, 49, 47);\">C(Ａ＋B)=ＣＡ＋ＣＢ</span></p><p><br></p><p>３［重要］　(積に関する)交換法則は成立しません</p><p>すなわち，<u>ＡＢ=ＢＡは必ずしも成立しません</u></p><p><br></p><div
      style=\"background: #FFFFCC;\">【要約】<br>　積が定義できるとき<br>「交換法則：&times;」，「結合法則：○」，「分配法則：○」</div><p><br></p><p><br></p><h3>9.
      重みの初期化</h3><p><br></p><p>一般に重みの初期値のバラツキを大きくすぎても、小さすぎても学習速度は遅くなる。このことから適切な初期値を設定しないといけないことが分かります。</p><p>また初期値は「勾配消失」、「表現力の制限」といった問題を引き起こすことがある。</p><p><br></p><h4>Heの初期値</h4><p>\\(
      この初期値はノード数nに対して平均0、標準偏差\\sqrt{ &nbsp;\\frac{ 2 }{ n } &nbsp;}である正規分布から重みを設定
      \\)</p><p>\\( w ^{ [l] } = np.random.randn(n^{ [l] }, n^{ [l-1] }) &nbsp;\\ast
      \\sqrt{ &nbsp;\\frac{ 2 }{ n^{ [l-1]} } &nbsp;} \\)</p><p><br></p><p>Heの初期値はReLU関数を活性化関数とするときに用いるとよいでしょう。ReLU関数を活性化関数としたモデルにXavierの初期値を用いるとアクティベーション分布に偏りが生じやすくなることが知られています。</p><p><br></p><h4>Xivierの初期値</h4><p>\\(
      この初期値はノード数nに対して平均0、標準偏差\\sqrt{ &nbsp;\\frac{ 1 }{ n } &nbsp;}である正規分布から重みを設定
      \\)</p><p>\\( w ^{ [l] } = np.random.randn(n^{ [l] }, n^{ [l-1] }) &nbsp;\\ast
      \\sqrt{ &nbsp;\\frac{ 1 }{ n^{ [l-1]} } &nbsp;} \\)</p><p><br></p><h4>その他の初期値</h4><p>\\(
      w ^{ [l] } = np.random.randn(n^{ [l] }, n^{ [l-1] }) &nbsp;\\ast \\sqrt{ &nbsp;\\frac{
      2 }{ n^{ [l-1]}+n^{ [l]} } &nbsp;} \\)</p><p><br></p><p>Xaivierの初期値は様々なニューラルネットで用いられている。sigmoid関数やtanh関数を活性化関数として用いる時、このXavierの初期値を用いるとよいでしょう。</p><p><br></p><h4>まとめ</h4><p><span
      style=\"background-color: rgb(247, 218, 100);\">ニューラルネットワークの活性化関数がReLU関数の時はHeの初期値を用いて、それ以外の時はXivierの初期値を用いるとよいでしょう。</span></p><p><br></p><h3>10.
      微分の計算</h3><p><br></p><p>微分の計算は\\( f&#39;(x)= &nbsp;\\textstyle \\lim_{h \\to
      0} \\dfrac{ f(x+h)-f(x) }{ h } \\)</p><p>しかし、リミットを使って計算をコンピューターで再現するときには近似式を用いる。</p><p>hを十分に小さい値(
      10 ^{ -4 } ぐらい)に設定し、中心差分を使う。</p><p>前進差分、後退差分、中心差分があるが、中心差分の方が近似になる。</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1586673687167-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-12+15.40.46.png\"><span
      class=\"fr-inner\">微分の近似計算</span></span></span></p><p><br></p><h3>11. 勾配の確認</h3><p><br></p><p>以下の方法で確認ができる。</p><p>\\(
      10 ^{ -7 } \\) ぐらいになっていると正しく計算できている。&nbsp;</p><p><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1586675298472-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-12+16.03.32.png\"><span
      class=\"fr-inner\">微分の確認方法</span></span></span></p><p><br></p><h2 id=\"section2\">2週目</h2><hr><h3>1.
      ミニバッチ勾配降下</h3><p>ニューラルネットワークの訓練には多くのデータを扱い、多くのイテレーションを行うため、学習に時間がかかる。</p><p>しかし、データを１つ１つ処理するのではなく、複数のデータをまとめて計算することで並列処理により、時間を節約できる。</p><p><br></p><p>5,000,000個のデータがある時、ベクトルとして1000個をまとめて計算する。</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587197457537-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-18+17.04.35.png\"><span
      class=\"fr-inner\">ミニバッチ</span></span></span></p><p><br></p><h3>2. ミニバッチ勾配降下
      詳細</h3><p>まとめて計算する数が多ければ多いほど、計算が早くなる一方で、コスト関数の最適化にノイズが生じる。</p><div>&nbsp;バッチ数が多ければ多いほど、学習の過程にノイズが含まれるが、学習率を下げればノイズの影響は軽減されるのでそれほど問題ない。</div><p><br></p><p>訓練データの総数がm個</p><p><span
      style=\"color: rgb(41, 105, 176); font-size: 18px;\">バッチ数がmの場合、バッチ勾配降下法 (Batch
      Gradient Descent)</span></p><p><span style=\"font-size: 18px;\"><span style=\"color:
      rgb(85, 57, 130);\">バッチ数が1の場合、確率的勾配降下法 (Stochastic Gradient Descent)</span></span></p><p><span
      style=\"color: rgb(65, 168, 95); font-size: 18px;\">バッチ数が1からmの間の場合、ミニバッチ勾配降下法
      (Mini Batch Gradient Descent)</span></p><p><br></p><p><span style=\"color: rgb(41,
      105, 176); font-size: 18px;\">バッチ勾配降下法</span></p><div style=\"background: rgb(255,
      255, 224);\">1イテレーションに時間がかかる。学習プロセスにおけるノイズに関しては、学習率を下げれば改善されるので、あまり問題では無い。</div><p><br></p><p><span
      style=\"color: rgb(85, 57, 130); font-size: 18px;\">確率的勾配降下法</span></p><div
      style=\"background: rgb(255, 255, 224);\">ベクトルによる高速化ができないため、計算に時間がかかる。&nbsp;</div><p><br></p><p><span
      style=\"color: rgb(65, 168, 95); font-size: 18px;\">バッチ勾配降下法&nbsp;</span></p><div
      style=\"background: rgb(255, 255, 224);\">ミニバチサイズを適度な大きさ(~1000)にすることで学習が早い。</div><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587201964479-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-18+18.23.27.png\"><span
      class=\"fr-inner\">ミニバッチ勾配降下における訓練</span></span></span></p><p><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587199669607-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-18+17.44.16.png\"><span
      class=\"fr-inner\">SGD バッチ ミニバッチの違い</span></span></span></p><p><br></p><p><span
      style=\"font-size: 18px;\">ミニバッチの選択</span></p><p><br></p><p>小さなテストセット: バッチ勾配降下(m&lt;=2000)</p><p>典型的なミニバッチのサイズ:
      \\( 2 ^{ 6 }(64), &nbsp; 2 ^{ 7 }(128), &nbsp;2 ^{ 8 }(256), &nbsp;2 ^{ 9 }(512)
      &nbsp;\\)</p><p><br></p><h3>3. 指数平滑平均 (exponentially weighted average)</h3><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587204560434-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-18+19.06.46.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587204113323-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-18+19.01.23.png\"><span
      class=\"fr-inner\">指数平滑平均の計算</span></span></span></p><p><br></p><h3>3. モーメンタムによる勾配降下</h3><p><br></p><p>確率的勾配降下法だと、コスト関数の最適化において、上下に<span
      lang=\"ja\">発振しながら最適値を探すため、</span>学習に多くのステップの経過を必要とする。</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587207324888-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-18+19.33.22.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>確率的勾配降下法(SGD)のこの弱点を補った手法の１つがモーメンタム(Momentum)</p><p>SGDより滑らかな経路でパラメータを探索する</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587207880074-momentum_image.png\"><span
      class=\"fr-inner\">Momentum 最適化</span></span></span></p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587207526194-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-18+19.56.59.png\"><span
      class=\"fr-inner\">モーメンタムの計算</span></span></span></p><p><br></p><h3>4. RMSProp</h3><p>Root
      Mean Squared Propの略。モーメンタムのように、勾配降下を早める手法の１つ。</p><p>$$ { &nbsp;S _{ dw } = \\beta
      &nbsp;S _{ dw } + (1-\\beta)d w ^{ 2 } \\\\ S _{ db } = \\beta &nbsp;S _{ db
      } + (1-\\beta)d b ^{ 2 } &nbsp;\\\\ w:=w-\\alpha \\dfrac{ dw }{ &nbsp;\\sqrt{
      S _{ dw } } &nbsp;}, b:=b-\\alpha \\dfrac{ db }{ &nbsp;\\sqrt{ S _{ db } } &nbsp;}
      &nbsp;\\\\ ただし、指数の2は行列のアダマール積(要素積)を表す } $$</p><p><br></p><p><span class=\"fr-img-caption
      fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span class=\"fr-img-wrap\"><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587209517500-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-18+20.31.45.png\"><span
      class=\"fr-inner\">RMSProp 最適化</span></span></span></p><p><br></p><h3>5. Adam</h3><p>MomentumとRMSPropの両方を利用した手法</p><p><br></p><p>$$
      { V _{ dw }=0, S _{ dw }=0, V _{ db }=0, S _{ db }=0 \\\\ On\\ iteration\\ t:
      \\\\ \\ \\ Compute\\ dw,\\ db\\ using\\ current\\ mini batch \\\\ \\ \\ V _{
      dw } = \\beta _{ 1 } V _{ dw } + (1-\\beta _{ 1 })d w, V _{ db } = \\beta _{
      1 } V _{ db } + (1-\\beta _{ 1 })d b \\\\ \\ \\ S _{ dw } = \\beta _{ 2 } S
      _{ dw } + (1-\\beta _{ 2 })d w ^{ 2 }, S _{ db } = \\beta _{ 2 } S _{ db } +
      (1-\\beta _{ 2 })d b ^{ 2 } \\\\ \\ \\ V_{dw}^{current} = V _{ dw } / (1-\\beta
      _{ 1 }^{t}), V_{db}^{corrected} = V _{ db } / (1-\\beta _{ 1 }^{t}) \\\\ \\
      \\ S_{dw}^{corrected} = S _{ dw } / (1-\\beta _{ 2 }^{t}), S_{db}^{corrected}
      = S _{ db } / (1-\\beta _{ 2 }^{t}) \\\\ \\ \\ w:=w-\\alpha \\frac{ V_{dw}^{corrected}
      }{ \\sqrt{ S_{dw}^{corrected} }+\\varepsilon }, b:=b-\\alpha \\frac{ V_{db}^{corrected}
      }{ \\sqrt{ S_{db}^{corrected} }+\\varepsilon } } $$</p><p><br></p><p><span style=\"font-size:
      18px;\">ハイパーパラメータの選択</span></p><p>$$ { -&gt;\\alpha: 調整が必要 \\\\-&gt;\\beta_{1}:
      0.9 -&gt; (dw) \\\\-&gt;\\beta_{2}: 0.999 -&gt; (dw^{2}) \\\\-&gt; \\varepsilon:
      &nbsp;10 ^{ -8 } &nbsp;} $$</p><p><br></p><h3>5. 学習率の減衰 (learning rate decay)</h3><p>学習を早めるのを助ける方法の１つとして、繰り返し徐々に学習率を下げていく方法がある。(いわゆる学習率の減衰)</p><p><br></p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587257584789-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-19+9.37.01.png\"
      style=\"width: 600px;\"><span class=\"fr-inner\">learning rate decay</span></span></span></p><p><br></p><p><span
      style=\"font-size: 18px;\">その他の学習率減衰(learning rate decay)</span></p><p>$$formula\\left\\{\\begin{array}{ll}\\alpha=
      \\frac{ 1 }{ 1+decay\\_rate \\ast epoch\\_num } &nbsp;\\alpha _{ 0 } &nbsp;&amp;
      (先に挙げた手法) \\\\\\alpha=0.95^{epoch\\_num} \\alpha _{ 0 } &nbsp;&amp; (exponentially
      \\ decay) \\\\ \\frac{ k }{ &nbsp;\\sqrt{ epoch\\_num } &nbsp;} \\alpha _{ 0
      } \\ または \\frac{ k }{ &nbsp;\\sqrt{mini\\_batch\\_num } &nbsp;} \\alpha _{ 0
      } &nbsp;\\\\その他,decrete\\ staircase\\ decay, manual\\ decay &nbsp;&amp; &nbsp;などがある
      \\\\\\end{array}\\right.$$&nbsp;</p><p><br></p><h3>5. 局所最適の問題</h3><p><span lang=\"ja\"><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587302272633-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-19+21.58.15.png\"><span
      class=\"fr-inner\">ニューラルネットワークの局所解</span></span></span></span></p><p><span lang=\"ja\">上の左側の画像は、人々が局所最適について心配するときに心に留めていた写真。</span></p><p><span
      lang=\"ja\">この写真には局所的最適解が多く存在する。</span></p><p><span lang=\"ja\">しかし、実際は異なる。右が実際のコスト関数の描画であり、</span><span
      lang=\"ja\">ゼロ勾配のほとんどの点は、このような点のような局所最適では無い。代わりに、コスト関数の勾配がゼロのほとんどの点は鞍点(あんてん</span><span
      lang=\"ja\">)である。</span></p><p><br></p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587302587779-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-19+22.21.55.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><span
      style=\"font-size: 18px;\">まとめ</span></p><p>適度に大きなニューラルネットワークをトレーニングし、多くのパラメーターを保存し、コスト関数Jが比較的高次元の空間で定義されている限り、実際には悪いローカルオプティマで立ち往生することはほとんどない。</p><p>局所最適はあまり問題では無い。本当の問題は、高原をランダムに動きながら降っていくため、パラメータを見つけるまでに多くのステップを必要とすること。これを解決するために、RMSProp,
      Adamがある。</p><p><br></p><h3>6. ハイパーパラメータのランダムサンプリング</h3><p>$$ { &beta;= 10 ^{
      a }...10 ^{ b }でランダムサンプリング \\\\ \\log_{ 10 }&beta;=a...b \\\\ r=[a,b]=np.random.uniform(low=a,
      high=b) \\ (np.random.uniformはlow以上high未満の少数を返す) \\\\ &beta;=10 ^{ r }\\\\ }
      $$</p><p><br></p><p>$$ { &beta;= 10 ^{ a }...10 ^{ b } \\\\ &beta;=0.9...0.99の範囲で&beta;をランダムサンプリング
      \\\\ 1-&beta;=10 ^{ -2 }...10 ^{ -1 } \\\\ &nbsp;\\log_{ 10 } (1-&beta;)=-2...-1
      \\\\ r=[-2,-1]=-np.random.rand()-1\\ (np.random.rand()は0以上1未満の少数を出力する関数)\\\\
      1-&beta;=10 ^{ r } \\\\ &beta;=1-10 ^{ r } =1-10^{ -np.random.rand()-1 } } $$</p><p><br></p><h3>7.
      ハイパーパラメータの探索</h3><p><br></p><h2><span style=\"font-size: 24px;\">3 つの手法:</span></h2><p>大きく分けて、3
      つあるようだ。</p><ul><li>グリッドサーチ:</li></ul><p>昔からある手法で、格子状の空間で最適なパラメータを探索する方法です。 格子の範囲を総当りするため、膨大な計算時間がかかるという課題がある。</p><ul><li>ランダムサーチ
      :</li></ul><p>無作為にパラメータを抽出して探索します。 グリッドサーチよりも計算時間が短くて済むというメリットがある。</p><ul><li>ベイズ最適化
      (Bayesian Optimization) :</li></ul><p>無作為にパラメータを抽出して探索します。 グリッドサーチよりも計算時間が短くて済むというメリットがある。
      ディープラーニングを含む機械学習の手法で、比較的良いハイパーパラメータを探索できることが知られている。</p><ul><li><a href=\"http://www.jmlr.org/papers/volume13/bergstra12a/bergstra12a.pdf\">ハイパーパラメータ探索の論文
      James Bergstra, Yoshua Bengio, Random Search for Hyper-Parameter Optimization</a></li></ul><p>また、bengio
      先生のおすすめレシピというのがある。</p><blockquote><p>ハイパーパラメータはグリッドサーチするのではなく，ランダムサンプリングしたほうが性能が出る場合が多い</p></blockquote><p><br></p><h2
      id=\"section3\">3週目</h2><hr><h3>1. Batch Normarization (バッチ正規化)</h3><p><br></p><p>$$
      { l層の入力として、m個のデータからなるミニバッチ \\\\ Z= \\left \\{ { z ^{[l](1)}, z ^{[l](2)}, ...,
      z ^{[l](m)} } \\right \\} \\\\ (以降[l]は省略) \\\\ &mu;: ミニバッチの入力の平均 \\\\ &sigma;^{2}:
      ミニバッチの入力の分散 (ここで、&gamma;と&beta;はモデルの中で学習できるパラメータ) \\\\ &mu;= \\dfrac{ 1 }{ m
      } \\sum_{i=1}^m &nbsp;z ^{ (i) } \\\\ &sigma;^{ 2 } = \\dfrac{ 1 }{ m } \\sum_{i=1}^m
      &nbsp;(z ^{ (i) } - &mu;)^{ 2 } \\\\ z_{ norm } ^{ (i) } = &nbsp;\\frac{ z^{
      (i) }-&mu; }{ &nbsp;\\sqrt{ &sigma;^{2} + &epsilon;} &nbsp;} \\\\ &nbsp;\\tilde{
      z }^{(i)} = &gamma; \\ z_{ norm } ^{ (i) }+&beta; \\ (Batch \\ Normalizationの出力)
      &nbsp;} $$</p><p><br></p><p>訓練時はミニバッチごとに正規化し、一方、テスト時は、<span style=\"color: rgb(184,
      49, 47);\"><span style=\"font-size: 24px;\"><u>全訓練データから学習した情報で正規化したいため、 分散は訓練データの平均、不偏分散を使う。<br></u></span></span></p><p><br></p><p
      data-placeholder=\"翻訳\" dir=\"ltr\"><span lang=\"ja\">しかし、バッチノルムは一度に1つのミニバッチでデータを処理するが、テスト時はデータが多くなくて、例を1つずつ処理する必要がある(m=1)場合があります。</span></p><p
      data-placeholder=\"翻訳\" dir=\"ltr\"><span lang=\"ja\">そのような場合、一般的な実装では、ミニバッチ全体の平均である指数加重平均を使用してこれを推定する</span><span
      lang=\"ja\">。</span></p><p data-placeholder=\"翻訳\" dir=\"ltr\"><br></p><p data-placeholder=\"翻訳\"
      dir=\"ltr\">$${ テスト時に、訓練時と異なるバッチサイズを使用するとき\\\\ 訓練データの&mu; ^{ [l] } は使用せずに、訓練中に見られたミニバッチ全体の指数加重平均
      &mu; ^{ \\{1\\}[l] }, &mu; ^{ \\{2\\}[l] },...を使って&mu;を推定する(分散も同様) \\\\ &mu;
      ^{ [l] }=0 \\\\ for\\ i\\ in\\ range(1, t): \\\\ \\ \\ &mu; ^{ [l] }=&beta;&mu;
      ^{ [l] }+(1-&beta;)&mu; ^{ \\{i\\}[l] } \\\\ \\ \\ {&sigma;^2} ^{ [l] }=&beta;{&sigma;^2}
      ^{ [l] }+(1-&beta;){&sigma;^2} ^{ \\{i\\}[l] } }$$</p><p data-placeholder=\"翻訳\"
      dir=\"ltr\"><br></p><p data-placeholder=\"翻訳\" dir=\"ltr\">$$ { z_{ norm } ^{
      (i) } = &nbsp;\\frac{ z^{ (i) }-&mu; ^{ [l] } }{ &nbsp;\\sqrt{ &sigma;^{2[l]}
      + &epsilon;} &nbsp;} \\\\ &nbsp;\\tilde{ z }^{(i)} = &gamma; \\ z_{ norm } ^{
      (i) }+&beta; \\ (Batch \\ Normalizationの出力) } $$</p><p data-placeholder=\"翻訳\"
      dir=\"ltr\"><br></p><p><br></p><p><br></p><p>ニューラルネットワークでは、活性化関数を適用する前に、バッチ正規化を行う。</p><p><span
      class=\"fr-img-caption fr-fic fr-dib fr-fil\" style=\"width: 600px;\"><span
      class=\"fr-img-wrap\"><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1587802632562-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-25+17.15.48.png\"
      style=\"width: 600px;\"><span class=\"fr-inner\">ニューラルネットワークへのバッチ正規化の挿入</span></span></span></p><p><br></p><h3>2.
      バッチ正規化 メリット</h3><p><br></p><ul><li>訓練中に前の層のパラメータの変化に伴い、各層の入力分布が変化する現象(内部共変量シフト)の影響を減らす</li><li>重みやバイアスなどのパラメータまたはその初期値のスケールで起こる勾配爆発/勾配消失を防ぐ</li><li>モデルを正則化し、ドロップアウト、測光による歪み、局所応答の正規化、その他の正則化手法の必要性を減らす</li><li>飽和非線形性とより高い学習率の使用を可能にする。学習の収束速度が向上する</li></ul><p><br></p><p>内部共変量シフトの補足:</p><p>内部共変量シフトとは、入力時のxの分布が、学習途中で大きく変わってくることをさす。<br>このシフトに合わせることにweightたちは躍起になるので、層自体の学習はそのあとでしか進まない。<br>そのため、学習が遅くなる。</p><p>バッチ正規化は、このシフトを正規化してくれるもの。<br>同時に白色化（正規化＋無相関化）おこなう。</p><p><br></p><h3>3.
      出力層の活性化関数と誤差関数</h3><p><br></p><p>出力層は隠れ層とは区別して設計する。活性化関数と誤差関数をセットで設計する必要がある。そして、問題の種類ごとにそれらは異なる。絶対的なルールはないが、下記の方法が一般的な方法である。ここであげた手法は<span
      style=\"color: rgb(184, 49, 47);\"><span style=\"font-size: 24px;\"><u>誤差関数の偏微分が全て出力と目標値の差</u></span></span>になっていて扱いやすく設定されている。</p><p>変数の使い方は以下の通り。</p><p>$${
      {\\displaystyle N}：訓練データの個数 \\\\ {\\displaystyle d_{n}}：n番目の訓練データの目標値(正解値) \\\\
      {\\displaystyle y_{n}}：n番目の訓練データの出力 }$$</p><p><br></p><h4>&nbsp;<span style=\"color:
      rgb(184, 49, 47);\"><strong><u>回帰</u></strong></span></h4><p>活性化関数は\b恒等関数、誤算関数は二乗和誤差を用いる。</p><p>$${
      活性化関数：{\\displaystyle \\varphi (u)=u}\\varphi(u) = u \\\\ 誤差関数：{\\displaystyle
      E(w)={\\frac {1}{2}}\\sum _{n=1}^{N}\\|y_{n}-d_{n}\\|^{2}}E(w) = \\frac{1}{2}
      \\sum_{n=1}^N \\| y_n - d_n \\|^2 \\\\ 誤差関数の偏微分：{\\displaystyle {\\frac {\\partial
      E_{n}(w)}{\\partial u}}=y_{n}-d_{n}}\\frac{ \\partial E_n(w) }{ \\partial u
      } = y_n - d_n } $$</p><p><br></p><h4><span style=\"color: rgb(41, 105, 176);\"><strong><u>二値分類</u></strong></span></h4><p>活性化関数は\bシグモイド関数、誤算関数は二乗和誤差を用いる。</p><p>出力は1つで確率と解釈する。d_n
      は 0 または 1 もしくは確率。誤差関数は最尤推定で導出できる。</p><p><br></p><p>$${ 活性化関数：{\\displaystyle
      \\varphi (u)=\\varsigma _{1}(u)={\\frac {1}{1+e^{-u}}}}\\varphi(u) = \\varsigma_1
      (u) = \\frac{1}{1+e^{-u}} \\\\ 誤差関数：{\\displaystyle E(w)=-\\sum _{n=1}^{N}(d_{n}\\log
      y_{n}+(1-d_{n})\\log(1-y_{n}))}E(w) = - \\sum_{n=1}^N (d_n \\log y_n + (1 -
      d_n) \\log (1 - y_n)) \\\\ 誤差関数の偏微分：{\\displaystyle {\\frac {\\partial E_{n}(w)}{\\partial
      u}}=y_{n}-d_{n}}\\frac{ \\partial E_n(w) }{ \\partial u } = y_n - d_n \\\\ }$$</p><p><br></p><h4><span
      style=\"color: rgb(41, 105, 176);\"><u><strong>多クラス分類</strong></u></span></h4><p>活性化関数はソフトマックス関数、誤算関数は交差エントロピー誤差を用いる。</p><p><br></p><p>$$
      { K 個のクラスに分類する。\\\\ 出力は K 個で、総和は 1 であり、そのクラスに所属する確率と解釈する。\\\\ {\\displaystyle
      \\sum _{k}d_{n,k}=1} \\\\ {\\displaystyle d_{n,k}} は 0 または 1 もしくは確率で、n 番目の訓練データがクラス
      k に所属する時 1。\\\\ ソフトマックス関数では、指数の割り算になっている。\\\\ e ^{ 100 } は0 が40 個以上も並ぶ大きな値になりe
      ^{ 1000 }の結果は無限大を表す\\infが返って来るため、数値が不安定な結果になってしまう。\\\\ コンピュータで表現できる数値の範囲を超えることをオーバーフローという。\\\\
      {\\displaystyle u_{k}}は、全て同じ数を引いた場合は結果が同じになる事を利用して、{\\displaystyle \\max _{k}u_{k}}を全てから減算して活性化関数を計算すると良い。
      } $$</p><p><br></p><p>$${ {\\displaystyle ソフトマックス関数: &nbsp;\\varphi (u_{k})=\\frac{
      exp(u_{k}) }{ {\\sum_{i=1}^{K}exp(u_{i})} }=\\frac{ Cexp(u_{k}) }{ {C \\sum_{i=1}^{K}exp(u_{i})}
      } }\\\\ {\\displaystyle =\\frac{ exp(u_{k}+logC) }{ {\\sum_{i=1}^{K}exp(u_{i}+logC)}
      } }\\\\ {\\displaystyle =\\frac{ exp(u_{k}+C&#39;) }{ {\\sum_{i=1}^{K}exp(u_{i}+C&#39;)}
      } }\\\\ {\\displaystyle C&#39;は、\\max _{k}u_{k} が一般的に使われる} }$$</p><p><br></p><p>$${
      {\\displaystyle 活性化関数: &nbsp;\\varphi (u_{k})=\\frac{ exp(u_{k}) }{ {\\sum_{i=1}^{K}exp(u_{i})}
      }=\\frac{ exp(u_{k}-\\max _{k}u_{k}) }{ {\\sum_{i=1}^{K}exp(u_{i}-\\max _{k}u_{k})}
      } }\\\\ 誤差関数：{\\displaystyle E(w)=-\\sum _{n=1}^{N}\\sum _{k=1}^{K}d_{n,k}\\log
      y_{n,k}} \\\\ 誤差関数の偏微分：{\\displaystyle {\\frac {\\partial E_{n}(w)}{\\partial
      u_{k}}}=y_{n,k}-d_{n,k}} } $$</p><p><br></p><p><br></p><h3>4. ディープラーニングのフレームワーク</h3><ul><li>Caffe/Caffe2</li><li>CNTK</li><li>DL4J</li><li>Keras</li><li>Lasagne</li><li>mxnet</li><li>PaddlePaddle</li><li>Tensorflow</li><li>Theano</li><li>Torch</li></ul><p><br></p><p>フレームワークを選ぶ観点</p><ul><li>プログラミングのしやすさ</li><li>実行速度</li><li>真にオープンソースであるか(きちんと管理されたオープンソース)</li></ul><p><br></p><p>注意を払うべきことの１つは、フレームワークが単一の企業の管理下に置かれるのではなく、長期にわたってオープンソースのままであることにどれだけ信頼できるかどうか。</p><p>ソフトウェアが現在オープンソースでリリースされている場合でも、何らかの理由で将来的には終了することを選択する可能性がある。</p><p><br></p><h2
      id=\"section4\">本講座について</h2><hr><p>今回受講したのはこちらのコースです。</p><p><a href=\"https://www.coursera.org/learn/deep-neural-network\">https://www.coursera.org/learn/deep-neural-network</a></p><p>実装する以前に、ニューラルネットワークの知識が不十分である人向けの内容であると感じました。</p><p>きちんとニューラルネットワークに関して未学習や過学習、その他勾配降下や誤差関数をどのようなものか理解していない人は、コリラのコースでしっかり学習と内容の定着ができるでのおすすめです。</p><p><br></p><p><br></p><p><br></p>"
    - '2020-04-05 14:12:34.719561'
    - '2020-05-02 21:03:33.519122'
  - - 228
    - coursera 機械学習プロジェクトの構築
    - '<h1 style="text-align: center;">ニューラルネットワークとディープラーニング</h1><p><br></p><nav class="mkj"
      style="border-radius: 3px; font-weight: 700; line-height: 1.4; background: rgb(255,
      251, 244); padding: 0px; border: 2px solid rgb(248, 145, 116); margin-bottom:
      2em;"><h2 style="padding: 8px 12px; margin: -1px; background: rgb(248, 145,
      116); border: none; font-size: 18px; text-align: center; color: rgb(255, 255,
      255);"><i class="fa fa-th-list"></i> Table of Contents</h2><ol style="border-radius:
      3px;"><li><a href="#section" style="color: rgb(84, 84, 84); padding: 8px 0px;
      display: block; text-decoration: none;">1週目</a></li><li><a href="#section2"
      style="color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;">2週目</a></li><li><a href="#section3" style="color: rgb(84, 84, 84); padding:
      8px 0px; display: block; text-decoration: none;">本講座について</a></li></ol></nav><h2
      data-placeholder="翻訳" dir="ltr"><br></h2><h2 id="section">1週目</h2><hr><h3>1.
      単一な数値評価メトリックの使用</h3><p><br></p><p><span style="font-size: 18px;">単一の数値評価メトリックを使用することで、効率的に、またはそれらの決定を行う際のチームの効率を向上できる。</span></p><p><br></p><p><span
      style="font-size: 18px;"><u>再現率</u> (感度、真陽性率、Recall)</span>とは、陽性のサンプルのうち、実際に陽性だと予測できる確率。</p><p>式:
      TP / (TP + FN)</p><p>例: 病気の人の中で検査で発見できる確率</p><p><br></p><p><u><span style="font-size:
      18px;">適合率</span></u><span style="font-size: 18px;">&nbsp;(精度、陽性反応的中度、Precision)</span>とは、陽性の予測が正しい確率。</p><p>式:
      TP / (TP + FP)</p><p>例: 検査で陽性が出たときに実際に病気である確率</p><p><br></p><p><span style="font-size:
      18px;"><u>特異度</u> (真陰性率、Specificity)</span>とは、陰性の予測が正しい確率。</p><p>式: TN / (FP
      + TN)</p><p>例: 元気な人に対して、病気でないと判断する確率</p><p><br></p><p><span style="font-size:
      18px;"><u>正確度</u> (Accuracy)</span>とは、予測が正しい確率。</p><p>式: (TP + TN) / (TP + FP
      + TN + FN)</p><p>例: 患者を病気か元気かを正しく予測できる確率</p><p><br></p><p><u><span style="font-size:
      18px;">F1スコア</span></u> 再現率 R と適合率 P の調和平均。</p><p>式: \( \frac{ 2 }{ &nbsp;\frac{
      1 }{ P }+ \frac{ 1 }{ R } &nbsp; } \)</p><p>Harmonic mean (調和平均)</p><p><br></p><div
      style="background-color: #FFFFCC;"><p><span style="font-size: 18px;"><span style="color:
      rgb(184, 49, 47);">TP</span>はpositive(陽性)と予測した結果がTrueであることをいう。</span></p><ul
      style="border-radius: 3px;"><li>例: 妊娠疑いのある患者を予測する分類器が、ある患者を妊娠中と判断したが、結果はその通り妊娠中だった。</li></ul><p><span
      style="font-size: 18px;"><span style="color: rgb(184, 49, 47);">TN</span>はnegative(陰性)と予測した結果がTrueであることをいう。</span></p><ul
      style="border-radius: 3px;"><li>例: 妊娠疑いのある患者を予測する分類器が、ある患者を妊娠していないと判断したが、結果はその通り妊娠していなかった。</li></ul><p><span
      style="font-size: 18px;"><span style="color: rgb(41, 105, 176);">FP</span>はpositive(陽性)と予測した結果がFalseであることをいう。</span></p><ul
      style="border-radius: 3px;"><li>例: 妊娠疑いのある患者を予測する分類器が、ある患者を妊娠中と判断したが、結果は異なり妊娠していなかった。</li></ul><p><span
      style="font-size: 18px;"><span style="color: rgb(41, 105, 176);">FN</span>はnegative(陰性)と予測した結果がFalseであることをいう。</span></p><ul
      style="border-radius: 3px;"><li>例: 妊娠疑いのある患者を予測する分類器が、ある患者を妊娠していないと判断したが、結果は異なり妊娠中だった。</li></ul></div><p><br></p><table
      width="100%"><thead><tr><th><br></th><th style="text-align: center;"><br>実際は正<br>(Positive)</th><th
      style="text-align: center;">実際は負<br>(Negative)</th></tr></thead><tbody><tr><td
      style="text-align: center;">予測が正<br>(Positive)</td><td style="text-align: center;"><strong>TP<br>True
      Positive</strong></td><td style="text-align: center;">FP<br>False Positive<br>第1種の誤り</td></tr><tr><td
      style="text-align: center;">予測が負<br>(Negative)</td><td style="text-align: center;">FN<br>Flase
      Negative<br>第2種の誤り</td><td style="text-align: center;"><strong>TN<br>True Negative</strong></td></tr></tbody></table><dl><dd><dl><dd><dl><dd><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588167820674-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-29+22.36.07.png"><span
      class="fr-inner">評価メトリック その1</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588167227488-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-04-29+22.28.26.png"><span
      class="fr-inner">評価メトリック その2</span></span></span></p><p><br></p><h3>2. メトリックの満足と最適化</h3><p><br></p><p>以下の例でいうと、</p><p>satisficing
      metric(満たすべき指標) =&gt; 実行時間100ms</p><p>optimizing metric(最適化すべき指標) =&gt; 精度の最適化</p><p><br></p><p>A,Bは両方とも実行時間100msを満たしテイルが、精度の最適化において優位なBが最適な要件を満たす選ぶべきモデルと結論する。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588423631051-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-02+21.40.42.png"><span
      class="fr-inner">satisficing and optimizing metric</span></span></span></p><p><br></p><h3>3.
      訓練/開発/テストセットの分布</h3><p><br></p><p><br></p><p>開発セットはバリデーションデータ(検証データ)のことを指す。</p><p><br></p><p>訓練データ(train
      set)は、モデルを訓練して構築するためのデータ</p><p>バリデーションデータ(dev set)は、モデルのハイパーパラメータを決めるためのデータ</p><p>テストデータ(test
      set)は、モデルの推定性能を、最終的に決定するためのデータ</p><p><br></p><p>ちなみに、ディープラーニングではデータが多いことが前提なのでやることはないが、バリデーションデータを用いずにトレーニンデータのみから交差検証によりハイパーパラメータを選ぶ方法もある</p><p><br></p><p><br></p><p>訓練セット、開発セット、テストセットは同じ分布が望ましいが、訓練データに関しては、分布が違っても理にかなっていることもある。</p><p>訓練データに違う分布のデータを訓練に追加することで、アルゴリズムが強化されることもあるので、訓練データに関しては、試した結果次第。</p><p><u>開発セットとテストセットは必ず同じ分布</u>にする。</p><p><br></p><p>例:
      猫の画像分類器の開発/テストセット</p><p>以下の8地域でデータが取得できたときの開発セットとテストセットの選び方</p><p>Regions:</p><ul><li>US</li><li>UK</li><li>Other
      Europe</li><li>SouthAmerica</li><li>India</li><li>China</li><li>South Asia</li><li>Australia</li></ul><p><br></p><p><span
      style="font-size: 18px;">NG: データを国毎で開発/テストに分ける(開発セットをランダムな4地域、テストセットを残りの4地域など)</span></p><p>理由:
      開発セットとテストセットで分布が違うと、予測精度が大きく変わりうる。</p><p><br></p><p><span style="font-size:
      18px;">推奨: データをシャッフルして無作為に開発/テストに割り振る(開発/テストで同じ分布を適用する)</span></p><p>理由: 開発セットとテストセットで同じ分布になる</p><p><br></p><h3>4.
      訓練/開発/テストセットのサイズ</h3><p>全体データを100%で表すとき、</p><p><br></p><p>メジャーな分割の仕方</p><p>以下はデータが少ないとき(データ数10000以下)にとても理にかなった分割だった.</p><p><br></p><p>・訓練
      70% &nbsp;テスト30%</p><p>・訓練 60% 開発 20% テスト20%</p><p><br></p><p>現在はビッグデータ時代で、より大きなデータサイズを扱うことができる</p><p>データ数が1,000,000</p><p>・訓練
      98% 開発 1% テスト1% (開発/テストセットはそれぞれ10,000もあれば十分)</p><p><br></p><h3>5. 人間レベルの誤差 (human
      level error)</h3><p><br></p><p>医療画像の分類で以下のように一般人、医者、専門医、専門医チームで誤差を測定した場合、人間レベルの誤差は、一番精度が良い専門医チームの誤差と考える。同時にベイズ誤差が0.5%以下だとわかる。</p><ul><li>一般人:
      3% 誤差</li><li>医者: 1% 誤差</li><li>専門医: 0.7% 誤差</li><li>専門医チーム : 0.5% 誤差</li></ul><p><br></p><h4>Human
      level error (人間レベルの誤差)</h4><p>ベイズ誤差の代理。</p><p><br></p><h4>Bayes Error (ベイズ誤差)</h4><p>達成可能な最小の予測誤差のこと。irreducible
      error（既約誤差）と同じ。</p><p><br></p><h4>irreducible error（既約誤差）</h4><p>未知であったり予測不可能な要因や単なる偶然により、減少させることはできない誤差のこと。</p><p><br></p><h4>reducible
      error（可約誤差）</h4><p>モデルの調整によってさらに低減することができる誤差。</p><p>「2乗偏りによる誤差」および「分散による誤差」にさらに分解することができる。</p><p><br></p><h4>バイアスとバリアンス</h4><p>バイアス：モデルの偏りの大きさ。</p><p>バリアンス：モデルの過学習のしやすさ。</p><p><br></p><p>バイアスとバリアンスはトレードオフの関係にある。</p><p>モデルがシンプルな場合：高バイアス・低バリアンス</p><p>モデルが複雑な場合：低バイアス・高バリアンス</p><p><br></p><h3>6.
      人間レベルのパフォーマンスを超える</h3><p><br></p><p>回避可能なバイアス: (訓練誤差) - (人間レベルの誤差)</p><p>分散:
      (汎化誤差) - (訓練誤差)</p><p><br></p><p><span class="fr-img-caption fr-fic fr-dib fr-fil"
      style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588417290769-human_level_error.png"><span
      class="fr-inner">人間レベルのパフォーマンスとの比較</span></span></span></p><p><br></p><p><span
      style="font-size: 24px;">機械学習が人間レベルのパフォーマンスを大幅に上回る多くの問題</span></p><p><br></p><ul><li>オンライン広告
      (誰が広告をクリックしやすいかの推定)</li><li>商品レコメンデーション (各ユーザーが欲しがると思われる商品をレコメンデーションする)</li><li>ロジスティクス（通過時間の予測）(AからBに配達/移動するのにかかる時間の予測)</li><li>ローン承認
      (お客がローンを返済できるかどうかの予測。運営者がローンのオファーを承認すべきかどうか)</li></ul><p>構造化されたデータ (データベースに溜まったデータを使用)</p><p>自然認識ではない(natural
      perception 人間がシーンを視覚的に取り込み、解釈するプロセス)ではない</p><p><br></p><p>その他</p><ul><li>音声認識</li><li>画像認識</li><li>医療タスク
      (心電図の読み取、 皮膚ガンの診断、放射線科医(X線))</li></ul><p><br></p><h3>7. モデルのパフォーマンスの改善</h3><p><br></p><h4>教師あり学習の基礎的な仮定</h4><ol><li>非常によくトレーニングセットを学習している
      (バイアス)</li><li>訓練セットのパフォーマンスは、開発/テストセットに対してもかなり良い汎化性がある (分散)</li></ol><p><br></p><p>バイアスと分散の減少<span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588422179126-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-02+21.21.54.png"><span
      class="fr-inner">バイアスと分散の減少</span></span></span></p><p><br></p><p><br></p><h2
      id="section2">2週目</h2><hr><h3>1. 誤差解析</h3><p><br></p><p>猫の検出器を製作し、精度が90%、誤差が10%とする。</p><p><br></p><ol><li>開発セットで、予測を間違えたサンプルを100個以下取得する</li><li>そのサンプルの犬を数える(犬を識別できなかったサンプルの数)</li></ol><p><br></p><p>開発セットの中で、予測を間違えた100個のサンプルを取得し、そのうち5%(5個)が犬だったとする。</p><p>犬の誤認を解決しても、開発セットの誤差はほとんど改善されない(例えば、10%-&gt;9.5%)</p><p><br></p><p>開発セットの中で、予測を間違えた100個のサンプルを取得し、そのうち50%(50個)が犬だったとする。</p><p>犬の誤認を解決することで、開発セットの誤差を非常によく改善ができる(例えば、10%-&gt;5%)</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588463902536-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-03+8.45.28.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><span style="font-size:
      18px;">複数のアイデアを並行して評価する</span></p><p><span style="font-size: 18px;"><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588465376300-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-03+9.21.53.png"><span
      class="fr-inner">並行した複数のアイデアの評価</span></span></span></span></p><p>誤認サンプルから</p><p>猫検出器のアイデア</p><ul><li>猫と誤認されている猫の画像の修正</li><li>誤認された大きな猫(ライオン、豹)の修正</li><li>ぼやけた画像に対するパフォーマンスの修正</li><li>インスタグラムの画像の誤認</li></ul><p><br></p><p>それぞれの誤認の種類が、全体の何%かを計算することで、<span
      lang="ja">パフォーマンスをどの程度改善できるかの上限がわかる。</span></p><p><span lang="ja">猫の誤認8%、大きな猫の誤認43%、ぼやけた画像の誤認61%、インスタグラムの誤認12%とする。</span></p><p><br></p><p>このような場合、二つのうち(<span
      lang="ja">大きな猫の誤認、<span lang="ja">ぼやけた画像の誤認</span></span>)の一つを選ぶかもしれない</p><p>あるいは自分のチームに十分な人員があるなら、二つの異なるチームを作る(<span
      lang="ja">大きな</span>猫のエラーを改善するチームと、ぼやけた画像のエラーを改善するためのチーム)</p><p><br></p><p><span
      style="font-size: 18px;">修正を行う優先度を決めるのは、<span style="color: rgb(184, 49, 47);"><u>誤差解析による各誤差の大きさ</u></span>と<span
      style="color: rgb(41, 105, 176);"><u>解決にかかる時間・コストの規模</u></span>次第</span></p><p><br></p><h3>2.
      不適切なラベルデータの削除</h3><p><br></p><p>データに誤ってラベル付けされたデータがあった場合の対応。</p><p><span style="font-size:
      18px;">深層学習アルゴリズムは、トレーニングセットのランダム誤差に対して非常に堅牢である。</span></p><p>エラーまたは誤ってラベル付けされた例である限り、それらのエラーがランダムから離れすぎていない限り、ラベラーが注意を払っていなかったか、誤ってキーボードの誤ったキーをランダムに叩いた可能性がある。</p><p>エラーがかなりランダムな場合は、エラーをそのままにして修正にあまり時間をかけない。</p><p>トレーニングセットに入ってラベルを調べ、修正しても害はないが、エラーに実際の割合が多すぎない限りパフォーマンスにほとんど害はないかもしれない。</p><p><br></p><p><span
      style="font-size: 18px;">一方で、深層学習アルゴリズムは、系統的エラーに対してそれほど堅牢ではない。</span></p><p>白い犬を猫とラベル付けした場合、白い犬を猫と学習するので問題である。</p><p><br></p><div
      style="background-color: #FFFFCC;"><p><span style="font-size: 24px;">まとめ:&nbsp;</span></p><p><span
      style="font-size: 24px;">ランダム誤差やそれに近い誤差の場合は、ディープラーニングにとってそれほど悪いものではない。</span></p></div><p><br></p><p>ランダム誤差(Random
      error): 偶然誤差とも呼ばれ、測定ごとにばらつく誤差。この誤差は毎回ランダムな値をとるので測定後に取り除くことができない。(例: コインを投げた結果の誤差)</p><p><br></p><p><span
      style="font-size: 18px;">2週目1のエラー解析で、誤認サンプル100を対象にした評価アイデアを紹介したが、さらに「不適切なラベルデータの誤認」を追加。</span></p></dd><dd><p><br></p><p>開発セットの誤差が10%、不適切ラベルによる誤差が0.6%、それ以外の原因での誤差が9.4%の時、ラベルの修正はさほど問題ではない。(もし望むなら、ラベルを修正しても良いが、すぐにやらなければならないことではない。)</p><p><br></p><p>開発セットの誤差が2%、不適切ラベルによる誤差が0.6%、それ以外の原因での誤差が1.4%の時、ラベルの修正は重要な問題である。</p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588498738427-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-03+18.32.53.png"><span
      class="fr-inner">誤差解析における誤ったラベルの誤認</span></span></span></p><p><br></p><p>不適切な開発/テストセットのサンプルの収集</p><ul><li>開発セットとテストセットで同じ分布になるように、開発セットとテストセットで同じプロセスを適用する</li><li>アルゴリズムが正しくなかった例と間違った例を調査する</li><li>訓練と開発/テストデータはわずかに<span
      lang="ja">別のディストリビューションからのものかもしれない</span></li></ul><p><br></p><h3>3. 初期システムの素早い構築と反復</h3><p><br></p><p>初めて新しい問題に取り組む場合、最初のシステムを過度に考えすぎたり、複雑にしすぎない。</p><p>すばやく簡単に何かを構築し、それを使用して、システムを改善する方法の優先順位付けをする。</p><p><br></p><p
      data-placeholder="翻訳" dir="ltr"><span lang="ja">以前にかなりの経験を持っているアプリケーション領域で作業している場合にはあまり適用されない。</span></p><p
      data-placeholder="翻訳" dir="ltr"><span lang="ja">しかし、同じ課題に対する学術文献や資料がある場合は、初めから複雑なシステムを構築しても問題ない。</span></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588503741574-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-03+20.01.55.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>目標が新しいアルゴリズムを作ることではなく、何かうまく機能する物を作ることである場合</p><p><br></p><p>迅速かつ汚いモデルを構築(コスト時間を無駄にしない)</p><p>&nbsp;=&gt;
      バイアス/分散の分析</p><p>=&gt; 誤差分析&nbsp;</p><p>=&gt; 分析の結果を使用して、改善すべき場所の優先順位付け</p><p><br></p><h3>4.
      異なる分布での訓練とテスト</h3><p><br></p><p>ディープラーニングは多くのデータが必要なため、色々なところからデータを集めたりするが、その結果データが開発データやテストデータと異なる分布になるかもしれない。</p><p><br></p><p>例えば、猫分類器のデータ収集で、モバイルアプリの画像(10,000)とWebページのクローリングした画像(200,000)を使用するとする。</p><p>最終的なシステムが、モバイルアプリの分布画像でうまく機能することである。</p><p>この場合、モバイルアプリの画像だけでは少ないため、Webの画像を使いたいが、モバイル画像の分布とは違う分布であるというジレンマが発生する。そこで以下のような解決策がある。</p><p><br></p><p>ただし、選択肢2を推奨</p><p><br></p><p>選択肢1:
      モバイル画像とWeb画像を全て混ぜてシャッフルし、訓練/開発/テストにランダムに割り当てる (訓練205,000 開発5,000 テスト,5000など)</p><p>利点:
      訓練、開発、テストが全て同じ分布になる</p><p>大きな欠点: 開発セットの2500データは、適応させたいモバイルアプリの画像の分布ではなく、多くがWebページの分布からの画像である</p><p>開発セットは、2500&times;(200,000/210,000)=約2381がWebページ分布のデータになり、2500-2381=119がモバイル分布の画像になる</p><p><br></p><p>選択肢2:
      訓練に、全Web画像と一部モバイル画像を適用し、開発セットとテストセットには全てモバイル画像を用いる</p><p>&nbsp;(訓練 205,000 (Webの200,000+モバイルの5000)
      開発 5000(モバイルのみ) テスト 5000(モバイルのみ))</p><p>利点: ターゲットを目的の場所(モバイルアプリでうまく機能すること)に向けることができる</p><p>欠点:
      訓練セットの分布が開発/テストの分布と異なること。(しかし、このデータの分割の仕方は長い目で見ると、良いパフォーマンスに繋がる)</p><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588510219784-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-03+21.49.47.png"><span
      class="fr-inner">データの異なる分布と対策</span></span></span></p><p><br></p><p><span style="font-size:
      24px;">車の音声作動式バックミラー</span></p><p>トレーニングでは、多くのデータを用意するために、音声起動のバックミラーからではなく、他の音声認識アプリケーションからデータを持ってくる。データの分割は以下の通り</p><p><br></p><p>訓練:
      500,000発話 (音声認識データベンダーから購入したデータ、スマートスピーカー、音声起動キーボード)</p><p>開発: 10,000 (音声作動式バックミラー)</p><p>テスト:
      10,000 (音声作動式バックミラー)</p><p>または</p><p>訓練: 510,000発話 (500,000+10,000 (購入したデータ、スマートスピーカー、音声起動キーボード)+(音声作動式バックミラー)
      )</p><p>開発: 5,000 (音声作動式バックミラー)</p><p>テスト: 5,000 (音声作動式バックミラー)</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588511759625-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-03+22.14.14.png"><span
      class="fr-inner">音声認識での異なる分布</span></span></span></p><p><br></p><h3>5. データ分布が一致しないバイアスと分散の分析</h3><p><br></p><p>訓練セットの分布が、開発/テストセットの分布と一致しないとき、訓練データの一部から、train-dev
      set &quot;訓練-開発データ&quot;を作成</p><p><br></p><p><span class="fr-img-caption fr-fic
      fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588571101601-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-04+10.11.52.png"><span
      class="fr-inner">異なる分布でのバイアスと分散</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588573541735-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-04+15.18.38.png"><span
      class="fr-inner">音声作動バックミラーによる具体例</span></span></span></p><p><br></p><h3>6.
      データのミスマッチ(不一致)への対処</h3><p><br></p><p>対処の手順</p><p>・手動で誤差分析を実行して、トレーニングと開発/テストセットの違いを理解する</p><p>(例えば、車のノイズや道路のノイズ)</p><p>・トレーニングデータを開発/テストセットに類似させる
      または 開発/テストセットに類似したデータをもっと集める　</p><p>(例えば、車内のノイズをシミュレートする)</p><p><br></p><p>人工的なデータの合成</p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588576558776-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-04+16.14.09.png"><span
      class="fr-inner">人工的なデータの合成</span></span></span></p><p><br></p><p>多くの人が考えた独特な手法の１つとして、優れたコンピュータグラフィックを備えたビデオゲームを見つけ、ゲームの画像から膨大なデータを取得する。しかし以下の問題が起きる。</p><p>ビデオゲームに20台の車の種類しかなかった時に、世界には20よりはるかに多くのデザインがあるので、合成訓練データに20台の車しかない場合ニューラルネットワークは20台の車に過学習指定しまう。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588577330468-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-04+16.21.11.png"><span
      class="fr-inner">人工的なデータ合成</span></span></span></p><p><br></p><div style="background-color:
      #FFFFCC;"><p><span style="font-size: 24px; color: rgb(184, 49, 47);">まとめ</span></p><p>データ不一致(train-devとdev/testの誤差が大きい)が起きた場合、データ不一致を理解し２つのデータの分布がどのように異なるか洞察を得るために、誤差解析や訓練データや開発セットの確認する。</p><p>次に、開発セットに少し似た訓練データを取得する方法を見つけることができるかどうかを確認する。</p><p>類似データを集める方法の１つは、人工的なデータの合成。音声認識では、音声データの合成で、認識システムのパフォーママンスが大幅に向上した。したがってこの方法はうまく機能する。</p><p>ただし、人工データ合成を使用している場合は、考えられるすべての例の空間のごく一部のデータのみを誤ってシミュレートしていないかどうかに注意が必要
      (例: ビデオゲームのグラフィック画像を合成に使った結果、ゲーム画像しか予測できなくなる)</p></div><p><br></p><p><br></p><h3>7.
      転移学習</h3><p><br></p><p>転移学習</p><p>ディープラーニングの最も強力なアイデアの１つで、ある領域で学習させたモデルを、別の領域に適応させる技術。
      具体的には、広くデータが手に入る領域で学習させたモデルを少ないデータしかない領域に適応させたり、シミュレーター環境で学習させたモデルを現実に適応させたりする技術</p><p><br></p><p>以下の例で行ったことは、画像認識から学んだ知識を取り入れて、それを放射線診断に適用または転送したこと。</p><p>これが役立つ理由は、エッジの検出、カーブの検出、ポジティブなオブジェクトの検出など、多くの低レベルの機能です。</p><p>非常に大きな画像認識データセットで事前学習してるので、さまざまな画像のどの部分がどのように見えるか、線、点、曲線などについての知識、オブジェクトの小さな部分についての知識を持っており、放射線検査は<span
      style="color: rgb(184, 49, 47);"><u>もう少し早く、より少ないデータで学習ができる</u></span>。</p><p><br></p><p>転移先のモデルにデータが少ない場合が転移学習は有効であるが、転移元のデータが少なく、転移先のデータの方が多い場合、転移学習をしても害はないが、意味のある効果も期待できない。</p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588583380344-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-04+18.00.58.png"><span
      class="fr-inner">転移学習の例</span></span></span></p><p><br></p><div style="background-color:
      #FFFFCC;"><p><span style="font-size: 24px; color: rgb(184, 49, 47);">転移学習が理にかなっている条件</span></p><p>・転移元と転移先が同じ入力xになっている</p><p>(例:
      画像分類から放射線検査の転移学習=&gt;入力が画像,&nbsp;</p><p>音声認識から<span lang="ja">ウェイクワード/トリガー検出(Hey
      Siri, OK google など)=&gt;</span>入力がオーディオ)</p><p>・転移先より転移元が多くのデータを持っている</p></div><p><br></p><h3>8.
      マルチタスク学習</h3><p>マルチタスク学習とは単一のモデルで複数の課題を解く機械学習の手法。 関連する複数の課題を同時に学習させることで、課題間の共通の要因を獲得し、課題の予測精度を向上させます。</p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588593946549-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-04+21.03.07.png"><span
      class="fr-inner">自動運転の簡素化</span></span></span></p><p>歩行者、車、一時停止標識、信号の4つのタスクを同時に行う</p><p>最初のトレーニングの例として、ラベラーが歩行者がいて車はない、と言ったが、一時停止の標識があるかどうか、または信号機があるかどうかにラベルを付けなかったとする。</p><p>一部の画像に一部のオブジェクトのみしかラベルを付けられていない場合でもマルチタスク学習は機能する。</p><p>ラベルの一部が疑問符または実際にラベル付けされていない場合でも、1から4までのjの合計では、0または1のラベルを持つjの値のみを合計する。</p><p>したがって、疑問符があるときはいつでも、その項を合計から省略し、ラベルがある値のみを合計し、これにより、このようなデータセットも使用できるようになります。</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588594720831-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-04+21.16.37.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><div style="background-color:
      #FFFFCC;"><p><span style="font-size: 24px; color: rgb(184, 49, 47);">マルチタスク学習が理にかなっているとき</span></p><p>・低レベルの特徴を共有することで課題間の共通の要因を獲得し、予測精度を向上させうる一連のタスクについてトレーニングする場合</p><p>(自動運転の例では、信号機や車、歩行者の認識には、一時停止標識の認識にも役立つ類似した特徴があることは理にかなっている。これらはすべて道路の機能であるため。)</p><p>・成功した多くのマルチタスク設定を見るに、それぞれのタスクで所有するデータ量はかなり似ていることが多い</p><p>(これは常に正しいとは限らない)</p><p>・全てのタスクで、良く機能するに十分な大きさのニューラルネットワークを訓練することができる</p></div><p><br></p><p><span
      style="font-size: 24px;">要約</span></p><p><span style="font-size: 18px;">マルチタスク学習は、多くのタスクを実行する１つのニューラルネットワークを訓練することを可能にし、独立してタスクを実行するよりも良いパフォーマンスを発揮する。</span></p><p><br></p><h3>9.
      What is end to end deep learning?</h3><p><br></p><p>複数の処理段階を必要とするデータ処理システムまたは学習システムがいくつかある。そして、エンドツーエンドのディープラーニングが行うことは、それらすべての複数の段階を実行し、通常は単一のニューラルネットワークに置き換えることができるということ。</p><p><br></p><p>音声認識の例
      入力Xがオーディオ、Yが筆記録</p><p>処理段階</p><p>1. XからMFCC(人の聴覚特性に合わせて音素を変換しスペクトル外形を表現)により特徴を抽出</p><p>2.
      抽出した低レベルの特徴から機械学習アルゴリズムを適用して、オーディオクリップ内の音素を見つける</p><p>3. 音素をつないで個々の単語を形成し、それらをつないでオーディのクリップのトランスクリプト(筆記録)を形成</p><p><br></p><p>End-to-End
      deep learning の場合 ニューラルネットワークが全て実行</p><p>オーディオ-&gt;トランスクリプト(筆記録)</p><p><br></p><p>End-to-End
      deep learningは多くのデータが必要</p><p>小さいデータセット(3000時間のオーディオデータ)でトレーニングしている時、従来のパイプラインが非常にうまく機能する</p><p>非常に大きなデータセット(例えば10,000~100,000時間)がある場合にのみ、エンドツーエンドのアプローチが非常に良く機能し始める。</p><p>中程度のデータがある場合は、音声を入力して特徴を経由し、ニューラルネットワークの音素を出力することを学習する中間的な方法もある。</p><p><br></p><p>回転式改札による例</p><p>カメラが、人が近づくのを認識したら自動で回転式改札が人を通す</p><p>アプローチは2段階</p><p>1.
      カメラの画像から、人の顔を認識して切り取り、拡大する</p><p>2. 切り取った顔から誰なのか予測する</p><p><br></p><p>なぜ2段階のアプローチを取るのか？理由は2つ</p><p>1.
      解決しているアプローチの2つは実際にかなりシンプルである</p><p>2. 2つのサブタスクのそれぞれに大量のデータがある</p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588601058697-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-04+23.01.13.png"><span
      class="fr-inner">回転式改札の顔認識</span></span></span></p><p><br></p><p><span style="font-size:
      24px;">機械翻訳</span></p><p>英語=&gt;テキスト分析=&gt;...=&gt;French</p><p>エンドツーエンドの場合
      英語=======&gt;French</p><p><br></p><p><span style="font-size: 24px;">子供の年齢予測</span></p><p>画像=&gt;骨のレントゲン=&gt;年齢</p><p>エンドツーエンドの場合
      画像==&gt;年齢</p><p><span class="fr-img-caption fr-fic fr-dib fr-fil" style="width:
      600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588601576914-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-04+23.12.37.png"><span
      class="fr-inner">エンドツーエンドのその他の例</span></span></span></p><p><br></p><p><span
      style="font-size: 24px;">要約</span></p><p>エンドツーエンドは非常にうまく機能し、システムを本当に簡素化することができ、それほど多くの手動設計された個々のアプローチを構築する必要がない。しかし、万能薬ではなく、データが不十分などの理由で常に機能するとは限りません。次の章では、いつ、エンドツーエンドのディープラーニングを使用すべきでないか、そしてこれらの複雑な機械学習システムを組み合わせる方法について、より体系的な説明を共有。</p><p><br></p><h3>10.
      end to end のアプローチを使用すべきかどうかの決定</h3><p><br></p><p><span style="font-size: 24px;">end
      to end の長所と短所</span></p><div style="background-color: #FFFFCC;"><p><span style="font-size:
      24px; color: rgb(184, 49, 47);">長所</span></p><p>・データに語らせるだけ</p><p>(ニューラルネットワークが自動で特徴を抽出し、予測を行う)</p><p>・必要なコンポーネントの手動設計が少ない</p><p>(設計ワークフローを簡略化し、多くの時間を費やして機能を設計したり、これらの中間表現を手動で設計したりする必要はない)</p><p><br></p><p><span
      style="font-size: 24px; color: rgb(41, 105, 176);">短所</span></p></div></dd><dd>・大量のデータが必要かもしれない</dd><p>・潜在的に有用な手動のワークフローを除外する</p><p>(そのため、機械学習の研究者は、手作業で物事を設計することを非難する傾向があるが、手動での設計は訓練セットが小さい場合とても役に立つ)</p></dl></dd></dl></dd><p><br></p><p><span
      style="font-size: 24px;">end to end ディープラーニングの適用</span></p><p>重要な質問: XからYへのマッピングに必要な複雑さの関数を学習するのに十分なデータがあるかどうかです。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588652653411-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-05+13.10.49.png"><span
      class="fr-inner">エンドツーエンド ディープラーニングの適用</span></span></span></p><p><br></p><dd><h2
      id="section3">本講座について</h2><hr><p>この講座では、プログラミングの実装ではなく、ディープラーニングのワークフローや、誤差の解析、データの分布が異なる時の対処法について知ることができます。この知識は、ディープラーニングーを本格実装する前に必ず知っておきたいと思う内容でした。</p><p>コースも2週間で完結しますし、技術書からは得られないような知識ばかりだったので、ぜひ興味のある人は受けてみて下さい。</p><p><a
      href="https://www.coursera.org/learn/machine-learning-projects/">https://www.coursera.org/learn/machine-learning-projects/</a></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p></dd></dl>'
    - '2020-04-29 22:03:44.419963'
    - '2020-06-20 19:27:04.988005'
  - - 229
    - Coursera Convolutional Neural Networks
    - '<h1 style="text-align: center;">Convolutional Neural Network</h1><p><br></p><nav
      class="mkj" style="border-radius: 3px; font-weight: 700; line-height: 1.4; background:
      rgb(255, 251, 244); padding: 0px; border: 2px solid rgb(248, 145, 116); margin-bottom:
      2em;"><h2 style="padding: 8px 12px; margin: -1px; background: rgb(248, 145,
      116); border: none; font-size: 18px; text-align: center; color: rgb(255, 255,
      255);"><i class="fa fa-th-list"></i> Table of Contents</h2><ol style="border-radius:
      3px;"><li><a href="#section" style="color: rgb(84, 84, 84); padding: 8px 0px;
      display: block; text-decoration: none;">1週目</a></li><li><a href="#section2"
      style="color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;">2週目</a></li><li><a href="#section3" style="color: rgb(84, 84, 84); padding:
      8px 0px; display: block; text-decoration: none;">3週目</a></li><li><a href="#section4"
      style="color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;">4週目</a></li><li><a href="#section5" style="color: rgb(84, 84, 84); padding:
      8px 0px; display: block; text-decoration: none;">本講座について</a></li></ol></nav><p><br></p><h2
      id="section">1週目</h2><hr><h3>1. コンピュータビジョン</h3><p><br></p><blockquote><p><strong>コンピュータビジョン</strong>（computer
      vision）は<strong>コンピュータ</strong>がデジタルな画像、または動画をいかによく理解できるか、ということを扱う研究分野である。 工学的には、人間の視覚システムが行うことができるタスクを自動化することを追求する分野である。(wikipedia引用)</p></blockquote><p><br></p><h4>コンピュータービジョンが面白い理由</h4><p>・コンピュータビジョンの急速な進歩により、数年前には無理だった、まったく新しいアプリケーションを表示できるようになった。</p><p>・コンピュータビジョンシステム自体を構築しなくても、コンピュータビジョンの研究コミュニティは新しいニューラルネットワークアーキテクチャとアルゴリズムを考案ことに創造的で独創的なため、他の領域への相互交流を作る刺激がある。</p><p><br></p><h4>大きな画像でのディープラーニング</h4><p>画像が大きい場合、例えば、(幅、高さ、チャンネル数)
      =&gt; (1000px, 1000px, 3)の時、入力\(x \in &nbsp;R ^{ n }\)&nbsp;</p><p>仮に一層目のユニットが1000の時、一層目の重みのパラメータは3億個になり、ニューラルネットワークを過学習から防ぐのに十分なデータを得るのが難しい。</p><p>また、メモリや計算リソースを満たすのは無理である。</p><p>そこで、畳み込み処理を実装する。</p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588676847891-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-05+19.35.57.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588676818836-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-05+20.05.18.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>[実数空間]</p><p>任意の自然数
      n に対し、実数の n組の全体からなる集合 &nbsp;\(R ^{ n }\) &nbsp;を「n-次元実数空間」(&quot;n-dimensional
      real space&quot;) と呼ぶ。\(R ^{ n }\) &nbsp;の元は、各 \(x _{ i }\) を実数として\(x =(x_{1},x_{2},\ldots
      ,x_{n})\)と書かれる</p><p>各 <span lang="en">n</span> に対して数空間\(R ^{ n }\) は<strong>ただ一つ</strong>存在する
      (wikipedia引用)</p><p><br></p><h3>2. エッジ検出の例</h3><p><br></p><p>画像の中にあるエッジをどの用意検出するか</p><p>物体検出が最初に行うことは、画像の垂直または水平のエッジを検出</p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588717747864-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-06+7.28.47.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><br></p><p>垂直のエッジを検出</p><p>(幅,高さ,チャンネル)=(6px,6px,1)のグレースケールの画像を(幅,高さ)=(3,3)のフィルター(研究論文ではカーネルと呼ぶ)で畳み込む</p><p>畳み込みは＊を用いるが、pythonではかけ算を意味するので、意味の違いに注意</p><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588719845887-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-06+8.03.37.png"><span
      class="fr-inner">画像の畳み込み</span></span></span></p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1588720374476-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-06+8.10.24.png"><span
      class="fr-inner">畳み込みによる垂直エッジ検出</span></span></span></p><p>上記画像では垂直エッジが太く感じるが、フィルターをする画像のサイズを大きくすれば、エッジの太さは変わらないので細く見える。</p><p><br></p><p><br></p><h3>3.
      より多くのエッジ検出</h3><p><br></p><p><span class="fr-img-caption fr-fic fr-dib fr-fil"
      style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589014326496-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-09+17.50.21.png"><span
      class="fr-inner">垂直エッジ検出の例</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589015026459-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-09+18.03.19.png"><span
      class="fr-inner">垂直エッジと水平エッジの検出</span></span></span></p><p><br></p><p>エッジ検出フィルターの数字の組み合わせは色々なものがある。</p><p>ソーベルフィルター
      (Sobel filter)、シャーフィルター (Scharr filter)</p><p>垂直エッジフィルターを90度回転させれば水平エッジフィルターになる</p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589024751778-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-09+18.14.04.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><br></p><h3>4.
      パディング&nbsp;</h3><p><br></p><p>幅&times;高さが6&times;6の画像を3&times;3のフィルターで畳み込むと4&times;4の画像になった。</p><p>しかし、畳み込みには2つの欠点がある。</p><ol><li><span
      style="font-size: 18px;">畳み込みを行うたびに、画像が小さくなる</span></li><li><span style="font-size:
      18px;">角にあるピクセルは出力に一度しか使われない (逆に内部はオーバーラップしている)</span></li></ol><p><br></p><p>1に関して、100層のニューラルネットワークの場合、各層の出力で画像が縮み、100層後には非常に小さな画像になってしまう。</p><p>2に関して、画像の端にある多くの情報を捨ててしまうこと。</p><p><br></p><p><span
      style="color: rgb(184, 49, 47);"><u>この２つを解決する方法がパディング</u></span></p><p><br></p><p>画像に追加の枠を充てることで、出力画像のサイズを調整することができる。パディング
      は通常0で埋める。</p><p>幅&times;高さが6&times;6の画像を3&times;3のフィルターで畳み込むと4&times;4の画像に縮むが、畳み込む前に入力画像にパディング
      1を適用することで、8&times;8の画像にフィルターを適用することになり、出力は6&times;6になり、入力と同じサイズを保持できる。また、角の情報も内部同様オーバーラップした計算を適用できる。</p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589026782946-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-09+21.14.08.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><span style="font-size:
      18px;">Valid Convolution and Same Convolution</span></p><div style="background-color:
      #FFFFCC;"><p><span style="font-size: 18px;">Valid Convolution:</span></p><p>&nbsp;パディングなし
      入力(n&times;n) ＊ フィルター(f&times;f) =&gt; 出力((n-f+1)&times;(n-f+1))</p><p>例: 6&times;6
      ＊ 3&times;3 =&gt; 4&times;4</p></div><p><br></p><div style="background-color:
      #FFFFCC;"><p><span style="font-size: 18px;">Same Convolution:</span></p><p>出力のサイズが入力と同じになるようにパディング&nbsp;</p><p>パディング後
      ((n+2p)&times;(n+2p)) ＊ フィルター(f&times;f) &nbsp;=&gt; 出力((n+2p-f+1)&times;(n+2p-f+1))&nbsp;</p><p>出力が入力と同じサイズになるようにパディングするので、n+2p-f+1=nを満たすようにパディングpを決める</p><p>つまり、p=\(
      \dfrac{ f-1 }{ 2 } \) (fは基本奇数)</p><p>例: (6+2･1)&times;(6+2･1) ＊ 3&times;3 =&gt;
      6&times;6</p></div><p><span class="fr-img-caption fr-fic fr-dib fr-fil" style="width:
      600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589029078785-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-09+21.57.37.png"><span
      class="fr-inner">Valid Convolution and Same Convolution</span></span></span></p><p><br></p><h3>5.
      ストライド</h3><p><br></p><p>フィルタをずらしていく幅</p><p>7&times;7の画像を3&times;3フィルターで畳み込む
      ストライド=2の時、出力3&times;3</p><p><br></p><p>パディング pの時、入力(n&times;n) ＊ フィルター(f&times;f)
      =&gt; 出力(( \( \dfrac{ n+2p-f }{ s } +1 \) )&times;( \( \dfrac{ n+2p-f }{ s }
      +1 \) ))</p><p>出力のサイズが分数となるときは、小数部分を切り捨てて、もっとも近い整数にする(floor)</p><p><br></p><p>ストライドは、画像からはみ出さない範囲でずらしていき、角まで綺麗にずらさない場合は計算しない。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589030834841-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-09+22.22.14.png"><span
      class="fr-inner">ストライドされた畳み込み</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589031114240-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-09+22.29.07.png"><span
      class="fr-inner">畳み込みのまとめ</span></span></span></p><p><br></p><p><span style="font-size:
      24px;">技術的注意事項</span></p><p>畳み込みニューラルネットワークを実装するための技術に相互相関がある。</p><p>フィルターを水平軸と鉛直軸でひっくり返す。</p><p><br></p><p><br></p><p>技術的には、相互相関
      (cross-correlation)というが、ディープラーニングの文献では単に畳み込み処理と呼ぶ。</p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589101610683-cross_correlation.png"><span
      class="fr-inner">相互相関と畳み込みに関する技術メモ</span></span></span></p><p><br></p><h3>6.
      RGB画像における畳み込み</h3><p><br></p><p><br></p><p>グレースケールではなく、有色(RGBが設定された)画像の場合、入力画像の3次元目(チャンネル数)とフィルターの3次元目は同じ数でんければならない</p><p>例:
      高さ&times;幅&times;チャンネル数=6&times;6&times;3 の画像</p><p>\( 6&times;6&times; \dot{
      3 } \ast &nbsp;3&times;3&times; \dot{ 3 }=4&times;4 \)</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589100029871-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-10+17.27.43.png"><span
      class="fr-inner">convolutions in RGB image</span></span></span></p><p><br></p><p>垂直エッジだけでなく、水平エッジや30度エッジなど、複数のフィルターを使いたいとき</p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589100937026-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-10+17.49.19.png"><span
      class="fr-inner">複数のフィルター</span></span></span></p><p>チャンネル数は文献では、3Dボリュームの深さと表現されたりもする</p><p><br></p><h3>7.
      畳み込みニューラルネットワークの１層</h3><p><br></p><p><span class="fr-img-caption fr-fic fr-dib
      fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589102368783-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-10+18.17.25.png"><span
      class="fr-inner">畳み込みニューラルネットワークの一層目</span></span></span></p><p><br></p><p>畳み込みニューラルネットワークのパラメータは、フィルターのサイズや次元で決まるので、入力画像がどれだけ大きかろうと、パラメータ数は固定で比較的小さい数になる。</p><p>これにより、大きい画像でも訓練ができ、過学習しにくいという特徴もある。</p><p>例:
      3&times;3&times;3のフィルターを10個用いる場合のパラメータ数は?&nbsp;</p><p>各フィルターは3&times;3&times;3=27でバイアスを合わせることにより合計28このパラメータを有する。合計10個なので、パラメータ数は280個</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589102958708-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-10+18.28.52.png"><span
      class="fr-inner">一層目におけるパラメータ数</span></span></span></p><p><span style="font-size:
      24px;">畳み込みにおける表現</span></p><p>ただし、高さ&times;幅&times;チャンネル数は、チャンネル数&times;高さ&times;幅のように、チャンネル数を最初に持ってくることもあれば、最後に持ってくることもあり、規約は統一されていないので、文献によって順番が異なることもある。</p><p><br></p><div
      style="background-color: #FFFFCC;"><p><span style="font-size: 18px;">l層目が畳み込み層の時:</span></p><p>・\(
      f ^{ [l] } \) = l層目のフィルターのサイズ</p><p>・\( p ^{ [l] } \) l層目のパディング&nbsp;</p><p>・\(
      s ^{ [l] } \) l層目のストライド</p><p>・\(n ^{ [l] } _{ C }\) l層目のフィルターの数</p><p>・各フィルターは
      \(f ^{ [l] }\)&times;\(f ^{ [l] }\)&times;\(n ^{ [l-1] } _{ C }\)</p><p>・活性化
      &nbsp;\(a ^{ [l] }\) -&gt; &nbsp;\(n ^{ [l] } _{ H } \) &times; \(n ^{ [l] }
      _{ W } \) &times; \(n ^{ [l] } _{ C }\)</p><p>(ミニバッチ数mの時 \(A ^{ [l] }\) -&gt;
      &nbsp;m&times;\(n ^{ [l] } _{ H } \) &times; \(n ^{ [l] } _{ W } \) &times;
      \(n ^{ [l] } _{ C }\))</p><p>・重み 各フィルター&times;フィルター数 = \(f ^{ [l] }\)&times;\(f
      ^{ [l] }\)&times;\(n ^{ [l-1] } _{ C }\) &times; \(n ^{ [l] } _{ C }\)</p><p>・バイアス
      \(n ^{ [l] } _{ C }\) =&gt; 実際は4次元行列でshape=(1, 1, 1, \(n ^{ [l] } _{ C }\))</p><p><br></p><p>・入力:
      \(n ^{ [l-1] } _{ H } \) &times; \(n ^{ [l-1] } _{ W } \) &times; \(n ^{ [l-1]
      } _{ C }\)</p><p>・出力: \(n ^{ [l] } _{ H } \) &times; \(n ^{ [l] } _{ W } \)
      &times; \(n ^{ [l] } _{ C }\)</p><p>・\(n ^{ [l] } _{ H } = \frac{ n ^{ [l-1]
      } _{ H }+2p^{ [l] }-f^{ [l] } &nbsp;}{ s ^{ [l] } } &nbsp;+1\) (ただし、小数点以下は切り捨て)</p><p>・\(n
      ^{ [l] } _{ W } = \frac{ n ^{ [l-1] } _{ W }+2p^{ [l] }-f^{ [l] } &nbsp;}{ s
      ^{ [l] } } &nbsp;+1\) (ただし、小数点以下は切り捨て)</p><p><br></p></div><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589105885549-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-10+19.17.44.png"><span
      class="fr-inner">畳み込みにおける表記のまとめ</span></span></span></p><p><br></p><h3>7. 単純な畳み込みニューラルネットワークの例</h3><p>畳み込みニューラルネットワーク(Convolutionaal
      Neural Network) を略してConvNetという</p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589156372777-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-11+9.16.50.png"><span
      class="fr-inner">ConvNetの例</span></span></span></p><p>畳み込みニューラルネットワークには３つの種類の層がある</p><ul><li>Convolution
      (CONV)</li><li>Pooling &nbsp;(POOL)</li><li>Fully connected (FC)</li></ul><p>日本語では、畳み込み層、プーリング層、全結合層という言い方をする。</p><p><br></p><h3>8.
      プーリング層</h3><p>&nbsp;convNetは計算を早くして抽出される特徴量を少し堅牢にするために、しばしばプーリング層を使い、表現のサイズを減らす。</p><p><br></p><h4>・最大プーリング</h4><p>最大プーリング:
      分割した領域ごとの最大のピクセルを選択 フィルターの中の特徴が高い数を取っておく</p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589243355531-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-12+9.27.05.png"><span
      class="fr-inner">最大プーリングの例1</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589244013937-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-12+9.30.35.png"><span
      class="fr-inner">最大プーリングの例2</span></span></span></p><p><br></p><h4>・平均プーリング</h4><p>平均プーリング:
      分割した領域ごとの平均のピクセルをとる</p><p>最大プーリングが大変多く使われるため、平均プーリングはあまり使わない。非常に深いニューラルネットワークで、表現を崩すために平均プーリングを使うことがある。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589244461005-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-12+9.46.30.png"><span
      class="fr-inner">平均プーリング 例1</span></span></span></p><p><span style="font-size:
      18px;">プーリングのまとめ:</span></p><p>最大プーリンングまたは平均プーリング</p><p>ハイパーパラメータ:</p><ul><li>&nbsp;f=2,s=2が非常に使われる
      (高さと幅を因数となる2で縮める効果がある)</li><li>&nbsp;f=3, f=2も目にすることがある</li><li>&nbsp;p=0が一般的</li></ul><p>f:
      フィルターのサイズ</p><p>s: ストライド</p><p>ハイパーパラメータのみで、学習するパラメータはない</p><p>ハイパーパラメータは手動や、交差検証で設定する</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589245014361-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-12+9.56.43.png"><span
      class="fr-inner">　プーリングのまとめ</span></span></span></p><p><br></p><h3>9. CNNの例</h3><p><br></p><p>文献によっては、畳み込み層とプーリング層をセットで一層とカウントするものもあれば、それぞれを別の層とカウントしたりする。</p><p>講師のAndrewさんは、層を数える時、重み(フィルターの行列)を持つ層を数えるので、畳み込み層とプーリング層をセットで1層とカウントする。(プーリング層は、手動で設定するハイパーパラメータのみ)</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589330330617-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-13+9.37.39.png"><span
      class="fr-inner">CNNの例1</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589502954310-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-13+9.42.35.png"><span
      class="fr-inner">CNNの例2</span></span></span></p><p>全結合層では、各ニューロンにバイアスが１つある。</p><p>上記画像ではFC3(全結合層3)では120個のニューロンがあるため、120個のバイアスがある。</p><p><br></p><h3>10.
      Why Convolutions?</h3><p><br></p><p>なぜ畳み込みをニューラルネットワークに組み込むことが有効なのか？</p><h4>主な利点は2つ</h4><ul><li>パラメータの共有化</li><li>結合のスパース化</li></ul><p><br></p><h4>共有化による利点</h4><p>パラメータの総数を減らし、過学習をしにくくする</p><p>特徴検出器を入力画像全体の複数の場所で使用できる
      (入力画像全体で、どのピクセルを出力する場合でも同じパラメータを扱うことができる)</p><p><br></p><h4>結合のスパース化による利点</h4><p>次のレイヤーの各アクティベーションは、前のレイヤーの少範囲のアクティベーションにのみ依存する</p><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589602654390-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-15+9.49.46.png"
      style="width: 600px;"><span class="fr-inner">CNNのパラメータ比較</span></span></span></p><p><br></p><h4>CNNのパラメータが少ない理由は２つ</h4><p><span
      style="font-size: 18px;">・パラメータ共有</span></p><p>畳み込みは、ストライドでずらしながら同じパラメータを入力画像の多くの異なる位置で使用する。</p><p><br></p><p><span
      style="font-size: 18px;">・結合のスパース化(疎)</span></p><p>入力画像をフィルターで畳み込みする時、出力の各ピクセルは、フィルターの適用範囲のみに依存し、範囲外のピクセルの影響を受けない。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589601704837-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-16+12.42.29.png"><span
      class="fr-inner">CNNのパラメータが比較的少ない理由</span></span></span></p><p><br></p><p>CNNは並進不変性を得るのに非常に良い</p><p>並進不変性とは例えば、猫の絵を少し並進移動しても、それはまだ猫の絵として認識できる性質のこと。</p><p>参考記事</p><p><a
      href="https://qastack.jp/stats/208936/what-is-translation-invariance-in-computer-vision-and-convolutional-neural-netwo">https://qastack.jp/stats/208936/what-is-translation-invariance-in-computer-vision-and-convolutional-neural-netwo</a></p><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1589601920171-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-16+13.05.04.png"><span
      class="fr-inner">CNNの学習</span></span></span></p><h3><br></h3><h2><span style="color:
      rgb(184, 49, 47);">補足</span></h2><p>講義では、CNNの誤差逆伝播の話が出てこなかったが、課題では逆伝播の内容も出題されていた。</p><p>CNNの逆伝播は非常に記事が少なく、難しい式だけで説明が終わっているものがほとんど。</p><p>以下は筆者が自主的に調べて例を例をあげたものである。</p><p>なお、講義では説明のない部分であるため、別にスキップしても構わない。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px; height: 350px;"><span
      class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590216937718-maxpooling_image.jpg"
      style="width: 600px; height: 350px;"><span class="fr-inner">最大プーリングの順伝播と逆伝播</span></span></span></p><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px; height: 350px;"><span
      class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590217096580-avg_pooling_image.jpg"
      style="width: 600px; height: 350px;"><span class="fr-inner">平均プーリングの順伝播と逆伝播</span></span></span></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590219539543-conv_image.jpg"
      style="width: 600px; height: 350px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><br></p><p><br></p><h2
      id="section2">2週目</h2><hr><h3>1. 古典的なネットワーク</h3><p><strong>＊古典の意味</strong><strong>:&nbsp;</strong>古い書物、形式。
      また、長く時代を超えて規範とすべきもの</p><p><br></p><p><span style="font-size: 18px;">古典的なネットワーク</span></p><ul><li>LeNet-5</li><li>AlexNet</li><li>VGG</li></ul><p><br></p><p>ResNet
      (152層)</p><p>Inception</p><p><br></p><h4>LeNet-5</h4><p>・1998年にYann LeCunさんが発表した</p><p>・グレースケールで学習する
      (Lenet-5は手書き文字の認識のために作られたため)</p><p>・畳み込みを行うたびに画像が縮んだ (当時は、パディング の概念がなく、まだValid
      Convolutionのみの時代であった)</p><p>・層が進むに従って画像の幅、高さが縮む一方で、チャンネル数は増加する</p><p>・1つ以上の畳み込み層を置き、次にプーリング層を置く。そして、1つ以上の全結合層を置き、出力を得る
      (今日でも非常に良く使われるパターン)</p><p>・2020年現在は、出力層でソフトマックス関数を使うが、当時は出力層に異なる分類器を使っていた (今日では役に立たないもの)</p><p>・約6万個のパラメータを持っている
      (今日では1千万から1億のパラメータを持つこともしばしばなので、それほど多くはない)</p><p><br></p><p><span style="color:
      rgb(163, 143, 132);">発展:&nbsp;</span></p><p><span style="color: rgb(163, 143,
      132);">・sigmoidとtanhで非線形化していた (当時はReLuは使っていなかった)</span></p><p><span style="color:
      rgb(163, 143, 132);">・プーリング層の後に非線形化していた</span></p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590020689896-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-21+9.22.44.png"><span
      class="fr-inner">古典的なネットワーク LeNet-5</span></span></span></p><p><br></p><p><br></p><h4>AlexNet</h4><p><br></p><p>・コンピュータビジョン界で衝撃を与え、ディープラーニングが真剣に使えると人々を信じさせたきっかけの論文</p><p>・LeNet-5と似ているが、はるかに大きなネットワーク</p><p>・6千万個のパラメータがある</p><p><span
      style="color: rgb(163, 143, 132);">・複数のGPU</span></p><p><span style="color:
      rgb(163, 143, 132);">・局所応答正規化 (目的は、非常に高く活性化するニューロンを数多くは欲しくないから)</span></p><p>(例えば、２層目のプーリング層の出力は高さ、幅、チャンネル=13&times;13&times;256であるが、局所応答正規化
      をするときは、13&times;13の画像の各場所で、1&times;1&times;256のブロックごとに256個を正規化する)</p><p><br></p><p><span
      style="color: rgb(163, 143, 132);">局所応答正規化は、あとで多くの研究者によってそれほど助けにはならないことがわかった。つまり、今日では必要ない。</span></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590022168228-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-21+9.48.20.png"><span
      class="fr-inner">古典的なネットワーク AlexNet</span></span></span></p><p><br></p><h4>VGG-16</h4><p>・VGG-16の16は、重みを持つ層が16個あることに由来する</p><p>・1億3千8百万個のパラメータを持つ
      (現在の基準から見てもかなり多い)</p><p>・多くのハイパーパラメータを持つ代わりに、ストライドが3 x 3のフィルターであるconv-layersのみを使用することに重点を置いた、はるかに単純なネットワークを使用</p><p>・使用する畳み込みは全てConv=3&times;3フィルター,
      s=1, same convolution、使用するプーリングは全て最大プーリング MAX-POOL=2&times;2, s=2</p><p>・良いところは、ニューラルネットワークの構造を単純にすること</p><p>・欠点は非常に多くのパラメータを持つとても大きなニューラルネットワークを学習させなければならないこと</p><p>・畳み込みを行うたびにチャンネル数を倍にする
      (64-&gt;128-&gt;256-&gt;512 ただし、512は十分に大きいので、著者は512からさらに増やすことはしなかった)</p><p><br></p><p>文献では時々、VGG-19を目にする。VGG-16とほとんど同じだが、サイズが少し大きい。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590212871539-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-23+14.45.22.png"><span
      class="fr-inner">古典的なネットワーク VGG-16</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590213350426-classic_network_vgg16.png"><span
      class="fr-inner">&nbsp;VGG-16 モデルイメージ</span></span></span></p><p><br></p><p>プーリング層は学習するパラメータが存在しないので、層にはカウントしない。</p><p>VGG-16は16層からなる。</p><p><br></p><h3>2.
      ResNet</h3><p><br></p><p>ResNetは残差(Ressidual)ブロックを使うことで、より深いネットワークの学習を可能にする</p><p>ResNetは、スキップコネクションのおかげで、深い層でも学習が可能</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590222498211-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-23+17.24.50.png"><span
      class="fr-inner">ResNet (Redidual Neural Network)</span></span></span></p><p><br></p><p><span
      style="font-size: 18px;">・スキップコネクションによる残差ブロックがない、標準的なニューラルネットワークの場合</span></p><p><span
      style="background-color: rgb(247, 218, 100);">層が深くなるほど、訓練誤差はしばらく減った後に、また増え始める傾向がある</span></p><p>理論的には、層が増えれば増えるほど学習セットに対してどんどん良くなっていくはずだが、実際は、深い標準的なネットワーク(ResNetでない)では最適化アルゴリズムによる学習は難しく、あまり深すぎると学習誤差は増加する。</p><p><br></p><p><span
      style="font-size: 18px;">・ResNetの場合</span></p><p><span style="background-color:
      rgb(247, 218, 100);">層が深くなるほど、訓練誤差はしばらく減った後に、平らになる。</span></p><p>とても深いネットワークの学習を助ける。</p><p>層が深くなっても(たとえ、100層で訓練したとしても)、訓練誤差を下げ続けるような性能を得ることができる。</p><p><br></p><p><br></p><h3>3.
      ResNetが深い層でも性能を損なわない理由</h3><p><br></p><p>ResNetは層を深くしても、少なくとも訓練セットでは性能を損なわない。</p><p>スキップコネクションにより、重みやバイアスが0になると、
      &nbsp;\(a ^{ [l+2] } = &nbsp;g(z^{ [l+2] }+a^{ [l] }) = g(w^{ [l+2] }a^{ [l+1]
      }+b^{ [l+2] }+a^{ [l] }) = g(a^{ [l] })= a^{ [l] } \)となるため、残差ブロックは恒等関数を容易に学習する</p><p>これが意味することは、l+1,
      l+2層目の2層をニューラルネットワークに加えることは、ニューラルネットワークの性能を一切損ねない。</p><p><br></p><p>残差がないニューラルネットワークでは、層を深くしていくと、パラメータを選択するのが難しくなる。(恒等関数を学習することさえも難しい)</p><p><br></p><p>・ResNetがうまく機能する一番の理由は、間の2層が容易に恒等関数を学ぶので、性能を損ねないよいう保証があるため。</p><p>・l層目とl+2層目は次元を同じにする
      \(g(z^{ [l+2] }+a^{ [l] })\)を計算可能にするため</p><p>\(z^{ [l+2]}\)の次元が256、\(a^{ [l]}\)の次元が128の時、次元を揃える手段は２つ(どちらもうまくいく)</p><p>1.
      &nbsp; \(R ^{ 256&times;128 }\)の変数\(w _{s}\)を\(a ^{l}\)に掛けて、256次元にする (\(w _{s}\)を学習可能なパラメータにする)</p><p>2.
      \(a _{l}\)をゼロパディングして次元を256に合わせる</p><p><br></p><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590226966986-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-23+18.41.32.png"><span
      class="fr-inner">ResNetが深い層でも訓練誤差が増えない理由</span></span></span></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590413070998-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-25+22.22.02.png"><span
      class="fr-inner">ResNet vs plain network</span></span></span></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590230014341-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-23+19.31.15.png"><span
      class="fr-inner">ResNet</span></span></span></p><p>[He et at., 2015 Deep Residual
      Networks for image recognization]</p><p><br></p><h3>4. 1&times;1の畳み込み</h3><p><br></p><h4>1&times;1の畳み込みを使う理由</h4><p><br></p><p>入力が6&times;6&times;1の場合、フィルター1&times;1、値2で畳み込むと、単にピクセルを2倍するだけでは...チャンネル数が1だったから意味がない。</p><p><br></p><p>入力が6&times;6&times;32の場合、フィルター1&times;1&times;32を使って畳み込むと、ニューロン32個を使って、ピクセルを出力するのと同じ。</p><p>出力は6&times;6&times;&lt;フィルター数&gt;になる。フィルターの数を調整することによって、出力のチャンネル数を減らしたり、増やしたり、一定に保ったりできる。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590232409631-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-23+20.12.44.png"><span
      class="fr-inner">1&times;1畳み込みの役割</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590232825358-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-23+20.20.10.png"><span
      class="fr-inner">1&times;1畳み込みの使用</span></span></span></p><p><br></p><h3>5.
      1&times;1の畳み込み</h3><p><br></p><p>畳み込み層を設計する時、以下を選ばなければならない。</p><p>フィルターのサイズをどうするか？
      (1&times;3、3&times;3、5&times;5など)</p><p>プーリング層を入れたいか？</p><p><br></p><p><span
      style="color: rgb(184, 49, 47); font-size: 18px;">Inceptionネットワークは全てできる。</span></p><p>全てを行い、全ての出力をチャンネル数を軸として結合する。ただし、出力画像の幅、高さを同じにする</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590240367370-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-23+22.25.46.png"><span
      class="fr-inner">inception network</span></span></span></p><p><br></p><p>しかし、コストを計算するときに、計算量が膨大になる。</p><p>以下のスライドでは、コストの計算の際にかけ算を行う回数が1億2千万回に相当する</p><p>現在のコンピュータなら実行できるが、それでも高くつく。</p><p>そこで...<span
      style="font-size: 18px;">1&times;1のフィルターを挟み、サイズを縮小させる。</span></p><p>今回のケースでは、計算コストを1/10ぐらいまで減らすことができる。</p><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590241018003-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-23+22.36.33.png"><span
      class="fr-inner">inception netowork コストの問題</span></span></span></p><p><br></p><p>1&times;1フィルターを中間層として挟むことで、ボリュームを縮小させてコストの計算量を減らす。</p><p>挟む1&times;1フィルターをボトルネック層と呼ぶ。(ボトルネックとは通常何か一番小さい部分を表す)</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590242317802-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-23+22.55.37.png"><span
      class="fr-inner">1&times;1畳み込みの使用 (ボトルネック層の挿入)</span></span></span></p><div><br></div><p>表現のサイズを劇的に縮めてネットワークの性能を損ねないのか？</p><p><br></p><p><span
      style="color: rgb(184, 49, 47);"><u><span style="font-size: 18px;">コストの計算量を減らす目的においては、ボトルネック層を実装する限りにおいては、表現のサイズを極端に減らすことができ、性能を損ねないことがわかっている。</span></u></span></p><p><br></p><p><span
      style="font-size: 24px;">まとめ</span></p><div style="background: rgb(255, 255,
      224);"><span style="font-size: 18px;">・CNNでは、フィルターのサイズやプーリング層を使うかは決める必要はない。</span></div><div
      style="background: rgb(255, 255, 224);"><span style="font-size: 18px;">・Inceptionモジュールがそれらを全て実行し、結果をチャンネル数の次元に結合してくれる。</span></div><div
      style="background: rgb(255, 255, 224);"><span style="font-size: 18px;">・計算を減らす目的においては、ボトルネック層を挟むことは、計算量を極端に減らし、性能を損なわない。</span></div><p><br></p><p><br></p><h3>5.
      Inception Network</h3><p><br></p><p><span class="fr-img-caption fr-fic fr-dib
      fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590277547175-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-24+8.45.16.png"><span
      class="fr-inner">Inception moduleの一例</span></span></span></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 898px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590298475823-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-24+13.57.22.png"><span
      class="fr-inner">GoogLenet</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib" style="width: 898px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590297060352-googlenet_image.jpg"><span
      class="fr-inner">解像度</span></span></span></p><p><br></p><p>[論文]<a href="https://static.googleusercontent.com/media/research.google.com/ja//pubs/archive/43022.pdf">&nbsp;Going
      Deeper with Convolutions</a></p><p><br></p><h4>GoogLenet</h4><div style="background:
      rgb(255, 255, 224);"><p>GoogLeNet (<a href="https://axa.biopapyrus.jp/#ref_googlenet">Szegedy
      et al., 2014</a>) は、VGGNet とは独立に開発されたアーキテクチャであり、2014 年の画像分類チャレンジコンテスト ISLVRC-2014
      で 1 位を獲得した。GoogLeNet のアーキテクチャは、AlexNet、ZFnet などの既存のアーキテクチャとは大きく異なり、<a href="https://axa.biopapyrus.jp/deep-learning/cnn/1x1_convolution.html">1&times;1
      Convolution</a>、global average pooling (<a href="https://axa.biopapyrus.jp/#ref_nn">Lin
      et al., 2014</a>)、および Inception モジュールなどの技術が新たに導入された。GoogLeNet は、この Inception
      モジュールを取り入れたことで、層を深くすることができるようになり、全体で 22 層で構成されている。</p></div><p><br></p><h4>Inception
      モジュール</h4><div style="background: rgb(255, 255, 224);"><p>これまでのアーキテクチャは、畳み込み層を順列に繋げていた。このため、畳み込み層が深くなるにつれ、画像サイズが小さくなっていき、層を深くすることができなかった。これに対して、GoogLeNet
      では、1 つの入力画像に対して、複数の畳み込み層（1&times;1, 3&times;3, 5&times;5）を並列に適用し、それぞれの畳み込み計算の結果を最後に連結している。この一連の作業をモジュールとしてまとめられ、Inception
      モジュールと呼ばれている。Inception モジュールを多数使うことで、パラメーターが膨大な数になる。そこで、GoogLeNet では、各畳み込み計算を行う前に
      1&times;1 Convolution を行い、パラメーター数を削減している。</p></div><p><br></p><p><br></p><p>Figure
      2 (a) は Inception モジュールの基本構造を示している。Figure 2 (b) は 1&times;1 Convolution を組み込んだ
      Inception モジュールの構造を示している。</p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590297789205-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-24+14.22.56.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><h4>global
      average pooling</h4><div style="background: rgb(255, 255, 224);"><p>従来の画像分類アーキテクチャでは、最後の層に全結合層が用いられている。全結合層では、層間のパーセプトロンが互いにすべて結合している。そのため、パラメーター数が多く、過学習を起こしやすいことが知られていた。そこで、GoogLeNet
      では、最後の層で全結合層の代わりに、global average pooling とよばれる技術を取り入れている。</p><p>GoogLeNet では、最後の畳み込み層において、チャンネル数をクラス数と同じになるように畳み込み計算を行っている。例えば、100
      クラスの分類問題では、最後の畳み込み層で、100 チャンネルのとなるようにする。続いて、各チャンネルに対して、画素平均を計算し、最終的にはチャンネル数分の要素を持ったベクトルが得られる。このベクトルに対してソフトマックス関数を適用することで、クラスの分類結果が得られるようになる。</p></div><p><br></p><h4>Inception
      v1/v2/v3/v4</h4><div style="background: rgb(255, 255, 224);"><p>GoogLeNet にはいくつかのバリエーションが存在する。ISLVRC-2014
      で優勝した最初に発表されたバリエーションは Inception v1 と呼ばれている。その後、Inception モジュールに含まれている畳み込みフィルターのサイズを変更した
      Inception v2、そして Inception v2 に対してさらに改良を加えた Inception v3 が開発された（<a href="https://axa.biopapyrus.jp/#ref_inceptionv2">Szegedy
      et al., 2015</a>）。さらに、その後も改良が行われ、Inception v4 や ResNet を取り込んだ Inception-ResNet
      が開発された（<a href="https://axa.biopapyrus.jp/#ref_inceptionv4">Szegedy et al.,
      2016</a>）。</p></div><p><br></p><p><br></p><h3>6. オープンソースで実装</h3><p><br></p><p>他の人が公開したものを、論文を読むだけで真似るのが難しいことがある。</p><p>幸運なことに、ディープラーニング研究者たちは日常的に自分たちの仕事をGithubなどでインターネットにアップしている</p><p>自分のコードも同じように、オープンソースコミュニティに貢献し返すことをお勧めする。</p><p><br></p><p>研究論文を見て、結果の上に自分で何かを作りたいときにやった方が良いこと</p><p>・オープンソースの実装をオンラインで探す</p><p>理由:
      作者の実装を入手できれば、ゼロから実装するより非常に早く開発を進められる。</p><p>(しかし、ゼロから作る場合は良い練習にもなる)</p><p><br></p><p>オープンソースを使うことの利点の１つは、必要なネットワークは時折長時間の学習が必要で複数のGPUととても大きなデータセットを使っていくつかのネットワークは訓練されているかもしれないということ。これにより、転移学習(transfer
      learning)が行える。</p><p><br></p><p>オープンソースコードを利用することで、新しいプロジェクトを始めるのがより良くなり、速くなる。</p><p><br></p><h3>6.
      Transfer Learning</h3><p>時折、ニューラルネットワークの訓練は数週間かかったり、とても多くのGPUを使用したりする。</p><p><br></p><p><span
      style="color: rgb(243, 121, 52);"><span style="font-size: 18px;">例えば、猫画像の分類器(Tiger,
      Misty, Others)を作成したいがデータが少ない場合どうしたら良いか？</span></span></p><p>いくつかのオープンソースで実装されたニューラルネットワークをダウンロードすることを推奨。コードだけではなく、重みもダウンロードする。</p><p><br></p><p>ImageNetデータセットには1000個の異なるクラスがあって、ネットワークはソフトマックスで1000の内の1つを出力するだろう。</p><p>できるのは最後の出力層を取り除き、Tiger,
      Misty, Othersを出力する自分のソフトマックスユニットを作る。</p><p><br></p><p>ネットワークの方は、出力層以外は固定されたものと考えると良い。つまり、<strong>隠れ層のパラメータを固定し、ソフトマックスに関係する出力層のパラメータのみを訓練する。</strong></p><p><br></p><p>他の誰かの無料の学習済み重みを使うことで、小さなデータセットでも良い性能を実現できる。</p><p><br></p><p>ほとんどのフレームワークでは異なるやり方で、特定の層の重みの訓練可否を指定できる。</p><p><br></p><p>計算を助ける1ステップは、訓練セットの全てのサンプルを使い、固定した層の活性を事前計算してディスクに一旦保存し、それらを使ってソフトマックス識別器だけ訓練を行う。</p><p>ディスクに保存する理由:
      毎回訓練セットの活性を再計算する手間を省ける。(エポックのたびに訓練セットを通さなくて良い)</p><p><br></p><p><span style="font-size:
      18px; color: rgb(243, 121, 52);">データセットが多少はある場合は？</span></p><p>TigerとMistyの画像をたくさん持っているかもしれない。そのような場合、以下の２つの方法があり、どちらもやってみる価値がある。</p><p><strong>より少ない層を固定する</strong>
      (出力層だけでなく、隠れ層の終わりの方の何層かも訓練する)</p><p>もしくは</p><p><strong>隠れ層の終わりの方の何層かを消してしまい、自分自身の新しい隠れ層を作成する</strong></p><p><br></p><p><span
      style="color: rgb(243, 121, 52); font-size: 18px;">データセットがたくさんある場合？</span></p><p>オープンソースのネットワークと重みを全て初期化だけに使い、ネットワーク全体を訓練する。</p><p>ただし、何度も言うが、1000のソフトマックスだった場合は、3のソフトマックスが必要だから、出力ラベルを自分の扱うものに変更し、自分のソフトマックス出力が必要。</p><p><br></p><h3>7.
      Data Augmentation (データ拡張)</h3><p><br></p><h4>よく使われるデータ拡張</h4><p>赤字のものは非常によく使われる</p><div
      style="background-color: #FFFFCC;"><p><span style="font-size: 18px;">・<span
      style="color: rgb(184, 49, 47);">Mirroring</span></span></p><p>ミラーリング、画像の左右を反転させる</p><p><span
      style="font-size: 18px;">・<span style="color: rgb(184, 49, 47);">Random Cropping</span></span></p><p>ランダムクロップ(ランダムな切り抜き)、サイズを指定して、画像からランダムな位置を切り抜く</p><p>・<span
      style="font-size: 18px;">Rotation</span></p><p>画像を任意の角度回転させる</p><p><span style="font-size:
      18px;">・Shearing</span></p><p>画像を剪断変形、歪ませる</p><p><span style="font-size: 18px;">・Color
      Shifting</span></p><p>画像を変色させる、異なるRGBを使ってカラーチャンネルを乱す</p></div><p><br></p><p>ランダムクロップは完璧なデータ拡張ではない。</p><p>ランダムな切り抜きをした結果、猫の画像が猫に見えなくなったらどうする？</p><p>しかし、実際はランダムクロップが実際の画像の十分大きなサブセットである限りはやる価値がある</p><p><br></p><p>カラーシフティングにて色の乱れを実装する方法の１つは、PCAと呼ばれるアルゴリズムを使用すること。</p><p>&quot;PCA
      Color Augmentation&quot;と呼ばれる。</p><p>例えば、画像がもし紫だったら、主に赤と青の色合いと少しの緑を持つ 。PCA Color
      Augmentationは、赤と青に対して大きく足したり引いたりして、緑には少しだけ行う。そうして全体の色合いを同じに保つ。</p><p>詳細は、AlexNet論文で理解できる。</p><p><br></p><p><a
      href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf"></a>
      <a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf"></a>AlexNet論文
      <a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf">ImageNet
      Classification with Deep Convolutional Neural Networks</a></p><p><br></p><h4>訓練中にねじれを実装</h4><p>データセットが大きい時の手法</p><p>1つのCPUスレッドを使ってハードディスクから連続して画像を読み込み、1つのCPUスレッドを使ってねじれを作る。ランダムプロップや変色、ミラーリングを行う。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590320019352-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-24+20.33.03.png"><span
      class="fr-inner">データ拡張の手法</span></span></span></p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590320090371-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-24+20.34.25.png"><span
      class="fr-inner">カラーシフトによるデータ拡張</span></span></span></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590320567005-data_augmentation.png"></span></span></p><h3>8.
      コンピュータビジョンの状態</h3><p><br></p><p>今日、音声認識のデータセットは豊富で、画像認識のデータはまあまあ存在し、物体検出においてはあまりデータがない。</p><p><strong>データがあまりない場合、データを増やす自動的な手法を求めたくなるが、手作業での調整が実際良い性能を得るための一番の方法</strong>である。</p><p><br></p><p>機械学習では2種類の知識がある</p><div
      style="background-color: #FFFFCC;"><p>・Labeled data</p><p><span style="color:
      rgb(163, 143, 132);">ラベル付されたデータ (教師あり学習で使う、xとyのペア)</span></p><p>・Hand engineered
      features/network architecture/other components</p><p><span style="color: rgb(163,
      143, 132);">手作業で調整したデータ(特徴量を注意深く設計することからネットワークを注意深く設計することまで色々ある)</span></p></div><p><br></p><p>手作業での調整に多く頼る理由</p><p>コンピュータビジョンでは、必要なデータが足りないということがよくあるから</p><p><br></p><p>ニューラルネットワークが、より複雑なネットワーク構造を発展させてきた理由</p><p>データが足りない中で良い性能を得るためのネットワーク構造を計算し、工夫を凝らしてきた</p><p><br></p><h4>ベンチマークで上手く機能したり、コンペティションで勝つためのコツ</h4><p>・Ensembling</p><p>&nbsp;(個別でいくつかのネットワークを訓練し、出力を平均する)</p><p>出力を平均する上で重要なのは、上手く働かない重みは平均しないこと</p><p>弱点:
      いくつかネットワークを保持して時刻するため、多くのメモリが使われる</p><p>・Multi-crop at test time</p><p>テスト画像にもデータ拡張を使用する</p><p>テスト画像の複数のバージョンで識別器を実行し、結果を平均する
      例えば 10-crops がある</p><p>弱点: 実行時間がかなり長い</p><p><br></p><p><br></p><p>例えば3~15のネットワークでアンサンブルした場合、テスト時も複数のネットワークに画像を通さなければならないので、実行時間が3~15倍かかってしまう。そのため、顧客に提供する場合は決して使わない。(あくまで、ベンチマークを上手くやり、コンペティションで勝つためのコツ)</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590324311517-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-24+21.44.40.png"><span
      class="fr-inner">データと手動調整</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><br><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590324578677-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-24+21.46.24.png"><span
      class="fr-inner">コンペで勝利したりベンチマークで上手く機能させるコツ</span></span></span></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590324685360-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-24+21.51.12.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><h2 id="section3">3週目</h2><hr><h3>1.
      物体の局地化</h3><p><br></p><p><span class="fr-img-caption fr-fic fr-dib fr-fil" style="width:
      600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590831425850-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-30+18.36.54.png"><span
      class="fr-inner">位置の特定と検出</span></span></span></p><p>画像分類: 1つのオブジェクトを分類</p><p>位置での分類:
      1つのオブジェクトを分類</p><p>物体検出: 複数のオブジェクト</p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590832092417-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-30+18.47.57.png"><span
      class="fr-inner">位置での分類</span></span></span></p><p>オブジェクトのバウンディングボックスは、以下の数値から作成される</p><p>・オブジェクトの中心座標
      (\( b _{ x } \), \( b _{ y } \))</p><p>・オブジェクトの高さ &nbsp; \( b _{ h } \)</p><p>・オブジェクトの幅
      &nbsp; \( b _{ w } \)</p><p><br></p><p><span class="fr-img-caption fr-fic fr-dib
      fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590879975865-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-30+19.27.53.png"><span
      class="fr-inner">ターゲットラベルyの定義</span></span></span></p><p>位置決め付き分類問題はマルチタスク学習</p><p>&nbsp;
      \( &nbsp;p _{ c } &nbsp;\): オブジェクトが存在するか</p><p>&nbsp; \( &nbsp;c _{ 1 } &nbsp;\):
      歩行者が存在するか</p><p>&nbsp; \( &nbsp;c _{ 2 } &nbsp;\): 車が存在するか</p><p>&nbsp; \( &nbsp;c
      _{ 3 } &nbsp;\): 自転車が存在するか</p><p><br></p><h3>2. ランドマーク検出</h3><p><br></p><p>バウンディングボックスでは4つの数字
      \( b _{ x } \), \( b _{ y } \), \( b _{ h } \), \( b _{ w } \)を出力するニューラルネットワークを作る。</p><p>このような、ニューラルネットワークが出力する画像中の重要な座標を<strong><span
      style="color: rgb(184, 49, 47);">ランドマーク</span></strong>と言う。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590837074040-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-30+20.10.54.png"><span
      class="fr-inner">ランドマーク検出</span></span></span></p><p><br></p><p>画像の表情が笑っているかを判断するために、顔の目や口周りに64個のランドマークがあるとする</p><p>顔のランドマークを検出するニューラルネットワーク
      ConvNetの出力ユニット &nbsp;129個</p><div style="background-color: #FFFFCC;"><p>・顔があるかどうか</p><p>・ランドマーク1のx,
      y&nbsp;</p><p>・ランドマーク2のx, y</p><p>...</p><p>・ランドマーク64のx, y</p></div><p><br></p><p>SnapsnatやSnowなどで、顔を歪ませたり王冠や帽子を載せたりする拡張現実のフィルターも顔のランドマークの検出を利用している。</p><p><br></p><p>最後に、人のポーズ検出</p><p>例えば、ボールを蹴っているポーズは、胸の真ん中、左肩、左肘、手首などをランドマークとして、ニューラルネットワークに人のポーズの主な位置を出力させる。</p><p><br></p><h3>3.
      物体検出</h3><p><br></p><p><span class="fr-img-caption fr-fic fr-dib fr-fil" style="width:
      600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590841281916-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-30+21.21.07.png"><span
      class="fr-inner">車の検出</span></span></span></p><p><br></p><p>スライディングウィンドウ検出アルゴリズム</p><p>ConvNetに四角の小さいウィンドウを入力する。</p><p>画像内の全ての位置にウィンドウをスライドさせるまで続ける。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590842264846-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-30+21.35.41.png"><span
      class="fr-inner">スライディングウィンドウ検出</span></span></span></p><p><br></p><p>しかし、スライディングウィンドウには大きな欠点がある</p><h4><u>計算コスト</u></h4><p>とても多くの異なる四角の領域を切り抜いてそれぞれを個別にConvNetにかけるから。</p><p>非常に荒い(大きな)ストライドを使えばConvNetを通すウィンドウの数は減るが、性能は落ちる。</p><p>とても細かい粒度のストライドを使えば、計算コストが高くなる。</p><p>昔は単純な線形関数の分類きだったので、計算コストがかからなかったが、ConvNetでこのやり方はとても高価で実行不可能なほど遅い。</p><p>そこで解決策が次に続く。</p><p><br></p><h3>4.
      スライディングウィンドウの畳み込み実装</h3><p><br></p><p><span class="fr-img-caption fr-fic fr-dib
      fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590843598308-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-30+21.59.34.png"><span
      class="fr-inner">全結合層を畳み込み層へ変換</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590845708108-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-30+22.34.37.png"><span
      class="fr-inner">スライディングウィンドウの畳み込み</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590846381573-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-30+22.36.49.png"><span
      class="fr-inner">スライディングウィンドウの畳み込み実装</span></span></span></p><p><br></p><p>この手法で計算コスト問題は解決される。</p><p>しかし、このスライディングウィンドウの畳み込み実装の欠点バウンディングボックスの位置がそれほど正確にならない。</p><p>この問題の修正方法が次に続く。</p><p><br></p><h3>5.
      バウンディングボックスの予測</h3><p><br></p><p>スライディングウィンドウでは、ウィンドウの位置や大きさが正確にバウンディングボックスと一致させるのが難しい。</p><p>正確なバウンディングボックスを出力させる方法</p><p>YOLOアルゴリズム(You
      Only Look Onceの略)</p><p><br></p><p><span class="fr-img-caption fr-fic fr-dib
      fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590880904353-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-31+8.21.17.png"><span
      class="fr-inner">YOLOアルゴリズム</span></span></span></p><p>参考文献 <a href="https://arxiv.org/pdf/1506.02640.pdf">[Redmon
      et., 2015, You Only Look Once: Unified real-time object detection]</a></p><p><br></p><p>画像をいくつかの格子に分割(例えば高さ19&times;幅19)</p><p>オブジェクトの中心座標が格子に含まれていたら、ラベルをtrueにする(オブジェクトの端が入っていても中心座標が含まれていない場合はfalse)</p><p>格子が2つ以上のオブジェクトを含まない限り、このアルゴリズムは上手くいく</p><p><br></p><h3>6.
      IoU (Intersection Over Union)</h3><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590885432563-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-31+9.36.59.png"><span
      class="fr-inner">物体検出の評価</span></span></span></p><p><br></p><p>IoU: 物体検出の評価指標</p><p>ウィンドウとバウンディングボックスの重なった大きさ</p><p>$$\frac{
      (ウィンドウ\cap正解バウンディングボックス) }{ (ウィンドウ\cup正解バウンディングボックス) } $$</p><p><strong>IoCが0.5以上なら&quot;正しい&quot;</strong></p><p>慣例的に0.5が使われるが、より厳密に評価したい場合は0.6や0.7を使用すれば良い。0.5以上であれば普通は良いと言われている。</p><p>IoCは0以上1以下で、完全に重なった場合、1になる</p><p><br></p><h3>7.
      Non-max Suppression (非最大抑制)</h3><p><br></p><p><span class="fr-img-caption fr-fic
      fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590889913223-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-31+9.53.42.png"><span
      class="fr-inner">非最大抑制</span></span></span></p><p><br></p><p>物体検出の問題: 同じ物体を何回も検出してしまう</p><p>Non-max
      Suppression(非最大抑制)はIoUが最大のもの以外を無視するすることで、1オブジェクトにつき1回しか検出しないようにする手法。</p><p><br></p><p><span
      style="font-size: 24px;">手順</span></p><div style="background-color: #FFFFCC;"><p><span
      style="font-size: 18px;">1. 複数のバウンディングボックスの存在確率が閾値(例えば0.4)以下のボックスを全て削除する。</span></p><p><span
      style="font-size: 18px;">2. 1つのオブジェクトに対して、IoUが0.5以上のものが複数あった場合、IoUが最大のウィンドウをオブジェクトの境界だと決定して、それ以外のウィンドウは無視する。</span></p></div><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590888686133-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-31+10.30.57.png"><span
      class="fr-inner">非最大抑制アルゴリズム</span></span></span></p><p><br></p><h4>Non-max
      Suppression(非最大抑制) アルゴリズム</h4><p><br></p><p>画像を19&times;19の格子に分割する</p><p><br></p><p>ConvNetで出力</p><p>\({y}
      = \left( \begin{array}{c} p_c \\ b_x \\ b_y \\ b_h \\ b_w \end{array} \right)\)</p><p>\(p_c
      &nbsp;\leq 0.6\)のボックスを全て破棄する</p><p>ボックスが残っている場合、以下の動作を繰り返す</p><p>・\(p_c\)(オブジェクトの存在確率)が最大のボックスを選択し、存在確率の予測値として出力する。</p><p>・前のステップのボックス出力でIOUが0.5以上の残りのボックスを破棄する</p><p><br></p><h3>8.
      アンカーボックス</h3><p><span class="fr-img-caption fr-fic fr-dib fr-fil" style="width:
      600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590890641784-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-31+11.03.29.png"><span
      class="fr-inner">重なりあうオブジェクト</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590894732129-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-31+12.11.35.png"><span
      class="fr-inner">アンカーボックスのアルゴリズム</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590895126604-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-31+12.16.35.png"><span
      class="fr-inner">アンカーボックスの例</span></span></span></p><p><br></p><p><br></p><p>これまで学んできた物体検出の問題の１つが、それぞれの格子セルがたった１つの物体しか検出できないことだ。</p><p>アンカーボックスを使うことで、2つの物体を検出できる。</p><p><br></p><p>・2つのアンカーボックスがあるときに3つの物体が同じ格子に存在した場合</p><p>このアルゴリズムでは上手く処理できない。その場合はなんらかのタイムブレーク処理を実装する。</p><p>・同じ格子セルに2つの物体が紐付き、それらは同じアンカーボックスの形をしている場合</p><p>再びこのアルゴリズムでは上手く処理できない。その場合はなんらかのタイムブレーク処理を実装する。</p><p><br></p><p>3&times;3のような荒い格子fではなく、19&times;19の格子を使っている場合、同じセルに2つの物体が361個のセルの中の１つに同じ中心点を持つことはそんなに頻繁には起きない。</p><p><br></p><h4>アンカーボックスの選び方</h4><p>検出したい物体の種類に対応した様々な形を手動で選んだり、5~10のアンカーボックスを選ぶことが多い。</p><p>自動でのやり方:
      k-meansアルゴリズム 検出したい2種類の形をグループ化し、それを使ってアンカーボックスのセットを選ぶのに使う。</p><p><br></p><h3>9.
      YOLOアルゴリズム</h3><p><br></p><h4>YOLO 訓練</h4><p><span class="fr-img-caption fr-fic
      fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590892479018-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-31+11.32.57.png"><span
      class="fr-inner">YOLOアルゴリズムの訓練</span></span></span></p><h4><br></h4><h4>YOLO
      予測</h4><p><span class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span
      class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590893575956-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-31+11.52.41.png"><span
      class="fr-inner">YOLOアルゴリズムの予測</span></span></span></p><p><br></p><h4>YOLO 出力</h4><div
      style="background-color: #FFFFCC;"><p><span style="font-size: 18px;">1. それぞれの格子で2つの予測されたボックスを取得</span></p><p><span
      style="font-size: 18px;">2. 存在確率が低いものを取り除く</span></p><p><span style="font-size:
      18px;">3. 最終的な予測を生成するために、それぞれのクラスに非最大抑制を行う。</span></p></div><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590893947020-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-31+11.56.45.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590894020695-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-31+11.56.56.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1590894050192-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-05-31+11.58.07.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><h3>11.領域候補</h3><h4><br></h4><h4>R-CNN
      (Regions with Convolutional Neural Network)</h4><p>領域候補を使って計算するCNNのこと。</p><p><br></p><p>スライディングウィンドウは、画像全体の領域をスライドさせてCNNに入力する</p><p>Region
      Proposal (領域候補)は、少数のウィンドウを選んでCNNに入力する。</p><p><br></p><p>候補領域を出すには、セグメンテーションと呼ばれるアルゴリズムを利用する。</p><p>これにより、物体であり得る部分を識別する。</p><p><br></p><p>セグメンテーションを実行すると、200子くらいの模様を見つけるかもしれない。</p><p>その2000個にバウンdねxイングボックスを置き、2000の模様にだけCNNの計算を行う。</p><p>これで、画像全体でスライディングウィンドウを行うより、場所の数はとても少なくなるだろう。</p><p><br></p><h4>R-CNNの欠点:
      速度がとても遅い</h4><div style="background-color: #FFFFCC;"><p><span style="font-size:
      18px;">R-CNN: 領域の候補を絞る。領域候補を<span style="color: rgb(184, 49, 47);"><u>１つずつ</u></span>分類する。ラベルとバウンディングボックスを出力する</span></p><p><span
      style="font-size: 18px;">Fast R-CNN: 領域の候補を絞る。全ての候補領域を分類するために、スライディングウィンドウの<span
      style="color: rgb(184, 49, 47);"><u>畳み込み実装</u></span>を使用する。</span></p><p><span
      style="font-size: 18px;">More Fast R-CNN: 領域の候補を作るために、(セグメンテーションの代わりに)畳み込みネットワークを使用する</span></p></div><p><br></p><p><strong><u>しかし、速度改良(More
      Fast R-CNN)でも、YOLOアルゴリズムよりかなり遅いままだ。</u></strong></p><p><br></p><p><br></p><h2
      id="section4">4週目</h2><hr><h3>1. 顔認識と顔認証</h3><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591536403808-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-07+22.25.31.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><h3>2. One
      Shot Learning</h3><p>One Shot Learning:&nbsp;一般にークラスに一枚の画像しかない学習タスクを<strong>One
      Shot Learning</strong>と呼ぶ</p><p>歴史的には、たった１つのデータではディープラーニングのアルゴリズムは機能しない</p><p>データベースに、それぞれの顔が1枚だけ保存されている。</p><p>例えば、CNNで多クラス分類器を使っても、データが1つしかないので、うまくはいかない</p><p><br></p><p>そこで、類似度関数を使う。</p><p>2枚の画像の異なり具合を数値化し、閾値を超えた場合は別人、閾値以下では同じ人と判断する</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591537533962-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-07+22.43.55.png"><span
      class="fr-inner">類似度関数</span></span></span></p><h3>3. Siamese Network</h3><p><br></p><p>画像の距離関数の定義にシャムネットワークを使う</p><p>距離関数d:
      \( {\displaystyle d(x^{(1)},x^{(2)}):=|| f(x^{(1)})-f(x^{(2)}) || _{ F } }\)
      　Fはフロベニウスノルムを表す記号</p><p><br></p><p><span class="fr-img-caption fr-fic fr-dib
      fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591537875551-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-07+22.49.31.png"><span
      class="fr-inner">Siamese Network</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591538036269-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-07+22.53.42.png"><span
      class="fr-inner">学習の目標</span></span></span></p><p><br></p><h3>4. Triplet Loss</h3><p>三重項損失関数</p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591538906968-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-07+23.07.51.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591539280098-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-07+23.13.41.png"><span
      class="fr-inner">Triplet function</span></span></span></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591539555699-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-07+23.18.53.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591539798078-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-07+23.23.03.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><h3>5. 顔認証とバイナリ分類</h3><p><br></p><p>以下の上と下のConvNetは、入力画像は違うが、パラメータは全く同じ</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591576465197-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-08+9.29.06.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591576409299-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-08+9.33.11.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><br></p><h3>6.
      画風変換 Neural Style Transfer</h3><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591614825345-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-08+20.12.57.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><h3>7. deep
      ConvNet learning</h3><p><br></p><p><span class="fr-img-caption fr-fic fr-dib
      fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591663424665-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-09+9.42.14.png"><span
      class="fr-inner">真相ネットワークが学習しているものの可視化</span></span></span></p><p><a href="https://arxiv.org/pdf/1311.2901.pdf"></a>[論文]
      <a href="https://arxiv.org/pdf/1311.2901.pdf">Visualizing and Understanding
      Convolutional Networks</a></p><p><br></p><p><span class="fr-img-caption fr-fic
      fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591833910142-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-11+9.04.44.png"><span
      class="fr-inner">深層ネットワークの可視化 1層目</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591834013271-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-11+9.06.33.png"><span
      class="fr-inner">深層ネットワークの可視化 2層目</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591834079832-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-11+9.07.43.png"><span
      class="fr-inner">深層ネットワークの可視化 3層目</span></span><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591834118707-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-11+9.08.17.png"><span
      class="fr-inner">深層ネットワークの可視化 4層目</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591834167074-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-11+9.09.09.png"><span
      class="fr-inner">深層ネットワークの可視化 5層目</span></span></span></p><p><br></p><p>層一でエッジを活性化、層二で複雑な形やパターンを検出、層三で人や車も検出できている、層四ではより高レベルな検出が、層五ではさらに複雑な検出がなされている</p><p><br></p><h3>8.
      画風変換のコスト関数 Neural style transfer cost function</h3><p><br></p><p>画風変換のコスト: \(J(G)=&alpha;J
      _{ content }(C, G)+&beta;J _{ style }(S, G)\)</p><p>生成画像(Generated image)と正解画像の内容(Content)のコスト、生成画像と正解画像のスタイル(Style)のコストの和をとる</p><p>&alpha;と&beta;は内容コストとスタイルコストで相対的な重みを指定する</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591835168151-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-11+9.25.48.png"><span
      class="fr-inner">画風変換のコスト関数</span></span></span></p><p>[論文] <a href="https://arxiv.org/pdf/1508.06576.pdf?student&student">[Leon
      A. Gatys, 2015] A Neural Algorithm of Artistic Style</a></p><p><br></p><p>Gは生成画像のピクセル値</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1591835478294-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-11+9.30.59.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><br></p><h3>9.
      Content Cost Function</h3><p><br></p><p>L2ノルム(各次元の値を2乗した和の平方根)の二乗</p><p>\(J
      _{ content }(C, G) = \frac{ 1 }{ 2 }|| a ^{ [l](C) }-a ^{ [l](G) } ||^2 &nbsp;\)</p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592009463442-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-13+9.50.45.png"><span
      class="fr-inner">Content cost function</span></span></span></p><p><br></p><h3>10.
      Style Cost Function</h3><p><br></p><p>全成分の二乗和のルートをフロベニウスノルム(行列の右下にFをかく)</p><p>例えば、行列Aのフロベニウスノルム
      \(‖A‖_F= \sqrt{ &nbsp;\sum_{ij} a^2_{ij} } \)</p><p><br></p><p>\( G_{kk&#39;}^{[l](S)}=\textstyle
      \sum_{i=1}^{n _h} \textstyle \sum_{j=1}^ {n _w} a_{i,j,k}^{[l](S)} a_{i,j,k&#39;}^{[l](S)}
      \)</p><p>\( G_{kk&#39;}^{[l](G)}=\textstyle \sum_{i=1}^{n _h} \textstyle \sum_{j=1}^
      {n _w} a_{i,j,k}^{[l](G)} a_{i,j,k&#39;}^{[l](G)} \)</p><p>\( J_{style}^{[l]}
      (S, G)= \dfrac{ 1 }{ (2n^{[l]}_H n^{[l]}_W n^{[l]}_C)^2 } &nbsp;\textstyle \sum_k
      \sum_{k&#39;} (G_{kk&#39;}^{[l](S)}-G_{kk&#39;}^{[l](G)})^2 \)</p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592012528482-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-13+10.38.04.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592030645291-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-13+15.11.08.png"
      class="fr-fic fr-dib fr-fil" style="width: 600px;"></p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592028953570-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-13+15.08.56.png"><span
      class="fr-inner">Style cost function</span></span></span></p><p><br></p><h3>11.
      一次元と二次元データの畳み込み</h3><p><br></p><p>1次元のデータにもConvNetを使用できる (実際にはRecurrent Neural
      Networkを使う)<br>・EKG信号心電図</p><p>・海抜高度</p><p>など</p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592056683080-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-13+22.55.34.png"><span
      class="fr-inner">一次元と二次元の畳み込み</span></span></span></p><p><br></p><h4>3Dデータ (奥行きが存在するデータ)</h4><p>・X線によるCTスキャン
      (体の奥行きの断面)</p><p>・映画データ (映画の時間が異なる断面 映画内の人の動きを検出)</p><p>体全体に渡って、断面図を何重も重ね合わせた構造をとる、つまりデータは根本的に3次元
      (高さ&times;幅&times;深さ&times;カラーチャンネル数)</p><p><br></p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592058775836-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-13+23.30.15.png"><span
      class="fr-inner">X線によるCTスキャン</span></span></span></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592059518172-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-13+23.44.33.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><h2 id="section5">本講座について</h2><hr><p>今回の講座はこちら！！</p><p><a
      href="https://www.coursera.org/learn/convolutional-neural-networks/home/welcome">https://www.coursera.org/learn/convolutional-neural-networks</a>/</p><p>CNNの理論から、論文での最近の実装やプログラミング演習など、書籍で学習するよりもはるかに<span
      style="color: rgb(184, 49, 47);"><strong><u>わかりやすくまとまって最高の教材</u></strong></span>だと感じました。</p><p>初心者でもついていけるように一個一個きちんと理論から入っているので、初心者から中級者以上までお勧めできます。</p><p><span
      style="color: rgb(184, 49, 47);"><u><strong>ここまで綺麗に多くの情報がまとまった学習コンテンツは他にない</strong></u></span>と思うので、ぜひ学習にこのコースを利用することをお勧めします。<br>ちなみに筆者は今までいくつか深層学習の書籍を使って勉強してきましたが、間違いなく一番わかりやすくて多くの情報が学習できました。<br><br></p>'
    - '2020-05-05 19:57:30.055062'
    - '2020-06-20 19:29:12.912858'
  - - 230
    - Coursera Sequence Models
    - '<h1 style="text-align: center;">Coursera Sequence Models</h1><p><br></p><nav
      class="mkj" style="border-radius: 3px; font-weight: 700; line-height: 1.4; background:
      rgb(255, 251, 244); padding: 0px; border: 2px solid rgb(248, 145, 116); margin-bottom:
      2em;"><h2 style="padding: 8px 12px; margin: -1px; background: rgb(248, 145,
      116); border: none; font-size: 18px; text-align: center; color: rgb(255, 255,
      255);"><i class="fa fa-th-list"></i> Table of Contents</h2><ol style="border-radius:
      3px;"><li><a href="#section" style="color: rgb(84, 84, 84); padding: 8px 0px;
      display: block; text-decoration: none;">1週目</a></li><li><a href="#section2"
      style="color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;">2週目</a></li><li><a href="#section3" style="color: rgb(84, 84, 84); padding:
      8px 0px; display: block; text-decoration: none;">3週目</a></li><li><a href="#section4"
      style="color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;">本講座について</a></li></ol></nav><p><br></p><h2 id="section">1週目</h2><hr><h3>1.
      Sequece Model</h3><p>シーケンスの用語解説 - 順番に並んでいること。または、並んでいる順番で処理を行うこと</p><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592656825848-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-20+21.39.37.png"
      style="width: 600px;"><span class="fr-inner">シーケンスデータの例</span></span></span></p><h4><br></h4><h4>シーケンスモデルが有用な例</h4><p>音声認識</p><p>&nbsp;
      &nbsp; &nbsp; &nbsp; - 音声クリップ(入力X)が与えられ、それをテキスト(出力Y)に起こすことが求められる</p><p>&nbsp;
      &nbsp; &nbsp; &nbsp; - インプットとアウトプットがシーケンスデータ</p><p>&nbsp; &nbsp; &nbsp; &nbsp;
      - 入力(音声クリップ)は時間軸に沿って展開、Y(テキスト)は単語が連なったもの</p><p>音楽生成</p><p>&nbsp; &nbsp; &nbsp;
      &nbsp; - アウトプットだけがシーケンス、インプットは空にもなりうるし、1つの整数にもなりうる(生成したい音楽のジャンル、最初の音符の指定など)</p><p>感情分類</p><p>&nbsp;
      &nbsp; &nbsp; &nbsp; - インプットの文章がシーケンス、アウトプットはレビュー(星の数)</p><p>DNA解析 DNAはアルファベットA,C,G,Tで表現される
      DNAシーケンスが与えられた時に、どの部分がタンパク質と並びが一致するかラベル付けを行う</p><p>AGCCCCTGTGAGGAACTAG -&gt;
      AG<span style="color: rgb(184, 49, 47);">CCCCTGTGAGGAACT</span>AG</p><p>機械翻訳</p><p>&nbsp;
      &nbsp; &nbsp; &nbsp; - 文章がインプット 翻訳したものが</p><p>動画認識</p><p>&nbsp; &nbsp; &nbsp;
      &nbsp; - 動画の1コマ1コマが与えられ、どんな骨堂をしているか認識</p><p>固有表現抽出</p><p>&nbsp; &nbsp; &nbsp;
      &nbsp; - 与えられた文章の中から人物名を特定</p><p><br></p><p>上記の問題全ては、教師あり学習として解決できるが、シーケンスデータを扱う問題には多くの種類がある</p><p><br></p><h3>2.
      表記</h3><p>シーケンスモデルを構築する上で使用する表記法について定義</p><p><span style="font-size: 18px;">例</span></p><p>固有表現抽出
      (入力の文章から人の名前を判別するシーケンスモデル)</p><p>- 入力X: Harry Potter and Hermione Granger invented
      a new spell (ハリーポッターとハーマイオニーは新しい呪文を発明した)</p><p>- 出力Y: 入力の各単語が人名か否かを1(True),0(False)で出力
      1 1 0 1 1 0 0 0 (実際はもっと複雑で、名前が姓名がどこからどこまでかも判断しなければならないが、今回はシンプルな例)</p><p>入力の9つの単語は\(x^{&lt;1&gt;},x^{&lt;1&gt;},...,x^{&lt;9&gt;}\)で表され、インデックスtにより、\(x^{&lt;1&gt;}\)で表現される。(tの由来はtemporal:
      時間的な)</p><p>同様に、出力は\(y^{&lt;1&gt;},y^{&lt;1&gt;},...,y^{&lt;9&gt;}\)</p><p>訓練データi番目のインデックスtの場合、\(x^{(i)&lt;t&gt;}\)</p><p>また、訓練データによって長さが異なるため、i番目の入力長は\(T^{(i)}_{&lt;x&gt;}\)で表され、\(T^{(i)}_{&lt;x&gt;}\)=9</p><p>同様に、出力は\(T^{(i)}_{&lt;y&gt;}\)=9</p><p><br></p><p>＊固有表現抽出はサーチエンジンにも使われる。(例えば、過去24時間のニュースに登場した全ての人を見出し化して、記事を適切に検索できるようにする)
      人名、会社名、時間、場所、国、通貨、その他様々な文字抽出に用いられる</p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592658952162-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-20+22.15.27.png"><span
      class="fr-inner">シーケンスモデルでの表記法</span></span></span></p><p><br></p><p>ボキャブラリーの辞書を用意し、ワンホットエンコーディングで固有名詞を含むかを表示する</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592725089041-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-21+16.37.43.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p>例えば、10,000語を含むボキャブラリーを使用(\(n_x\)=10,000)して、ミニバッチ数が20(m=20)、タイムステップが10(\(T_x\)=10)の場合、入力の次元は(10,000,
      20, 10)になる。</p><p><br></p><h3>3. RNN (Recurrent Neural Network Model)</h3><p><br></p><h4>固有表現抽出で、スタンダードなニューラルネットワークの場合</h4><p>&nbsp;
      &nbsp; &nbsp;各単語を入力としていくつかの隠れ層を通って、最終的には、それぞれの単語で0/1の値が出力される</p><h4>起こる問題</h4><p>&nbsp;
      &nbsp; 1. 入力と出力は、データによって長さが異なる可能性がある (入力長と出力長はデータによってバラバラ)</p><p>&nbsp; &nbsp;
      2. このような単純なニューラルネットの構造だと、文の色々な場所で学習した特徴量を共有しない (1番目に登場した単語&quot;Harry&quot;が人名の一部だと学習したならば、他のインデックスで現れた時も人名だと判断してほしいが、それができない)</p><p>＊
      CNNは、画像全体をフィルタがスライドするので、特徴がどこにあっても抽出できる（移動不変性または位置不変性） シーケンスモデルにも、同じような効果が欲しい。</p><p><br></p><p><span
      style="font-size: 18px;">...そこで、RNN(再帰型ニューラルネットワーク)が2つの欠点を解決する</span></p><p><br></p><p><span
      style="font-size: 18px;">RNNの弱点</span></p><p>入力データの内、ある時点での予想は、シーケンス内の早い方の情報しか使わない(後ろの方は使われない)</p><p>例えば、以下の分は、前者は人名で、後者は人名ではないが、最初の3文を見ただけでは判断できないもの</p><p>He
      said, &quot;Teddy Roosebelt was a great president.&quot;</p><p>He saild &quot;Teddy
      bear are on sale!&quot;</p><p><br></p><p>この課題を解決するBRNN (双方向再帰型ニューラルネットワーク)と言うものもある。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592730367824-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-21+18.05.46.png"><span
      class="fr-inner">RNN 再帰型ニューラルネットワーク</span></span></span></p><p><br></p><p>活性化関数では、tanhが使われるのが主流(Reluも使われる)で、これによって起きる勾配消失問題については別の対策を行う。</p><p>Wax
      ,Waa ,Wya, ba, by は全ての時点で共有される係数であり、\(g_1\), \(g_2\)は活性化関数である。</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592731987161-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-21+18.32.34.png"><span
      class="fr-inner">順伝播</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1592733803545-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-06-21+19.02.55.png"><span
      class="fr-inner">簡易化したRNNの表記</span></span></span></p><p><br></p><h3>4. 時間を通した逆伝播</h3><p><br></p><p>文章の単語が人の名前かそうじゃないかは、2値分類なので、交差エントロピー誤差を使用できる</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1593609395060-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-01+22.15.42.png"><span
      class="fr-inner">RNN 順伝播と逆伝播</span></span></span></p><p><br></p><h3>4. 様々なRNNの構造</h3><p><br></p><p>RNNの構造
      \(T_{&lt;x&gt;}とT_{&lt;y&gt;}の関係\)</p><p>・多対多 (many-to-many)&nbsp;</p><p>&nbsp;
      &nbsp; - 例: 固有抽出表現、機械翻訳</p><p>・多対一 (many-to-one)&nbsp;</p><p>&nbsp; &nbsp; -
      例: 感情分析(映画の感想から星の数を推測)</p><p>・一対一 (one-to-one)&nbsp;</p><p>&nbsp; &nbsp; - 例:
      標準的な普通のニューラールネットワーク</p><p>・一対多 (one-to-many)&nbsp;</p><p>&nbsp; &nbsp; - 例:
      音楽生成</p><p><br></p><h4>感情分析</h4><p>・多対一</p><p>・入力: テキスト</p><p>・出力: 星の数(0~5)</p><p>&nbsp;
      &nbsp; - 毎回のタイムステップで出力を行うのではなく、RNNは文章全体をまとめて読み込み、出力は最後のタイムステップのみとなる</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1594083143044-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-07+9.20.04.png"><span
      class="fr-inner">シーケンスデータの例</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1594083181381-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-07+9.49.55.png"><span
      class="fr-inner">RNNの構造の種類</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1594083228953-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-07+9.46.08.png"><span
      class="fr-inner">音楽生成と機械翻訳</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1594083281960-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-07+9.47.53.png"><span
      class="fr-inner">RNNの構造の種類のまとめ</span></span></span></p><p><br></p><h3>5. 言語モデルとシーケンス生成</h3><p>言語モデルとは、単語列に対する確率分布である。長さmの単語列が与えられたとき、単語列全体に対しての確率\({\displaystyle
      P(y^{&lt;1&gt;},\ldots ,y^{&lt;m&gt;})}\)を与える。 言語モデルを用いると異なるフレーズに対して相対的な尤度を求めることができるため、自然言語処理の分野で広く使われている。
      言語モデルは音声認識、機械翻訳、品詞推定、構文解析、手書き文字認識、情報検索などに利用されている。</p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1594536066134-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-12+15.35.09.png"><span
      class="fr-inner"><br>言語モデル</span></span></span></p><p>1万~100万あるいは、それ以上のボキャブラリー辞書を用意し、それぞれの単語ごとに予測される単語の確率を出力する。</p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1594536269288-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-12+15.44.12.png"><span
      class="fr-inner">RNNによる言語モデル</span></span></span></p><p><br></p><p><strong>条件付き確率</strong>（じょうけんつきかくりつ、英:
      <span lang="en">conditional probability</span>）は、ある事象 <span lang="en">B</span>
      が起こるという条件下での別の事象 <span lang="en">A</span> の確率のことをいう。しばしば「<span lang="en">B</span>
      が起こったときの <span lang="en">A</span> の（条件付き）確率」「条件 <span lang="en">B</span> の下での
      <span lang="en">A</span> の確率」などと表現される。</p><p>\({\displaystyle \operatorname
      {P} (A\mid B)={\frac {\operatorname {P} (A\cap B)}{\operatorname {P} (B)}}}\)&nbsp;</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1594537061923-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-12+15.57.23.png"><span
      class="fr-inner">RNN model</span></span></span></p><p><br></p><h3>6. 新規シーケンスのサンプリング</h3><p><br></p><h4><br><span
      style="background-color: rgb(255, 255, 153);"><strong>言語モデルと文章生成</strong></span></h4><p>言語モデルは、連続した言葉の中で、直前の言葉を利用して<span
      style="background-color: rgb(255, 255, 153);">次の言葉の出現確率を予測</span>することができる。どのくらいの頻度で文章が現れるのかを測ることができるため、機械翻訳に活用されています。次の言葉を予測できることのもう一つ良いことは、アウトプットの確率からサンプリングすることで<span
      style="background-color: rgb(255, 255, 153);">新しい文章を生成できるGenerativeモデルを得られる</span>点です。そのため、学習用データ次第で様々なものを生成することができます。言語モデルでは、インプットデータは連続的な言葉の列です。そして、アウトプットは予測された言葉の列になります。ネットワークを学習させる時、tステップのアウトプットを次の言葉にしたいため、\(o_tt=x_{t+1}\)とします。</p><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595056722889-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-18+16.18.18.png"><span
      class="fr-inner">訓練されたRNNからシーケンスのサンプリング</span></span></span></p><p><br></p><p
      data-placeholder="翻訳" dir="ltr"><span lang="ja">以下の左側の文章は、シェイクスピアのテキストで訓練されたモデルが生成したもので、それはシェイクスピアが書いたみたいに聞こえるものを生成します。</span></p><p
      data-placeholder="翻訳" dir="ltr"><br></p><p><span class="fr-img-caption fr-fic
      fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595058136587-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-18+16.42.06.png"><span
      class="fr-inner">シーケンス生成</span></span></span></p><p><br></p><h3>7. RNNによる勾配の消失</h3><p><br></p><p><span
      style="color: rgb(3, 15, 134);"><strong>勾配消失と勾配爆発について</strong></span> - 勾配消失と勾配爆発の現象は、RNNでよく見られる。これらの現象が起こる理由は、掛け算の勾配が層の数に対して指数関数的に減少/増加する可能性があるため、長期の依存関係を捉えるのが難しいから。</p><p><span
      style="color: rgb(3, 15, 134);"><strong>勾配クリッピング</strong></span> - 誤差逆伝播法を実行するときに時折発生する勾配爆発問題に対処するために使用される手法。勾配の上限値を定義することで、実際にこの現象が抑制される。</p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1598108368402-gradient-clipping.png"
      style="width: 300px;" class="fr-fic fr-dib"></p><p><br></p><p>・勾配爆発に堅牢な解決策</p><p>&nbsp;
      &nbsp; &nbsp; &nbsp; - 勾配クリッピング</p><p>勾配消失</p><p>&nbsp; &nbsp; &nbsp; &nbsp;
      - GRUを使う、のちに解説</p><p><br></p><p><span class="fr-img-caption fr-fic fr-dib fr-fil"
      style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595071784486-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-18+20.29.06.png"><span
      class="fr-inner">RNNの勾配消失</span></span></span></p><p><br></p><p><br></p><h3>8.
      Gated Recurrent Unit (GRU)</h3><p><br></p><p>ゲート付き回帰型ユニット<a href="https://ja.wikipedia.org/wiki/%E3%82%B2%E3%83%BC%E3%83%88%E4%BB%98%E3%81%8D%E5%9B%9E%E5%B8%B0%E5%9E%8B%E3%83%A6%E3%83%8B%E3%83%83%E3%83%88">&nbsp;wiki</a></p><p>&nbsp;
      &nbsp; &nbsp; &nbsp; 2014年にKyunghyun Cho（조 경현）らによって発表された、回帰型ニューラルネットワーク（RNN）におけるゲート機構</p><p><br></p><p><span
      style="color: rgb(0, 78, 0);">ゲートの種類</span> - 勾配消失問題を解決するために、特定のゲートがいくつかのRNNで使用され、通常明確に定義された目的を持っている。それらは通常\(\Gamma
      \)と記され、以下のように定義される。</p><p>\(\Gamma = &nbsp;\sigma(Wx^{&lt;t&gt;}+Ua^{&lt;t-1&gt;}+b)\)</p><p>ここで、W,
      U, bはゲート固有の係数、&sigma;はシグモイド関数です。主なものは以下の表にまとめられている。</p><p><br></p><table style="margin-right:
      calc(0%); width: 100%;"><colgroup><col width="25%"> <col width="45%"> <col width="30%"></colgroup><tbody><tr><td
      align="center"><strong>ゲートの種類</strong></td><td align="center"><strong>役割</strong></td><td
      align="center"><strong>下記で使用される</strong></td></tr><tr bgcolor="#f6f8fa"><td
      align="center">更新ゲート \(\Gamma_u\)</td><td align="center">過去情報はどのくらい重要ですか？</td><td
      align="center">GRU, LSTM</td></tr><tr><td align="center">関連ゲート \(\Gamma_r\)</td><td
      align="center">前の情報を削除しますか？</td><td align="center">GRU, LSTM</td></tr><tr bgcolor="#f6f8fa"><td
      align="center">忘却ゲート \(\Gamma_f\)</td><td align="center">セルを消去しますか？しませんか？</td><td
      align="center">LSTM</td></tr><tr><td align="center">出力ゲート \(\Gamma_o\)</td><td
      align="center">セルをどのくらい見せますか？</td><td align="center">LSTM</td></tr></tbody></table><p><br></p><p><strong><span
      style="color: rgb(146, 4, 4);">GRU/LSTM</span></strong> - ゲート付きリカレントユニット（GRU）およびロングショートタームメモリユニット（LSTM）は、従来のRNNが直面した勾配消失問題を解決しようとする。LSTMはGRUを一般化したもの。以下は、各アーキテクチャを特徴づける式をまとめた表。</p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595079729715-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-18+22.41.53.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p>以下サイトから引用 [<a href="https://stanford.edu/~shervine/l/ja/teaching/cs-230/cheatsheet-recurrent-neural-networks">https://stanford.edu/~shervine/l/ja/teaching/cs-230/cheatsheet-recurrent-neural-networks</a>]</p><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595075809410-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-18+21.36.33.png"><span
      class="fr-inner">RNN unit</span></span></span></p><p><br></p><p><br></p><p>\(\Gamma\)
      これはガンマと言う記号&nbsp;</p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595077704443-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-18+22.07.59.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595080196739-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-18+22.48.41.png"><span
      class="fr-inner">Full GRU</span></span></span></p><p><br></p><h3>9. Long Short
      Term Memory (LSTM)</h3><p><br></p><p>LSTMは、GRUより少しだけ強力で一般化したバージョン</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595162023584-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-19+21.30.28.png"><span
      class="fr-inner">GRUとLSTM</span></span></span></p><p><a href="https://www.bioinf.jku.at/publications/older/2604.pdf"></a>
      <a href="https://www.bioinf.jku.at/publications/older/2604.pdf"></a> <a href="https://www.bioinf.jku.at/publications/older/2604.pdf"></a>論文
      <a href="https://www.bioinf.jku.at/publications/older/2604.pdf">Sepp Hochreiter
      &amp; Schmidhuber 1997 LONG SHORT-TERM MEMORY</a></p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595506699720-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-23+21.17.53.png"><span
      class="fr-inner">LSTM 画像説明</span></span></span></p><p>分類における予測値にはsoftmaxを使用する</p><p>$$\mathbf{y}^{\langle
      t \rangle}_{pred} = \textrm{softmax}(\mathbf{W}_{y} \mathbf{a}^{\langle t \rangle}
      + \mathbf{b}_{y})$$</p><p><br></p><p>どちらにも利点はあるが、今日ではLSTMを使うことが多い。</p><p><br></p><p>GRU</p><p>・複雑なLSTMを簡略化したモデルで比較的最近の発明</p><p>・モデルの単純であるため、大きなネットワークを構築するのが簡単</p><p>・ゲートが２つしかないため、少し計算が高速</p><p><br></p><p>LSTM</p><p>・GRUよりもずっと以前の発明</p><p>・2つではなく3つのゲートがあるため、GRUより強力で効果的</p><p><br></p><h3>10.
      Bidirectional RNN (BRNN)</h3><p><br></p><p><span style="color: rgb(146, 4, 4);">RNNの変種</span>
      以下の表は、一般的に使用されている他のRNNアーキテクチャをまとめたもの</p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595665682001-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-24+19.07.43.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p>引用元 <a href="https://stanford.edu/~shervine/l/ja/teaching/cs-230/cheatsheet-recurrent-neural-networks#architecture">https://stanford.edu/~shervine/l/ja/teaching/cs-230/cheatsheet-recurrent-neural-networks#architecture</a></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595665803967-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-24+18.46.04.png"><span
      class="fr-inner">未来の情報の利用</span></span></span></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595665861289-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-24+18.53.27.png"><span
      class="fr-inner">BRNN</span></span></span></p><p><br></p><h3>11. Deep RNN (DRNN)</h3><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1595666020024-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-25+17.24.16.png"><span
      class="fr-inner">DRNN</span></span></span></p><p><br></p><p><br></p><h2 id="section2">2週目</h2><hr><h3>1.
      Word Representation</h3><p><br></p><p>単語表現</p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1599981597115-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-13+16.12.28.png"><span
      class="fr-inner">word representation</span></span></span></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1599981671381-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-13+16.19.35.png"
      style="width: 600px;"><span class="fr-inner"><br>word embeddings</span></span></span></p><p><br></p><p>単語埋め込みの可視化</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1599982207988-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-13+16.29.46.png"><span
      class="fr-inner">visualizing word embeddings</span></span></span></p><p><br></p><h3>2.
      Word Embeddings</h3><p><br></p><p>名前検出を例</p><p><span class="fr-img-caption fr-fic
      fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1600422427319-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-18+18.45.20.png"><span
      class="fr-inner">名前エンティティー検出</span></span></span></p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1600426306031-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-18+19.51.36.png"><span
      class="fr-inner">転移学習と単語埋め込み</span></span></span></p><p><br></p><p><strong>単語埋め込みを使用した転移学習</strong></p><p>1.
      巨大なテキスト群から単語埋め込みを学習(1~1000億)</p><p>(または、事前学習された単語埋め込みをオンラインでダウンロード)</p><p>2.
      学習(またはダウンロード)後に、小さいトレーニングセット(例えば、単語数10万かそれ以下)しかない新しいタスクに転移する</p><p>3. 任意: データが十分に多い場合には、単語埋め込みを新しいデータにファインチューニング(パラメータを微調整)すること&nbsp;</p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1600426766725-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-18+19.58.57.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>単語埋め込みと、顔認証でのエンコーディングには興味深い関係性がある</p><p>・エンコーディングと埋め込みという言葉は多少同じ意味で使用される</p><p>&nbsp;
      &nbsp; ・顔認識のために、様々な顔の、例えば<span lang="ja">128次元表現を学習するシャムネットワークアーキテクチャをトレーニングし、</span><span
      lang="ja">2つの画像が同じであるか判断するために、エンコーディングを比較する</span></p><p>&nbsp; &nbsp; ・単語の埋め込みは、例えば1万の固定ボキャブラリを使用し、各単語のベクトルは固定エンコーディングを学習するか固定埋め込みを学習する<span
      lang="ja">&nbsp;</span></p><p><br></p><p>顔認識と単語埋め込みで行うことの1つの違い</p><p>顔認証は、一度も見たことのない画像を入力にとる可能性があるが、自然言語処理では固定ボキャブラリーを使用するので、未知のボキャブラリーを使用することはない点</p><p><br></p><h3>3.
      Properties of word embeddings</h3><p><br></p><p>男に対応するものが女だった場合、キングに対応するものはクイーンだと人間は思うが、アルゴリズムではどうやって判断すれば良いだろうか？</p><p>=&gt;
      Gender, Royal, Age, Foodなど、項目との関連性を表す単位ベクトルが同じものを見れば良い</p><p>以下の結果から男と女の類似度はキングとクインの類似度と等しいことがわかる。</p><p>\(
      \boldsymbol{e_{man}} - \boldsymbol{e_{woman}} \approx \left( \begin{array}{c}
      -2 \\ 0 \\ 0 \\ 0 \end{array} \right) \)</p><p>\( \boldsymbol{e_{king}} - \boldsymbol{e_{?}}
      = \left( \begin{array}{c} -2 \\ 0 \\ 0 \\ 0 \end{array} \right) \) を満たす\(e_{?}\)を見つける</p><p>\(
      \boldsymbol{e_{king}} - \boldsymbol{e_{queen}} \approx \left( \begin{array}{c}
      -2 \\ 0 \\ 0 \\ 0 \end{array} \right) \) よりクイーン</p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1600432077043-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-18+21.27.34.png"><span
      class="fr-inner">analogy (類似性)</span></span></span></p><p><br></p><p>t-SNEは非線形のマッピング</p><p><strong>t分布型確率的近傍埋め込み法</strong>(T-distributed
      Stochastic Neighbor Embedding, t-SNE）</p><p>&nbsp; &nbsp; ・高次元データの可視化のため2次元または3次元の低次元空間へ埋め込みに最適な<a
      href="https://ja.wikipedia.org/w/index.php?title=%E9%9D%9E%E7%B7%9A%E5%BD%A2%E6%AC%A1%E5%85%83%E5%89%8A%E6%B8%9B&action=edit&redlink=1"
      title="非線形次元削減 (存在しないページ)">非線形次元削減</a>手法</p><p><br></p><p>最も使用されているsimilarity
      functionはcosine similarity</p><p>ベクトルu, vを用いると、以下で表される。</p><p>中学生の時に習う、\( cos&theta;
      = &nbsp; \frac{ 内積 }{ ベクトルuの長さ &times; ベクトルvの長さ } \)　と同じです。</p><p>\(Sim(u, v)
      = &nbsp;\dfrac{ u^{ \mathrm{T} } v}{ | \vec{u} | | \vec{v} | } \)</p><p><br></p><p><br></p><h2
      id="section3">3週目</h2><hr><h3>1. 埋め込み行列</h3><p>単語埋め込みのアルゴリズム</p><p><br></p><p>以下は、ボキャブラリ10,000個の時</p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601192452327-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-27+15.52.31.png"><span
      class="fr-inner">埋め込み行列</span></span></span></p><p><br></p><h3>2. Learning word
      embeddings</h3><p><br></p><p>例えば、前の4つの単語から次の単語の予測を行う場合、a, glass, of, orangeの4ベクトル(300行のベクトル)が入力になる</p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601194506629-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-27+17.14.53.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>その他(上記のような直前の4単語以外)のコンテキスト/ターゲットのペア</p><p>コンテキスト(予測に使う入力)とターゲット(予測する単語)</p><p>左右の4単語
      <span style="color: rgb(147, 101, 184);">a glass of orange juice <u>&nbsp;?&nbsp;</u>
      to go along with</span></p><p><span style="color: null;">直前の1単語&nbsp;</span><span
      style="color: rgb(97, 189, 109);">orange <u>&nbsp;?&nbsp;</u>&nbsp;</span></p><p>近くの1単語
      <span style="color: rgb(226, 80, 65);">glass <u>&nbsp;?&nbsp;</u> (スキップグラム)</span></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601195467740-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-27+17.30.56.png"><span
      class="fr-inner">コンテキストとターゲットのペア</span></span></span></p><p><br></p><h3>3. Word2Vec</h3><p><br></p><p><strong>スキップグラム</strong></p><p>コンテキストを常にターゲット単語の直前の最後の4単語または最後の直前単語にするのではなく、たとえば、コンテキスト単語としてランダムに単語を選択します。そして、オレンジという言葉を選んだとしましょう。</p><p>次にウィンドウ内(コンテキスト単語から例えば、前後5単語もしくは10単語の範囲)で別の単語をターゲット単語として選択する。</p><p>ターゲット単語にmyという単語が選ばれたとすると、ウィンドウ内の単語は非常に多様でありうるため、これを教師あり学習で学習するのは困難です。</p><p>適切な単語の埋め込みを学習して、予測を行うモデルを紹介する</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601197475544-1601197475544.png"><span
      class="fr-inner">スキップグラム</span></span></span></p><p><br></p><p>コンテキスト単語からターゲット単語のマッピングを学習する教師あり学習を訓練</p><p>&theta;<sub>t</sub>:
      出力tと関連づけられたパラメータ</p><p><br></p><p><br></p><p><span class="fr-img-caption fr-fic
      fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601198458161-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-27+18.20.29.png"><span
      class="fr-inner">コンテキストとターゲット モデル</span></span></span></p><p><br></p><p>word2vecのCBOWモデルとskip-gramモデルで、階層的なソフトマックスが頻度の低い単語に対して優れているのに対し、ネガティブサンプリングが頻繁な単語に対して優れている</p><p><br></p><p>・スキップグラムの主な問題は計算速度
      (シグマによる部分和により、ボキャブラリの数だけ加算を行わなければならない)</p><p>&nbsp; &nbsp; ・ボキャブラリが1万の場合はそれほど問題ないが、10万~100万になると速度がとても遅くなる</p><p><br></p><p><br></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601199180859-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-27+18.32.47.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><h3>4. Negative
      Sampling</h3><p>&nbsp;</p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601201587529-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-27+19.12.36.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601204131535-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-09-27+19.55.08.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601204474337-1601204474336.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><h3>5. GloVe
      word vectors</h3><p><br></p><p data-placeholder="翻訳" dir="ltr"><span lang="ja">GloVe
      (Global vectors for word representaion) 単語表現のためのグローバルベクトル</span></p><p data-placeholder="翻訳"
      dir="ltr"><span lang="ja">Word2Vecやスキップグラムモデルほど使用されていないが、単純性の点から、一部の愛好家がいる。</span></p><p
      data-placeholder="翻訳" dir="ltr"><br></p><p data-placeholder="翻訳" dir="ltr"><span
      lang="ja">X<sub>ij</sub>はコンテキストiの中に単語jが現れる回数</span></p><p data-placeholder="翻訳"
      dir="ltr"><span lang="ja">iとjはtとcに成り代わっている</span></p><p data-placeholder="翻訳"
      dir="ltr"><span lang="ja">コンテキストと単語の定義をプラスマイナス10単語ないに同時出現するかどうかという定義にすれば対称な関係性になるX<sub>ij</sub>=X<sub>ji</sub></span></p><p>コンテキスト単語を必ずターゲット単語の直前と定義すると対称にはならない</p><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601790882809-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-10-04+14.51.52.png"><span
      class="fr-inner">GloVe</span></span></span></p><p><a href="https://www.aclweb.org/anthology/D14-1162.pdf"></a>参考文献<a
      href="https://www.aclweb.org/anthology/D14-1162.pdf">&nbsp;GloVe: Global Vectors
      for Word Representation</a></p><p><br></p><p><span class="fr-img-caption fr-fic
      fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601791041105-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-10-04+14.38.26.png"><span
      class="fr-inner">GloVe モデル</span></span></span></p><p><br></p><p><span class="fr-img-caption
      fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601790307603-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-10-04+14.44.39.png"><span
      class="fr-inner">単語埋め込み</span></span></span></p><p><br></p><h3>6. Sentiment
      Classification (感情分類)</h3><p><br></p><p><br></p><p><img src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601791592628-1601791592628.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p>シンプルな単語埋め込みモデル</p><p>以下の分では、実際は非常に過酷なレビューであるにも関わらず(文中のgoodにより)良いレビューと分析してしまう</p><p>&quot;Completely
      lacking of good taste, good service, and good ambience.&quot;</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601792374952-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-10-04+15.19.17.png"><span
      class="fr-inner">シンプルな感情分析モデル</span></span></span></p><p><br></p><p>単に、単語ベクトルを足し合わるのではなく、RNNモデルを使用することもできる</p><p><br></p><p>RNNの構造
      many to one (入力多から出力1を意味する)</p><p>前のモデルとは異なり、RNNでは単語の順序を考慮に入れるため、&quot;lack&quot;や&quot;absense&quot;などのネガティブな文脈を認識して分析できるようになる</p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601793655733-1601793655733.png"><span
      class="fr-inner">RNNでの感情分析</span></span></span></p><h4><br></h4><h3>7. Debiasing
      word embeddings</h3><p><br></p><p>ここでのバイアスは、統計学でのバイアスではなく、偏向を意味する</p><p>単語の埋め込みにおけるこれらの形式のバイアスを軽減または排除するためのアイデアのいくつかを示す</p><p>「男性がコンピュータプログラマーだったら、女性は主婦」「父が医者だったら母が看護師」みたいに、偏った見方をあまり持つべきではない。</p><p>特に注意すべきが、社会経済的地位に関連するバイアスです。
      裕福な家庭でも、低所得の家庭でも、その間のどこからでも、誰もが素晴らしい機会を持つべきだと思います。</p><p><br></p><p><br></p><p><span
      class="fr-img-caption fr-fic fr-dib fr-fil" style="width: 600px;"><span class="fr-img-wrap"><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601799247725-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-10-04+17.13.17.png"><span
      class="fr-inner">単語埋め込みによる偏見問題</span></span></span></p><p>参考文献 <a href="https://papers.nips.cc/paper/6228-man-is-to-computer-programmer-as-woman-is-to-homemaker-debiasing-word-embeddings.pdf">Man
      is to Computer Programmer as Woman is to Homemaker? Debiasing Word Embeddings</a></p><p><br></p><p><img
      src="https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1601799665550-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-10-04+17.20.45.png"
      style="width: 600px;" class="fr-fic fr-dib fr-fil"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p>スキップグラム
      参考記事</p><p><a href="https://www.randpy.tokyo/entry/word2vec_skip_gram_model">https://www.randpy.tokyo/entry/word2vec_skip_gram_model</a></p><p><br></p><p>個人的に好きなRNNチートシート</p><p><a
      href="https://stanford.edu/~shervine/l/ja/teaching/cs-230/cheatsheet-recurrent-neural-networks">https://stanford.edu/~shervine/l/ja/teaching/cs-230/cheatsheet-recurrent-neural-networks</a></p><p><br></p>'
    - '2020-06-20 19:59:30.16443'
    - '2020-10-06 07:49:53.07488'
  - - 231
    - EC2 ディスクサイズ(EBSボリュームサイズ)の増量
    - "<h1 style=\"text-align: center;\">EC2 ディスクサイズの増量</h1><p><br></p><nav class=\"mkj\"
      style=\"border-radius: 3px; font-weight: 700; line-height: 1.4; background:
      rgb(255, 251, 244); padding: 0px; border: 2px solid rgb(248, 145, 116); margin-bottom:
      2em;\"><h2 style=\"padding: 8px 12px; margin: -1px; background: rgb(248, 145,
      116); border: none; font-size: 18px; text-align: center; color: rgb(255, 255,
      255);\"><i class=\"fa fa-th-list\"></i> Table of Contents</h2><ol style=\"border-radius:
      3px;\"><li><a href=\"#section\" style=\"color: rgb(84, 84, 84); padding: 8px
      0px; display: block; text-decoration: none;\">必要になった経緯</a></li><li><a href=\"#section2\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">解決策</a></li><li><a href=\"#section3\" style=\"color: rgb(84, 84, 84);
      padding: 8px 0px; display: block; text-decoration: none;\">変更確認</a></li><li><a
      href=\"#section4\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">おまけ</a></li></ol></nav><p><br></p><h2 id=\"section\">必要になった経緯</h2><hr><p>インスタンスは起動しているが、EC2上で動かしているWEBページが落ちてしまっていた。</p><p>よくわからないまま、EC2を再起動してWEBページを再度たちあげたところ、数日後にまたもWEBページが落ちていた。</p><p><strong><span
      style=\"color: rgb(184, 49, 47);\">原因は、ディスク容量を使い果たしたこと</span></strong>であった。</p><p>EC2を再起動すると、キャッシュなどが減ってディスクが1%空きが生まれたためWEBページが復活していたが、数日後にはすぐに100%になり、またWEBページが落ちるという事態になっていた。</p><p>ディスク100%ではファイルの書き込みや作成が一切不可になるため、ディスクの空きを作ってやる必要がある。</p><p><br></p><p><span
      style=\"color: rgb(163, 143, 132);\">EC2インスタンスにSSH接続すると同時に、マシンに空き容量がないと警告が表示される</span></p><pre> 
           __|  __|_  )\r\n       _|  (     /   Amazon Linux 2 AMI\r\n      ___|\\___|___|\r\n\r\n\r\nhttps://aws.amazon.com/amazon-linux-2/\r\n/home/ユーザー名/.rbenv/libexec/rbenv-init:
      行 131: ヒアドキュメント用一時ファイルを作成できません: No space left on device</pre><p><br></p><p><span
      style=\"color: rgb(163, 143, 132);\">ディスクの空き領域を確認して見ると100%になっている</span></p><pre>[ユーザー名@ip-x-x-x-x
      ~]$ df -h\r\nファイルシス   サイズ  使用  残り 使用% マウント位置\r\ndevtmpfs         475M     0  475M 
        0% /dev\r\ntmpfs            492M     0  492M    0% /dev/shm\r\ntmpfs     
            492M   26M  467M    6% /run\r\ntmpfs            492M     0  492M    0%
      /sys/fs/cgroup\r\n/dev/xvda1       8.0G  8.0G   20K  <span style=\"color: rgb(184,
      49, 47);\">100%</span> /\r\ntmpfs             99M     0   99M    0% /run/user/1001\r\n\r\n[ユーザー名@ip-x-x-x-x
      ~]$ df -i\r\nファイルシス   Iノード  I使用  I残り I使用% マウント位置\r\ndevtmpfs        121427 
        281 121146     1% /dev\r\ntmpfs           125916      1 125915     1% /dev/shm\r\ntmpfs
                125916    365 125551     1% /run\r\ntmpfs           125916     16
      125900     1% /sys/fs/cgroup\r\n/dev/xvda1      267752 267429    323   <span
      style=\"color: rgb(184, 49, 47);\">100%</span> /\r\ntmpfs           125916  
         1 125915     1% /run/user/1001</pre><p><br></p><p><br></p><h2 id=\"section2\">解決策</h2><hr><h3>1.
      EC2を再起動</h3><p>キャッシュや一時ファイルが削除されるので、場合によってはこれだけでディスク空き容量が大幅に増えることもあります。</p><p><strong><span
      style=\"color: rgb(184, 49, 47);\">これでもし十分な空き容量が確保できるようであれば解決</span></strong>です。</p><p>あまり変わらないようであれば、ディスクサイズを増やして解決しましょう。</p><p><br></p><h3>2.
      ディスクサイズ(EBSボリュームサイズ)の増量</h3><p><span style=\"color: rgb(163, 143, 132);\">Amazon
      Elastic Block Store (EBS) は、Amazon Elastic Compute Cloud (EC2) と共に使用するために設計された、使いやすい高性能なブロックストレージサービスです。</span></p><p><br></p><h4>必須条件
      (参考: <a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/modify-volume-requirements.html\">公式ドキュメント</a>)</h4><p>・インスタンスタイプがElastic
      Bolumesのサポート対象であるか確認</p><p>&nbsp; &nbsp; - すべての<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes\">現行世代のインスタンス</a>、もしくは次の旧世代のインスタンスであればOK:
      C1、C3、CC2、CR1、G2、I2、M1、M3、および R3</p><p>・2 TiB (2048 GiB) 以内でのブートボリュームのサイズ変更</p><p>&nbsp;
      &nbsp; - 基本ないと思うが、2 TiB (2048 GiB) 以上のブートボリュームに変更したい場合、面倒だが<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/modify-volume-requirements.html\">公式ドキュメント</a>見てやるしかない</p><p>・前回のボリューム変更から6時間以上経過</p><p>&nbsp;
      &nbsp; - ボリュームに変更を加える場合、前回のボリューム変更後に6時間以上待機してから、そのボリュームの状態が <code>in-use</code>
      または <code>available</code> であることを確認</p><p><br></p><p><strong><br></strong></p><p><br></p><p>ボリュームを変更する場合は、次のプロセスで行います。</p><ol><li><p>(任意)
      重要なデータを含むボリュームを変更する前に、変更をロールバックする必要がある場合に備えて、ボリュームのスナップショットを作成するのが良い。</p></li><li><p>ボリュームの変更をリクエストします。</p></li><li><p>ボリューム変更の進行状況をモニタリングします。</p></li><li><p>ボリュームのサイズが変更された場合、増加されたストレージ容量を利用するには、ボリュームのファイルシステムを拡張します。</p></li></ol><p><br></p><p><br></p><p>1.
      いざという時のためのロールバック用スナップショットを作成</p><p><a href=\"https://ap-northeast-1.console.aws.amazon.com/\">AWSコンソール</a>にログイン後、左側のナビゲーションバーからElastic
      Block Store下のボリュームをクリック</p><p>EC2にアタッチされているボリュームを探し、アクションからスナップショットの作成をクリック</p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1596295469697-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-07-29+9.09.50.png\"
      style=\"width: 700px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p>2.
      ボリュームの変更をリクエスト</p><p><img src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1596296087521-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2020-08-02+0.32.54.png\"
      style=\"width: 700px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1596298823734-change_volume.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><img
      src=\"https://s3-ap-northeast-1.amazonaws.com/dragonarrow/uploads%2F1596296396996-finish_request.png\"
      style=\"width: 600px;\" class=\"fr-fic fr-dib fr-fil\"></p><p><br></p><p><br></p><p>3.
      ボリューム変更の進行状況をモニタリング</p><p>EBSボリューム一覧で対象のボリュームを確認すると、状態列の値が変化しているはずです。 ボリュームの状態は
      modifying、optimizing、completed の順に変わるとのこと。ただ私の環境ではmodifyの状態は確認できず、すぐoptimizing（in-use
      - optimizing）になっていました。あまり大きく無いサイズだったからでしょうかね。 optimizing以降になっていれば次の操作が可能ですので、次に進みましょう。</p><p><br></p><p>4.
      ファイルシステムの拡張</p><p>筆者の場合は、何もせずファイルシステムに拡張されていたので作業終了だったのですが、ファイルシステム拡張の手順となる公式ドキュメントページを載せて起きます</p><p><br></p><p>公式ドキュメント<a
      href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html\">&nbsp;https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html</a></p><p>Linux初学者の場合はこちらの記事の方がわかりやすい
      <a href=\"https://qiita.com/mangano-ito/items/629b10ea5d1ab80f2cc6\">https://qiita.com/mangano-ito/items/629b10ea5d1ab80f2cc6</a></p><p><br></p><p><br></p><h2
      id=\"section3\">変更確認</h2><hr><p>/dev/xvdaが、ボリュームが８GiB-&gt;10GiBに変わっていることを確認</p><p><br></p><pre>[ユーザー名@ip-x-x-x-x
      ~]$ df -h\r\nファイルシス   サイズ  使用  残り 使用% マウント位置\r\ndevtmpfs         475M     0  475M 
        0% /dev\r\ntmpfs            492M     0  492M    0% /dev/shm\r\ntmpfs     
            492M  420K  492M    1% /run\r\ntmpfs            492M     0  492M    0%
      /sys/fs/cgroup\r\n/dev/xvda1        10G  8.0G  2.0G   81% /\r\ntmpfs        
          99M     0   99M    0% /run/user/1001\r\n\r\n[ユーザー名@ip-x-x-x-x ~]$ df -i\r\nファイルシス   Iノード  I使用   I残り I使用% マウント位置\r\ndevtmpfs 
            121427    281  121146     1% /dev\r\ntmpfs           125916      1  125915
          1% /dev/shm\r\ntmpfs           125916    351  125565     1% /run\r\ntmpfs
                125916     16  125900     1% /sys/fs/cgroup\r\n/dev/xvda1     4444760
      267411 4177349     7% /\r\ntmpfs           125916      1  125915     1% /run/user/1001</pre><p><br></p><p><br></p><h2
      id=\"section4\">おまけ</h2><hr><p>ロールバックできるように作成したスナップショットがあれば、いつでもその時点の状態まで復元することができます。</p><p>スナップショットとは、ある時点でのソースコードや、ファイル、ディレクトリ、データベースファイルなどの状態を抜き出したもののこと</p><p>復元手順の参考記事<a
      href=\"https://qiita.com/takahashi-kazuki/items/23a5a7c62fc086d51909\">&nbsp;https://qiita.com/takahashi-kazuki/items/23a5a7c62fc086d51909</a></p><p><br></p><p><br></p>"
    - '2020-08-01 23:22:53.881631'
    - '2020-08-02 01:53:35.428467'
  - - 232
    - go言語 メリットとデメリット
    - "<h1 style=\"text-align: center;\">Goのメリット・デメリット</h1><p><br></p><nav class=\"mkj\"
      style=\"border-radius: 3px; font-weight: 700; line-height: 1.4; background:
      rgb(255, 251, 244); padding: 0px; border: 2px solid rgb(248, 145, 116); margin-bottom:
      2em;\"><h2 style=\"padding: 8px 12px; margin: -1px; background: rgb(248, 145,
      116); border: none; font-size: 18px; text-align: center; color: rgb(255, 255,
      255);\"><i class=\"fa fa-th-list\"></i> Table of Contents</h2><ol style=\"border-radius:
      3px;\"><li><a href=\"#section\" style=\"color: rgb(84, 84, 84); padding: 8px
      0px; display: block; text-decoration: none;\">6つのメリット</a></li><li><a href=\"#section2\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">4つのデメリット</a></li><li><a href=\"#section3\" style=\"color: rgb(84, 84,
      84); padding: 8px 0px; display: block; text-decoration: none;\">Go言語使用の検討</a></li></ol></nav><p><br></p><h2
      id=\"section\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em; background:
      #f5f5f5; border-left: 4px solid #672F86;\">Go言語のメリット6つ</span></h2><p><br></p><p><br></p><h3>Go言語のメリット1：初心者でも理解しやすい</h3><hr><p><strong><mark
      style=\"background-color: yellow;\">Go言語には、初心者でも理解しやすいというメリットがある。</mark></strong></p><p>Go言語はシンプルなプログラミング言語なので、文法も分かりやすいため、C言語やC#などを経験したことがない人にとっては扱いやすい言語。</p><p><br></p><p><br></p><h3>Go言語のメリット2：処理の速度が速い</h3><hr><p><strong><mark
      style=\"background-color: yellow;\">Go言語には、処理の速度が速いというメリットがある。</mark></strong></p><p>Go言語は直接機械語に変換するため、コンパイルが速い。</p><p
      dir=\"ltr\">シンプルな言語設計で、簡易的に複数処理を同時に行うことができる。</p><p dir=\"ltr\">他のプログラミング言語よりも処理を軽量かつ高速に行うことが可能。</p><p><br></p><p><br></p><h3>Go言語のメリット3：豊富な標準ライブラリ</h3><hr><p><strong><mark
      style=\"background-color: yellow;\">Go言語はライブラリが豊富に用意されているため、さまざまな機能を簡単に追加することが可能。</mark></strong></p><p>ライブラリに用意されている機能を効果的に利用することで、コード部分をより少なくシンプルに実装できる。</p><p><br></p><p><br></p><h3>Go言語のメリット4：並行処理が可能</h3><hr><p><strong><mark
      style=\"background-color: yellow;\">Go言語には、並行処理が可能というメリットがあります。</mark></strong></p><p>Go言語は並行処理が得意な言語です。goroutineやチャネルといった機能を使えば、大量のデータをCPUに負担をかけることなく処理することもできます。</p><p>そのため、これまで並行処理が苦手なPHPが利用されてきたWebサービスの開発に、Go言語が利用される機会が増えてきているようです。</p><p><br></p><p><br></p><h3>Go言語のメリット5：シングルバイナリ</h3><hr><p><strong><mark
      style=\"background-color: yellow;\">シングルバイナリのメリットは、1つのバイナリファイルなので、デプロイ(別サーバへの配置・実行)が容易になるというメリットがある。</mark></strong></p><p>サーバで実行環境を作る場合、モジュールをインストールしたり、ライブラリをリンクしたりコンパイルしたり、実行環境整備に手間がかかりますが、シングルバイナリの場合、それらをすべてインポート済み、リンク済みのユニットとして一つのファイルにまとめてしまい、デプロイ、あるいはインストールや実行するだけでこれらの機能のモノが作成できる</p><p><br></p><h3>Go言語のメリット6：クロスコンパイル</h3><hr><p><strong><mark
      style=\"background-color: yellow;\">クロスコンパイルのメリットは、開発者のOSとは違う環境でも、プログラムの実行が可能になるというメリットがある。</mark></strong></p><p>クロスコンパイルは、1つのGoのプログラムから、複数のOS向け(linux,mac,Windows)のバイナリを作成できることを指します</p><p><br></p><p><br></p><h2
      id=\"section2\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">Go言語のデメリット4つ</span></h2><p><br></p><h3>Go言語のデメリット1：情報量が少ない</h3><hr><p><strong><mark
      style=\"background-color: yellow;\">Go言語は新しい言語のため、情報量が少ないというデメリットがある。</mark></strong></p><p>Go言語は、Googleが開発したプログラミング言語で、2009年11月に最初のバージョンをオープンソースで公開された。</p><p>他の言語と比較しても情報量が少ない点はデメリットでしょう。特にこれから勉強しようと考えている方にとって、基本的な情報量の少なさがデメリットになるかもしれない。</p><p><br></p><p><br></p><h3>Go言語のデメリット2：コードの継承がない</h3><hr><p><strong><mark
      style=\"background-color: yellow;\">Go言語には、コードの継承がないというデメリットがあります。</mark></strong></p><p>オブジェクト指向のプログラミングでは、当たり前とされる継承がGo言語にはない。</p><p>そのため、オブジェクト指向の考え方でプログラミングをしようと思うと、思っていたようなプログラミングができない点はデメリットと言える。</p><p><br></p><h3>Go言語のデメリット3：Genericsがない</h3><hr><p><strong><mark
      style=\"background-color: yellow;\">Go言語には、Genericsが存在しないというデメリットがあります。</mark></strong></p><p>Genericsとはプログラミング言語の機能の1つで、同じプログラムコードでさまざまなデータ型のデータを処理できるものです。Go言語はメモリの管理機能として、メモリの中身の値の型<br>を明らかにしなければいけないルールがあります。</p><p>そのため、Go言語ではGenericsが使えないというデメリットがあります。</p><p><br></p><h3>Go言語のデメリット4：例外がない(エラーは値として処理)</h3><hr><p><strong><mark
      style=\"background-color: yellow;\">goには例外がない。Goのポリシーは例外は極力使わず、エラーを値として扱うものである。</mark></strong></p><p>panic,
      recoverで例外と同じようなことはできますが、Javaの例外のように気軽に使ってはなりません。</p><p>例外で返されたエラーを <code>try
      {...} catch (Exception e) {...}</code> みたいに処理しないといけないのは無意味に複雑なコードを作ってしまうため、Goでは別のアプローチとして、正常な値と、エラーで、複数の値を返す仕組みを採用した。</p><pre>(例)\r\n<code>f,
      err := os.Open(&quot;filename.ext&quot;)\r\nif err != nil {\r\n    log.Fatal(err)\r\n}\r\n//
      do something with the open *File f</code></pre><p><br></p><h2 id=\"section3\"><span
      style=\"display: block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left:
      4px solid #672F86;\">Go言語使用の検討</span></h2><p dir=\"ltr\">静的型付け、文法がシンプルでありパフォーマンスが良いため、チーム開発に向いています。</p><p
      dir=\"ltr\">オブジェクト指向言語に慣れているとGoのデメリットを嫌う傾向もあるので、メリットデメリットを知った上で、採用を検討してみてください。</p><p><br></p>"
    - '2020-10-11 00:39:36.26595'
    - '2020-10-20 09:29:58.717603'
  - - 233
    - go言語 fmt.Print関数 fmt.Println関数 fmt.Printf関数の違い
    - "<h1 style=\"text-align: center;\">fmtライブラリの標準出力</h1><nav class=\"mkj\" style=\"border-radius:
      3px; font-weight: 700; line-height: 1.4; background: rgb(255, 251, 244); padding:
      0px; border: 2px solid rgb(248, 145, 116); margin-bottom: 2em;\"><h2 style=\"padding:
      8px 12px; margin: -1px; background: rgb(248, 145, 116); border: none; font-size:
      18px; text-align: center; color: rgb(255, 255, 255);\"><i class=\"fa fa-th-list\"></i>
      Table of Contents</h2><ol style=\"border-radius: 3px;\"><li><a href=\"#section\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">fmt.Print / fmt.Println</a></li><li><a href=\"#section2\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">fmt.Printf</a></li></ol></nav><p><br></p><h2
      id=\"section\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em; background:
      #f5f5f5; border-left: 4px solid #672F86;\">fmt.Print / fmt.Println</span></h2><ul><li
      dir=\"ltr\"><p dir=\"ltr\">fmt.Print関数／fmt.Println関数</p><ul><li dir=\"ltr\"><p
      dir=\"ltr\">標準出力（後述）に出力を行う関数</p></li><li dir=\"ltr\"><p dir=\"ltr\">fmt.Printlnの方は末尾に改行をつけて表示する</p></li><li
      dir=\"ltr\"><p dir=\"ltr\">複数の値を渡せる</p></li></ul></li></ul><p><br></p><p><br></p><pre
      dir=\"ltr\"><code>package main\r\n\r\nimport &quot;fmt&quot;\r\n\r\n\r\nfunc main()
      {\r\n    fmt.Print(&quot;Hello, &quot;)             // 改行されない\r\n    fmt.Println(&quot;世界&quot;)
                    // 改行される\r\n    fmt.Println(&quot;A&quot;, 100, true, 1.5) //
      スペース区切りで表示される\r\n}</code></pre><p>(出力)</p><p><code>Hello, 世界&nbsp;</code></p><p><code>A
      100 true 1.5</code></p><p><br></p><p><br></p><h2 id=\"section2\"><span style=\"display:
      block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left: 4px solid
      #672F86;\">fmt.Printf関数</span></h2><ul><li dir=\"ltr\"><p dir=\"ltr\">fmt.Printf関数</p><ul><li
      dir=\"ltr\"><p dir=\"ltr\">書式（フォーマット）を指定して標準出力に出力を行う関数</p></li><li dir=\"ltr\"><p
      dir=\"ltr\">改行はされないので\\n（改行文字）で改行する</p></li><li><p>%dや%sで値の書式を指定して埋め込む</p></li></ul></li></ul><p><br></p><pre>package
      main\r\n\r\n\r\nimport &quot;fmt&quot;\r\n\r\n\r\nfunc main() {\r\n    fmt.Printf(&quot;Hello,
      世界\\n&quot;)      // \\nで改行する\r\n    fmt.Printf(&quot;%d-%s&quot;, 100, &quot;偶数&quot;)
      // %dは整数、%sは文字列\r\n}</pre><p>(出力)</p><p><code>Hello, 世界\r\n100-偶数</code></p><p><br></p><p>%にて書式を指定できるフォーマットの種類は以下の通り</p><table><thead><tr><th
      align=\"left\">種別</th><th align=\"left\">フォーマット</th><th align=\"left\">説明</th></tr></thead><tbody><tr><td
      align=\"left\">汎用</td><td align=\"left\">%v</td><td align=\"left\">デフォルトフォーマットを適用した値</td></tr><tr><td
      align=\"left\">汎用</td><td align=\"left\">%+v</td><td align=\"left\">構造体を出力する際、+フラグを加えるとフィールド名が表示される</td></tr><tr><td
      align=\"left\">汎用</td><td align=\"left\">%#v</td><td align=\"left\">この値をGo言語の構文で表現する</td></tr><tr><td
      align=\"left\">汎用</td><td align=\"left\">%T</td><td align=\"left\">この値の型をGo言語の構文で表現する</td></tr><tr><td
      align=\"left\">論理値</td><td align=\"left\">%t</td><td align=\"left\">単語、trueまたはfalse</td></tr><tr><td
      align=\"left\">整数値</td><td align=\"left\">%b</td><td align=\"left\">基数2</td></tr><tr><td
      align=\"left\">整数値</td><td align=\"left\">%c</td><td align=\"left\">対応するUnicodeコードポイントによって表される文字</td></tr><tr><td
      align=\"left\">整数値</td><td align=\"left\">%d</td><td align=\"left\">基数10</td></tr><tr><td
      align=\"left\">整数値</td><td align=\"left\">%o</td><td align=\"left\">基数8</td></tr><tr><td
      align=\"left\">整数値</td><td align=\"left\">%x</td><td align=\"left\">基数16、10以上の数には小文字(a-f)を使用</td></tr><tr><td
      align=\"left\">整数値</td><td align=\"left\">%X</td><td align=\"left\">基数16、10以上の数には大文字(A-F)を使用</td></tr><tr><td
      align=\"left\">整数値</td><td align=\"left\">%U</td><td align=\"left\">ユニコードフォーマット:
      U+1234; &ldquo;U+%x&rdquo;と同じ。デフォルトは、4桁</td></tr><tr><td align=\"left\">浮動小数、複素数</td><td
      align=\"left\">%e</td><td align=\"left\">科学的記数法、例: -1234.456e+78</td></tr><tr><td
      align=\"left\">浮動小数、複素数</td><td align=\"left\">%E</td><td align=\"left\">科学的記数法、例:
      -1234.456E+78</td></tr><tr><td align=\"left\">浮動小数、複素数</td><td align=\"left\">%f</td><td
      align=\"left\">指数なしの小数、例: 123.456</td></tr><tr><td align=\"left\">浮動小数、複素数</td><td
      align=\"left\">%g</td><td align=\"left\">%e、%fのどちらか出力の短い方</td></tr><tr><td align=\"left\">浮動小数、複素数</td><td
      align=\"left\">%G</td><td align=\"left\">%E、%fのどちらか出力の短い方</td></tr><tr><td align=\"left\">文字列、バイトスライス</td><td
      align=\"left\">%s</td><td align=\"left\">文字列またはスライスそのまま</td></tr><tr><td align=\"left\">文字列、バイトスライス</td><td
      align=\"left\">%q</td><td align=\"left\">Go言語の構文に従いダブルクォート形式でエスケープ</td></tr><tr><td
      align=\"left\">文字列、バイトスライス</td><td align=\"left\">%x</td><td align=\"left\">各バイトを2文字の16進数文字列として</td></tr><tr><td
      align=\"left\">ポインタ</td><td align=\"left\">%p</td><td align=\"left\">16進数文字列、先頭に0x</td></tr></tbody></table><p><br></p>"
    - '2020-10-15 22:26:08.96629'
    - '2020-10-31 13:22:49.829449'
  - - 234
    - go言語 fmt.Scan関数
    - "<h1 style=\"text-align: center;\">fmt.Scan関数</h1><p dir=\"ltr\"><br></p><h2><span
      style=\"display: block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left:
      4px solid #672F86;\">fmt.Scan関数</span></h2><ul><li dir=\"ltr\"><p dir=\"ltr\">fmt.Scan関数</p><ul><li
      dir=\"ltr\"><p dir=\"ltr\">渡した変数がある場所に入力したデータを入れる関数</p></li><li dir=\"ltr\"><p
      dir=\"ltr\">変数がある場所（ポインタ）については後述</p></li></ul></li></ul><p><br></p><pre dir=\"ltr\">package
      main\r\nimport &quot;fmt&quot;\r\nfunc main() {\r\n    var price int\r\n    fmt.Print(&quot;値段&gt;&quot;)\r\n 
        fmt.Scan(&amp;price)\r\n    fmt.Printf(&quot;%d円\\n&quot;, price)\r\n}</pre><p>(出力)</p><p><code>値段&gt;0円</code></p><p><br></p>"
    - '2020-10-15 22:35:27.347037'
    - '2020-10-20 09:30:21.607657'
  - - 235
    - go言語 コードの書式を揃える
    - '<h1 dir="ltr" style="text-align: center;">コードの書式を揃える</h1><p><br></p><h2><span
      style="display: block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left:
      4px solid #672F86;">gofmt</span></h2><ul><li><p dir="ltr">読み方：ごーふむと</p></li><li><p>標準のフォーマッタ</p></li><li><p>絶対に使う</p></li><li><p>-s
      オプションで冗長な書き方をシンプルにできる</p></li></ul><p><br></p><pre>$ go fmt yourfile.go </pre><p><br></p><h2><span
      style="display: block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left:
      4px solid #672F86;">goimports</span></h2><p><br></p><ul><li><p dir="ltr">import文を追加／削除してくれる</p></li><li><p
      dir="ltr">未使用パッケージのimportはエラーなので必須</p></li><li><p dir="ltr">フォーマットもかける</p></li><li><p
      dir="ltr">-s オプションがない</p></li></ul><p><br></p>'
    - '2020-10-15 22:48:54.132555'
    - '2020-10-15 22:48:54.132555'
  - - 236
    - go言語 静的解析ツール
    - "<h1 style=\"text-align: center;\">コードの品質を保つ</h1><p><br></p><h2>静的解析ツール&nbsp;</h2><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86); width: 39.0836%;\"><p dir=\"ltr\">go
      vet</p></td><td style=\"width: 60.6469%;\"><p dir=\"ltr\">ビルドは通るかもしれないが、バグの懸念のあるコードの検出</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86); width: 39.0836%;\"><p dir=\"ltr\">golint</p></td><td
      style=\"width: 60.6469%;\"><p dir=\"ltr\">コードの書式でGoらしくないコードを検出</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86); width: 39.0836%;\"><p dir=\"ltr\">errcheck</p></td><td
      style=\"width: 60.6469%;\"><p dir=\"ltr\">エラー処理のミスを検出</p></td></tr><tr><td style=\"background-color:
      rgb(235, 107, 86); width: 39.0836%;\"><p dir=\"ltr\">statickcheck</p></td><td
      style=\"width: 60.6469%;\"><p dir=\"ltr\">サードパーティ製の静的解析ツールのセット</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86); width: 39.0836%;\"><p dir=\"ltr\">GolangCI-Lint</p></td><td
      style=\"width: 60.6469%;\"><p dir=\"ltr\">サードパーティ製のLinter Runner</p></td></tr></tbody></table><p><br></p><p><br></p><h2
      id=\"section\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em; background:
      #f5f5f5; border-left: 4px solid #672F86;\">go vet</span></h2><ul><li dir=\"ltr\">コンパイラでは発見できないバグを見つける<ul><li
      dir=\"ltr\"><p dir=\"ltr\">go testを走らせれば自動で実行される（Go1.10から）</p></li><li dir=\"ltr\"><p
      dir=\"ltr\">The Go Playgroundでも実行される</p></li></ul></li></ul><p><br></p><pre
      dir=\"ltr\">package main\r\n\r\n\r\nimport &quot;fmt&quot;\r\n\r\n\r\nfunc main()
      {\r\n    fmt.Printf(&quot;%s\\n&quot;, 100) # %sなのに数値が渡されている\r\n}</pre><pre>$
      go vet your_file.go</pre><p><br></p><p><br></p><h2 id=\"section\"><span style=\"display:
      block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left: 4px solid
      #672F86;\">PRレビューで静的解析ツールを使用</span></h2><p><br></p><ul><li dir=\"ltr\"><p dir=\"ltr\">reviewdog</p><ul><li
      dir=\"ltr\"><p dir=\"ltr\"><a href=\"https://github.com/reviewdog/reviewdog\">https://github.com/reviewdog/reviewdog</a></p></li><li
      dir=\"ltr\"><p dir=\"ltr\">レビュー時に自動で静的解析ツールを実行する</p></li><li dir=\"ltr\"><p
      dir=\"ltr\">機械的にチェックできることは機械にやらせる</p></li><li dir=\"ltr\"><p dir=\"ltr\">人間だと忘れたり、細かいことだとケチつけるみたいで、指摘がしずらい</p></li><li
      dir=\"ltr\"><p dir=\"ltr\">設定ファイルを書けばreviewdogが勝手にPRにコメントをくれる</p></li></ul></li></ul><p><br></p><p><br></p><p><br></p>"
    - '2020-10-15 23:03:22.368305'
    - '2020-10-15 23:09:00.979429'
  - - 237
    - go言語 変数と定数
    - "<h1 style=\"text-align: center;\">変数と定数</h1><p><br></p><nav class=\"mkj\" style=\"border-radius:
      3px; font-weight: 700; line-height: 1.4; background: rgb(255, 251, 244); padding:
      0px; border: 2px solid rgb(248, 145, 116); margin-bottom: 2em;\"><h2 style=\"padding:
      8px 12px; margin: -1px; background: rgb(248, 145, 116); border: none; font-size:
      18px; text-align: center; color: rgb(255, 255, 255);\"><i class=\"fa fa-th-list\"></i>
      Table of Contents</h2><ol style=\"border-radius: 3px;\"><li><a href=\"#section\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">基礎知識</a></li><li><a href=\"#section2\" style=\"color: rgb(84, 84, 84);
      padding: 8px 0px; display: block; text-decoration: none;\">変数と型</a></li><li><a
      href=\"#section3\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">Goの型付け</a></li><li><a href=\"#section4\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">型</a></li><li><a
      href=\"#section5\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">変数のゼロ値</a></li><li><a href=\"#section6\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">定数</a></li><li><a
      href=\"#section7\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">定数式</a></li><li><a href=\"#section8\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">名前付き定数</a></li><li><a
      href=\"#section9\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">定数の型</a></li><li><a href=\"#section10\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">定数のデフォルト値</a></li><li><a
      href=\"#section11\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">右辺の省略</a></li><li><a href=\"#section12\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">iota</a></li></ol></nav><p><br></p><h2
      id=\"section\">基礎知識</h2><ul><li><p>メモリ上で管理されている値を保持する領域</p><ul><li><p>識別子（変数名）で識別される</p></li><li><p>処理中に一時的に値を保存しておくために必要</p></li><li><p>メモリ上にある値なのでマシンが止まると消える（揮発性）</p></li><li><p>プログラムの実行が終わると消える</p></li><li><p>結果を残したい場合はファイルなど外部記憶装置上で管理される領域や出力装置（プリンタなど）経由で出力する必要がある</p></li></ul></li></ul><p><br></p><h2
      id=\"section2\">変数と型</h2><ul><li><p>型</p><ul><li><p>どういう種類の値かを表すもの</p><ul><li><p>整数、浮動小数点数、真偽値、文字列
      など</p></li><li><p>自分で作ることも可能（ユーザ定義型）</p></li></ul></li><li><p>変数の型：どういう種類の値が入るのかを表したもの</p></li></ul></li><li><p>動的型付け言語</p><ul><li><p>Ruby,
      Python, PHPなど</p></li><li><p>プログラム実行時に型を検証する</p></li><li><p>変数に型がなく、なんでも代入できる</p></li></ul></li><li><p>静的型付け言語</p><ul><li><p>GoやC,
      java, TypeScriptなど</p></li><li><p>コンパイル時に型を検証する</p></li><li><p>変数に型がある、型が違うと代入できない</p></li></ul></li></ul><p><br></p><h2
      id=\"section3\">Goの型付け</h2><ul><li><p>実行前に型の不一致を検出できる</p><ul><li><p>コンパイルが通れば型の不一致が起きない</p></li><li><p>型の不一致によるバグは見つけづらい問題</p></li></ul></li><li><p>曖昧なものはエラーになる</p><ul><li><p>暗黙の型変換がない</p><ul><li><p>1
      + &quot;2&quot; =&gt; &quot;12&quot;（JavaScript）</p></li></ul></li><li><p>浮動小数点数と整数の演算など見つけづらいバグが起きにくい</p></li></ul></li><li><p>型推論がある</p><ul><li><p>明示的に型を書く必要がない場合が多い</p></li></ul></li></ul><p><br></p><p>変数定義</p><p><br></p><p>・変数定義と代入が一緒</p><pre><span
      style=\"color: rgb(184, 49, 47);\">var</span> n <span style=\"color: rgb(184,
      49, 47);\">int</span> = 100</pre><p><br></p><p>・変数定義と代入が別</p><pre><span style=\"color:
      rgb(184, 49, 47);\">var</span> n <span style=\"color: rgb(184, 49, 47);\">int</span>\r\nn
      = 100</pre><p><br></p><p>・型を省略(int型になる)</p><pre><span style=\"color: rgb(184,
      49, 47);\">var</span> n = 100</pre><p><br></p><p>varを省略 (注意)関数内のみでしかできない</p><pre>n
      := 100</pre><p><br></p><p>まとめて定義</p><pre><span style=\"color: rgb(184, 49, 47);\">var</span>
      (\r\n    n = 100\r\n    m = 200\r\n)</pre><p><br></p><h2 id=\"section4\">型</h2><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>整数</p></td><td><p>int, int8,
      int16, int32, int64,</p><p>uint, uint8, uint16, uint32, uint64,</p><p>uintptr,
      byte, rune</p></td></tr><tr><td style=\"background-color: rgb(235, 107, 86);\"><p>浮動小数点数</p></td><td><p>float32,
      float64</p></td></tr><tr><td style=\"background-color: rgb(235, 107, 86);\"><p>複素数</p></td><td><p>complex64,
      complex128</p></td></tr><tr><td style=\"background-color: rgb(235, 107, 86);\"><p>文字列</p></td><td><p>string</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>真偽値</p></td><td><p>bool</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>エラー</p></td><td><p>error</p></td></tr></tbody></table><p><br></p><h2
      id=\"section5\">変数のゼロ値</h2><p><br></p><p>Goの変数は明示的な初期化をしなくてもゼロ値で初めから初期値されている</p><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86); width: 64.0741%;\"><p>型</p></td><td
      style=\"width: 35.5555%; background-color: rgb(235, 107, 86);\"><p>ゼロ値</p></td></tr><tr><td
      style=\"width: 64.0741%;\"><p>intやfloat64などの数値</p></td><td style=\"width: 35.5555%;\"><p>0</p></td></tr><tr><td
      style=\"width: 64.0741%;\"><p>string</p></td><td style=\"width: 35.5555%;\"><p>&quot;&quot;</p></td></tr><tr><td
      style=\"width: 64.0741%;\"><p>bool</p></td><td style=\"width: 35.5555%;\"><p>false</p></td></tr><tr><td
      style=\"width: 64.0741%;\"><p>error</p></td><td style=\"width: 35.5555%;\"><p>nil</p></td></tr></tbody></table><p><br></p><h2
      id=\"section6\">定数</h2><ul><li><p>値の変わらないもの</p><ul><li><p>コンパイル時から値が変わらないもの</p></li><li><p>リテラルで記述されることが多い</p></li></ul></li></ul><p>&nbsp;</p><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86); width: 72.8571%;\"><p>種類</p></td><td
      style=\"background-color: rgb(235, 107, 86); width: 26.6667%;\"><p>例</p></td></tr><tr><td
      style=\"width: 72.8571%;\"><p>数値リテラル</p></td><td style=\"width: 26.6667%;\"><p>100,
      1.5, 1+4i</p></td></tr><tr><td style=\"width: 72.8571%;\"><p>文字列リテラル</p></td><td
      style=\"width: 26.6667%;\"><p>&quot;hoge&quot;</p></td></tr><tr><td style=\"width:
      72.8571%;\"><p>ルーンリテラル</p></td><td style=\"width: 26.6667%;\"><p>&#39;A&#39;,
      &#39;世&#39;</p></td></tr><tr><td style=\"width: 72.8571%;\"><p>真偽値リテラル</p></td><td
      style=\"width: 26.6667%;\"><p>true, false</p></td></tr></tbody></table><p><br></p><p><br></p><h2
      id=\"section7\">定数式</h2><p>定数のみからなる演算式&nbsp;</p><p><br></p><p>ビット演算子</p><blockquote><p>「&gt;&gt;」と「&lt;&lt;」はビット演算子と呼ばれているもので、数値を二進数であらわしたときに右にずらしたり左にずらしたりするものです。<br><br>たとえば十進数の5を二進数であらわすと101になります。<br>そこで左にずらしてみます。<br>101&nbsp;&lt;&lt;&nbsp;1&nbsp;&rarr;&nbsp;1010(二進数)で十進数だと10です。<br>101&nbsp;&lt;&lt;&nbsp;3&nbsp;&rarr;&nbsp;101000(二進数)で十進数だと40です。<br><br>今度は右にずらしてみます。<br>101&nbsp;&gt;&gt;&nbsp;1&nbsp;&rarr;&nbsp;10(二進数)で十進数だと2です。<br>101
      &gt;&gt; 2 &rarr; 1(二進数)で十進数でも1です。</p></blockquote><table><tbody><tr><td style=\"background-color:
      rgb(235, 107, 86); width: 44.3396%;\"><p>種類</p></td><td style=\"background-color:
      rgb(235, 107, 86); width: 40.4598%;\"><p>例</p></td><td style=\"background-color:
      rgb(235, 107, 86); width: 15.1724%;\"><p>演算結果</p></td></tr><tr><td style=\"width:
      44.3396%;\"><p>四則演算</p></td><td style=\"width: 40.4598%;\"><p>100 + 200</p></td><td
      style=\"width: 15.1724%;\"><p>300</p></td></tr><tr><td style=\"width: 44.3396%;\"><p>シフト演算</p></td><td
      style=\"width: 40.4598%;\"><p>1 &lt;&lt; 2</p></td><td style=\"width: 15.1724%;\"><p>4</p></td></tr><tr><td
      style=\"width: 44.3396%;\"><p>文字列結合</p></td><td style=\"width: 40.4598%;\"><p>&quot;Hello,
      &quot; + &quot;世界&quot;</p></td><td style=\"width: 15.1724%;\"><p>&quot;Hello,
      世界&quot;</p></td></tr><tr><td style=\"width: 44.3396%;\"><p>関係演算／論理演算</p></td><td
      style=\"width: 40.4598%;\"><p>!(10 == 20)</p></td><td style=\"width: 15.1724%;\"><p>true</p></td></tr></tbody></table><p><br></p><p><br></p><h2
      id=\"section8\">名前付き定数</h2><p><br></p><p>・型のある定数</p><pre><span style=\"color:
      rgb(184, 49, 47);\">const</span> n <span style=\"color: rgb(184, 49, 47);\">int</span>
      = 100</pre><p><br></p><p>・型のない定数</p><pre><span style=\"color: rgb(184, 49, 47);\">const</span>
      m = 100</pre><p><br></p><p>・定数式の使用</p><pre><span style=\"color: rgb(184, 49,
      47);\">const</span> s = &quot;Hello, &quot; + &quot;世界&quot;</pre><p><br></p><p>まとめて定義</p><pre><span
      style=\"color: rgb(184, 49, 47);\">const</span> (\r\n    x = 100\r\n    y =
      200\r\n)</pre><p><br></p><h2 id=\"section9\">定数の型</h2><p><br></p><ul><li><p>型を持たない定数</p><ul><li><p>型を明示しない場合に定数は型を持たず、デフォルトの型を持つ</p></li></ul></li></ul><p>&nbsp;</p><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>種類</p></td><td style=\"background-color:
      rgb(235, 107, 86); width: 36.4807%;\"><p>例</p></td><td style=\"background-color:
      rgb(235, 107, 86); width: 26.6094%;\"><p>デフォルトの型</p></td></tr><tr><td><p>整数</p></td><td
      style=\"width: 36.4807%;\"><p>100</p></td><td style=\"width: 26.6094%;\"><p>int</p></td></tr><tr><td><p>浮動小数点数</p></td><td
      style=\"width: 36.4807%;\"><p>1.5</p></td><td style=\"width: 26.6094%;\"><p>float64</p></td></tr><tr><td><p>複素数</p></td><td
      style=\"width: 36.4807%;\"><p>1+4i</p></td><td style=\"width: 26.6094%;\"><p>complex128</p></td></tr><tr><td><p>ルーン</p></td><td
      style=\"width: 36.4807%;\"><p>&#39;A&#39;, &#39;世&#39;</p></td><td style=\"width:
      26.6094%;\"><p>rune</p></td></tr><tr><td><p>文字列</p></td><td style=\"width: 36.4807%;\"><p>&quot;hoge&quot;</p></td><td
      style=\"width: 26.6094%;\"><p>string</p></td></tr><tr><td><p>真偽値</p></td><td
      style=\"width: 36.4807%;\"><p>true</p></td><td style=\"width: 26.6094%;\"><p>bool</p></td></tr></tbody></table><p><br></p><p><br></p><h2
      id=\"section10\">定数のデフォルトの型</h2><p><br></p><ul><li><p>変数に代入される場合はデフォルトの型になる</p><ul><li><p>型推論ではデフォルトの型として推論される</p></li><li><p>型が指定されている変数への代入はその型になる</p></li><li><p>変数や型のある定数との演算はそれらの型になる</p><ul><li><p>キャストできない場合はコンパイルエラーになる</p></li></ul></li></ul></li></ul><pre><span
      style=\"color: rgb(184, 49, 47);\">package</span> main\r\n\r\n\r\n<span style=\"color:
      rgb(184, 49, 47);\">func</span> <span style=\"color: rgb(85, 57, 130);\">main</span>()
      {\r\n    <span style=\"color: rgb(163, 143, 132);\">// 定数は型を持たないので無限の精度になる</span>\r\n 
        <span style=\"color: rgb(184, 49, 47);\">const</span> n = <span style=\"color:
      rgb(44, 130, 201);\">10000000000000000000</span> / <span style=\"color: rgb(44,
      130, 201);\">10000000000000000000</span>\r\n    <span style=\"color: rgb(184,
      49, 47);\">var</span> m = n  <span style=\"color: rgb(163, 143, 132);\">// mはint型</span>\r\n 
        <span style=\"color: rgb(44, 130, 201);\">println</span>(m) <span style=\"color:
      rgb(163, 143, 132);\">// 1</span>\r\n}</pre><p><br></p><h2 id=\"section11\">右辺の省略</h2><p><br></p><ul><li><p>名前付き定数定義の右辺が省略できる</p><ul><li><p>グループ化された名前付き定数で用いられる</p></li><li><p>2つめ以降の名前付き定数の右辺を省略できる</p></li><li><p>2つめ以降の定数定義の右辺は、1つめの定数の右辺と同じになる</p></li></ul></li></ul><p><br></p><p><br></p><pre><span
      style=\"color: rgb(184, 49, 47);\">func</span> <span style=\"color: rgb(85,
      57, 130);\">main</span>() {\r\n    <span style=\"color: rgb(44, 130, 201);\">const</span> (\r\n 
            a = <span style=\"color: rgb(44, 130, 201);\">1</span> + <span style=\"color:
      rgb(44, 130, 201);\">2</span>\r\n        b <span style=\"color: rgb(163, 143,
      132);\">// 省略したら、１つ目の定義と同じになる</span>\r\n        c <span style=\"color: rgb(163,
      143, 132);\">// 省略したら、１つ目の定義と同じになる</span>\r\n    )\r\n    fmt.<span style=\"color:
      rgb(44, 130, 201);\">Println</span>(a, b, c) <span style=\"color: rgb(163, 143,
      132);\">// 全部3になる</span>\r\n}</pre><p><br></p><h2 id=\"section12\">iota</h2><ul><li><p>連続した定数(const)を作るための仕組み</p><ul><li><p>グループ化された名前付き定数の定義で使われる</p></li><li><p>0から始まり1ずつ加算される値として扱われる</p></li></ul></li></ul><p><br></p><p><br></p><pre>package
      main\r\n\r\n\r\nimport &quot;fmt&quot;\r\n\r\n<span style=\"color: rgb(184,
      49, 47);\">func</span> <span style=\"color: rgb(85, 57, 130);\">main</span>()
      {\r\n    const (\r\n        a = <span style=\"color: rgb(44, 130, 201);\">iota</span>
      <span style=\"color: rgb(163, 143, 132);\"># 0</span>\r\n        b <span style=\"color:
      rgb(163, 143, 132);\"># b = iota と同じで1</span>\r\n    )\r\n    const (\r\n     
        c = <span style=\"color: rgb(44, 130, 201);\">1</span> &lt;&lt; <span style=\"color:
      rgb(44, 130, 201);\">iota</span> <span style=\"color: rgb(163, 143, 132);\"># 1
      &lt;&lt; 0 なので1</span>\r\n        d <span style=\"color: rgb(163, 143, 132);\">#
      1 &lt;&lt; 1 なので2</span>\r\n        e <span style=\"color: rgb(163, 143, 132);\">#
      1 &lt;&lt; 2 なので4</span>\r\n    )\r\n    fmt.<span style=\"color: rgb(44, 130,
      201);\">Println</span>(a, b, c, d, e)\r\n}</pre><p>(出力)</p><pre>0 1 1 2 4</pre><p><br></p><p><br></p>"
    - '2020-10-17 12:43:23.945324'
    - '2020-10-20 09:30:33.642882'
  - - 238
    - go言語 演算子
    - "<h1 style=\"text-align: center;\">Go 演算子</h1><p><br></p><nav class=\"mkj\"
      style=\"border-radius: 3px; font-weight: 700; line-height: 1.4; background:
      rgb(255, 251, 244); padding: 0px; border: 2px solid rgb(248, 145, 116); margin-bottom:
      2em;\"><h2 style=\"padding: 8px 12px; margin: -1px; background: rgb(248, 145,
      116); border: none; font-size: 18px; text-align: center; color: rgb(255, 255,
      255);\"><i class=\"fa fa-th-list\"></i> Table of Contents</h2><ol style=\"border-radius:
      3px;\"><li><a href=\"#section\" style=\"color: rgb(84, 84, 84); padding: 8px
      0px; display: block; text-decoration: none;\">演算子一覧</a></li><li><a href=\"#section2\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">算術演算</a></li><li><a href=\"#section3\" style=\"color: rgb(84, 84, 84);
      padding: 8px 0px; display: block; text-decoration: none;\">代入演算</a></li><li><a
      href=\"#section4\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">ビット演算</a></li><li><a href=\"#section5\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">論理演算</a></li><li><a
      href=\"#section6\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">比較演算</a></li><li><a href=\"#section7\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">アドレス演算</a></li><li><a
      href=\"#section8\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">参照渡しと値渡し</a></li><li><a href=\"#section9\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">チャネル演算</a></li></ol></nav><h2
      id=\"section\"><a href=\"#section5\" style=\"color: rgb(84, 84, 84); padding:
      8px 0px; display: block; text-decoration: none;\">演算子一覧</a></h2><p><br></p><pre><a
      href=\"#section5\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\"></a><a>Expression</a> = <a href=\"https://golang.org/ref/spec#UnaryExpr\">UnaryExpr</a>
      | <a href=\"https://golang.org/ref/spec#Expression\">Expression</a> <a href=\"https://golang.org/ref/spec#binary_op\">binary_op</a>
      <a href=\"https://golang.org/ref/spec#Expression\">Expression</a> .\r\n<a>UnaryExpr</a>
      \ = <a href=\"https://golang.org/ref/spec#PrimaryExpr\">PrimaryExpr</a> | <a
      href=\"https://golang.org/ref/spec#unary_op\">unary_op</a> <a href=\"https://golang.org/ref/spec#UnaryExpr\">UnaryExpr</a>
      .\r\n\r\n<a>binary_op</a>  = &quot;||&quot; | &quot;&amp;&amp;&quot; | <a href=\"https://golang.org/ref/spec#rel_op\">rel_op</a>
      | <a href=\"https://golang.org/ref/spec#add_op\">add_op</a> | <a href=\"https://golang.org/ref/spec#mul_op\">mul_op</a>
      .\r\n<a>rel_op</a>     = &quot;==&quot; | &quot;!=&quot; | &quot;&lt;&quot;
      | &quot;&lt;=&quot; | &quot;&gt;&quot; | &quot;&gt;=&quot; .\r\n<a>add_op</a>
      \    = &quot;+&quot; | &quot;-&quot; | &quot;|&quot; | &quot;^&quot; .\r\n<a>mul_op</a>
      \    = &quot;*&quot; | &quot;/&quot; | &quot;%&quot; | &quot;&lt;&lt;&quot;
      | &quot;&gt;&gt;&quot; | &quot;&amp;&quot; | &quot;&amp;^&quot; .\r\n\r\n<a>unary_op</a>
      \  = &quot;+&quot; | &quot;-&quot; | &quot;!&quot; | &quot;^&quot; | &quot;*&quot;
      | &quot;&amp;&quot; | &quot;&lt;-&quot; .</pre><p>https://golang.org/ref/spec#Operators</p><p><br></p><h2
      id=\"section2\">算術演算</h2><table><tbody><tr><td style=\"background-color: rgb(235,
      107, 86); width: 35.6688%;\"><p>演算子</p></td><td style=\"background-color: rgb(235,
      107, 86); width: 48.2301%;\"><p>説明</p></td><td style=\"background-color: rgb(235,
      107, 86); width: 15.9292%;\"><p>利用例</p></td></tr><tr><td style=\"width: 35.6688%;\"><p>+,-</p></td><td
      style=\"width: 48.2301%;\"><p>符号</p></td><td style=\"width: 15.9292%;\"><p>+100,
      -100</p></td></tr><tr><td style=\"width: 35.6688%;\">+<p><br></p></td><td style=\"width:
      48.2301%;\"><p>加算</p></td><td style=\"width: 15.9292%;\"><p>1+2</p></td></tr><tr><td
      style=\"width: 35.6688%;\"><p>-</p></td><td style=\"width: 48.2301%;\"><p>減算</p></td><td
      style=\"width: 15.9292%;\"><p>1-1</p></td></tr><tr><td style=\"width: 35.6688%;\"><p>/</p></td><td
      style=\"width: 48.2301%;\"><p>割り算</p></td><td style=\"width: 15.9292%;\"><p>4/2</p></td></tr><tr><td
      style=\"width: 35.6688%;\"><p>*</p></td><td style=\"width: 48.2301%;\"><p>掛け算</p></td><td
      style=\"width: 15.9292%;\"><p>3*5</p></td></tr><tr><td style=\"width: 35.6688%;\"><p>%</p></td><td
      style=\"width: 48.2301%;\"><p>余り</p></td><td style=\"width: 15.9292%;\"><p>5%2</p></td></tr></tbody></table><p><br></p><pre><code>package
      main\r\n\r\nfunc main() {\r\n    println(5 + 2)    // 7 と表示されます\r\n    println(5
      - 2)    // 3 と表示されます\r\n    println(5 * 2)    // 10 と表示されます\r\n    println(5
      / 2)    // 2 と表示されます\r\n    println(5 % 2)    // 1 と表示されます</code>\r\n\r\n<code> 
        a := 5\r\n    b := 5</code>\r\n<code>    a++\r\n    b--\r\n    println(a)    //
      6 と表示されます\r\n    println(b)    // 4 と表示されます</code><code>\r\n}</code></pre><p><br></p><h2
      id=\"section3\">代入演算</h2><p>&nbsp;</p><table><tbody><tr><td style=\"background-color:
      rgb(235, 107, 86); width: 45.5645%;\"><p>演算子</p></td><td style=\"background-color:
      rgb(235, 107, 86); width: 42.5974%;\"><p>説明</p></td><td style=\"background-color:
      rgb(235, 107, 86); width: 11.9481%;\"><p>利用例</p></td></tr><tr><td style=\"width:
      45.5645%;\"><p>=</p></td><td style=\"width: 42.5974%;\"><p>変数への代入</p></td><td
      style=\"width: 11.9481%;\"><p>a = 100</p></td></tr><tr><td style=\"width: 45.5645%;\"><p>:=</p></td><td
      style=\"width: 42.5974%;\"><p>変数の初期化と代入</p></td><td style=\"width: 11.9481%;\"><p>a
      := 100</p></td></tr><tr><td style=\"width: 45.5645%;\"><p>+=,-= など</p></td><td
      style=\"width: 42.5974%;\"><p>演算と代入</p></td><td style=\"width: 11.9481%;\"><p>i
      += 2</p></td></tr><tr><td style=\"width: 45.5645%;\"><p>++</p></td><td style=\"width:
      42.5974%;\"><p>i += 1と同義</p></td><td style=\"width: 11.9481%;\"><p>i++</p></td></tr><tr><td
      style=\"width: 45.5645%;\"><p>--</p></td><td style=\"width: 42.5974%;\"><p>i
      -= 1と同義</p></td><td style=\"width: 11.9481%;\"><p>i--</p></td></tr></tbody></table><p><br></p><pre><code>var
      number int\r\nnumber = 100    // numberの値は100\r\nnumber = 200    // numberの値は200</code></pre><p><br></p><h2
      id=\"section4\">ビット演算</h2><p><br></p><p><strong>論理積:&nbsp;</strong>二つの命題(PとQとおく)のいずれも真のときに真となり、それ以外のときは偽となる。(P\\(\\wedge\\)Q)</p><p>論理回路や2進数の数値による論理積は、<span
      style=\"color: rgb(184, 49, 47);\">二つの入力の両方が1のときのみ出力が1となり、いずれか一方あるいは両方が0の場合は0となる</span>。</p><p><strong>論理和:&nbsp;</strong>二つの命題(PとQとおく)のいずれか一方あるいは両方が真のときに真となり、いずれも偽のときに偽となるもの。(P\\(\\vee\\)Q)</p><p>論理回路や2進数の数値による論理和は、<span
      style=\"color: rgb(44, 130, 201);\">二つの入力のいずか一方あるいは両方が1のとき出力が1となり、いずれも0の場合に0となる</span>。</p><p><strong>排他的論理和:&nbsp;</strong>2つの入力のどちらか片方が真でもう片方が偽の時には結果が真となり、両方とも真あるいは両方とも偽の時は偽となる演算（<strong>論理</strong>演算）である。
      XOR</p><p><strong>否定:&nbsp;</strong>論理回路や2進数の数値による論理和は、真を偽に、偽を真に反転させる。</p><p><br></p><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86); width: 18.5299%;\"><p>演算子</p></td><td
      style=\"background-color: rgb(235, 107, 86); width: 68.2203%;\"><p>説明</p></td><td
      style=\"background-color: rgb(235, 107, 86); width: 12.7119%;\"><p>利用例</p></td></tr><tr><td
      style=\"width: 18.5299%;\"><p>|</p></td><td style=\"width: 68.2203%;\"><p>論理和</p></td><td
      style=\"width: 12.7119%;\"><p>0x10|0x01</p></td></tr><tr><td style=\"width:
      18.5299%;\"><p>&amp;</p></td><td style=\"width: 68.2203%;\"><p>論理積</p></td><td
      style=\"width: 12.7119%;\"><p>0x1&amp;0xf</p></td></tr><tr><td style=\"width:
      18.5299%;\"><p>^</p></td><td style=\"width: 68.2203%;\">否定<p><br></p></td><td
      style=\"width: 12.7119%;\"><p>^0x3</p></td></tr><tr><td style=\"width: 18.5299%;\"><p>^</p></td><td
      style=\"width: 68.2203%;\"><p>排他的論理和</p></td><td style=\"width: 12.7119%;\"><p>0xc^0x3</p></td></tr><tr><td
      style=\"width: 18.5299%;\"><p>&amp;^</p></td><td style=\"width: 68.2203%;\"><p>論理積の否定</p></td><td
      style=\"width: 12.7119%;\"><p>0xc&amp;^0x3</p></td></tr><tr><td style=\"width:
      18.5299%;\"><p>&lt;&lt;</p></td><td style=\"width: 68.2203%;\"><p>左に算術シフト</p></td><td
      style=\"width: 12.7119%;\"><p>0x1&lt;&lt;4</p></td></tr><tr><td style=\"width:
      18.5299%;\"><p>&gt;&gt;</p></td><td style=\"width: 68.2203%;\"><p>右に算術シフト</p></td><td
      style=\"width: 12.7119%;\"><p>0x4&gt;&gt;1</p></td></tr></tbody></table><p><br></p><pre>package
      main\r\n\r\nimport &quot;fmt&quot;\r\n\r\nfunc main() {\r\n    a, b := 255,
      85 // 2進数では、11111111, 01010101\r\n\r\n    // 論理積\r\n    fmt.Printf(&quot;%08b\\n&quot;,
      a&amp;b) // 01010101\r\n\r\n    // 論理和\r\n    fmt.Printf(&quot;%08b\\n&quot;,
      a|b) // 11111111\r\n\r\n    //排他的論理和\r\n    fmt.Printf(&quot;%08b\\n&quot;,
      a^b) // 10101010\r\n\r\n    // 論理積の否定 \r\n    fmt.Printf(&quot;%08b\\n&quot;,
      a&amp;^b) // 10101010\r\n\r\n    //算術シフト\r\n    c, d := 15, 240            //
      00001111, 11110000\r\n    fmt.Printf(&quot;%08b\\n&quot;, c&lt;&lt;4) // 11110000\r\n    fmt.Printf(&quot;%08b\\n&quot;,
      d&gt;&gt;4) // 00001111\r\n}</pre><p><br></p><h2 id=\"section5\">論理演算</h2><p><br></p><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86); width: 14.5794%;\"><p>演算子</p></td><td
      style=\"background-color: rgb(235, 107, 86); width: 21.6822%;\"><p>説明</p></td><td
      style=\"background-color: rgb(235, 107, 86); width: 63.7384%;\"><p>利用例</p></td></tr><tr><td
      style=\"width: 14.5794%; text-align: center;\"><p>||</p></td><td style=\"width:
      21.6822%;\"><p>または</p></td><td style=\"width: 63.7384%;\"><p>a || b</p></td></tr><tr><td
      style=\"width: 14.5794%; text-align: center;\"><p>&amp;&amp;</p></td><td style=\"width:
      21.6822%;\"><p>かつ</p></td><td style=\"width: 63.7384%;\"><p>a &amp;&amp; b</p></td></tr><tr><td
      style=\"width: 14.5794%; text-align: center;\"><p>!</p></td><td style=\"width:
      21.6822%;\"><p>否定</p></td><td style=\"width: 63.7384%;\"><p>!a</p></td></tr></tbody></table><p><br></p><pre><code>package
      main\r\n\r\nfunc main() {\r\n\r\n    println(5 &gt; 2 || 5 == 2 &amp;&amp; 5
      &lt; 2)    // true と表示されます\r\n    println(true || false || false)        //
      true と表示されます\r\n    println(false || false || false)    // false と表示されます</code>\r\n<code>
      \   </code><code>println(!(5 &gt; 2))    // false と表示されます\r\n    println(!(5
      &lt; 2))    // true と表示されます\r\n    println(!(5 &gt; 2 &amp;&amp; 5 == 2 &amp;&amp;
      5 &lt; 2))    // true と表示されます\r\n    println(!(5 &gt; 2 || 5 == 2 || 5 &lt;
      2))    // false と表示されます</code><code>\r\n}</code></pre><p><br></p><h2 id=\"section6\">比較演算</h2><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86); width: 42.0213%;\"><p>演算子</p></td><td
      style=\"background-color: rgb(235, 107, 86); width: 46.7577%;\"><p>説明</p></td><td
      style=\"background-color: rgb(235, 107, 86); width: 11.2628%;\"><p>利用例</p></td></tr><tr><td
      style=\"width: 42.0213%;\"><p>==</p></td><td style=\"width: 46.7577%;\"><p>等しいかどうか</p></td><td
      style=\"width: 11.2628%;\"><p>a == b</p></td></tr><tr><td style=\"width: 42.0213%;\"><p>!=</p></td><td
      style=\"width: 46.7577%;\"><p>等しくないか</p></td><td style=\"width: 11.2628%;\"><p>a
      != b</p></td></tr><tr><td style=\"width: 42.0213%;\"><p>&lt;</p></td><td style=\"width:
      46.7577%;\"><p>aはbより小さい</p></td><td style=\"width: 11.2628%;\"><p>a &lt; b</p></td></tr><tr><td
      style=\"width: 42.0213%;\"><p>&lt;=</p></td><td style=\"width: 46.7577%;\"><p>aはb以下</p></td><td
      style=\"width: 11.2628%;\"><p>a &lt;= b</p></td></tr><tr><td style=\"width:
      42.0213%;\"><p>&gt;</p></td><td style=\"width: 46.7577%;\"><p>aはbより大きい</p></td><td
      style=\"width: 11.2628%;\"><p>a &gt; b</p></td></tr><tr><td style=\"width: 42.0213%;\"><p>&gt;=</p></td><td
      style=\"width: 46.7577%;\"><p>aはb以上</p></td><td style=\"width: 11.2628%;\"><p>a
      &gt;= b</p></td></tr></tbody></table><p><br></p><p><br></p><h2 id=\"section7\">アドレス演算</h2><p><br></p><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86); width: 44.6281%;\"><p>演算子</p></td><td
      style=\"background-color: rgb(235, 107, 86); width: 39.8082%;\"><p>説明</p></td><td
      style=\"background-color: rgb(235, 107, 86); width: 15.5875%;\"><p>利用例</p></td></tr><tr><td
      style=\"width: 44.6281%;\"><p>&amp;</p></td><td style=\"width: 39.8082%;\"><p>ポインタを取得</p></td><td
      style=\"width: 15.5875%;\"><p>&amp;a</p></td></tr><tr><td style=\"width: 44.6281%;\"><p>*</p></td><td
      style=\"width: 39.8082%;\"><p>ポインタが指す値を取得</p></td><td style=\"width: 15.5875%;\"><p>*a</p></td></tr></tbody></table><p><br></p><pre><code>package
      main\r\n\r\nfunc main() {\r\n\r\n    num := 100</code>\r\n<code>    <span style=\"color:
      rgb(163, 143, 132);\">// ポインター名前は、先頭に p を付けたり、最後に ptr を付ける場合が多い。ポインターの型は、ポインターが指し示すアドレスに入っている値の型の前に
      *（アスタリスク）付けて指定</span>\r\n    var pnum *int = &amp;num\r\n    <span style=\"color:
      rgb(163, 143, 132);\">// pnum := &amp;num という簡略定義もできます</span>\r\n    \r\n    println(pnum)
      \   <span style=\"color: rgb(163, 143, 132);\">// 0xc000030780 などと16進数で表示される</span>\r\n
      \   println(*pnum)    <span style=\"color: rgb(163, 143, 132);\">// 100 と表示される</span>\r\n    *pnum
      = 200\r\n    println(pnum)    <span style=\"color: rgb(163, 143, 132);\">//
      0xc000030780 などと、上記と同じアドレスが表示される</span>\r\n    println(*pnum)    <span style=\"color:
      rgb(163, 143, 132);\">// 200 と表示される</span>\r\n}</code></pre><p><br></p><h2 id=\"section8\">参照渡しと値渡し</h2><p>変数の実体はメモリ上に格納された領域です。</p><p>「値渡し」と「参照渡し」とは、関数やメソッドにおける引数の渡し方の種類を表す用語です。説明すると、以下のようになります。</p><ul><li>「値渡し
      (call by value)」とは、コピー元とは異なるメモリー領域に変数の値をコピーする渡し方です。</li><li>「参照渡し (call by reference)」とは、変数のメモリ番地を共有するような渡し方です。</li></ul><p><br></p><h3>参照渡し</h3><p>違う関数の間で、同じ変数の値を読み書きできたら便利です。その方法の一つとして、グローバル変数を使う方法があります。しかし、プログラミングではグローバル変数の使用は推奨されていません。プログラムの管理が難しくなるからです。<strong><u>そこで使われるのがポインターを使った参照渡しという方法</u></strong>です。</p><pre><code>package
      main\r\n\r\nfunc main() {\r\n\r\n    name := &quot;名前は、main です&quot;\r\n    \r\n    println(name)\r\n    someFunc(&amp;name)\r\n    println(name)\r\n}\r\n</code>\r\n<code><span
      style=\"color: rgb(124, 112, 107);\">// ポインタの型には、アスタリスクをつけるのを忘れない、この場合は、関数の引数にはポインタが代入されるので、引数の型にはアスタリスクをつける</span>\r\nfunc
      someFunc(name *string) {\r\n    \r\n    *name = &quot;名前は、someFuncで書き換えられました&quot;\r\n    println(*name)\r\n}</code></pre><p>(出力)</p><p><code>名前は、main
      です&nbsp;</code></p><p><code>名前は、someFuncで書き換えられました&nbsp;</code></p><p><code>名前は、someFuncで書き換えられました</code></p><p><br></p><h3>値渡し</h3><p>値だけを渡してメモリは共有しないので、値を渡した関数でその値を変更しても、コピー元には変更が加わらない</p><pre><code>package
      main\r\n\r\nfunc main() {\r\n\r\n    name := &quot;名前は、main です&quot;\r\n    \r\n    println(name)\r\n    someFunc(name)\r\n    println(name)\r\n}\r\n\r\nfunc
      someFunc(name string) {\r\n    \r\n    name = &quot;名前は、someFunc で書き換えられました&quot;\r\n    println(name)\r\n}</code></pre><p><code>名前は、main
      です&nbsp;</code></p><p><code>名前は、someFunc で書き換えられました&nbsp;</code></p><p><code>名前は、main
      です</code></p><p><br></p><h2 id=\"section9\">チャネル演算</h2><p>goroutineとchannelの２つを理解する必要がある</p><p><br></p><p><strong>goroutine&nbsp;</strong>(ゴルーチン):
      <strong>Go ランタイムによって管理される</strong><strong>並行処理を扱うためのコルーチン</strong>。 普通のコルーチンとは違って処理の割り込みや再開を開発者がプログラム上から制御することはできない。</p><p>ゴルーチンはM:Nモデルと呼ばれる複数(N)のカーネルスレッドに
      複数(M)のユーザスレッドを対応させたものにスケジューリングされるため、 複数のCPUコアを扱うことができる。</p><p><strong>channel</strong>
      (チャネル): <strong>並行実行(同時に実行)されるgoroutine間を接続するパイプ(トンネル)</strong>であり、あるゴルーチンがチャネルへ値を送信し、別のゴルーチンがチャネル値を受け取るのに使用する</p><p>&nbsp;</p><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86); width: 27.8626%;\"><p dir=\"ltr\">演算子</p></td><td
      style=\"background-color: rgb(235, 107, 86); width: 45.9302%;\"><p dir=\"ltr\">説明</p></td><td
      style=\"background-color: rgb(235, 107, 86); width: 26.1628%;\"><p dir=\"ltr\">利用例</p></td></tr><tr><td
      style=\"width: 27.8626%;\"><p dir=\"ltr\">&lt;-</p></td><td style=\"width: 45.9302%;\"><p
      dir=\"ltr\">チャネルへの送受信</p></td><td style=\"width: 26.1628%;\"><p dir=\"ltr\">ch&lt;-100,
      &lt;-ch</p></td></tr></tbody></table><p><br></p><pre>func main() {\r\n\r\n    c1
      := make(chan string)\r\n    c2 := make(chan string)\r\n\r\n    go func() {\r\n
      \       time.Sleep(2 * time.Second)\r\n        c2 &lt;- &quot;two&quot;\r\n
      \   }()\r\n    go func() {\r\n        time.Sleep(1 * time.Second)\r\n        c1
      &lt;- &quot;one&quot;\r\n    }()\r\n\r\n    for i := 0; i &lt; 2; i++ {\r\n
      \       select {\r\n        case msg1 := &lt;-c1: <span style=\"color: rgb(163,
      143, 132);\">// チャネル1から送信完了した場合</span>\r\n            fmt.Println(&quot;received&quot;,
      msg1)\r\n        case msg2 := &lt;-c2: <span style=\"color: rgb(163, 143, 132);\">//
      チャネル2から送信完了した場合</span>\r\n            fmt.Println(&quot;received&quot;, msg2)\r\n
      \       }\r\n    }\r\n}</pre><p>(出力)</p><p><code>received one&nbsp;</code></p><p><code>received
      two</code></p><p><br></p>"
    - '2020-10-17 20:17:06.708976'
    - '2020-10-20 09:30:48.718404'
  - - 239
    - go言語 制御構文
    - "<h1 style=\"text-align: center;\">制御構文</h1><p><br></p><p><br></p><nav class=\"mkj\"
      style=\"border-radius: 3px; font-weight: 700; line-height: 1.4; background:
      rgb(255, 251, 244); padding: 0px; border: 2px solid rgb(248, 145, 116); margin-bottom:
      2em;\"><h2 style=\"padding: 8px 12px; margin: -1px; background: rgb(248, 145,
      116); border: none; font-size: 18px; text-align: center; color: rgb(255, 255,
      255);\"><i class=\"fa fa-th-list\"></i> Table of Contents</h2><ol style=\"border-radius:
      3px;\"><li><a href=\"#section\" style=\"color: rgb(84, 84, 84); padding: 8px
      0px; display: block; text-decoration: none;\">条件分岐 if</a></li><li><a href=\"#section2\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">条件分岐 switch</a></li><li><a href=\"#section3\" style=\"color: rgb(84,
      84, 84); padding: 8px 0px; display: block; text-decoration: none;\">繰り返し for</a></li><li><a
      href=\"#section4\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">break</a></li><li><a href=\"#section5\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">例題</a></li></ol></nav><h2
      id=\"section\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em; background:
      #f5f5f5; border-left: 4px solid #672F86;\">条件分岐 if</span></h2><p><br></p><ul><li>指定した条件で分岐する<ul><li>elseは条件に当てはまらない場合</li><li>elseの後にifをさらにつけることができる</li><li>elseやelse
      ifは省略可能</li></ul></li></ul><pre>package main\r\nimport &quot;fmt&quot;\r\n\r\nfunc
      main() {\r\n  x := 1\r\n\r\n\r\n  if x == 1 {\r\n      fmt.Println(&quot;xは1&quot;)\r\n 
      } else if x == 2 {\r\n      fmt.Println(&quot;xは2&quot;)\r\n  } else {\r\n 
          fmt.Println(&quot;xは1でも2でもない&quot;)\r\n  }\r\n}</pre><p><br></p><p dir=\"ltr\">条件式内だけで使用する変数をif文の式で定義できる</p><pre
      dir=\"ltr\">if a := f(); a &gt; 0 {\r\n    fmt.Println(a)\r\n} else {\r\n    fmt.Println(2*a)\r\n}</pre><p><br></p><h2
      id=\"section2\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">条件分岐 switch</span></h2><p>大量のif-elseをつなぐより可動性が上がる</p><ul><li
      dir=\"ltr\">breakがいらない</li><li dir=\"ltr\">caseをまたぐ際にはfallthroughを使う</li></ul><p
      dir=\"ltr\">何もしないとbreakになる</p><pre><span style=\"color: rgb(184, 49, 47);\">switch</span>(条件){\r\n　　case
      値 :\r\n　　　 処理\r\n   ・・・\r\n　　default:\r\n　　　 処理\r\n}</pre><p><br></p><p>例</p><pre>package
      main\r\nimport &quot;fmt&quot;\r\n\r\nfunc main(){\r\n    a := &quot;2&quot;\r\n 
        switch a {\r\n        case &quot;1&quot;:\r\n            fmt.Println(&quot;1つめ&quot;)\r\n 
            case &quot;2&quot;:\r\n            fmt.Println(&quot;2つめ&quot;) // 2つめが出力される\r\n 
            default:\r\n            fmt.Println(&quot;3つめ&quot;)\r\n    }\r\n}</pre><p><br></p><p>switch直後に条件を指定しない場合は、caseに式を指定する</p><pre>package main\r\nimport &quot;fmt&quot;\r\n\r\nfunc main(){\r\n
         a := &quot;2&quot;\r\n    switch {\r\n        case a == &quot;1&quot;:\r\n
                 fmt.Println(&quot;1つめ&quot;)\r\n        case a == &quot;2&quot;:\r\n
                 fmt.Println(&quot;2つめ&quot;) // 2つめが出力される\r\n        default:\r\n
                 fmt.Println(&quot;3つめ&quot;)\r\n    }\r\n}</pre><p><br></p><p>fallthroughステートメントを使うと、式switchの次のcase節の先頭のステートメントへ制御をうつす（この場合caseの条件はみない）</p><pre>package
      main\r\nimport &quot;fmt&quot;\r\n\r\nfunc main(){\r\n    a := 3\r\n    switch
      a {\r\n        case 1:\r\n            fmt.Println(&quot;1つめ&quot;)\r\n     
        case 2,3:\r\n            fmt.Println(&quot;2つめ&quot;) // 2つめが出力される\r\n   
              fallthrough\r\n        case 4,5:\r\n            fmt.Println(&quot;3つめ&quot;)
      // 2つめが出力される\r\n        default:\r\n            fmt.Println(&quot;4つめ&quot;)\r\n 
        }\r\n}</pre><p>(出力)</p><p><code>2つめ&nbsp;</code></p><p><code>3つめ</code></p><p><br></p><h2
      id=\"section3\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">繰り返し for</span></h2><p>処理を繰り返す時に使用する。最初にforを書くのでfor文と呼ばれる</p><p><br></p><pre><span
      style=\"color: rgb(184, 49, 47);\">for</span> 初期化式  ; 条件式  ;  増減式 {\r\n  繰り返される箇所\r\n}</pre><p>無限ループ</p><pre>for
      {\r\n}</pre><p>rangeを使った繰り返し</p><pre>for i, v := range []int{1, 2, 3} {\r\n}</pre><p><br></p><pre>import
      &quot;fmt&quot;\r\n\r\nfunc main(){\r\n    for i := 0; i &lt; 3; i++ {\r\n 
                fmt.Println(i) // 0 1 2 が出力される\r\n    }\r\n    color1 := []string{&quot;赤&quot;,&quot;黄&quot;,&quot;青&quot;}\r\n 
        for i := 0; i &lt; len(color1); i++ {\r\n        fmt.Println(color1[i]) //
      赤 黄 青が出力される\r\n    }\r\n    for i, v := range []string{&quot;猿&quot;, &quot;鳥&quot;,
      &quot;犬&quot;} {\r\n        fmt.Printf(&quot;インデックス:%d 値:%s\\r\\n&quot;, i,
      v)   \r\n    }\r\n}</pre><p>(出力)</p><p><code>0&nbsp;</code></p><p><code>1</code></p><p><code>&nbsp;2&nbsp;</code></p><p><code>赤&nbsp;</code></p><p><code>黄&nbsp;</code></p><p><code>青&nbsp;</code></p><p><code>インデックス:0
      値:猿&nbsp;</code></p><p><code>インデックス:1 値:鳥&nbsp;</code></p><p><code>インデックス:2
      値:犬</code></p><p><br></p><h2 id=\"section4\"><span style=\"display: block; padding:
      0.5em 1em 0.5em 1em; background: #f5f5f5; border-left: 4px solid #672F86;\">break</span></h2><p>ループから抜け出すのに使用する</p><p><br></p><pre>package
      main\r\nimport &quot;fmt&quot;\r\n\r\n<span style=\"color: rgb(163, 143, 132);\">//
      breakによる無限ループの脱出</span>\r\nfunc main() {\r\n    var i int // 0\r\n    for {\r\n 
            if i%2 == 1 {\r\n            fmt.Println(i) // 1が出力される\r\n            break\r\n 
            }\r\n        i++\r\n    }\r\n}</pre><p><br></p><p>抜け出したいループをラベル指定でbreak</p><p>ラベル名はLOOPやLなどの名前がつけられることが多い</p><pre>package
      main\r\nimport &quot;fmt&quot;\r\n\r\n\r\n// ラベル指定のbreak\r\nfunc main() {\r\n 
        var i int\r\nLOOP:\r\n    for {\r\n        switch {\r\n        case i%2 ==
      1:\r\n            fmt.Println(i)\r\n            break LOOP\r\n        }\r\n 
            i++\r\n    }\r\n}</pre><p><br></p><h2 id=\"section5\"><span style=\"display:
      block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left: 4px solid
      #672F86;\">例題</span></h2><p><br></p><p>1から100のうち、５の倍数を全て改行しながら出力するプログラム</p><p><br></p><pre>package
      main\r\nimport &quot;fmt&quot;\r\n\r\nfunc main() {\r\n    for i := 1; i &lt;=
      100; i++ {\r\n        if i%5 == 0 {\r\n            fmt.Println(i)\r\n        }\r\n 
        }\r\n\r\n    // switch版\r\n    //for i := 1; i &lt;= 100; i++ {\r\n    // 
        switch {\r\n    //    case i%5 == 0:\r\n    //        fmt.Println(i)\r\n 
        //    }\r\n    //}\r\n}</pre><p><br></p>"
    - '2020-10-18 23:53:02.033386'
    - '2020-10-20 09:31:30.844124'
  - - 240
    - go言語 型
    - "<h2 id=\"section\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">型</span></h2><h3>変数と型</h3><p>型</p><ul><li>どういう種類の値かを表すもの<ul><li>整数、浮動小数点数、真偽値、文字列
      など</li><li>自分で作ることも可能（ユーザ定義型）</li></ul></li><li>変数の型：どういう種類の値が入るのかを表したもの</li></ul><p>動的型付け言語</p><ul><li>プログラム実行時に型を検証する</li><li>変数に型がなく、なんでも代入できる</li><li>php,
      python, ruby, javascript, Elixirなど</li></ul><p>静的型付け言語</p><ul><li>コンパイル時に型を検証する</li><li>変数に型がある、型が違うと代入できない</li><li>C,
      C#, C++, java, go, typescriptなど</li></ul><p><br></p><h3>Goの利点</h3><p>実行前に型の不一致を検出できる</p><ul><li>コンパイルが通れば型の不一致が起きない</li><li>型の不一致によるバグは見つけづらい問題</li></ul><p>曖昧なものはエラーになる</p><ul><li>暗黙の型変換がない<ul><li>1
      + &quot;2&quot; =&gt; &quot;12&quot;（JavaScript）</li></ul></li><li>浮動小数点数と整数の演算など見つけづらいバグが起きにくい</li></ul><p>型推論がある</p><p>明示的に型を書く必要がない場合が多い</p><p><br></p><h3>組み込み型</h3><p>&nbsp;</p><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">整数</p></td><td><p
      dir=\"ltr\">int, int8, int16, int32, int64,</p><p dir=\"ltr\">uint, uint8, uint16,
      uint32, uint64,</p><p dir=\"ltr\">uintptr, byte, rune</p></td></tr><tr><td style=\"background-color:
      rgb(235, 107, 86);\"><p dir=\"ltr\">浮動小数点数</p></td><td><p dir=\"ltr\">float32,
      float64</p></td></tr><tr><td style=\"background-color: rgb(235, 107, 86);\"><p
      dir=\"ltr\">複素数</p></td><td><p dir=\"ltr\">complex64, complex128</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">文字列</p></td><td><p
      dir=\"ltr\">string</p></td></tr><tr><td style=\"background-color: rgb(235, 107,
      86);\"><p dir=\"ltr\">真偽値</p></td><td><p dir=\"ltr\">bool</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">エラー</p></td><td><p
      dir=\"ltr\">error</p></td></tr></tbody></table><p><br></p><h3>型ごとの値の範囲</h3><p><br></p><h4>符号なし整数</h4><table><thead><tr><th>型名</th><th>説明</th><th>範囲</th></tr></thead><tbody><tr><td>uint8</td><td>8ビット符号なし整数</td><td>0
      ～ 255</td></tr><tr><td>uint16</td><td>16ビット符号なし整数</td><td>0 ～ 65535</td></tr><tr><td>uint32</td><td>32ビット符号なし整数</td><td>0
      ～ 4294967295</td></tr><tr><td>uint64</td><td>64ビット符号なし整数</td><td>0 ～ 18446744073709551615</td></tr><tr><td>uint</td><td>32ビットまたは64ビットの符号なし整数<br>（環境依存）</td><td>0
      ～ 18446744073709551615<br><br>or<br><br>0 ～ 4294967295</td></tr><tr><td>uintptr</td><td>ポインタの値</td><td>（環境依存）</td></tr><tr><td>byte</td><td>uint8のエイリアス</td><td>0
      ～ 255</td></tr></tbody></table><p><br></p><h4>符号付き整数</h4><table><thead><tr><th>型名</th><th>説明</th><th>範囲</th></tr></thead><tbody><tr><td>int8</td><td>8ビット符号付き整数</td><td>-128
      ～ 127</td></tr><tr><td>int16</td><td>16ビット符号付き整数</td><td>-32768 ～ 32767</td></tr><tr><td>int32</td><td>32ビット符号付き整数</td><td>-2147483648
      ～ 2147483647</td></tr><tr><td>int64</td><td>64ビット符号付き整数</td><td>-9223372036854775808
      ～ 9223372036854775807</td></tr><tr><td>int</td><td>32ビットまたは64ビットの符号付き整数<br>（環境依存）</td><td>-2147483648
      ～ 2147483647<br><br>or<br><br>-9223372036854775808 ～ 9223372036854775807</td></tr><tr><td>rune</td><td>int32のエイリアス</td><td>-2147483648
      ～ 2147483647</td></tr></tbody></table><p><br></p><h4>浮動小数点数</h4><p>＊int型はあるが、float型というのはない</p><table><thead><tr><th>型名</th><th>説明</th></tr></thead><tbody><tr><td>float32</td><td>32ビット浮動小数点</td></tr><tr><td>float64</td><td>64ビット浮動小数点</td></tr></tbody></table><p><br></p><h4>複素数</h4><table><thead><tr><th>型名</th><th>説明</th></tr></thead><tbody><tr><td>complex64</td><td>実数部・虚数部をfloat32で表現する複素数</td></tr><tr><td>complex128</td><td>実数部・虚数部をfloat64で表現する複素数</td></tr></tbody></table><p><br></p><p>uint8&nbsp;</p><p>0
      ～ 255 の整数を値に保存</p><p><br></p><p><br></p><h3>型変換(キャスト)</h3><p>Go 言語では暗黙的な型変換は許されていないため、下記のような異なる型の変数への代入はコンパイルエラーになる</p><p><br></p><pre><code><span
      style=\"color: rgb(44, 130, 201);\">var</span> i <span style=\"color: rgb(44,
      130, 201);\">int</span> = <span style=\"color: rgb(84, 172, 210);\">100</span>\r\n<span
      style=\"color: rgb(44, 130, 201);\">var</span> f <span style=\"color: rgb(44,
      130, 201);\">float64</span> = i  // cannot use i (type int) as type float64\r\n</code></pre><p>このようなケースでは、下記のように明示的な型キャストを行う</p><pre><code><span
      style=\"color: rgb(44, 130, 201);\">var</span> i <span style=\"color: rgb(44,
      130, 201);\">int</span> = <span style=\"color: rgb(84, 172, 210);\">100</span>\r\n<span
      style=\"color: rgb(44, 130, 201);\">var</span> f <span style=\"color: rgb(44,
      130, 201);\">float64</span> = float64(i)  // OK</code></pre><p>キャスト例&nbsp;</p><p>intに変換</p><p>・int(値)</p><pre><code>var
      i float64 = 100\r\nvar f int = int(i)  // OK</code>\r\n\r\n<code>var i float64
      = </code>66.6<code>\r\nvar f int = int(i)  // 小数点は切り捨てられて、66になるので注意</code>\r\n\r\n<code><code>var
      i float32 = </code>66.6<code>\r\nvar f int = int(i)  // 小数点は切り捨てられて、66になるので注意</code></code></pre><p>int32に変換</p><p>・int32(値)</p><pre><code>var
      a uint8 = 100\r\nvar b uint32 = uint32(a) // OK</code></pre><p>int8に変換</p><p>・int8(値)</p><pre><code>var
      a uint32 = 1234567890\r\nvar b uint8 = uint8(a)\r\nfmt.Println(b)  // 210（情報が欠落する）
      0~255の場合しかuint8には正しくキャストできない</code></pre><p>[]byteに変換</p><p>&nbsp;・[]byte(値)</p><pre><code>var
      s <span style=\"color: rgb(41, 105, 176);\">string</span> = &quot;<span style=\"color:
      rgb(184, 49, 47);\">ABC</span>&quot;\r\nvar arr []<span style=\"color: rgb(41,
      105, 176);\">byte</span> = []<span style=\"color: rgb(41, 105, 176);\">byte</span>(s)\r\nfmt.Println(arr)
       // [65 66 67]</code></pre><p><br></p><p>stringに変換</p><p>・string(値)</p><pre><code>arr
      := []<span style=\"color: rgb(41, 105, 176);\">byte</span>{<span style=\"color:
      rgb(84, 172, 210);\">65</span>, <span style=\"color: rgb(84, 172, 210);\">66</span>,
      <span style=\"color: rgb(84, 172, 210);\">67</span>}\r\ns := <span style=\"color:
      rgb(41, 105, 176);\">string</span>(arr)\r\nfmt.Println(s)  // &quot;ABC&quot;</code></pre><p><br></p><p><br></p><h3>組み込み型
      (真偽値)</h3><table><thead><tr><th>型名</th><th>説明</th></tr></thead><tbody><tr><td>bool</td><td>真（true）<br>または<br>偽（false）</td></tr></tbody></table><p><br></p><p><br></p><pre><span
      style=\"color: rgb(184, 49, 47);\">package</span> main\r\n<span style=\"color:
      rgb(184, 49, 47);\">func</span> <span style=\"color: rgb(147, 101, 184);\">main</span>()
      {\r\n    <span style=\"color: rgb(184, 49, 47);\">var</span> a, b, c <span style=\"color:
      rgb(184, 49, 47);\">bool</span>\r\n    <span style=\"color: rgb(184, 49, 47);\">if</span>
      a &amp;&amp; b || !c {\r\n        <span style=\"color: rgb(44, 130, 201);\">println</span>(&quot;true&quot;)\r\n 
        } <span style=\"color: rgb(184, 49, 47);\">else</span> {\r\n        <span
      style=\"color: rgb(44, 130, 201);\">println</span>(&quot;false&quot;)\r\n    }\r\n}</pre><p>上記コードでは、真偽の判定は以下のようになる</p><p>&nbsp;</p><table><tbody><tr><td
      style=\"background-color: rgb(204, 204, 204);\"><p dir=\"ltr\">a</p></td><td
      style=\"background-color: rgb(204, 204, 204);\"><p dir=\"ltr\">b</p></td><td
      style=\"background-color: rgb(204, 204, 204);\"><p dir=\"ltr\">c</p></td><td
      style=\"width: 11.2472%; background-color: rgb(204, 204, 204);\"><p dir=\"ltr\">a
      &amp;&amp; b</p></td><td style=\"width: 39.576%; background-color: rgb(204,
      204, 204);\"><p dir=\"ltr\">!c</p></td><td style=\"width: 26.384%; background-color:
      rgb(204, 204, 204);\"><p dir=\"ltr\">a &amp;&amp; b || !c</p></td></tr><tr><td
      style=\"background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 11.2472%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 39.576%; background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"width: 26.384%; background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td></tr><tr><td
      style=\"background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"width: 11.2472%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 39.576%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 26.384%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td></tr><tr><td
      style=\"background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 11.2472%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 39.576%; background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"width: 26.384%; background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td></tr><tr><td
      style=\"background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"width: 11.2472%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 39.576%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 26.384%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 11.2472%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 39.576%; background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"width: 26.384%; background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"width: 11.2472%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 39.576%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 26.384%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 11.2472%; background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"width: 39.576%; background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"width: 26.384%; background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"width: 11.2472%; background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td><td
      style=\"width: 39.576%; background-color: rgb(84, 172, 210);\"><p dir=\"ltr\">F</p></td><td
      style=\"width: 26.384%; background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">T</p></td></tr></tbody></table><p><br></p><p><br></p><h3>コンポジット型</h3><p>複数のデータ型が集まって1つのデータ型になっている</p><p><br></p><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">型の種類</p></td><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">説明</p></td></tr><tr><td><p
      dir=\"ltr\">構造体</p></td><td><p dir=\"ltr\">型の異なるデータ型を集めたデータ型</p></td></tr><tr><td><p
      dir=\"ltr\">配列</p></td><td><p dir=\"ltr\">同じ型のデータを集めて並べたデータ型</p></td></tr><tr><td><p
      dir=\"ltr\">スライス</p></td><td><p dir=\"ltr\">配列の一部を切り出したデータ型</p></td></tr><tr><td><p
      dir=\"ltr\">マップ</p></td><td><p dir=\"ltr\">キーと値をマッピングさせたデータ型</p></td></tr></tbody></table><p><br></p><h3>コンポジット型のゼロ値</h3><ul><li>データの表現方法によって違う<ul><li>構造体や配列は要素（フィールド）がすべてゼロ値の値</li><li>スライスやマップはmakeなどで初期化が必要なためnilとなる</li></ul></li></ul><p>&nbsp;</p><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">型</p></td><td
      style=\"background-color: rgb(235, 107, 86);\"><p dir=\"ltr\">ゼロ値</p></td></tr><tr><td><p
      dir=\"ltr\">構造体</p></td><td><p dir=\"ltr\">フィールドがすべてゼロ値</p></td></tr><tr><td><p
      dir=\"ltr\">配列</p></td><td><p dir=\"ltr\">要素がすべてゼロ値</p></td></tr><tr><td><p
      dir=\"ltr\">スライス</p></td><td><p dir=\"ltr\">nil</p></td></tr><tr><td><p dir=\"ltr\">マップ</p></td><td><p
      dir=\"ltr\">nil</p></td></tr></tbody></table><p><br></p><h3>型リテラル</h3><ul><li>型リテラルとは<ul><li>型の具体的な定義を書き下した型の表現方法</li><li>コンポジット型などを表現するために使う</li><li>変数定義やユーザ定義型などで使用する</li></ul></li></ul><p>リテラル
      = 識別子（名前）が付与されてないもの</p><p><br></p><p>型を表すには<strong><span style=\"color: rgb(184,
      49, 47);\">名前をつけた型</span></strong>または<span style=\"color: rgb(41, 105, 176);\"><strong>型リテラル</strong></span>(名前のない型)で記述します。</p><p><br></p><p><span
      style=\"color: rgb(184, 49, 47);\"><strong>名前をつけた型の例</strong></span></p><pre>type
      IntArray [16]int\r\n\r\ntype (\r\n    Point struct{ x, y float64 }\r\n    Polar
      Point\r\n)\r\n\r\ntype TreeNode struct {\r\n    left, right *TreeNode\r\n    value
      *Comparable\r\n}\r\n\r\ntype Block interface {\r\n    BlockSize() int\r\n    Encrypt(src,
      dst []byte)\r\n    Decrypt(src, dst []byte)\r\n}</pre><p><br></p><p><strong><span
      style=\"color: rgb(41, 105, 176);\">型リテラルの例</span></strong></p><pre><code data-lang=\"go\">//
      配列型\r\n[10]int\r\n\r\n// 構造体型\r\nstruct {\r\n    // フィールドリスト\r\n}\r\n\r\n//
      ポインタ型\r\n*int\r\n\r\n// 関数型\r\nfunc(s string) int\r\n\r\n// インタフェース型\r\ninterface
      {\r\n    // メソッドリスト\r\n}\r\n\r\n// スライス型\r\n[]int\r\n\r\n// マップ型\r\nmap[string]int\r\n\r\n//
      チャネル型\r\nchan bool</code></pre><p><br></p><h3>構造体</h3><ul><li>型の異なるデータ型の変数を集めたデータ構造<ul><li>各変数はフィールドと呼ばれる<ul><li>下の例では構造体pはフィールドnameとageを持つ</li></ul></li><li>フィールドの型は異なってもよい（同じ型も可）</li><li>フィールドの型には組み込み型以外も使える<ul><li>コンポジット型やユーザ定義型も使える</li></ul></li></ul></li></ul><p><br></p><pre><span
      style=\"color: rgb(184, 49, 47);\">var</span> p <span style=\"color: rgb(184,
      49, 47);\">struct</span> {\r\n    name <span style=\"color: rgb(184, 49, 47);\">string</span>\r\n 
        age    <span style=\"color: rgb(184, 49, 47);\">int</span>\r\n}</pre><p><br></p><h3>構造体リテラル</h3><p><br></p><p>フィールドを指定して初期化（構造体リテラル）</p><p><br></p><p><br></p><p><strong>構造体リテラルの例</strong></p><pre><span
      style=\"color: rgb(251, 160, 38);\">package</span> main\r\n\r\n<span style=\"color:
      rgb(251, 160, 38);\">import</span> <span style=\"color: rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n)\r\n<span
      style=\"color: rgb(251, 160, 38);\">func</span> main() {\r\n    p := <span style=\"color:
      rgb(251, 160, 38);\">struct</span> {\r\n        name <span style=\"color: rgb(147,
      101, 184);\">string</span>\r\n        age  <span style=\"color: rgb(147, 101,
      184);\">int</span>\r\n    }{\r\n        name: &quot;Gopher&quot;,\r\n        age:
       <span style=\"color: rgb(41, 105, 176);\">10</span>,\r\n    }\r\n    fmt.Println(p)\r\n}</pre><p>(コンソール出力)</p><p><code>{Gopher
      10}&nbsp;</code></p><p><br></p><p>名前をつけた構造体の例</p><pre><span style=\"color: rgb(251,
      160, 38);\">package</span> main\r\n\r\n<span style=\"color: rgb(251, 160, 38);\">import</span>
      &quot;fmt&quot;\r\n\r\nfunc main() {\r\n    <span style=\"color: rgb(251, 160,
      38);\">type</span> MyStrut <span style=\"color: rgb(251, 160, 38);\">struct</span>
      {\r\n        name <span style=\"color: rgb(147, 101, 184);\">string</span>\r\n 
            age  <span style=\"color: rgb(147, 101, 184);\">int</span>\r\n    }\r\n 
        <span style=\"color: rgb(251, 160, 38);\">var</span> p = MyStrut{name: <span
      style=\"color: rgb(65, 168, 95);\">&quot;Gopher&quot;</span>, age:  <span style=\"color:
      rgb(184, 49, 47);\">10</span>}\r\n    <span style=\"color: rgb(163, 143, 132);\">//
      もしくはこっちでも良い</span>\r\n    <span style=\"color: rgb(163, 143, 132);\">// p :=
      MyStrut{name: &quot;Gopher&quot;, age:  10}</span>\r\n    fmt.Println(p)\r\n}</pre><p>(コンソール出力)</p><p><code>{Gopher
      10}&nbsp;</code></p><p><br></p><h3>フィールドの参照</h3><pre><span style=\"color: rgb(251,
      160, 38);\">package</span> main\r\n\r\n<span style=\"color: rgb(251, 160, 38);\">import</span>
      &quot;fmt&quot;\r\n\r\nfunc main() {\r\n    p := <span style=\"color: rgb(251,
      160, 38);\">struct</span> {\r\n        name <span style=\"color: rgb(147, 101,
      184);\">string</span> \r\n        age  <span style=\"color: rgb(147, 101, 184);\">int</span>\r\n 
            \r\n    }{ \r\n        name: &quot;Gopher&quot;, \r\n        age: 10,\r\n 
        }\r\n    p.age++ <span style=\"color: rgb(163, 143, 132);\">// p.age = p.age
      + 1と同じ</span>\r\n    fmt.Println(p.name, p.age)\r\n}</pre><p>(コンソール出力)</p><p><code>{Gopher
      11}&nbsp;</code></p><p><br></p>"
    - '2020-10-20 09:29:13.141485'
    - '2020-10-25 21:11:32.661199'
  - - 241
    - go言語 配列 スライス マップ
    - "<nav class=\"mkj\" style=\"border-radius: 3px; font-weight: 700; line-height:
      1.4; background: rgb(255, 251, 244); padding: 0px; border: 2px solid rgb(248,
      145, 116); margin-bottom: 2em;\"><h2 style=\"padding: 8px 12px; margin: -1px;
      background: rgb(248, 145, 116); border: none; font-size: 18px; text-align: center;
      color: rgb(255, 255, 255);\"><i class=\"fa fa-th-list\"></i> Table of Contents</h2><ol
      style=\"border-radius: 3px;\"><li><a href=\"#section\" style=\"color: rgb(84,
      84, 84); padding: 8px 0px; display: block; text-decoration: none;\">配列</a></li><li><a
      href=\"#section2\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">スライス</a></li><li><a href=\"#section3\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">マップ</a></li></ol></nav><p><br></p><h2
      id=\"section\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em; background:
      #f5f5f5; border-left: 4px solid #672F86;\">配列</span></h2><h3>配列</h3><ul><li>同じ型の値を集めて並べたもの<ul><li>要素の型はすべて同じ</li><li>要素数が違えば別の型</li><li>要素数は変更できない</li><li>型は型リテラルで記述することが多い</li></ul></li></ul><p><br></p><p><strong>配列の宣言</strong>
      3パターン</p><pre>① var 変数名 [長さ]型\r\n② var 変数名 [長さ]型 = [大きさ]型{初期値1, 初期値n} \r\n③
      変数名 := [...]型{初期値１, 初期値n}</pre><p><br></p><pre>package main\r\nimport &quot;fmt&quot;<span
      style=\"color: rgb(163, 143, 132);\">\r\n</span>func main(){\r\n<span style=\"color:
      rgb(163, 143, 132);\">    // パターン①\r\n    var arr[2] string </span>\r\n<span
      style=\"color: rgb(163, 143, 132);\">\r\n        arr[0] = &quot;Golange&quot;\r\n 
            arr[1] = &quot;Java&quot;</span>\r\n\r\n<span style=\"color: rgb(163,
      143, 132);\">    // パターン②  </span> \r\n<span style=\"color: rgb(163, 143, 132);\"> 
            var arr[2] string = [2]string {&quot;Golang&quot;, &quot;Java&quot;}</span>\r\n\r\n
      \   <span style=\"color: rgb(163, 143, 132);\">// パターン③</span>\r\n<span style=\"color:
      rgb(163, 143, 132);\">        arr := [...] string{&quot;Golang&quot;, &quot;Java&quot;}\r\n</span>\r\n<span
      style=\"color: rgb(163, 143, 132);\">\r\n       </span>fmt.Println(arr[0], arr[1])
      <span style=\"color: rgb(124, 112, 107);\">//=&gt; Golange Java</span>\r\n}</pre><p><br></p><p><strong>配列の初期化</strong></p><pre><span
      style=\"color: rgb(163, 143, 132);\">// ゼロ値で初期化</span>\r\n<span style=\"color:
      rgb(184, 49, 47);\">var</span> ns1 [<span style=\"color: rgb(41, 105, 176);\">5</span>]<span
      style=\"color: rgb(184, 49, 47);\">int</span>\r\n<span style=\"color: rgb(163,
      143, 132);\">// 配列リテラルで初期化</span>\r\n<span style=\"color: rgb(184, 49, 47);\">var</span>
      ns2 = [<span style=\"color: rgb(41, 105, 176);\">5</span>]<span style=\"color:
      rgb(184, 49, 47);\">int</span>{<span style=\"color: rgb(41, 105, 176);\">10</span>,
      <span style=\"color: rgb(41, 105, 176);\">20</span>, <span style=\"color: rgb(41,
      105, 176);\">30</span>, <span style=\"color: rgb(41, 105, 176);\">40</span>,
      <span style=\"color: rgb(41, 105, 176);\">50</span>}\r\n<span style=\"color:
      rgb(163, 143, 132);\">// 要素数を値から推論</span>\r\nns3 <span style=\"color: rgb(184,
      49, 47);\">:=</span> [...]<span style=\"color: rgb(184, 49, 47);\">int</span>{<span
      style=\"color: rgb(41, 105, 176);\">10</span>, <span style=\"color: rgb(41,
      105, 176);\">20</span>, <span style=\"color: rgb(41, 105, 176);\">30</span>,
      <span style=\"color: rgb(41, 105, 176);\">40</span>, <span style=\"color: rgb(41,
      105, 176);\">50</span>}\r\n<span style=\"color: rgb(163, 143, 132);\">// 5番目が50、10番目が100で他が0の要素数11の配列</span>\r\nns4
      <span style=\"color: rgb(184, 49, 47);\">:=</span> [...]<span style=\"color:
      rgb(184, 49, 47);\">int</span>{<span style=\"color: rgb(41, 105, 176);\">5</span>:
      <span style=\"color: rgb(41, 105, 176);\">50</span>, <span style=\"color: rgb(41,
      105, 176);\">10</span>: <span style=\"color: rgb(41, 105, 176);\">100</span>}</pre><p><br></p><p><strong>配列の操作</strong></p><p><br></p><pre>package
      main\r\n\r\nimport <span style=\"color: rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n\r\nfunc
      main(){\r\n   ns := [...]int{<span style=\"color: rgb(184, 49, 47);\">10</span>,
      <span style=\"color: rgb(184, 49, 47);\">20</span>, <span style=\"color: rgb(184,
      49, 47);\">30</span>, <span style=\"color: rgb(184, 49, 47);\">40</span>, <span
      style=\"color: rgb(184, 49, 47);\">50</span>}\r\n   <span style=\"color: rgb(163,
      143, 132);\">// 要素にアクセス</span>\r\n   fmt.<span style=\"color: rgb(250, 197,
      28);\">Println</span>(ns[<span style=\"color: rgb(184, 49, 47);\">3</span>])
      <span style=\"color: rgb(163, 143, 132);\">// インデックス3番目</span>\r\n   <span style=\"color:
      rgb(163, 143, 132);\">// 長さ</span>\r\n   fmt.<span style=\"color: rgb(250, 197,
      28);\">Println</span>(<span style=\"color: rgb(250, 197, 28);\">len</span>(ns))\r\n 
       <span style=\"color: rgb(163, 143, 132);\">// スライス演算</span>\r\n   fmt.<span
      style=\"color: rgb(250, 197, 28);\">Println</span>(ns[<span style=\"color: rgb(184,
      49, 47);\">1</span>:<span style=\"color: rgb(184, 49, 47);\">4</span>]) <span
      style=\"color: rgb(163, 143, 132);\">// インデックス1~3番目</span>\r\n}</pre><p><code>40&nbsp;</code></p><p><code>5&nbsp;</code></p><p><code>[20
      30 40]</code></p><p><br></p><h2 id=\"section2\"><span style=\"display: block;
      padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left: 4px solid #672F86;\">スライス</span></h2><h3>スライス</h3><ul><li>配列の一部を切り出したデータ構造<ul><li>要素の型はすべて同じ</li><li>要素数は型情報に含まない
      ( []の中にサイズを指定しない )</li><li>背後に配列が存在する</li></ul></li></ul><p><br></p><p>Goの Arrays(配列)は固定長の様な配列である一方、Goの
      Slices(スライス) は可変長の配列の様な動きをするのでより柔軟にデータ（要素）を格納することが可能</p><p><br></p><p><strong>配列の宣言</strong>
      3パターン</p><pre>① var 変数名 []型\r\n② var 変数名 []型 = []型{初期値1, ..., 初期値n} \r\n③ 変数名
      := 配列[start:end] <span style=\"color: rgb(163, 143, 132);\">//配列(またはスライス)のstartから(end
      - 1)を取り出す事でスライスを作成する。 </span></pre><p><br></p><pre>①\r\n<span style=\"color:
      rgb(250, 197, 28);\">var</span> slice []<span style=\"color: rgb(250, 197, 28);\">string</span>\r\n②\r\nslice
      <span style=\"color: rgb(235, 107, 86);\">:=</span> [] <span style=\"color:
      rgb(250, 197, 28);\">string</span>{&quot;Golang&quot;, &quot;Java&quot;}\r\n③\r\narr
      <span style=\"color: rgb(235, 107, 86);\">:=</span> [...] <span style=\"color:
      rgb(250, 197, 28);\">string</span>{&quot;Golang&quot;, &quot;Java&quot;}\r\nslice
      <span style=\"color: rgb(226, 80, 65);\">:=</span> arr[<span style=\"color:
      rgb(147, 101, 184);\">0</span>:<span style=\"color: rgb(147, 101, 184);\">2</span>]</pre><p><br></p><p><strong>スライスの初期化</strong></p><pre>package
      main\r\nimport &quot;fmt&quot;\r\nfunc main() {\r\n<span style=\"color: rgb(163,
      143, 132);\">    // ゼロ値はnil</span>\r\n<span style=\"color: rgb(184, 49, 47);\">
      \   var</span> ns1 []<span style=\"color: rgb(184, 49, 47);\">int</span>\r\n<span
      style=\"color: rgb(184, 49, 47);\">    </span>fmt.<span style=\"color: rgb(243,
      121, 52);\">Println</span>(ns1)\r\n<span style=\"color: rgb(163, 143, 132);\">
      \   // 長さと容量を指定して初期化\r\n    // ゼロ値で初期化</span>\r\n    ns1 = <span style=\"color:
      rgb(44, 130, 201);\">make</span>([]<span style=\"color: rgb(184, 49, 47);\">int</span>,
      <span style=\"color: rgb(44, 130, 201);\">3</span>, <span style=\"color: rgb(44,
      130, 201);\">10</span>)\r\n    fmt.<span style=\"color: rgb(243, 121, 52);\">Println</span>(ns1)\r\n<span
      style=\"color: rgb(163, 143, 132);\">    // スライスリテラルで初期化\r\n    // 要素数は指定しなくてよい\r\n
      \   // 自動で配列は作られる</span>\r\n<span style=\"color: rgb(184, 49, 47);\">    var</span>
      ns2 = []<span style=\"color: rgb(184, 49, 47);\">int</span>{<span style=\"color:
      rgb(44, 130, 201);\">10</span>, <span style=\"color: rgb(44, 130, 201);\">20</span>,
      <span style=\"color: rgb(44, 130, 201);\">30</span>, <span style=\"color: rgb(44,
      130, 201);\">40</span>, <span style=\"color: rgb(44, 130, 201);\">50</span>}\r\n
      \   fmt.<span style=\"color: rgb(243, 121, 52);\">Println</span>(ns2)\r\n<span
      style=\"color: rgb(163, 143, 132);\">    // 5番目が50、10番目が100で他が0の要素数11のスライス</span>\r\n
      \   ns3 := []<span style=\"color: rgb(184, 49, 47);\">int</span>{<span style=\"color:
      rgb(44, 130, 201);\">5</span>: <span style=\"color: rgb(44, 130, 201);\">50</span>,
      <span style=\"color: rgb(44, 130, 201);\">10</span>: <span style=\"color: rgb(44,
      130, 201);\">100</span>}\r\n    fmt.<span style=\"color: rgb(243, 121, 52);\">Println</span>(ns3)\r\n}</pre><p>(コンソール出力)</p><p><code>[]&nbsp;</code></p><p><code>[0
      0 0]&nbsp;</code></p><p><code>[10 20 30 40 50]&nbsp;</code></p><p><code>[0 0
      0 0 0 50 0 0 0 0 100]</code></p><p><br></p><p><br></p><p><strong>スライスの操作</strong></p><table
      style=\"margin-right: calc(38%); width: 62%;\"><thead><tr><th style=\"width:
      46.5827%;\">操作</th><th style=\"width: 53.2374%;\">意味</th></tr></thead><tbody><tr><td
      style=\"width: 46.5827%;\">Slice[start:end]</td><td style=\"width: 53.2374%;\">start
      から end - 1 まで</td></tr><tr><td style=\"width: 46.5827%;\">Slice[start:]</td><td
      style=\"width: 53.2374%;\">start から最後尾まで</td></tr><tr><td style=\"width: 46.5827%;\">Slice[:end]</td><td
      style=\"width: 53.2374%;\">先頭から end - 1 まで</td></tr><tr><td style=\"width: 46.5827%;\">Slice[:]</td><td
      style=\"width: 53.2374%;\">先頭から最後尾まで</td></tr></tbody></table><p><br></p><pre>package
      main\r\n\r\nimport &quot;fmt&quot;\r\n\r\nfunc main() {\r\n    ns := []int{10,
      20, 30, 40, 50}\r\n    n, m := 2, 4\r\n\r\n\r\n    <span style=\"color: rgb(163,
      143, 132);\">// インデックス2番目からスライスを取得する</span>\r\n    fmt.Println(ns[n:]) <span
      style=\"color: rgb(163, 143, 132);\">// [30 40 50]</span>\r\n\r\n    <span style=\"color:
      rgb(163, 143, 132);\">// 先頭からインデックス3番目までのスライスを取得する</span>\r\n    fmt.Println(ns[:m])
      <span style=\"color: rgb(163, 143, 132);\">// [10 20 30 40]</span>\r\n\r\n 
        <span style=\"color: rgb(163, 143, 132);\">// capを指定する</span>\r\n    ms :=
      ns[:m:m]\r\n    fmt.Println(cap(ms)) <span style=\"color: rgb(163, 143, 132);\">//
      4</span>\r\n}</pre><p><br></p><h4><strong><i class=\"fa fa-exclamation-triangle\"
      aria-hidden=\"true\"></i><u>&nbsp;スライスの注意点</u></strong></h4><p><br></p><p><strong>スライス操作を行う場合は生成元の配列（またはスライス）と要素を共有します。</strong><br><strong>つまり、<span
      style=\"color: rgb(184, 49, 47);\"><u>スライスの要素を変更すると、その元となる配列の対応する要素が変更されます</u></span>。</strong></p><pre>func
      main(){\r\n     arr <span style=\"color: rgb(235, 107, 86);\">:=</span> [...]
      <span style=\"color: rgb(250, 197, 28);\">string</span>{<span style=\"color:
      rgb(44, 130, 201);\">&quot;Golang&quot;</span>, <span style=\"color: rgb(44,
      130, 201);\">&quot;Java&quot;</span>}\r\n     slice <span style=\"color: rgb(235,
      107, 86);\">:=</span> arr[<span style=\"color: rgb(147, 101, 184);\">0</span><span
      style=\"color: rgb(235, 107, 86);\">:</span><span style=\"color: rgb(147, 101,
      184);\">2</span>] //スライスの作成\r\n\r\n\r\n     slice[<span style=\"color: rgb(147,
      101, 184);\">0</span>] <span style=\"color: rgb(235, 107, 86);\">=</span> <span
      style=\"color: rgb(44, 130, 201);\">&quot;Ruby&quot;</span> <span style=\"color:
      rgb(163, 143, 132);\">//slice[0]の要素を変更</span>\r\n     fmt.Println(slice) <span
      style=\"color: rgb(163, 143, 132);\">//[Ruby Java]</span>\r\n     fmt<span style=\"color:
      rgb(235, 107, 86);\">.</span>Println(arr) // <span style=\"color: rgb(163, 143,
      132);\">arrも[Ruby Java]に変更されている</span>\r\n}</pre><p>(コンソール出力)</p><p><code>[Ruby
      Java]&nbsp;</code></p><p><code>[Ruby Java]</code></p><p><br></p><h3>スライスの操作</h3><p><br></p><pre>package
      main\r\n\r\nimport &quot;fmt&quot;\r\n\r\nfunc main(){\r\n     ns <span style=\"color:
      rgb(184, 49, 47);\">:=</span> []<span style=\"color: rgb(184, 49, 47);\">int</span>{<span
      style=\"color: rgb(41, 105, 176);\">10</span>, <span style=\"color: rgb(41,
      105, 176);\">20</span>, <span style=\"color: rgb(41, 105, 176);\">30</span>,
      <span style=\"color: rgb(41, 105, 176);\">40</span>, <span style=\"color: rgb(41,
      105, 176);\">50</span>, <span style=\"color: rgb(41, 105, 176);\">60</span>}\r\n<span
      style=\"color: rgb(163, 143, 132);\">// 長さ</span>\r\n    fmt.<span style=\"color:
      rgb(41, 105, 176);\">Printf</span>(&quot;サイズ =&gt; %d\\n&quot;, len(ns))\r\n 
        fmt.<span style=\"color: rgb(41, 105, 176);\">Printf</span>(&quot;要素追加前のcapacity
      =&gt; %d\\n&quot;, cap(ns))\r\n<span style=\"color: rgb(163, 143, 132);\">//
      要素の追加\r\n// 容量が足りない場合は背後の配列が再確保される</span>\r\n    ns <span style=\"color: rgb(184,
      49, 47);\">=</span> <span style=\"color: rgb(41, 105, 176);\">append</span>(ns,
      70, 80)\r\n<span style=\"color: rgb(163, 143, 132);\">// 容量</span>\r\n    fmt.<span
      style=\"color: rgb(41, 105, 176);\">Printf</span>(&quot;要素追加後のcapacity =&gt;
      %d\\n&quot;, cap(ns))\r\n}</pre><p><br></p><h4>要素の追加</h4><p>Goでは配列は宣言時に要素の数が固定されるので要素の追加はできない。スライスの場合は追加可能。<br>スライスに要素を追加したい場合は組み込み関数
      <code>append()</code> を使用する事で簡単に行える。</p><p><strong>appendの挙動</strong></p><ul><li>容量が足りる場合<ul><li>新しい要素をコピーする</li><li>lenを更新する</li></ul></li><li>容量が足りない場合<ul><li>元のおよそ2倍の容量の配列を確保しなおす</li><li>配列へのポインタを貼り直す</li><li>元の配列から要素をコピーする</li><li>新しい要素をコピーする</li><li>lenとcapを更新する</li></ul></li></ul><p><br></p><pre>package
      main\r\n\r\nimport &quot;fmt&quot;\r\n\r\nfunc main() {\r\n    a <span style=\"color:
      rgb(184, 49, 47);\">:=</span> []int{10, 20}\r\n    fmt.<span style=\"color:
      rgb(41, 105, 176);\">Println</span>(a, cap(a)) <span style=\"color: rgb(163,
      143, 132);\">// [10 20] 2</span>\r\n\r\n    b <span style=\"color: rgb(184,
      49, 47);\">:=</span> append(a, 30)\r\n    a[0] <span style=\"color: rgb(184,
      49, 47);\">=</span> 100\r\n    fmt.<span style=\"color: rgb(41, 105, 176);\">Println</span>(a,
      cap(a)) <span style=\"color: rgb(163, 143, 132);\">// [100 20] 2</span>\r\n 
        fmt.<span style=\"color: rgb(41, 105, 176);\">Println</span>(b, cap(b)) <span
      style=\"color: rgb(163, 143, 132);\">// [10 20 30] 4</span>\r\n\r\n    c <span
      style=\"color: rgb(184, 49, 47);\">:=</span> <span style=\"color: rgb(41, 105,
      176);\">append</span>(b, 40)\r\n    b[1] <span style=\"color: rgb(184, 49, 47);\">=</span>
      200\r\n    fmt.<span style=\"color: rgb(41, 105, 176);\">Println</span>(c, cap(c))
      <span style=\"color: rgb(163, 143, 132);\">// [10 200 30 40] 4</span>\r\n}</pre><p><br></p><p><strong>スライス演算</strong></p><pre>package
      main\r\n\r\n\r\nimport &quot;fmt&quot;\r\n\r\n\r\nfunc main() {\r\n    ns :=
      []int{10, 20, 30, 40, 50}\r\n    n, m := 2, 4\r\n\r\n\r\n    <span style=\"color:
      rgb(163, 143, 132);\">// n番目以降のスライスを取得する</span>\r\n    fmt.Println(ns[n:]) <span
      style=\"color: rgb(163, 143, 132);\">// [30 40 50]</span>\r\n\r\n\r\n    <span
      style=\"color: rgb(163, 143, 132);\">// 先頭からm-1番目までのスライスを取得する</span>\r\n    fmt.Println(ns[:m])
      <span style=\"color: rgb(163, 143, 132);\">// [10 20 30 40]</span>\r\n\r\n\r\n 
        <span style=\"color: rgb(163, 143, 132);\">// capを指定する</span>\r\n    ms :=
      ns[:m:m]\r\n    fmt.Println(cap(ms)) <span style=\"color: rgb(163, 143, 132);\">//
      4</span>\r\n}</pre><p><br></p><p><strong>要素の削除</strong></p><ul><li>i~j番目を削除</li></ul><pre>a
      = append(a[:i], a[j+1:]...)</pre><p>aのi-1番目までのスライスに、j+1番目以降を追加下スライスを取得</p><p>=&gt;
      i~j番目がカットされる</p><p>(例)</p><pre>package main\r\nimport &quot;fmt&quot;\r\n\r\nfunc
      main(){\r\n    a := []int{10, 20, 30, 40, 50, 60}\r\n    i, j := 1, 3\r\n   
      a = append(a[:i], a[j+1:]...)\r\n    fmt.Printf(&quot;a: %v\\n&quot;, a) <span
      style=\"color: rgb(163, 143, 132);\">// a: [10 40 50 60]</span>\r\n}</pre><p><br></p><ul><li>i番目を削除</li></ul><pre>a
      = append(a[:i], a[i+1:]...)\r\n// or\r\na = a[:i+copy(a[i:], a[i+1:])]</pre><p>(例)</p><pre>package
      main\r\nimport &quot;fmt&quot;\r\n\r\nfunc main(){\r\n    a := []int{10, 20,
      30, 40, 50, 60}\r\n    i := 2\r\n\r\n    <span style=\"color: rgb(163, 143,
      132);\">// 方法①</span>\r\n    <span style=\"color: rgb(163, 143, 132);\">//fmt.Println(copy(a[i:],
      a[i+1:]), a) // 3(コピーした要素の数) [10 20 40 50 60 60](スライスaの値)</span>\r\n    a =
      a[:i+copy(a[i:], a[i+1:])]\r\n    <span style=\"color: rgb(163, 143, 132);\">//</span>\r\n\r\n
      \   <span style=\"color: rgb(163, 143, 132);\">// 方法②</span>\r\n    <span style=\"color:
      rgb(163, 143, 132);\">// a = append(a[:i], a[i+1:]...)</span>\r\n    <span style=\"color:
      rgb(163, 143, 132);\">//</span>\r\n\r\n    fmt.Printf(&quot;a: %v\\n&quot;,
      a) // a: [10 20 40 50 60]\r\n}</pre><p><br></p><h2 id=\"section3\"><span style=\"display:
      block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left: 4px solid
      #672F86;\">マップ</span></h2><p><br></p><ul><li>キーと値をマッピングさせるデータ構造<ul><li>キーと値の型を指定する</li><li>キーには「==」で比較できる型しかNG</li></ul></li></ul><p><br></p><p><strong>初期化</strong></p><pre><span
      style=\"color: rgb(163, 143, 132);\">// ゼロ値はnil</span>\r\nvar m map[string]int\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\">// makeで初期化\r\n</span>m = make(map[string]int)\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\">// 容量を指定できる</span>\r\nm = make(map[string]int,
      10)\r\n\r\n<span style=\"color: rgb(163, 143, 132);\">// リテラルで初期化</span>\r\nm
      := map[string]int{&quot;x&quot;: 10, &quot;y&quot;: 20}\r\n\r\n<span style=\"color:
      rgb(163, 143, 132);\">// 空の場合</span>\r\nm := map[string]int{}</pre><p><br></p><p><strong>マップの操作</strong></p><p><br></p><pre>package
      main\r\n\r\nfunc main() {\r\n    m := map[string]int{&quot;x&quot;: 10, &quot;y&quot;:
      20}\r\n\r\n    // キーを指定してアクセス\r\n    println(m[&quot;x&quot;])\r\n\r\n    //
      キーを指定して入力\r\n    m[&quot;z&quot;] = 30\r\n\r\n    // 存在を確認する\r\n    n, ok :=
      m[&quot;z&quot;]\r\n    println(n, ok)\r\n\r\n    // キーを指定して削除する\r\n    delete(m,
      &quot;z&quot;)\r\n\r\n    // 削除されていることを確認\r\n    n, ok = m[&quot;z&quot;] //
      ゼロ値とfalseを返す\r\n    println(n, ok)\r\n}</pre><p>(コンソール出力)</p><p><code>10&nbsp;</code></p><p><code>30
      true&nbsp;</code></p><p><code>0 false</code></p><p><br></p><p><strong>要素がコンポジット型</strong></p><p>ひとことで表すと、複数のデータ型を１つのデータ型にまとめてものである。<br>Go言語における具体的なコンポジット型を以下にまとめた。</p><table><thead><tr><th>種類</th><th>説明</th></tr></thead><tbody><tr><td>配列</td><td>同じ型のデータを並べたデータ型</td></tr><tr><td>スライス</td><td>可変長な配列</td></tr><tr><td>マップ</td><td>キーと値を連結させたデータ型</td></tr><tr><td>構造体</td><td>異なるデータ型を集めたデータ型</td></tr></tbody></table><p><br></p><ul><li>コンポジット型を要素として持つコンポジット型<ul><li>スライスの要素がスライスの場合（2次元スライス）<ul><li>例：[][]int</li></ul></li><li>マップの値がスライスの場合<ul><li>例：map[string][]int</li></ul></li><li>構造体のフィールドの型が構造体<ul><li>例:</li><li>struct&nbsp;{<p
      dir=\"ltr\">&nbsp; &nbsp; A struct {</p><p dir=\"ltr\">&nbsp; &nbsp; &nbsp;
      &nbsp; N int</p><p dir=\"ltr\">&nbsp; &nbsp; }</p><p dir=\"ltr\">}</p></li></ul></li></ul></li></ul><p><br></p><p
      dir=\"ltr\"><strong>ユーザー定義型</strong></p><p>typeで名前を付けて新しい型を定義する</p><pre>type
      型名 基底型</pre><p><br></p><pre>// 組み込み型を基にする\r\n<span style=\"background-color:
      rgb(247, 218, 100);\">type</span> <span style=\"background-color: rgb(84, 172,
      210);\">MyInt</span> <span style=\"background-color: rgb(235, 107, 86);\">int</span>\r\n//
      他のパッケージの型を基にする\r\n<span style=\"background-color: rgb(247, 218, 100);\">type</span>
      <span style=\"background-color: rgb(84, 172, 210);\">MyWriter</span> <span style=\"background-color:
      rgb(235, 107, 86);\">io.Writer</span>\r\n// 型リテラルを基にする\r\n<span style=\"background-color:
      rgb(247, 218, 100);\">type</span> <span style=\"background-color: rgb(84, 172,
      210);\">Person</span> <span style=\"background-color: rgb(235, 107, 86);\">struct
      {\r\n     Name string\r\n}</span></pre><p><br></p><p><strong>ユーザー定義型の特徴</strong></p><ul><li>基底型とユーザ定義型の相互キャストが可能</li></ul><pre><span
      style=\"color: rgb(184, 49, 47);\">type</span> MyInt <span style=\"color: rgb(184,
      49, 47);\">int</span>\r\n<span style=\"color: rgb(184, 49, 47);\">var</span>
      n <span style=\"color: rgb(184, 49, 47);\">int</span> = <span style=\"color:
      rgb(41, 105, 176);\">100</span>\r\nm := <span style=\"color: rgb(41, 105, 176);\">MyInt</span>(n)\r\nn
      = <span style=\"color: rgb(41, 105, 176);\">int</span>(m)</pre><p><br></p><p><strong>型のエイリアス</strong></p><ul><li>型のエイリアスを定義できる<ul><li>完全に同じ型</li><li>キャスト不要</li><li>エイリアスの方ではメソッド定義はできない</li></ul></li></ul><pre><span
      style=\"color: rgb(184, 49, 47);\">type</span> <span style=\"color: rgb(243,
      121, 52);\">Applicant</span> = http.<span style=\"color: rgb(243, 121, 52);\">Client</span></pre><ul><li>型名を出力する%Tが同じ元の型名を出す</li></ul><pre><span
      style=\"color: rgb(184, 49, 47);\">type</span> <span style=\"color: rgb(243,
      121, 52);\">Applicant</span> = http.<span style=\"color: rgb(243, 121, 52);\">Client</span>\r\n<span
      style=\"color: rgb(184, 49, 47);\">func</span> <span style=\"color: rgb(147,
      101, 184);\">main</span>() {\r\n   fmt.<span style=\"color: rgb(41, 105, 176);\">Printf</span>(&quot;<span
      style=\"color: rgb(41, 105, 176);\">%T</span>&quot;, Applicant{})\r\n}</pre><p><br></p>"
    - '2020-10-24 10:43:12.928018'
    - '2020-10-25 13:23:09.380346'
  - - 242
    - go言語 関数
    - "<h1 style=\"text-align: center;\">go言語 関数</h1><nav class=\"mkj\" style=\"border-radius:
      3px; font-weight: 700; line-height: 1.4; background: rgb(255, 251, 244); padding:
      0px; border: 2px solid rgb(248, 145, 116); margin-bottom: 2em;\"><h2 style=\"padding:
      8px 12px; margin: -1px; background: rgb(248, 145, 116); border: none; font-size:
      18px; text-align: center; color: rgb(255, 255, 255);\"><i class=\"fa fa-th-list\"></i>
      Table of Contents</h2><ol style=\"border-radius: 3px;\"><li><a href=\"#section\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">関数とは</a></li><li><a href=\"#section2\" style=\"color: rgb(84, 84, 84);
      padding: 8px 0px; display: block; text-decoration: none;\">関数の呼び出し方</a></li><li><a
      href=\"#section3\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">組み込み関数</a></li><li><a href=\"#section4\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">関数の定義</a></li><li><a
      href=\"#section5\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">多値の受け取り方</a></li><li><a href=\"#section6\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">関数の定義</a></li><li><a
      href=\"#section7\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">無名関数</a></li><li><a href=\"#section8\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">無名関数の注意点</a></li><li><a
      href=\"#section9\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">関数型</a></li><li><a href=\"#section10\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">値のコピー</a></li><li><a
      href=\"#section11\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">ポインタ</a></li></ol></nav><h2 id=\"section\"><span
      style=\"display: block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left:
      4px solid #672F86;\">関数とは</span></h2><p dir=\"ltr\"><br></p><p>一連の処理をまとめたもの</p><ul><li>引数で受け取った値を基に処理を行い戻り値として結果を返す機能<ul><li>必ずしも引数や戻り値が無くてもよい</li></ul></li><li>引数：関数の入力となるものf(x)の場合x</li><li>戻り値（返り値）：関数の出力となるもの</li></ul><p>関数の種類</p><ul><li>組み込み関数<ul><li>言語の機能として組み込まれている関数</li></ul></li><li>ユーザ定義関数<ul><li>ユーザが定義した関数</li></ul></li></ul><p><br></p><h2
      id=\"section2\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">関数の呼び出し方</span></h2><p>引数を指定して呼び出す</p><ul><li>引数は変数や式を指定もよい&nbsp;<ul><li>例:
      <span style=\"color: rgb(163, 143, 132);\">sum := repeat(&quot;Test!&quot;,&nbsp;</span><span
      style=\"color: rgb(184, 49, 47);\">2+1</span><span style=\"color: rgb(163, 143,
      132);\">)</span></li></ul></li><li>引数が複数ある場合はカンマで区切って指定する&nbsp;<ul><li>例: <span
      style=\"color: rgb(163, 143, 132);\">sum := repeat(&quot;Test!&quot;</span><span
      style=\"color: rgb(184, 49, 47);\">,</span><span style=\"color: rgb(163, 143,
      132);\">&nbsp;2+1)</span></li></ul></li><li>戻り値がある場合は変数に代入したり式中で使う&nbsp;<ul><li>例:
      <span style=\"color: rgb(184, 49, 47);\">sum :=</span><span style=\"color: rgb(163,
      143, 132);\">&nbsp;</span><span style=\"color: rgb(184, 49, 47);\">repeat(&quot;Test!&quot;,
      2+1)</span></li></ul></li></ul><p><br></p><p>サンプルコード</p><pre><span style=\"color:
      rgb(251, 160, 38);\">package</span> main\r\n<span style=\"color: rgb(251, 160,
      38);\">import</span> <span style=\"color: rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n\r\n<span
      style=\"color: rgb(251, 160, 38);\">func</span> main() {\r\n   sum := <span
      style=\"color: rgb(250, 197, 28);\">repeat</span>(<span style=\"color: rgb(65,
      168, 95);\">&quot;Test!&quot;</span>, <span style=\"color: rgb(209, 72, 65);\">2+1</span>)\r\n<span
      style=\"color: rgb(163, 143, 132);\"><code>   </code></span><code>fmt.<span
      style=\"color: rgb(250, 197, 28);\">Print</span>(sum)</code><span style=\"color:
      rgb(163, 143, 132);\"><code> // <code>Test!Test!Test!</code></code></span>\r\n}\r\n\r\n<span
      style=\"color: rgb(251, 160, 38);\">func</span> <span style=\"color: rgb(243,
      121, 52);\">repeat</span>(word <span style=\"color: rgb(147, 101, 184);\">string</span>,
      reps <span style=\"color: rgb(147, 101, 184);\">int</span>) <span style=\"color:
      rgb(147, 101, 184);\">string</span> {\r\n   <span style=\"color: rgb(251, 160,
      38);\">var</span> concat <span style=\"color: rgb(147, 101, 184);\">string</span>\r\n 
       <span style=\"color: rgb(251, 160, 38);\">for</span> i := <span style=\"color:
      rgb(209, 72, 65);\">0</span>; i &lt; reps; i++ {\r\n       concat += word\r\n 
       }\r\n   <span style=\"color: rgb(251, 160, 38);\">return</span> concat\r\n}</pre><p><br></p><h2
      id=\"section3\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">組み込み関数</span></h2><p><br></p><table><tbody><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>print/println</p></td><td><p>表示を行う</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>make</p></td><td><p dir=\"ltr\">コンポジット型の初期化</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>new</p></td><td><p>指定した型のメモリの確保</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>len/cap</p></td><td><p>スライスなどの長さ/容量を返す</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>copy</p></td><td><p>スライスのコピーを行う</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>delete</p></td><td><p>マップから指定したキーのエントリを削除</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>complex</p></td><td><p>複素数型を作成</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>imag/real</p></td><td><p>複素数の虚部/実数部を取得</p></td></tr><tr><td
      style=\"background-color: rgb(235, 107, 86);\"><p>panic/revocer</p></td><td><p>パニックを起こす/回復する</p></td></tr></tbody></table><p><br></p><h2
      id=\"section4\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">関数の定義</span></h2><p><br></p><pre>func
      関数名 (引数 型)　{\r\n    // do something\r\n}</pre><p><br></p><p>サンプルコード</p><pre><span
      style=\"color: rgb(251, 160, 38);\">package</span> main\r\n<span style=\"color:
      rgb(251, 160, 38);\">import</span> <span style=\"color: rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n\r\n<span
      style=\"color: rgb(184, 49, 47);\">func</span> <span style=\"color: rgb(147,
      101, 184);\">add</span>(<span style=\"color: rgb(243, 121, 52);\">x</span>,
      <span style=\"color: rgb(243, 121, 52);\">y int</span>) <span style=\"color:
      rgb(243, 121, 52);\">int</span> {\r\n    <span style=\"color: rgb(184, 49, 47);\">return</span>
      x + y\r\n}\r\n<span style=\"color: rgb(184, 49, 47);\">func</span> <span style=\"color:
      rgb(147, 101, 184);\">swap</span>(<span style=\"color: rgb(243, 121, 52);\">x</span>,
      <span style=\"color: rgb(243, 121, 52);\">y int</span>) (<span style=\"color:
      rgb(243, 121, 52);\">int</span>, <span style=\"color: rgb(243, 121, 52);\">int</span>)
      {\r\n    <span style=\"color: rgb(184, 49, 47);\">return</span> y, x\r\n}\r\n<span
      style=\"color: rgb(184, 49, 47);\">func</span> main() {\r\n    fmt.<span style=\"color:
      rgb(250, 197, 28);\">Println</span>(<span style=\"color: rgb(147, 101, 184);\">add</span>(10,
      20))\r\n    fmt.<span style=\"color: rgb(250, 197, 28);\">Println</span>(<span
      style=\"color: rgb(147, 101, 184);\">swap</span>(10, 20))\r\n}</pre><p>(コンソール出力)</p><p><code>30&nbsp;</code></p><p><code>20
      10</code></p><p><br></p><h2 id=\"section5\"><span style=\"display: block; padding:
      0.5em 1em 0.5em 1em; background: #f5f5f5; border-left: 4px solid #672F86;\">多値の受け取り方</span></h2><p><br></p><p>カンマで区切って値を受け取る</p><pre>x,
      y := <span style=\"color: rgb(147, 101, 184);\">swap</span>(10, 20)</pre><p>省略したい場合はブランク変数(_)を用いる</p><pre>x,
      _ := <span style=\"color: rgb(147, 101, 184);\">swap</span>(10, 20)</pre><pre>_,
      y := <span style=\"color: rgb(147, 101, 184);\">swap</span>(10, 20)</pre><p><br></p><p>ちなみに、勉強のためにswap関数を使っているが、以下のようにカンマくぐりを使えば、値の入れ替えは、一時変数や関数を使わずにできる</p><pre>x,
      y := y, x </pre><p><br></p><h2 id=\"section6\"><span style=\"display: block;
      padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left: 4px solid #672F86;\">関数の定義</span></h2><p>名前付き戻り値</p><ul><li>関数内では引数と同様に扱われる</li></ul><p>以下の例では、x2,
      y2が名前付き戻り値</p><p><br></p><p>サンプルコード</p><pre><span style=\"color: rgb(251, 160,
      38);\">package</span> main\r\n\r\n<span style=\"color: rgb(251, 160, 38);\">func</span>
      <span style=\"color: rgb(251, 160, 38);\">swap</span>(x, y <span style=\"color:
      rgb(147, 101, 184);\">int</span>) (x2, y2 <span style=\"color: rgb(147, 101,
      184);\">int</span>) {\r\n    y2, x2 = x, y\r\n\r\n    <span style=\"color: rgb(163,
      143, 132);\">// return x2, y2</span>\r\n    <span style=\"color: rgb(251, 160,
      38);\">return </span><span style=\"color: rgb(163, 143, 132);\">// 明示しない場合は戻り値用の変数の値が返される</span>\r\n}\r\n\r\n<span
      style=\"color: rgb(251, 160, 38);\">func</span> <span style=\"color: rgb(251,
      160, 38);\">main</span>() {\r\n    x, y := swap(<span style=\"color: rgb(226,
      80, 65);\">10</span>, <span style=\"color: rgb(226, 80, 65);\">20</span>)\r\n 
        <span style=\"color: rgb(250, 197, 28);\">println</span>(x, y)\r\n}</pre><p>(コンソール出力)</p><p><code>20
      10&nbsp;</code></p><p><br></p><h2 id=\"section7\"><span style=\"display: block;
      padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left: 4px solid #672F86;\">無名関数</span></h2><p>名前のない関数で、別名クロージャと呼ばれる</p><p><br></p><p>以下の形式で使われることが多い</p><pre>func
      (引数 型)　{\r\n    <span style=\"color: rgb(163, 143, 132);\">// do something</span>\r\n}(値)</pre><p><br></p><p>サンプルコード</p><pre><span
      style=\"color: rgb(184, 49, 47);\">package</span> main\r\nimport <span style=\"color:
      rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n\r\n<span style=\"color: rgb(184,
      49, 47);\">func</span> <span style=\"color: rgb(147, 101, 184);\">main</span>()
      {\r\n    msg := <span style=\"color: rgb(44, 130, 201);\">&quot;Hello, 世界&quot;</span>\r\n 
        <span style=\"color: rgb(163, 143, 132);\">// 無名関数 引数なし</span>\r\n    <span
      style=\"color: rgb(41, 105, 176);\">func</span>() {\r\n        fmt.<span style=\"color:
      rgb(44, 130, 201);\">Println</span>(msg)\r\n    }()\r\n\r\n    <span style=\"color:
      rgb(163, 143, 132);\">// 無名関数 引数あり</span>\r\n    <span style=\"color: rgb(41,
      105, 176);\">func</span>(word <span style=\"color: rgb(147, 101, 184);\">string</span>)
      {\r\n        fmt.<span style=\"color: rgb(41, 105, 176);\">Println</span>(word)\r\n 
        }(&quot;テスト&quot;)\r\n\r\n    <span style=\"color: rgb(163, 143, 132);\">//
      無名関数 代入</span>\r\n    f := <span style=\"color: rgb(41, 105, 176);\">func</span>(src
      <span style=\"color: rgb(147, 101, 184);\">string</span>) <span style=\"color:
      rgb(147, 101, 184);\">string</span> { <span style=\"color: rgb(251, 160, 38);\">return</span>
      <span style=\"color: rgb(65, 168, 95);\">&quot;Hello, &quot;</span> <span style=\"color:
      rgb(250, 197, 28);\">+</span> src }\r\n    fmt.<span style=\"color: rgb(41,
      105, 176);\">Println</span>(f(&quot;テスト&quot;))\r\n}</pre><p>(コンソール出力)</p><p><code>Hello,
      世界&nbsp;</code></p><p><code>テスト&nbsp;</code></p><p><code>Hello, テスト</code></p><p><br></p><h2
      id=\"section8\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">無名関数の注意点</span></h2><p>定義と実行のタイミングを気をつける</p><p>関数外の変数（自由変数）を参照している場合</p><p>実行のタイミングでは値が変わっている可能性がある</p><p><br></p><pre><span
      style=\"color: rgb(250, 197, 28);\">package</span> main\r\n<span style=\"color:
      rgb(250, 197, 28);\">import</span> <span style=\"color: rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> main() {\r\n    fs := <span
      style=\"color: rgb(250, 197, 28);\">make</span>([]<span style=\"color: rgb(250,
      197, 28);\">func</span>(), 4)\r\n    for i := <span style=\"color: rgb(250,
      197, 28);\">range</span> fs {\r\n        fs[i] = <span style=\"color: rgb(250,
      197, 28);\">func</span>() { fmt.<span style=\"color: rgb(250, 197, 28);\">Println</span>(i)
      }\r\n        fs[i]()\r\n    }\r\n    for _, f := <span style=\"color: rgb(250,
      197, 28);\">range</span> fs {\r\n        <span style=\"color: rgb(250, 197,
      28);\">f</span>()\r\n    }\r\n}</pre><p>(コンソール出力)</p><p><code>0&nbsp;</code></p><p><code>1&nbsp;</code></p><p><code>2&nbsp;</code></p><p><code>3&nbsp;</code></p><p><code>3&nbsp;</code></p><p><code>3&nbsp;</code></p><p><code>3&nbsp;</code></p><p><code>3</code></p><p><br></p><h2
      id=\"section9\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">関数型</span></h2><p><br></p><p>関数はファーストクラスオブジェクト</p><p>変数への代入</p><p>引数に渡す</p><p>戻り値で返す</p><p><br></p><pre><span
      style=\"color: rgb(250, 197, 28);\">package</span> main\r\n<span style=\"color:
      rgb(250, 197, 28);\">import</span> <span style=\"color: rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> <span style=\"color: rgb(250,
      197, 28);\">main</span>() {\r\n    fs := <span style=\"color: rgb(250, 197,
      28);\">make</span>([]<span style=\"color: rgb(250, 197, 28);\">func</span>()
      <span style=\"color: rgb(147, 101, 184);\">string</span>, <span style=\"color:
      rgb(226, 80, 65);\">2</span>)\r\n    fs[<span style=\"color: rgb(226, 80, 65);\">0</span>]
      = <span style=\"color: rgb(250, 197, 28);\">func</span>() <span style=\"color:
      rgb(147, 101, 184);\">string</span> { <span style=\"color: rgb(250, 197, 28);\">return</span>
      <span style=\"color: rgb(65, 168, 95);\">&quot;hoge&quot;</span> }\r\n    fs[<span
      style=\"color: rgb(226, 80, 65);\">1</span>] = <span style=\"color: rgb(250,
      197, 28);\">func</span>() <span style=\"color: rgb(147, 101, 184);\">string</span>
      { <span style=\"color: rgb(250, 197, 28);\">return</span> <span style=\"color:
      rgb(65, 168, 95);\">&quot;fuga&quot;</span> }\r\n    for _, f := <span style=\"color:
      rgb(250, 197, 28);\">range</span> fs {\r\n        fmt.<span style=\"color: rgb(250,
      197, 28);\">Println</span>(<span style=\"color: rgb(250, 197, 28);\">f</span>())\r\n 
            fmt.<span style=\"color: rgb(250, 197, 28);\">Printf</span>(<span style=\"color:
      rgb(65, 168, 95);\">&quot;型 -&gt; %T\\n&quot;</span>, f)\r\n    }\r\n}</pre><p>(コンソール出力)</p><p><code>hoge&nbsp;</code></p><p><code>型
      -&gt; func() string&nbsp;</code></p><p><code>fuga&nbsp;</code></p><p><code>型
      -&gt; func() string</code></p><p><br></p><h2 id=\"section10\"><span style=\"display:
      block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left: 4px solid
      #672F86;\">値のコピー</span></h2><p><br></p><p>Goには値の型として、<strong>値型</strong>と<strong>参照型</strong>が存在する。</p><p>値型</p><ul><li>関数に渡される時に、新たに値のコピーを作る
      (全く別のメモリを使用するので、呼び出し元の値は変化しない)</li></ul><p>参照型</p><ul><li>関数に渡される時に、参照値(ポインタ、つまりメモリ上の場所)を渡す
      (同じメモリを共有する形になるので、呼び出し元の値も変化する)</li></ul><p><br></p><p><strong>値型</strong></p><table
      class=\"table table-hover\"><thead><tr><th colspan=\"2\" scope=\"col\" style=\"background-color:
      rgb(235, 107, 86);\">値型</th></tr></thead><tbody><tr><th scope=\"row\">1</th><td>数値</td></tr><tr><th
      scope=\"row\">2</th><td>構造体</td></tr><tr><th scope=\"row\">3</th><td>配列</td></tr></tbody></table><p><br></p><p><strong>参照型</strong></p><table
      class=\"table table-hover\"><thead><tr><th colspan=\"2\" scope=\"col\" style=\"background-color:
      rgb(235, 107, 86);\">参照型</th></tr></thead><tbody><tr><th scope=\"row\">1</th><td>インターフェース</td></tr><tr><th
      scope=\"row\">2</th><td>チャンネル</td></tr><tr><th scope=\"row\">3</th><td>マップ</td></tr><tr><th
      scope=\"row\">4</th><td>スライス</td></tr></tbody></table><p>サンプル</p><pre><span
      style=\"color: rgb(250, 197, 28);\">package</span> main\r\n<span style=\"color:
      rgb(250, 197, 28);\">import</span> <span style=\"color: rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">const</span> alternative = <span style=\"color:
      rgb(226, 80, 65);\">-999</span>\r\n\r\n<span style=\"color: rgb(250, 197, 28);\">type</span>
      Strct <span style=\"color: rgb(250, 197, 28);\">struct</span> {\r\n    a, b
      <span style=\"color: rgb(147, 101, 184);\">int</span>\r\n}\r\n\r\n<span style=\"color:
      rgb(250, 197, 28);\">func</span> <span style=\"color: rgb(251, 160, 38);\">changeInt</span>(aryNumber
      <span style=\"color: rgb(147, 101, 184);\">int</span>) {\r\n    aryNumber =
      alternative\r\n}\r\n\r\n<span style=\"color: rgb(250, 197, 28);\">func</span>
      <span style=\"color: rgb(251, 160, 38);\">changeArray</span>(aryVar [<span style=\"color:
      rgb(226, 80, 65);\">3</span>]<span style=\"color: rgb(147, 101, 184);\">int</span>)
      {\r\n    aryVar[<span style=\"color: rgb(226, 80, 65);\">0</span>] = alternative\r\n}\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> <span style=\"color: rgb(251,
      160, 38);\">changeSlice</span>(sliceVar []<span style=\"color: rgb(147, 101,
      184);\">int</span>) {\r\n    sliceVar[<span style=\"color: rgb(226, 80, 65);\">0</span>]
      = alternative\r\n}\r\n\r\n<span style=\"color: rgb(250, 197, 28);\">func</span>
      <span style=\"color: rgb(251, 160, 38);\">changeMap</span>(mapVar <span style=\"color:
      rgb(250, 197, 28);\">map</span>[<span style=\"color: rgb(147, 101, 184);\">string</span>]<span
      style=\"color: rgb(147, 101, 184);\">int</span>) {\r\n    mapVar[<span style=\"color:
      rgb(65, 168, 95);\">&quot;a&quot;</span>] = alternative\r\n}\r\n\r\n<span style=\"color:
      rgb(250, 197, 28);\">func</span> changeStruct(strctVar Strct) {\r\n    strctVar.a
      = alternative\r\n}\r\n\r\n<span style=\"color: rgb(250, 197, 28);\">func</span>
      <span style=\"color: rgb(243, 121, 52);\">main</span>() {\r\n    fmt.<span style=\"color:
      rgb(250, 197, 28);\">Print</span>(<span style=\"color: rgb(65, 168, 95);\">&quot;Int:\\t値型\\t&quot;</span>)\r\n 
        intVar := 1\r\n    fmt.<span style=\"color: rgb(250, 197, 28);\">Printf</span>(<span
      style=\"color: rgb(65, 168, 95);\">&quot;Before %v =&gt; &quot;</span>, intVar)\r\n 
        changeInt(intVar)\r\n    fmt.<span style=\"color: rgb(250, 197, 28);\">Printf</span>(<span
      style=\"color: rgb(65, 168, 95);\">&quot;After %v\\n&quot;</span>, intVar) <span
      style=\"color: rgb(163, 143, 132);\">// 値渡しなので元の値は変わらない</span>\r\n    \r\n 
        fmt.<span style=\"color: rgb(250, 197, 28);\">Print</span>(<span style=\"color:
      rgb(65, 168, 95);\">&quot;Array:\\t値型\\t&quot;</span>)\r\n    arrayVar := [3]<span
      style=\"color: rgb(147, 101, 184);\">int</span>{0, 1, 2}\r\n    fmt.<span style=\"color:
      rgb(250, 197, 28);\">Printf</span>(<span style=\"color: rgb(65, 168, 95);\">&quot;Before
      %v =&gt; &quot;</span>, arrayVar)\r\n    changeArray(arrayVar)\r\n    fmt.<span
      style=\"color: rgb(250, 197, 28);\">Printf</span>(<span style=\"color: rgb(65,
      168, 95);\">&quot;After %v\\n&quot;</span>, arrayVar) <span style=\"color: rgb(163,
      143, 132);\">// 値渡しなので元の値は変わらない</span>\r\n    \r\n    fmt.<span style=\"color:
      rgb(250, 197, 28);\">Print</span>(<span style=\"color: rgb(65, 168, 95);\">&quot;Struct:\\t値型\\t&quot;</span>)\r\n 
        strctVar := Strct{a: <span style=\"color: rgb(226, 80, 65);\">0</span>, b:
      <span style=\"color: rgb(226, 80, 65);\">1</span>}\r\n    fmt.<span style=\"color:
      rgb(250, 197, 28);\">Printf</span>(<span style=\"color: rgb(65, 168, 95);\">&quot;Before
      %v =&gt; &quot;</span>, strctVar)\r\n    changeStruct(strctVar)\r\n    fmt.<span
      style=\"color: rgb(250, 197, 28);\">Printf</span>(<span style=\"color: rgb(65,
      168, 95);\">&quot;After %v\\n&quot;</span>, strctVar) <span style=\"color: rgb(163,
      143, 132);\">// 値渡しなので元の値は変わらない</span>\r\n\r\n    fmt.<span style=\"color: rgb(250,
      197, 28);\">Print</span>(<span style=\"color: rgb(65, 168, 95);\">&quot;Slice:\\t参照型\\t&quot;</span>)\r\n 
        sliceVar := []<span style=\"color: rgb(147, 101, 184);\">int</span>{<span
      style=\"color: rgb(226, 80, 65);\">0</span>, <span style=\"color: rgb(226, 80,
      65);\">1</span>, <span style=\"color: rgb(226, 80, 65);\">2</span>}\r\n    fmt.<span
      style=\"color: rgb(250, 197, 28);\">Printf</span>(<span style=\"color: rgb(65,
      168, 95);\">&quot;Before %v =&gt; &quot;</span>, sliceVar)\r\n    changeSlice(sliceVar)\r\n 
        fmt.<span style=\"color: rgb(250, 197, 28);\">Printf</span>(<span style=\"color:
      rgb(65, 168, 95);\">&quot;After %v\\n&quot;</span>, sliceVar) <span style=\"color:
      rgb(163, 143, 132);\">// 参照渡しなので元の値も変わる</span>\r\n\r\n    fmt.<span style=\"color:
      rgb(250, 197, 28);\">Print</span>(<span style=\"color: rgb(65, 168, 95);\">&quot;Map:\\t参照型\\t&quot;</span>)\r\n 
        mapVar := <span style=\"color: rgb(250, 197, 28);\">map</span>[<span style=\"color:
      rgb(147, 101, 184);\">string</span>]<span style=\"color: rgb(147, 101, 184);\">int</span>{<span
      style=\"color: rgb(65, 168, 95);\">&quot;a&quot;</span>: <span style=\"color:
      rgb(226, 80, 65);\">0</span>, <span style=\"color: rgb(65, 168, 95);\">&quot;b&quot;</span>:
      <span style=\"color: rgb(226, 80, 65);\">1</span>, <span style=\"color: rgb(65,
      168, 95);\">&quot;c&quot;</span>: <span style=\"color: rgb(226, 80, 65);\">2</span>}\r\n 
        fmt.<span style=\"color: rgb(250, 197, 28);\">Printf</span>(<span style=\"color:
      rgb(65, 168, 95);\">&quot;Before %v =&gt; &quot;</span>, mapVar)\r\n    changeMap(mapVar)\r\n 
        fmt.<span style=\"color: rgb(250, 197, 28);\">Printf</span>(<span style=\"color:
      rgb(65, 168, 95);\">&quot;After %v\\n&quot;</span>, mapVar) <span style=\"color:
      rgb(163, 143, 132);\">// 参照渡しなので元の値も変わる</span>\r\n}</pre><p><br></p><h2 id=\"section11\"><span
      style=\"display: block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left:
      4px solid #672F86;\">ポインタ</span></h2><p><br></p><ul><li>変数の格納先を表す値</li><li>値で渡される型の値に対して破壊的な操作を加える際に利用する</li><li>破壊的な操作
      = 関数の外でも、グローバルに影響が出る</li></ul><p><br></p><p><strong>参照型</strong>(内部でポインタが用いられているデータ型)</p><ul><li>インターフェース</li><li>スライス</li><li>マップ</li><li>チャネル</li></ul><p>これらの型は、破壊的な操作になるため、ポインタを用いる必要がないことが多い</p><p><br></p><p><br></p><p>func
      f(xp *int <span style=\"background-color: rgb(251, 160, 38); color: rgb(255,
      255, 255);\">intのポインタ型</span>) {</p><p>*xp = 100 <span style=\"background-color:
      rgb(251, 160, 38); color: rgb(255, 255, 255);\">*でポインタの指す先に値を入れる</span></p><p>}</p><p>func
      main() {</p><p>&nbsp; &nbsp; var x int</p><p>&nbsp; &nbsp; f(&amp;x) <span style=\"color:
      rgb(255, 255, 255); background-color: rgb(251, 160, 38);\">&amp;でポインタを取得</span></p><p>&nbsp;
      &nbsp; println(x) <span style=\"background-color: rgb(251, 160, 38); color:
      rgb(255, 255, 255);\">// 初期値の0ではなく、100が出力される</span></p><p>}</p><p><br></p><p>ポインタを使った偶奇判定</p><pre><span
      style=\"color: rgb(250, 197, 28);\">package</span> main\r\n<span style=\"color:
      rgb(250, 197, 28);\">import</span> <span style=\"color: rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> main() {\r\n    <span style=\"color:
      rgb(251, 160, 38);\">for</span> i := <span style=\"color: rgb(226, 80, 65);\">1</span>;
      i &lt;= <span style=\"color: rgb(226, 80, 65);\">100</span>; i++ {\r\n     
        <span style=\"color: rgb(251, 160, 38);\">judge</span>(<span style=\"color:
      rgb(250, 197, 28);\">&amp;</span>i) <span style=\"color: rgb(163, 143, 132);\">//
      iのポインタ(メモリ上の格納場所)を引数に渡す</span>\r\n    }\r\n}\r\n\r\n<span style=\"color: rgb(250,
      197, 28);\">func</span> <span style=\"color: rgb(251, 160, 38);\">judge</span>(ip
      <span style=\"color: rgb(250, 197, 28);\">*</span><span style=\"color: rgb(147,
      101, 184);\">int</span>) {\r\n    if <span style=\"color: rgb(250, 197, 28);\">*</span>ip%<span
      style=\"color: rgb(226, 80, 65);\">2</span> == <span style=\"color: rgb(226,
      80, 65);\">0</span> {\r\n        fmt.Printf(<span style=\"color: rgb(65, 168,
      95);\">&quot;%d-偶数\\n&quot;</span>, <span style=\"color: rgb(250, 197, 28);\">*</span>ip)\r\n 
        } else {\r\n        fmt.Printf(<span style=\"color: rgb(65, 168, 95);\">&quot;%d-奇数\\n&quot;</span>,
      <span style=\"color: rgb(250, 197, 28);\">*</span>ip)\r\n    }\r\n}</pre><p>(コンソール出力)</p><p><code>1-奇数&nbsp;</code></p><p><code>2-偶数&nbsp;</code></p><p><code>...</code></p><p><code>100-偶数</code></p><p><br></p><p>ポインタを使った値の入れ替え</p><pre>package
      main\r\n\r\n\r\nfunc main() {\r\n    n, m := 10, 20\r\n    swap(&amp;n, &amp;m)\r\n 
        println(n, m) <span style=\"color: rgb(163, 143, 132);\">// 20 10</span>\r\n}\r\n\r\n\r\nfunc
      swap(np, mp *int) {\r\n    *np, *mp = *mp, *np\r\n}</pre><p>(コンソール出力)</p><p><code>20
      10</code></p><p><br></p><pre><span style=\"color: rgb(250, 197, 28);\">package</span>
      main\r\n\r\n<span style=\"color: rgb(250, 197, 28);\">import</span> <span style=\"color:
      rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n\r\n<span style=\"color: rgb(250,
      197, 28);\">func</span> main() {\r\n  a := <span style=\"color: rgb(226, 80,
      65);\">0</span>\r\n  b := <span style=\"color: rgb(226, 80, 65);\">0</span>\r\n 
      sampleFunc(a, <span style=\"color: rgb(250, 197, 28);\">&amp;</span>b)\r\n 
      fmt.<span style=\"color: rgb(250, 197, 28);\">Printf</span>(<span style=\"color:
      rgb(65, 168, 95);\">&quot;a: %d\\n&quot;</span>, a) <span style=\"color: rgb(163,
      143, 132);\">// 値渡し</span>\r\n  fmt.<span style=\"color: rgb(250, 197, 28);\">Printf</span>(<span
      style=\"color: rgb(65, 168, 95);\">&quot;b: %d\\n&quot;</span>, b) <span style=\"color:
      rgb(163, 143, 132);\">//参照渡し</span>\r\n}\r\n\r\n\r\n<span style=\"color: rgb(250,
      197, 28);\">func</span> sampleFunc(a <span style=\"color: rgb(147, 101, 184);\">int</span>,
      b <span style=\"color: rgb(250, 197, 28);\">*</span><span style=\"color: rgb(147,
      101, 184);\">int</span>) {\r\n  a = a + 1 \r\n  <span style=\"color: rgb(250,
      197, 28);\">*</span>b = <span style=\"color: rgb(250, 197, 28);\">*</span>b
      + 1\r\n}</pre><p>(コンソール出力)</p><p><code>a: 0&nbsp;</code></p><p><code>b: 1</code></p><p><br></p><pre><span
      style=\"color: rgb(250, 197, 28);\">package</span> main\r\n<span style=\"color:
      rgb(250, 197, 28);\">import</span> <span style=\"color: rgb(65, 168, 95);\">&quot;strconv&quot;</span>\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">type</span> Profile <span style=\"color:
      rgb(250, 197, 28);\">struct</span> {\r\n    Name <span style=\"color: rgb(147,
      101, 184);\">string</span>\r\n    Age  <span style=\"color: rgb(147, 101, 184);\">int</span>\r\n}\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> (p Profile) <span style=\"color:
      rgb(250, 197, 28);\">Set</span>(name <span style=\"color: rgb(147, 101, 184);\">string</span>,
      age <span style=\"color: rgb(147, 101, 184);\">int</span>) {\r\n    p.Name =
      name\r\n    p.Age = age\r\n}\r\n\r\n<span style=\"color: rgb(250, 197, 28);\">func</span>
      (p <span style=\"color: rgb(250, 197, 28);\">*</span>Profile) <span style=\"color:
      rgb(250, 197, 28);\">Pointer_Set</span>(name <span style=\"color: rgb(147, 101,
      184);\">string</span>, age <span style=\"color: rgb(147, 101, 184);\">int</span>)
      {\r\n    p.Name = name\r\n    p.Age = age\r\n}\r\n\r\n<span style=\"color: rgb(250,
      197, 28);\">func</span> (p Profile) <span style=\"color: rgb(250, 197, 28);\">String</span>()
      <span style=\"color: rgb(147, 101, 184);\">string</span> {\r\n    <span style=\"color:
      rgb(250, 197, 28);\">return</span> <span style=\"color: rgb(65, 168, 95);\">&quot;Name:
      &quot;</span> + p.Name + <span style=\"color: rgb(65, 168, 95);\">&quot;, Age:
      &quot;</span> + strconv.<span style=\"color: rgb(250, 197, 28);\">Itoa</span>(p.Age)\r\n}\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> (p Profile) <span style=\"color:
      rgb(250, 197, 28);\">Print</span>() {\r\n    s := p.<span style=\"color: rgb(250,
      197, 28);\">String</span>()\r\n    <span style=\"color: rgb(250, 197, 28);\">println</span>(s)\r\n}\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> <span style=\"color: rgb(250,
      197, 28);\">main</span>() {\r\n    <span style=\"color: rgb(250, 197, 28);\">var</span>
      p Profile\r\n    p.<span style=\"color: rgb(250, 197, 28);\">Set</span>(&quot;Endo&quot;,
      <span style=\"color: rgb(226, 80, 65);\">40</span>)\r\n    p.<span style=\"color:
      rgb(250, 197, 28);\">Print</span>() <span style=\"color: rgb(163, 143, 132);\">//
      Name: (空文字), Age: 0</span>\r\n    \r\n    p.<span style=\"color: rgb(250, 197,
      28);\">Pointer_Set</span>(<span style=\"color: rgb(65, 168, 95);\">&quot;Tanaka&quot;</span>,
      <span style=\"color: rgb(226, 80, 65);\">40</span>)\r\n    p.<span style=\"color:
      rgb(250, 197, 28);\">Print</span>() <span style=\"color: rgb(163, 143, 132);\">//
      Name: Tanaka, Age: 31</span>\r\n}</pre><p>(コンソール出力)</p><p><code>Name: , Age:
      0&nbsp;</code></p><p><code>Name: Tanaka, Age: 40</code></p><p><br></p><p><br></p>"
    - '2020-10-28 23:53:00.515435'
    - '2020-10-31 00:05:56.788964'
  - - 243
    - go言語 メソッド
    - "<nav class=\"mkj\" style=\"border-radius: 3px; font-weight: 700; line-height:
      1.4; background: rgb(255, 251, 244); padding: 0px; border: 2px solid rgb(248,
      145, 116); margin-bottom: 2em;\"><h2 style=\"padding: 8px 12px; margin: -1px;
      background: rgb(248, 145, 116); border: none; font-size: 18px; text-align: center;
      color: rgb(255, 255, 255);\"><i class=\"fa fa-th-list\"></i> Table of Contents</h2><ol
      style=\"border-radius: 3px;\"><li><a href=\"#section\" style=\"color: rgb(84,
      84, 84); padding: 8px 0px; display: block; text-decoration: none;\">メソッド</a></li><li><a
      href=\"#section2\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">メソッド値</a></li><li><a href=\"#section3\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">メソッド式</a></li></ol></nav><h2
      id=\"section\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em; background:
      #f5f5f5; border-left: 4px solid #672F86;\">メソッド</span></h2><p><br></p><p>基本構文</p><pre>func
      (レシーバ) メソッド名(引数) {\r\n  // 処理\r\n}</pre><p><br></p><p><strong>レシーバ</strong></p><ul><li>メソッドに関連付けられた変数<ul><li>メソッド呼び出し時には通常の引数と同じような扱いになる<ul><li>コピーが発生する</li></ul></li><li>ポインタを用いることでレシーバへの変更を呼び出し元に伝えることができる<ul><li>レシーバがポインタの場合もドットでアクセスする</li></ul></li></ul></li></ul><p><br></p><pre><span
      style=\"color: rgb(250, 197, 28);\">package</span> main\r\n\r\n<span style=\"color:
      rgb(250, 197, 28);\">type</span> T <span style=\"color: rgb(147, 101, 184);\">int</span>\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> (t <span style=\"color: rgb(250,
      197, 28);\">*</span>T) <span style=\"color: rgb(250, 197, 28);\">f</span>()
      { <span style=\"color: rgb(250, 197, 28);\">println</span>(<span style=\"color:
      rgb(65, 168, 95);\">&quot;hi&quot;</span>) }\r\n\r\n<span style=\"color: rgb(250,
      197, 28);\">func</span> main() {\r\n    <span style=\"color: rgb(250, 197, 28);\">var</span>
      v T\r\n    <span style=\"color: rgb(163, 143, 132);\">// 以下の2行は同じ意味</span>\r\n 
        (<span style=\"color: rgb(250, 197, 28);\">&amp;</span>v).<span style=\"color:
      rgb(250, 197, 28);\">f</span>()\r\n    v.<span style=\"color: rgb(250, 197,
      28);\">f</span>()\r\n}</pre><p>(コンソール出力)</p><p><code>hi</code></p><p><code>hi</code></p><p><br></p><p>例:
      ユーザー定義型のレシーバー</p><pre><span style=\"color: rgb(250, 197, 28);\">package</span>
      main\r\n<span style=\"color: rgb(250, 197, 28);\">import</span> <span style=\"color:
      rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n<span style=\"color: rgb(250,
      197, 28);\">type</span> Hex <span style=\"color: rgb(147, 101, 184);\">int</span>\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> (h Hex) <span style=\"color:
      rgb(250, 197, 28);\">String</span>() <span style=\"color: rgb(147, 101, 184);\">string</span>
      {\r\n    <span style=\"color: rgb(163, 143, 132);\">// %x 基数16で表現する 10以上の数には小文字(a-f)を使用</span>\r\n 
        return fmt.<span style=\"color: rgb(250, 197, 28);\">Sprintf</span>(<span
      style=\"color: rgb(65, 168, 95);\">&quot;%x&quot;</span>, <span style=\"color:
      rgb(147, 101, 184);\">int</span>(h)) <span style=\"color: rgb(163, 143, 132);\">//
      fmt.Sprintfはfmt.Printfと違い、標準出力ではなくフォーマットした結果を文字列で返す</span>\r\n}\r\n<span style=\"color:
      rgb(250, 197, 28);\">func</span> main() {\r\n    <span style=\"color: rgb(163,
      143, 132);\">// 100をHex型として代入</span>\r\n    <span style=\"color: rgb(250, 197,
      28);\">var</span> hex Hex = <span style=\"color: rgb(226, 80, 65);\">100</span>\r\n 
        <span style=\"color: rgb(163, 143, 132);\">// Stringメソッドを呼び出す</span>\r\n 
        fmt.<span style=\"color: rgb(250, 197, 28);\">Println</span>(hex.<span style=\"color:
      rgb(250, 197, 28);\">String</span>()) <span style=\"color: rgb(163, 143, 132);\">//
      100=&gt;16*6+1*4なので、16進数で64</span>\r\n\r\n    hex = <span style=\"color: rgb(226,
      80, 65);\">160</span>\r\n    fmt.<span style=\"color: rgb(250, 197, 28);\">Println</span>(hex.<span
      style=\"color: rgb(250, 197, 28);\">String</span>()) <span style=\"color: rgb(163,
      143, 132);\">// 160=&gt;16*10+1*0なので、16進数でa0</span>\r\n\r\n    hex = <span style=\"color:
      rgb(226, 80, 65);\">200</span>\r\n    fmt.<span style=\"color: rgb(250, 197,
      28);\">Println</span>(hex.<span style=\"color: rgb(250, 197, 28);\">String</span>())
      <span style=\"color: rgb(163, 143, 132);\">// 200=&gt;16*13+1*8なので、16進数でc8</span>\r\n}</pre><p>(コンソール出力)</p><p><code>64</code></p><p><code>a0</code></p><p><code>c8</code></p><p><br></p><p>例:
      ポインタ型のレシーバ</p><pre><span style=\"color: rgb(250, 197, 28);\">package</span>
      main\r\n\r\n<span style=\"color: rgb(250, 197, 28);\">import</span> <span style=\"color:
      rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n\r\n<span style=\"color: rgb(250,
      197, 28);\">type</span> User <span style=\"color: rgb(250, 197, 28);\">struct</span>
      {\r\n    Name <span style=\"color: rgb(147, 101, 184);\">string</span>\r\n}\r\n\r\n<span
      style=\"color: rgb(163, 143, 132);\">// メソッド（ポインタレシーバ）</span>\r\n<span style=\"color:
      rgb(250, 197, 28);\">func</span> (u <span style=\"color: rgb(250, 197, 28);\">*</span>User)<span
      style=\"color: rgb(250, 197, 28);\">setName</span>() {\r\n    u.Name = <span
      style=\"color: rgb(65, 168, 95);\">&quot;gopher&quot;</span>\r\n}\r\n\r\nfunc
      main() {\r\n    u := <span style=\"color: rgb(250, 197, 28);\">new</span>(User)\r\n 
        u.<span style=\"color: rgb(250, 197, 28);\">setName</span>()\r\n    fmt.<span
      style=\"color: rgb(250, 197, 28);\">Println</span>(u.Name) <span style=\"color:
      rgb(163, 143, 132);\">//=&gt; gopherが出力される。</span>\r\n}</pre><p>(コンソール出力)</p><p><code>gopher</code></p><p><br></p><p>例:
      配列型のレシーバ</p><pre><span style=\"color: rgb(250, 197, 28);\">package</span> main\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">import</span> <span style=\"color: rgb(65,
      168, 95);\">&quot;fmt&quot;</span>\r\n\r\n<span style=\"color: rgb(250, 197,
      28);\">type</span> Vector2D [2]float32\r\n\r\n\r\n<span style=\"color: rgb(250,
      197, 28);\">func</span> (v Vector2D) <span style=\"color: rgb(250, 197, 28);\">Add</span>(n
      Vector2D) Vector2D {\r\n    <span style=\"color: rgb(250, 197, 28);\">return</span>
      Vector2D{n[<span style=\"color: rgb(226, 80, 65);\">0</span>] + v[<span style=\"color:
      rgb(226, 80, 65);\">0</span>], n[<span style=\"color: rgb(226, 80, 65);\">1</span>]
      + v[<span style=\"color: rgb(226, 80, 65);\">1</span>]}\r\n}\r\n\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> <span style=\"color: rgb(250,
      197, 28);\">main</span>() {\r\n    v1 := Vector2D{<span style=\"color: rgb(226,
      80, 65);\">1.5</span>, <span style=\"color: rgb(226, 80, 65);\">-1.0</span>}\r\n 
        v2 := Vector2D{<span style=\"color: rgb(226, 80, 65);\">2.2</span>, <span
      style=\"color: rgb(226, 80, 65);\">4.4</span>}\r\n    fmt.<span style=\"color:
      rgb(250, 197, 28);\">Println</span>(v1.<span style=\"color: rgb(250, 197, 28);\">Add</span>(v2))\r\n}</pre><p>(コンソール出力)</p><p><code>[3.7
      3.4]</code></p><p><br></p><p>例: ポインタ型のレシーバ</p><pre><span style=\"color: rgb(250,
      197, 28);\">package</span> main\r\n<span style=\"color: rgb(250, 197, 28);\">type</span>
      MyInt <span style=\"color: rgb(147, 101, 184);\">int</span>\r\n<span style=\"color:
      rgb(250, 197, 28);\">func</span> (n <span style=\"color: rgb(250, 197, 28);\">*</span>MyInt)
      Inc() { <span style=\"color: rgb(250, 197, 28);\">*</span>n<span style=\"color:
      rgb(250, 197, 28);\">++</span> }\r\n<span style=\"color: rgb(250, 197, 28);\">func</span>
      <span style=\"color: rgb(250, 197, 28);\">main</span>() {\r\n    <span style=\"color:
      rgb(250, 197, 28);\">var</span> n MyInt\r\n    <span style=\"color: rgb(250,
      197, 28);\">println</span>(n) <span style=\"color: rgb(163, 143, 132);\">//
      0</span>\r\n    <span style=\"color: rgb(163, 143, 132);\">// ポインタを用いたメソッドの呼び出しでは、&amp;は省略しても良い</span>\r\n<span
      style=\"color: rgb(163, 143, 132);\">//     (&amp;n).Inc()</span>\r\n    n.<span
      style=\"color: rgb(250, 197, 28);\">Inc</span>()\r\n    <span style=\"color:
      rgb(250, 197, 28);\">println</span>(n) <span style=\"color: rgb(163, 143, 132);\">//
      1</span>\r\n}</pre><p>(コンソール出力)</p><p><code>0</code></p><p><code>1</code></p><p><br></p><h2
      id=\"section2\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">メソッド値</span></h2><p><br></p><p>メソッドも値として扱える</p><ul><li>レシーバは束縛された状態</li></ul><p><br></p><p>メソッドを値として扱う例</p><pre><span
      style=\"color: rgb(250, 197, 28);\">package</span> main\r\n\r\n<span style=\"color:
      rgb(250, 197, 28);\">import</span> <span style=\"color: rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">type</span> Hex <span style=\"color: rgb(147,
      101, 184);\">int</span>\r\n\r\n<span style=\"color: rgb(250, 197, 28);\">func</span>
      (h Hex) <span style=\"color: rgb(250, 197, 28);\">String</span>() <span style=\"color:
      rgb(147, 101, 184);\">string</span> {\r\n    <span style=\"color: rgb(250, 197,
      28);\">return</span> fmt.<span style=\"color: rgb(250, 197, 28);\">Sprintf</span>(<span
      style=\"color: rgb(65, 168, 95);\">&quot;%x&quot;</span>, <span style=\"color:
      rgb(147, 101, 184);\">int</span>(h))\r\n}\r\n\r\n<span style=\"color: rgb(250,
      197, 28);\">func</span> main() {\r\n    <span style=\"color: rgb(163, 143, 132);\">//
      100をHex型として代入</span>\r\n    <span style=\"color: rgb(250, 197, 28);\">var</span>
      hex Hex = <span style=\"color: rgb(226, 80, 65);\">100</span>\r\n    <span style=\"color:
      rgb(163, 143, 132);\">// メソッド値として代入</span>\r\n    f := hex.String\r\n    fmt.<span
      style=\"color: rgb(250, 197, 28);\">Println</span>(f())\r\n}</pre><p>(コンソール出力)</p><p><code>64</code></p><p><br></p><h2
      id=\"section3\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">メソッド式</span></h2><p><br></p><p>メソッドを表す式</p><p>レシーバを第1引数とした関数になる</p><p><br></p><pre><span
      style=\"color: rgb(250, 197, 28);\">package</span> main\r\n\r\n<span style=\"color:
      rgb(250, 197, 28);\">import</span> <span style=\"color: rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">type</span> Hex <span style=\"color: rgb(147,
      101, 184);\">int</span>\r\n\r\n<span style=\"color: rgb(250, 197, 28);\">func</span>
      (h Hex) <span style=\"color: rgb(250, 197, 28);\">String</span>() <span style=\"color:
      rgb(147, 101, 184);\">string</span> {\r\n    <span style=\"color: rgb(250, 197,
      28);\">return</span> fmt.<span style=\"color: rgb(250, 197, 28);\">Sprintf</span>(<span
      style=\"color: rgb(65, 168, 95);\">&quot;%x&quot;</span>, <span style=\"color:
      rgb(147, 101, 184);\">int</span>(h))\r\n}\r\n\r\n<span style=\"color: rgb(250,
      197, 28);\">func</span> main() {\r\n    <span style=\"color: rgb(163, 143, 132);\">//
      100をHex型として代入</span>\r\n    <span style=\"color: rgb(250, 197, 28);\">var</span>
      hex Hex = <span style=\"color: rgb(226, 80, 65);\">100</span>\r\n\r\n    <span
      style=\"color: rgb(163, 143, 132);\">// メソッド値\r\n　　 // f := hex.String\r\n    //
      fmt.Println(f())</span>\r\n\r\n    // メソッド式\r\n    f := Hex.String\r\n    fmt.<span
      style=\"color: rgb(250, 197, 28);\">Printf</span>(<span style=\"color: rgb(65,
      168, 95);\">&quot;%T\\n%s\\n&quot;</span>, f, <span style=\"color: rgb(250,
      197, 28);\">f</span>(hex))\r\n}</pre><p>(コンソール出力)</p><p><code>func(main.Hex)
      string&nbsp;</code></p><p><code>64</code></p><p><br></p>"
    - '2020-10-31 11:14:56.897387'
    - '2020-10-31 13:15:14.193141'
  - - 244
    - go言語 パッケージ
    - "<nav class=\"mkj\" style=\"border-radius: 3px; font-weight: 700; line-height:
      1.4; background: rgb(255, 251, 244); padding: 0px; border: 2px solid rgb(248,
      145, 116); margin-bottom: 2em;\"><h2 style=\"padding: 8px 12px; margin: -1px;
      background: rgb(248, 145, 116); border: none; font-size: 18px; text-align: center;
      color: rgb(255, 255, 255);\"><i class=\"fa fa-th-list\"></i> Table of Contents</h2><ol
      style=\"border-radius: 3px;\"><li><a href=\"#section\" style=\"color: rgb(84,
      84, 84); padding: 8px 0px; display: block; text-decoration: none;\">Goのパッケージ</a></li><li><a
      href=\"#section2\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">パッケージの種類</a></li><li><a href=\"#section3\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">パッケージのインポート</a></li><li><a
      href=\"#section4\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">パッケージ名のエイリアス</a></li><li><a href=\"#section5\"
      style=\"color: rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration:
      none;\">パッケージ外へのエクスポート</a></li><li><a href=\"#section6\" style=\"color: rgb(84,
      84, 84); padding: 8px 0px; display: block; text-decoration: none;\">GOPATH</a></li><li><a
      href=\"#section7\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">スコープ</a></li><li><a href=\"#section8\" style=\"color:
      rgb(84, 84, 84); padding: 8px 0px; display: block; text-decoration: none;\">init関数</a></li><li><a
      href=\"#section9\" style=\"color: rgb(84, 84, 84); padding: 8px 0px; display:
      block; text-decoration: none;\">パッケージの初期化</a></li></ol></nav><h2 id=\"section\"><span
      style=\"display: block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left:
      4px solid #672F86;\">Goのパッケージ</span></h2><p><br></p><p><strong>パッケージ</strong></p><ul><li>Goのプログラムはパッケージを組み合わせることで実現される<ul><li>プログラムはmainパケージから開始し、別のパッケージをインポートする<ul><li>パーケージをインポートすることで、様々な機能が使えるようになる</li></ul></li></ul></li><li>モジュール性、カプセル化、分離されたコンパイル、再利用をサポートするもの</li></ul><p><br></p><h2
      id=\"section2\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">パッケージの種類</span></h2><p><br></p><p><strong>mainパッケージ</strong></p><ul><li>main関数の存在するパッケージ</li><li>プログラムの起点（エントリポイント）となるパッケージ</li><li>実行可能なGoのプログラムの場合には必ず存在する</li></ul><p><strong>標準パッケージ</strong></p><ul><li>Goが最初から用意しているパッケージ</li><li>100以上のパッケージが存在する</li></ul><p><strong>サードパーティパッケージ</strong></p><ul><li>第3者（自分も含む）が開発したパッケージ</li><li>インターネット上で公開されていることが多い</li><li>インストールすることで使える</li><li>ライブラリとも呼ばれる</li></ul><p><br></p><h2
      id=\"section3\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">パッケージのインポート</span></h2><p><br></p><p>他のパッケージの機能を使う</p><ul><li>インポートすることで使えるようになる</li><li>インポートはIDEやgoimportsなどのツールに任せる</li></ul><p>パッケージをインポートしてできること</p><ul><li>別のパッケージで用意された機能を使用できる<ul><li>変数、関数、定数など</li></ul></li></ul><p><br></p><p>以下のように、標準パッケージとサードパーティパッケージは空行を挟んで分けることが多い</p><pre><span
      style=\"color: rgb(184, 49, 47);\">import</span> (\r\n       <span style=\"color:
      rgb(41, 105, 176);\">&quot;context&quot;</span>\r\n       <span style=\"color:
      rgb(41, 105, 176);\">&quot;fmt&quot;</span>\r\n      \r\n       <span style=\"color:
      rgb(41, 105, 176);\">&quot;github.com/tenntenn/greeting&quot;</span>\r\n)</pre><p><br></p><p><strong>相対パスでのインポート</strong></p><p>非推奨のやり方</p><div
      data-lang=\"go\"><pre><span style=\"color: rgb(250, 197, 28);\">import</span>
      <span style=\"color: rgb(41, 105, 176);\">&quot;./model&quot;</span></pre><p><strong>絶対パスでのインポート</strong></p></div><div
      data-lang=\"go\"><pre><span style=\"color: rgb(250, 197, 28);\">import</span>
      <span style=\"color: rgb(41, 105, 176);\">&quot;github.com/tenntenn/greeting&quot;</span></pre><p><strong>単一行でのインポート</strong></p><pre><span
      style=\"color: rgb(250, 197, 28);\">import</span> <span style=\"color: rgb(41,
      105, 176);\">&quot;fmt&quot;</span>\r\n<span style=\"color: rgb(250, 197, 28);\">import</span>
      <span style=\"color: rgb(41, 105, 176);\">&quot;string&quot;</span></pre><p><strong>グループ化を使ったインポート</strong></p><pre><span
      style=\"color: rgb(250, 197, 28);\">import</span> (\r\n    <span style=\"color:
      rgb(41, 105, 176);\">&quot;fmt&quot;</span>\r\n    <span style=\"color: rgb(41,
      105, 176);\">&quot;string&quot;</span>\r\n)</pre><p><strong>ピリオドインポート</strong></p></div><pre><span
      style=\"color: rgb(250, 197, 28);\">import</span> (\r\n    <span style=\"color:
      rgb(184, 49, 47);\">.</span> <span style=\"color: rgb(41, 105, 176);\">&quot;fmt&quot;</span>\r\n
      \   <span style=\"color: rgb(41, 105, 176);\">&quot;string&quot;</span>\r\n)</pre><p>通常、「<code>fmt.Println(&quot;hello
      world&quot;)</code>」と書くところをドットをつけてインポートすると「<code>Println(&quot;hello world&quot;)</code>」と書くことができます。<br>つまり、ドット付きインポートはパッケージの関数を呼び出す際に<strong>パッケージ名を省略</strong>して書くことができます。</p><p><strong>エイリアスインポート</strong></p><pre><span
      style=\"color: rgb(250, 197, 28);\">import</span> (\r\n    f <span style=\"color:
      rgb(41, 105, 176);\">&quot;fmt&quot;</span>\r\n)</pre><p>このような書き方でパッケージ名にエイリアスをつけることができます。<br>上の場合、「<code>fmt.Println(&quot;hello
      world&quot;)</code>」のかわりに「<code>f.Println(&quot;hello world&quot;)</code>」とエイリアスを用いて書くことができます。</p><p><strong>ブランク(_)インポート</strong></p><pre><span
      style=\"color: rgb(250, 197, 28);\">import</span> (\r\n    <span style=\"color:
      rgb(41, 105, 176);\">&quot;database/sql&quot;</span>\r\n    _ <span style=\"color:
      rgb(41, 105, 176);\">&quot;github.com/ziutek/mymysql/godrv&quot;</span>\r\n)</pre><p>パッケージをインポートするだけで、パッケージの中の関数を直接使うわけではなく、このパッケージの中にあるinit関数をコールする。</p><p>インポート宣言は、インポート「する側」と「される側」の依存関係を宣言します。自分自身のパッケージをインポートすること、またはインポートしたパッケージ内でエクスポートされている識別子を一切参照しないことは誤った使い方です。<u>インポートによる副作用(初期化)のためだけにパッケージをインポートするときは、パッケージ名としてブランク識別子を使う。</u></p><p><br></p><p><br></p><h2
      id=\"section4\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">パッケージ名のエイリアス</span></h2><p><br></p><p>別名をつける</p><ul><li>インポートパスの左側に変えたい名前を書く</li><li>同じパッケージ名のパッケージを使いたい場合に使う</li><li>インポートパスとパッケージ名が一致していない場合に用いる</li></ul><p><br></p><pre><span
      style=\"color: rgb(250, 197, 28);\">import</span> (\r\n       <span style=\"color:
      rgb(41, 105, 176);\">&quot;sync&quot;</span>\r\n\r\n       mysync <span style=\"color:
      rgb(41, 105, 176);\">&quot;github.com/tenntenn/sync&quot;</span> <span style=\"color:
      rgb(163, 143, 132);\">// syncパッケージと名前が衝突しているので、エイリアスを使う</span>\r\n       greeting
      <span style=\"color: rgb(41, 105, 176);\">&quot;github.com/tenntenn/greeting/v2&quot;</span>
      <span style=\"color: rgb(163, 143, 132);\">// インポートパスとパッケージ名が一致していないので、エイリアスを使う</span>\r\n)\r\nfunc
      main() {\r\n    fmt.Println(<span style=\"color: rgb(250, 197, 28);\">greeting</span>.Do())\r\n}</pre><p><br></p><h2
      id=\"section5\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">パッケージ外へのエクスポート</span></h2><p><br></p><p>&nbsp;エクスポート</p><ul><li>先頭を大文字にした識別子がエクスポートされる</li><li>他のパッケージから利用できるようになる</li></ul><p><br></p><p>ライブラリ</p><ul><li>main関数のないGoのプログラム</li><li>エクスポートされたものを使用する</li></ul><p><br></p><p>以下の例で、Piという識別子はmathパッケージからエクスポートされている</p><pre><span
      style=\"color: rgb(250, 197, 28);\">package</span> main\r\n\r\n\r\n<span style=\"color:
      rgb(250, 197, 28);\">import</span> (\r\n    <span style=\"color: rgb(65, 168,
      95);\">&quot;fmt&quot;\r\n    &quot;math&quot;</span>\r\n)\r\n\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> main() {\r\n    fmt.<span style=\"color:
      rgb(250, 197, 28);\">Println</span>(math.Pi)\r\n}</pre><p>(コンソール出力)</p><p><code>3.141592653589793</code></p><p><br></p><h2
      id=\"section6\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">GOPATH</span></h2><p><br></p><p>■
      GOPATHとは？</p><ul><li>Goのソースコードやビルドされたファイルが入るパスが設定される</li><li>インポートされるパッケージもここから検索される。</li></ul><p><br></p><p><strong>確認方法</strong></p><pre>$
      go env GOPATH</pre><p><br></p><p>$GOPATH</p><p>├── bin (ビルドされた実行可能ファイルが入る)</p><p>│
      &nbsp; └── fuga</p><p>├── pkg</p><p>│ &nbsp; └── darwin_amd64 (ビルドされたパッケージが入る)</p><p>│
      &nbsp; &nbsp; &nbsp; └── hoge.a</p><p>└── src</p><p><span style=\"color: rgb(163,
      143, 132);\">&nbsp; &nbsp; ├── github.com</span></p><p><span style=\"color:
      rgb(163, 143, 132);\">&nbsp; &nbsp; │ &nbsp; ├── YourUsernameOfGihub (githubのユーザー名ディレクトリにgithubのプロジェクトを普通管理する)</span></p><p><span
      style=\"color: rgb(163, 143, 132);\">&nbsp; &nbsp; │ &nbsp; │ &nbsp; ├── github_cloned_repository
      (git cloneしたレポジトリ)</span></p><p><span style=\"color: rgb(163, 143, 132);\">&nbsp;
      &nbsp; │ &nbsp; ├── davecgh (go getコマンドで取得したサードパーティ)</span></p><p><span style=\"color:
      rgb(163, 143, 132);\">&nbsp; &nbsp; │ &nbsp; ├── pmezard (go getコマンドで取得したサードパーティ)</span></p><p><span
      style=\"color: rgb(163, 143, 132);\">&nbsp; &nbsp; │ &nbsp; └── stretchr (go
      getコマンドで取得したサードパーティ)</span></p><p>&nbsp; &nbsp;├── fuga</p><p>&nbsp; &nbsp;│
      &nbsp; └── main.go (実行可能なgoのコード)</p><p>&nbsp; &nbsp;└── hoge</p><p>&nbsp; &nbsp;
      &nbsp; &nbsp;└── hoge.go (ライブラリのgoのコード)</p><p><br></p><h2 id=\"section7\"><span
      style=\"display: block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left:
      4px solid #672F86;\">スコープ</span></h2><p><br></p><p>スコープ</p><ul><li>識別子（変数名、関数名など）を参照できる範囲<ul><li>参照元によって所属するスコープが違う</li><li>親子関係があり親のスコープの識別子は参照できる</li></ul></li></ul><p><br></p><p>ブロック</p><ul><li>{
      と } に囲まれた一連の定義と宣言で、以下の種類がある<ul><li>universe<ul><li>ブロックの範囲は、全てのGoソース</li></ul></li><li>package<ul><li>ブロックの範囲は、パッケージの全てのGoソース</li></ul></li><li>file<ul><li>ブロックの範囲は、ファイル内の全てのGoソース</li></ul></li><li>local<ul><li>ブロックの範囲は、function
      body、if、for、switch、case、select内</li></ul></li></ul></li></ul><p><br></p><p>エクスポートされた識別子</p><ul><li>以下の条件をどちらも満たす識別子を「エクスポートされた識別子」といい、他のパッケージからのアクセスを許可する<ul><li>識別子名の1文字目が大文字</li><li>packageブロック内で宣言されているか、フィールド名またはメソッド名である</li></ul></li><li>上記の条件を満たさない他の識別子はエクスポートされていないため、他のパッケージからアクセスできない</li></ul><p><br></p><p>Goのスコープ</p><p>スコープは4種類</p><table
      class=\"table table-hover\"><thead><tr><th colspan=\"2\" scope=\"col\" style=\"background-color:
      rgb(235, 107, 86);\">スコープ</th></tr></thead><tbody><tr><th scope=\"row\">universeブロック</th><td>事前宣言された型<p>[
      bool byte complex64 complex128 error float32 float64</p><p>int int8 int16 int32
      int64 rune string</p><p>uint uint8 uint16 uint32 uint64 uintptr ]</p>定数<p>[
      true false iota ]</p>ゼロ値<br>[ nil ]<br>関数<p>[ append cap close complex copy
      delete imag len&nbsp;</p><p>make new panic print println real recover ]</p></td></tr><tr><th
      scope=\"row\">packageブロック</th><td>トップレベル関数外で宣言された定数、型、変数、関数（メソッド除く）</td></tr><tr><th
      scope=\"row\">fileブロック</th><td>インポートされたパッケージのパッケージ名</td></tr><tr><th scope=\"row\">localブロック</th><td>メソッドのレシーバ、関数の引数、戻り値の変数</td></tr></tbody></table><p><br></p><h2
      id=\"section8\"><span style=\"display: block; padding: 0.5em 1em 0.5em 1em;
      background: #f5f5f5; border-left: 4px solid #672F86;\">init関数</span></h2><p><br></p><p><code>init</code>関数はパッケージの初期化時に呼び出される関数
      (パッケージの初期化が先である)</p><ul><li><code>main</code>パッケージに書くと<code>main</code>関数より先に実行される</li><li>複雑な初期化を行う場合に用いる<ul><li>パッケージ変数への代入文だけでは表現できない場合</li></ul></li><li>1パッケージに複数用意しても良い</li><li>1ファイルに複数用意しても良い</li><li>実行順がシビアなものはinit関数には書かない</li><li>エラーハンドリングが必要な処理は書かない</li><li>init関数は明示的には呼び出せない</li></ul><p><br></p><p>fmtパッケージが初期化された後に、initが呼び出されて、その後mainが呼び出されている</p><pre><span
      style=\"color: rgb(250, 197, 28);\">package</span> main\r\n\r\n<span style=\"color:
      rgb(250, 197, 28);\">import</span> <span style=\"color: rgb(65, 168, 95);\">&quot;fmt&quot;</span>\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">var</span> msg = <span style=\"color: rgb(250,
      197, 28);\">message</span>()\r\n\r\n<span style=\"color: rgb(250, 197, 28);\">func</span>
      <span style=\"color: rgb(250, 197, 28);\">message</span>() <span style=\"color:
      rgb(147, 101, 184);\">string</span> {\r\n    <span style=\"color: rgb(250, 197,
      28);\">return</span> <span style=\"color: rgb(65, 168, 95);\">&quot;Hello&quot;</span>\r\n}\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> <span style=\"color: rgb(250,
      197, 28);\">init</span>() {\r\nfmt.<span style=\"color: rgb(250, 197, 28);\">Print</span>(msg)\r\n}\r\n\r\n<span
      style=\"color: rgb(250, 197, 28);\">func</span> <span style=\"color: rgb(250,
      197, 28);\">main</span>() {\r\nfmt.<span style=\"color: rgb(250, 197, 28);\">Println</span>(<span
      style=\"color: rgb(65, 168, 95);\">&quot;, playground&quot;</span>)\r\n}</pre><p>(コンソール出力)</p><p><code>Hello,
      playground</code></p><p><br></p><p><br></p><h2 id=\"section9\"><span style=\"display:
      block; padding: 0.5em 1em 0.5em 1em; background: #f5f5f5; border-left: 4px solid
      #672F86;\">パッケージの初期化</span></h2><p><br></p><p>依存パッケージの初期化</p><ul><li>importしているパッケージリストを出す</li><li>依存関係を解決して依存されてないパッケージから初期化していく</li></ul><p><br></p><p>各パッケージの初期化</p><ul><li>パッケージ変数の初期化する</li><li>init関数の実行を行う</li></ul><p><br></p>"
    - '2020-10-31 16:27:13.345797'
    - '2020-11-07 00:49:24.343684'

---
articles_tags:
  columns:
  - article_id
  - tag_id
  records: 
  - - 84
    - 14
  - - 84
    - 18
  - - 85
    - 14
  - - 85
    - 18
  - - 86
    - 14
  - - 86
    - 18
  - - 87
    - 14
  - - 87
    - 18
  - - 88
    - 14
  - - 88
    - 18
  - - 89
    - 14
  - - 89
    - 18
  - - 90
    - 14
  - - 90
    - 18
  - - 91
    - 14
  - - 91
    - 18
  - - 92
    - 19
  - - 94
    - 20
  - - 95
    - 21
  - - 96
    - 14
  - - 97
    - 14
  - - 97
    - 18
  - - 98
    - 14
  - - 98
    - 18
  - - 99
    - 14
  - - 99
    - 18
  - - 103
    - 22
  - - 104
    - 22
  - - 106
    - 22
  - - 107
    - 22
  - - 108
    - 22
  - - 109
    - 22
  - - 110
    - 14
  - - 111
    - 20
  - - 112
    - 14
  - - 113
    - 14
  - - 115
    - 23
  - - 116
    - 23
  - - 117
    - 23
  - - 118
    - 20
  - - 123
    - 14
  - - 123
    - 18
  - - 124
    - 23
  - - 126
    - 14
  - - 129
    - 25
  - - 130
    - 25
  - - 131
    - 25
  - - 132
    - 25
  - - 133
    - 25
  - - 134
    - 25
  - - 135
    - 25
  - - 138
    - 24
  - - 139
    - 24
  - - 140
    - 14
  - - 140
    - 18
  - - 141
    - 22
  - - 142
    - 19
  - - 143
    - 24
  - - 144
    - 25
  - - 145
    - 26
  - - 146
    - 26
  - - 147
    - 26
  - - 148
    - 26
  - - 149
    - 26
  - - 150
    - 26
  - - 151
    - 25
  - - 152
    - 25
  - - 153
    - 25
  - - 155
    - 25
  - - 156
    - 26
  - - 157
    - 25
  - - 158
    - 25
  - - 159
    - 25
  - - 160
    - 25
  - - 161
    - 25
  - - 162
    - 26
  - - 163
    - 25
  - - 164
    - 25
  - - 165
    - 25
  - - 166
    - 25
  - - 167
    - 14
  - - 168
    - 25
  - - 169
    - 26
  - - 170
    - 26
  - - 171
    - 18
  - - 172
    - 25
  - - 173
    - 25
  - - 174
    - 25
  - - 175
    - 14
  - - 175
    - 25
  - - 176
    - 26
  - - 177
    - 18
  - - 177
    - 25
  - - 178
    - 25
  - - 179
    - 14
  - - 179
    - 18
  - - 180
    - 14
  - - 180
    - 18
  - - 181
    - 18
  - - 181
    - 25
  - - 182
    - 25
  - - 183
    - 14
  - - 183
    - 25
  - - 186
    - 14
  - - 186
    - 18
  - - 187
    - 25
  - - 189
    - 14
  - - 189
    - 18
  - - 190
    - 14
  - - 190
    - 18
  - - 192
    - 14
  - - 192
    - 18
  - - 193
    - 18
  - - 194
    - 14
  - - 194
    - 18
  - - 195
    - 26
  - - 196
    - 26
  - - 197
    - 26
  - - 198
    - 27
  - - 199
    - 27
  - - 200
    - 14
  - - 201
    - 26
  - - 202
    - 26
  - - 203
    - 26
  - - 204
    - 26
  - - 206
    - 24
  - - 207
    - 24
  - - 208
    - 24
  - - 209
    - 24
  - - 210
    - 26
  - - 211
    - 26
  - - 212
    - 14
  - - 213
    - 26
  - - 214
    - 26
  - - 215
    - 18
  - - 220
    - 26
  - - 222
    - 26
  - - 223
    - 26
  - - 224
    - 26
  - - 226
    - 26
  - - 227
    - 26
  - - 228
    - 26
  - - 229
    - 26
  - - 230
    - 26
  - - 231
    - 25
  - - 232
    - 29
  - - 233
    - 29
  - - 234
    - 29
  - - 235
    - 29
  - - 236
    - 29
  - - 237
    - 29
  - - 238
    - 29
  - - 239
    - 29
  - - 240
    - 29
  - - 241
    - 29
  - - 242
    - 29
  - - 243
    - 29
  - - 244
    - 29

---
tags:
  columns:
  - id
  - name
  - created_at
  - updated_at
  records: 
  - - 12
    - React Native
    - '2018-12-08 08:14:52.514427'
    - '2018-12-08 08:14:52.514427'
  - - 13
    - Swift
    - '2018-12-08 08:15:07.708535'
    - '2018-12-08 08:15:07.708535'
  - - 14
    - Ruby On Rails
    - '2018-12-08 08:15:17.474542'
    - '2018-12-08 08:15:17.474542'
  - - 18
    - Rails(開発者)
    - '2018-12-08 09:20:04.353576'
    - '2019-07-27 12:50:45.859719'
  - - 19
    - MySQL
    - '2018-12-16 01:57:26.462599'
    - '2018-12-16 01:57:26.462599'
  - - 20
    - github
    - '2018-12-19 05:42:07.344252'
    - '2018-12-19 05:42:07.344252'
  - - 21
    - Node.js
    - '2018-12-21 07:22:16.500838'
    - '2018-12-21 07:22:16.500838'
  - - 22
    - PHP
    - '2019-01-14 14:31:43.285449'
    - '2019-01-14 14:31:43.285449'
  - - 23
    - postgreSQL
    - '2019-03-08 04:10:41.012483'
    - '2019-03-08 04:10:41.012483'
  - - 24
    - Ruby
    - '2019-03-14 05:56:37.242555'
    - '2019-03-14 05:56:37.242555'
  - - 25
    - AWS
    - '2019-04-03 09:26:23.282363'
    - '2019-04-03 09:26:23.282363'
  - - 26
    - python
    - '2019-05-07 04:31:45.013079'
    - '2019-05-07 04:31:45.013079'
  - - 27
    - R
    - '2019-08-25 12:42:59.55579'
    - '2019-08-25 12:42:59.55579'
  - - 28
    - UNIX
    - '2020-04-15 09:43:20.255817'
    - '2020-04-15 09:43:20.255817'
  - - 29
    - Go
    - '2020-07-29 22:44:04.814904'
    - '2020-07-29 22:44:04.814904'

---
users:
  columns:
  - id
  - email
  - encrypted_password
  - reset_password_token
  - reset_password_sent_at
  - remember_created_at
  - created_at
  - updated_at
  - admin
  records: 
  - - 1
    - p111027t@mail.kyutech.jp
    - "$2a$11$wXm8bH4AxmroesLYNoMW.uqtjtPEWGaAzdr.mTRZn84d1wVCS2YKi"
    - 
    - 
    - 
    - '2019-03-21 16:23:15.034537'
    - '2019-03-21 13:33:51.183567'
    - true
